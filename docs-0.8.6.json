[
	{
		"kind": "module",
		"file": "source/vibe/d.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 17,
				"name": "vibe.vibe"
			}
		],
		"comment": "\tProvides the vibe.d API and a default main() function for the application.\n\n\tApplications that import 'vibe.d' will have most of the vibe API available and will be provided\n\twith an implicit application entry point (main). The resulting application parses command line\n\tparameters and reads the global vibe.d configuration (/etc/vibe/vibe.conf).\n\n\tInitialization is done in module constructors (static this), which run just before the event\n\tloop is started by the application entry point.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.d"
	},
	{
		"kind": "module",
		"file": "source/vibe/vibe.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 14,
				"name": "vibe.core.args"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 15,
				"name": "vibe.core.concurrency"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 16,
				"name": "vibe.core.core"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 17,
				"name": "vibe.core.file"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 18,
				"name": "vibe.core.log"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 19,
				"name": "vibe.core.net"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 20,
				"name": "vibe.core.sync"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 21,
				"name": "vibe.crypto.passwordhash"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 22,
				"name": "vibe.data.bson"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 23,
				"name": "vibe.data.json"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 24,
				"name": "vibe.db.mongo.mongo"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 25,
				"name": "vibe.db.redis.idioms"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 26,
				"name": "vibe.db.redis.redis"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 27,
				"name": "vibe.db.redis.sessionstore"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 28,
				"name": "vibe.db.redis.types"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 29,
				"name": "vibe.http.auth.basic_auth"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 30,
				"name": "vibe.http.auth.digest_auth"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 31,
				"name": "vibe.http.client"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 32,
				"name": "vibe.http.fileserver"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 33,
				"name": "vibe.http.form"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 34,
				"name": "vibe.http.proxy"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 35,
				"name": "vibe.http.router"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 36,
				"name": "vibe.http.server"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 37,
				"name": "vibe.http.websockets"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 38,
				"name": "vibe.inet.message"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 39,
				"name": "vibe.inet.url"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 40,
				"name": "vibe.inet.urltransfer"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 41,
				"name": "vibe.mail.smtp"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 43,
				"name": "vibe.stream.counting"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 44,
				"name": "vibe.stream.memory"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 45,
				"name": "vibe.stream.operations"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 46,
				"name": "vibe.stream.tls"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 47,
				"name": "vibe.stream.wrapper"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 48,
				"name": "vibe.stream.zlib"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 49,
				"name": "vibe.textfilter.html"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 50,
				"name": "vibe.textfilter.markdown"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 51,
				"name": "vibe.textfilter.urlencode"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 52,
				"name": "vibe.utils.string"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 53,
				"name": "vibe.web.web"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 54,
				"name": "vibe.web.rest"
			},
			{
				"kind": "import",
				"char": 15,
				"selective": [
					"toDelegate"
				],
				"line": 57,
				"name": "std.functional"
			},
			{
				"kind": "import",
				"char": 15,
				"selective": [
					"to"
				],
				"line": 58,
				"name": "std.conv"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 59,
				"name": "std.datetime"
			},
			{
				"kind": "import",
				"char": 15,
				"selective": [
					"enforce"
				],
				"line": 60,
				"name": "std.exception"
			}
		],
		"comment": "\tProvides the full vibe.d API as a single import module.\n\n\tThis file provides the majority of the vibe API through a single import. Note that typical\n\tvibe.d applications will import 'vibe.d' instead to also get an implicit application entry\n\tpoint.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.vibe"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/args.d",
		"members": [
			{
				"constraint": "isOptionValue!T || is(T : E[], E) && isOptionValue!E",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 47,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "names"
							},
							{
								"type": "T*",
								"name": "pvalue"
							},
							{
								"type": "string",
								"name": "help_text"
							}
						],
						"line": 47,
						"kind": "function",
						"char": 6,
						"name": "readOption",
						"type": "bool(string names, T* pvalue, string help_text)",
						"endchar": 1,
						"endline": 77
					}
				],
				"name": "readOption",
				"comment": "\tFinds and reads an option from the configuration file or command line.\n\n\tCommand line options take precedence over configuration file entries.\n\n\tParams:\n\t\tnames = Option names. Separate multiple name variants with \"|\",\n\t\t\tas for $(D std.getopt).\n\t\tpvalue = Pointer to store the value. Unchanged if value was not found.\n\t\thelp_text = Text to be displayed when the application is run with\n\t\t\t--help.\n\n\tReturns:\n\t\t$(D true) if the value was found, $(D false) otherwise.\n\n\tSee_Also: readRequiredOption\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 128,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "names"
							},
							{
								"type": "string",
								"name": "help_text"
							}
						],
						"line": 128,
						"kind": "function",
						"char": 3,
						"name": "readRequiredOption",
						"type": "T(string names, string help_text)",
						"endchar": 1,
						"endline": 137
					}
				],
				"name": "readRequiredOption",
				"comment": "\tThe same as readOption, but throws an exception if the given option is missing.\n\n\tSee_Also: readOption\n"
			},
			{
				"line": 143,
				"kind": "function",
				"char": 6,
				"name": "printCommandLineHelp",
				"deco": "FZv",
				"endchar": 1,
				"endline": 177,
				"comment": "\tPrints a help screen consisting of all options encountered in getOption calls.\n"
			},
			{
				"parameters": [
					{
						"deco": "PAAya",
						"default": "null",
						"name": "args_out"
					}
				],
				"line": 196,
				"kind": "function",
				"char": 6,
				"name": "finalizeCommandLineOptions",
				"deco": "FPAAyaZb",
				"endchar": 1,
				"endline": 214,
				"comment": "\tChecks for unrecognized command line options and display a help screen.\n\n\tThis function is called automatically from `vibe.appmain` and from\n\t`vibe.core.core.runApplication` to check for correct command line usage.\n\tIt will print a help screen in case of unrecognized options.\n\n\tParams:\n\t\targs_out = Optional parameter for storing any arguments not handled\n\t\t\t\t   by any readOption call. If this is left to null, an error\n\t\t\t\t   will be triggered whenever unhandled arguments exist.\n\n\tReturns:\n\t\tIf \"--help\" was passed, the function returns false. In all other\n\t\tcases either true is returned or an exception is thrown.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 221,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 221,
						"kind": "variable",
						"char": 6,
						"name": "isOptionValue",
						"init": "is(T == bool) || is(T : long) || is(T : double) || is(T == string)"
					}
				],
				"name": "isOptionValue",
				"comment": " Tests if a given type is supported by `readOption`.\n\n\tAllowed types are Booleans, integers, floating point values and strings.\n\tIn addition to plain values, arrays of values are also supported.\n"
			},
			{
				"parameters": [
					{
						"deco": "AAya",
						"name": "args"
					}
				],
				"line": 237,
				"kind": "function",
				"char": 6,
				"name": "setCommandLineArgs",
				"deco": "FAAyaZv",
				"endchar": 1,
				"endline": 240,
				"comment": "\tThis functions allows the usage of a custom command line argument parser\n\twith vibe.d.\n\n\t$(OL\n\t\t$(LI build executable with version(VibeDisableCommandLineParsing))\n\t\t$(LI parse main function arguments with a custom command line parser)\n\t\t$(LI pass vibe.d arguments to `setCommandLineArgs`)\n\t\t$(LI use vibe.d command line parsing utilities)\n\t)\n\n\tParams:\n\t\targs = The arguments that should be handled by vibe.d\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L243_C1)\n---\nimport std.format : format;\nstring[] args = [\"--foo\", \"10\"];\nsetCommandLineArgs(args);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L243_C1)\n"
			}
		],
		"comment": "\tParses and allows querying the command line arguments and configuration\n\tfile.\n\n\tThe optional configuration file (vibe.conf) is a JSON file, containing an\n\tobject with the keys corresponding to option names, and values corresponding\n\tto their values. It is searched for in the local directory, user's home\n\tdirectory, or /etc/vibe/ (POSIX only), whichever is found first.\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Vladimir Panteleev\n",
		"name": "vibe.core.args"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/channel.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "100",
						"name": "buffer_size"
					}
				],
				"line": 26,
				"kind": "template",
				"char": 26,
				"members": [
					{
						"line": 26,
						"kind": "function",
						"char": 26,
						"name": "createChannel",
						"type": "Channel!(T, buffer_size)()",
						"endchar": 1,
						"endline": 31
					}
				],
				"name": "createChannel",
				"comment": " Creates a new channel suitable for cross-task and cross-thread communication.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "100",
						"name": "buffer_size"
					}
				],
				"line": 39,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 40,
								"kind": "variable",
								"char": 7,
								"name": "bufferSize",
								"init": "buffer_size"
							},
							{
								"storageClass": [
									"shared"
								],
								"line": 42,
								"kind": "variable",
								"char": 46,
								"name": "m_impl",
								"type": "ChannelImpl!(T, buffer_size)"
							},
							{
								"line": 55,
								"kind": "function",
								"char": 17,
								"name": "empty",
								"type": "@property bool()",
								"endchar": 48,
								"endline": 55,
								"comment": " Determines whether there is more data to read in a single-reader scenario.\n\n\t\tThis property is empty $(I iff) no more elements are in the internal\n\t\tbuffer and `close()` has been called. Once the channel is empty,\n\t\tsubsequent calls to `consumeOne` or `consumeAll` will throw an\n\t\texception.\n\n\t\tNote that relying on the return value to determine whether another\n\t\telement can be read is only safe in a single-reader scenario. It is\n\t\tgenerally recommended to use `tryConsumeOne` instead.\n"
							},
							{
								"line": 57,
								"kind": "function",
								"char": 17,
								"name": "empty",
								"type": "shared @property bool()",
								"endchar": 55,
								"endline": 57,
								"comment": "ditto\n"
							},
							{
								"line": 63,
								"kind": "function",
								"char": 19,
								"name": "bufferFill",
								"type": "@property size_t()",
								"endchar": 60,
								"endline": 63,
								"comment": " Returns the current count of items in the buffer.\n\n\t\tThis function is useful for diagnostic purposes.\n"
							},
							{
								"line": 65,
								"kind": "function",
								"char": 19,
								"name": "bufferFill",
								"type": "shared @property size_t()",
								"endchar": 67,
								"endline": 65,
								"comment": "ditto\n"
							},
							{
								"line": 73,
								"kind": "function",
								"char": 7,
								"name": "close",
								"type": "void()",
								"endchar": 33,
								"endline": 73,
								"comment": " Closes the channel.\n\n\t\tA closed channel does not accept any new items enqueued using `put` and\n\t\tcauses `empty` to return `fals` as soon as all preceeding elements have\n\t\tbeen consumed.\n"
							},
							{
								"line": 75,
								"kind": "function",
								"char": 7,
								"name": "close",
								"type": "shared void()",
								"endchar": 40,
								"endline": 75,
								"comment": "ditto\n"
							},
							{
								"line": 86,
								"kind": "function",
								"char": 4,
								"name": "consumeOne",
								"type": "T()",
								"endchar": 47,
								"endline": 86,
								"comment": " Consumes a single element off the queue.\n\n\t\tThis function will block if no elements are available. If the `empty`\n\t\tproperty is `true`, an exception will be thrown.\n\n\t\tNote that it is recommended to use `tryConsumeOne` instead of a\n\t\tcombination of `empty` and `consumeOne` due to being more efficient and\n\t\talso being reliable in a multiple-reader scenario.\n"
							},
							{
								"line": 88,
								"kind": "function",
								"char": 4,
								"name": "consumeOne",
								"type": "shared T()",
								"endchar": 54,
								"endline": 88,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"ref"
										],
										"name": "dst"
									}
								],
								"line": 95,
								"kind": "function",
								"char": 7,
								"name": "tryConsumeOne",
								"type": "bool(ref T dst)",
								"endchar": 68,
								"endline": 95,
								"comment": " Attempts to consume a single element.\n\n\t\tIf no more elements are available and the channel has been closed,\n\t\t`false` is returned and `dst` is left untouched.\n"
							},
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"ref"
										],
										"name": "dst"
									}
								],
								"line": 97,
								"kind": "function",
								"char": 7,
								"name": "tryConsumeOne",
								"type": "shared bool(ref T dst)",
								"endchar": 75,
								"endline": 97,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "FixedRingBuffer!(T, buffer_size)",
										"storageClass": [
											"ref"
										],
										"name": "dst"
									}
								],
								"line": 108,
								"kind": "function",
								"char": 7,
								"name": "consumeAll",
								"type": "bool(ref FixedRingBuffer!(T, buffer_size) dst)",
								"endchar": 41,
								"endline": 110,
								"comment": " Attempts to consume all elements currently in the queue.\n\n\t\tThis function will block if no elements are available. Once at least one\n\t\telement is available, the contents of `dst` will be replaced with all\n\t\tavailable elements.\n\n\t\tIf the `empty` property is or becomes `true` before data becomes\n\t\tavaiable, `dst` will be left untouched and `false` is returned.\n"
							},
							{
								"parameters": [
									{
										"type": "FixedRingBuffer!(T, buffer_size)",
										"storageClass": [
											"ref"
										],
										"name": "dst"
									}
								],
								"line": 112,
								"kind": "function",
								"char": 7,
								"name": "consumeAll",
								"type": "shared bool(ref FixedRingBuffer!(T, buffer_size) dst)",
								"endchar": 41,
								"endline": 114,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "item"
									}
								],
								"line": 120,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "void(T item)",
								"endchar": 44,
								"endline": 120,
								"comment": " Enqueues an element.\n\n\t\tThis function may block the the event that the internal buffer is full.\n"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "item"
									}
								],
								"line": 122,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "shared void(T item)",
								"endchar": 51,
								"endline": 122,
								"comment": "ditto\n"
							}
						],
						"line": 39,
						"name": "Channel"
					}
				],
				"name": "Channel",
				"comment": " Thread-safe typed data channel implementation.\n\n\tThe implementation supports multiple-reader-multiple-writer operation across\n\tmultiple tasks in multiple threads.\n"
			}
		],
		"comment": " Implements a thread-safe, typed producer-consumer queue.\n\n\tCopyright: © 2017-2019 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
		"name": "vibe.core.channel"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/concurrency.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 13,
				"name": "std.concurrency"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"deco": "xC6Object",
						"name": "T"
					}
				],
				"line": 34,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "shared(T)",
								"name": "object"
							}
						],
						"line": 34,
						"kind": "function",
						"char": 14,
						"name": "lock",
						"type": "pure nothrow @safe ScopedLock!T(shared(T) object)",
						"endchar": 1,
						"endline": 37
					}
				],
				"name": "lock",
				"comment": "\tLocks the given shared object and returns a ScopedLock for accessing any unshared members.\n\n\tUsing this function will ensure that there are no data races. For this reason, the class\n\ttype T is required to contain no unshared or unisolated aliasing.\n\n\tSee_Also: core.concurrency.isWeaklyIsolated\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L52_C1)\n---\nimport vibe.core.concurrency;\n\nstatic class Item {\n\tprivate double m_value;\n\n\tthis(double value) pure { m_value = value; }\n\n\t@property double value() const pure { return m_value; }\n}\n\nstatic class Manager {\n\tprivate {\n\t\tstring m_name;\n\t\tIsolated!(Item) m_ownedItem;\n\t\tIsolated!(shared(Item)[]) m_items;\n\t}\n\n\tpure this(string name)\n\t{\n\t\tm_name = name;\n\t\tauto itm = makeIsolated!Item(3.5);\n\t\tm_ownedItem = itm.move;\n\t}\n\n\tvoid addItem(shared(Item) item) pure { m_items ~= item; }\n\n\tdouble getTotalValue()\n\tconst pure {\n\t\tdouble sum = 0;\n\n\t\t// lock() is required to access shared objects\n\t\tforeach (itm; m_items.unsafeGet) {\n\t\t\tauto l = itm.lock();\n\t\t\tsum += l.value;\n\t\t}\n\n\t\t// owned objects can be accessed without locking\n\t\tsum += m_ownedItem.value;\n\n\t\treturn sum;\n\t}\n}\n\nvoid test()\n{\n\timport std.stdio;\n\n\tauto man = cast(shared)new Manager(\"My manager\");\n\t{\n\t\tauto l = man.lock();\n\t\tl.addItem(new shared(Item)(1.5));\n\t\tl.addItem(new shared(Item)(0.5));\n\t}\n\n\twritefln(\"Total value: %s\", man.lock().getTotalValue());\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L52_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"deco": "xC6Object",
						"name": "T"
					}
				],
				"line": 39,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "shared(T)",
								"name": "object"
							},
							{
								"type": "void delegate(scope T) nothrow",
								"storageClass": [
									"scope"
								],
								"name": "accessor"
							}
						],
						"line": 39,
						"kind": "function",
						"char": 6,
						"name": "lock",
						"type": "nothrow void(shared(T) object, scope void delegate(scope T) nothrow accessor)",
						"endchar": 1,
						"endline": 43
					}
				],
				"name": "lock",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"deco": "xC6Object",
						"name": "T"
					}
				],
				"line": 45,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "shared(T)",
								"name": "object"
							},
							{
								"type": "void delegate(scope T)",
								"storageClass": [
									"scope"
								],
								"name": "accessor"
							}
						],
						"line": 45,
						"kind": "function",
						"char": 6,
						"name": "lock",
						"type": "void(shared(T) object, scope void delegate(scope T) accessor)",
						"endchar": 1,
						"endline": 49
					}
				],
				"name": "lock",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 121,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "Rebindable!T",
								"char": 23,
								"line": 126,
								"name": "m_ref"
							},
							{
								"parameters": [
									{
										"type": "shared(T)",
										"name": "obj"
									}
								],
								"line": 130,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "pure nothrow @trusted (shared(T) obj)",
								"endchar": 2,
								"endline": 137
							},
							{
								"storageClass": [
									"nothrow",
									"pure",
									"@trusted"
								],
								"line": 139,
								"kind": "destructor",
								"char": 2,
								"name": "~this",
								"endchar": 2,
								"endline": 145
							},
							{
								"line": 153,
								"kind": "function",
								"char": 21,
								"name": "unsafeGet",
								"type": "inout nothrow @property inout(T)()",
								"endchar": 63,
								"endline": 153,
								"comment": "\t\tReturns an unshared reference to the locked object.\n\n\t\tNote that using this function breaks type safety. Be sure to not escape the reference beyond\n\t\tthe life time of the lock.\n"
							},
							{
								"line": 160,
								"kind": "function",
								"char": 17,
								"name": "getObject",
								"type": "pure nothrow Object()",
								"endchar": 3,
								"endline": 164
							}
						],
						"line": 121,
						"name": "ScopedLock"
					}
				],
				"name": "ScopedLock",
				"comment": "\tProxy structure that keeps the monitor of the given object locked until it\n\tgoes out of scope.\n\n\tAny unshared members of the object are safely accessible during this time. The usual\n\tway to use it is by calling lock.\n\n\tSee_Also: lock\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 178,
				"kind": "template",
				"char": 17,
				"members": [
					{
						"parameters": [
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 178,
						"kind": "function",
						"char": 17,
						"name": "makeIsolated",
						"type": "pure Isolated!T(ARGS args)",
						"endchar": 1,
						"endline": 186
					}
				],
				"name": "makeIsolated",
				"comment": "\tCreates a new isolated object.\n\n\tIsolated objects contain no mutable aliasing outside of their own reference tree. They can thus\n\tbe safely converted to immutable and they can be safely passed between threads.\n\n\tThe function returns an instance of Isolated that will allow proxied access to the members of\n\tthe object, as well as providing means to convert the object to immutable or to an ordinary\n\tmutable object.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L189_C1)\n---\nimport vibe.core.concurrency;\nimport vibe.core.core;\n\nstatic class Item {\n\tdouble value;\n\tstring name;\n}\n\nstatic void modifyItem(Isolated!Item itm)\n{\n\titm.value = 1.3;\n\t// TODO: send back to initiating thread\n}\n\nvoid test()\n{\n\timmutable(Item)[] items;\n\n\t// create immutable item procedurally\n\tauto itm = makeIsolated!Item();\n\titm.value = 2.4;\n\titm.name = \"Test\";\n\titems ~= itm.freeze();\n\n\t// send isolated item to other thread\n\tauto itm2 = makeIsolated!Item();\n\trunWorkerTask(&modifyItem, itm2.move());\n\t// ...\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L189_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 240,
				"kind": "template",
				"char": 21,
				"members": [
					{
						"parameters": [
							{
								"type": "size_t",
								"name": "size"
							}
						],
						"line": 240,
						"kind": "function",
						"char": 21,
						"name": "makeIsolatedArray",
						"type": "pure Isolated!(T[])(size_t size)",
						"endchar": 1,
						"endline": 245
					}
				],
				"name": "makeIsolatedArray",
				"comment": "\tCreates a new isolated array.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L248_C1)\n---\nimport vibe.core.concurrency;\nimport vibe.core.core;\n\nstatic void compute(Tid tid, Isolated!(double[]) array, size_t start_index)\n{\n\tforeach( i; 0 .. array.length )\n\t\tarray[i] = (start_index + i) * 0.5;\n\n\t//send(tid, array.move()); // Isolated!T isn't recognized by std.concurrency\n}\n\nvoid test()\n{\n\timport std.stdio;\n\n\t// compute contents of an array using multiple threads\n\tauto arr = makeIsolatedArray!double(256);\n\n\t// partition the array (no copying takes place)\n\tsize_t[] indices = [64, 128, 192, 256];\n\tIsolated!(double[])[] subarrays = arr.splice(indices);\n\n\t// start processing in threads\n\tTid[] tids;\n\tforeach (i, idx; indices)\n\t\ttids ~= runWorkerTaskH(&compute, thisTid, subarrays[i].move(), idx).tid;\n\n\t// collect results\n\tauto resultarrays = new Isolated!(double[])[tids.length];\n\t//foreach( i, tid; tids )\n\t//\tresultarrays[i] = receiveOnly!(Isolated!(double[])).move(); // Isolated!T isn't recognized by std.concurrency\n\n\t// BUG: the arrays must be sorted here, but since there is no way to tell\n\t// from where something was received, this is difficult here.\n\n\t// merge results (no copying takes place again)\n\tforeach( i; 1 .. resultarrays.length )\n\t\tresultarrays[0].merge(resultarrays[i]);\n\n\t// convert the final result to immutable\n\tauto result = resultarrays[0].freeze();\n\n\twritefln(\"Result: %s\", result);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L248_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 299,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "object"
							}
						],
						"line": 299,
						"kind": "function",
						"char": 12,
						"name": "assumeIsolated",
						"type": "Isolated!T(T object)",
						"endchar": 1,
						"endline": 302
					}
				],
				"name": "assumeIsolated",
				"comment": "\tUnsafe facility to assume that an existing reference is unique.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 309,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "T",
						"char": 3,
						"line": 312,
						"name": "Isolated"
					}
				],
				"name": "Isolated",
				"comment": "\tEncapsulates the given type in a way that guarantees memory isolation.\n\n\tSee_Also: makeIsolated, makeIsolatedArray\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 591,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "ScopedRefAggregate!T",
						"char": 33,
						"line": 593,
						"name": "ScopedRef"
					}
				],
				"name": "ScopedRef",
				"comment": " Encapsulates a reference in a way that disallows escaping it or any contained references.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "TYPES"
					}
				],
				"line": 941,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 943,
						"kind": "variable",
						"char": 38,
						"name": "haveTypeAlready",
						"init": "false"
					}
				],
				"name": "haveTypeAlready"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 959,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 961,
						"kind": "variable",
						"char": 38,
						"name": "isStronglyIsolated",
						"deco": "b",
						"init": "true"
					}
				],
				"name": "isStronglyIsolated",
				"comment": "\n\n\n\n\tDetermines if the given list of types has any non-immutable aliasing outside of their object tree.\n\n\tThe types in particular may only contain plain data, pointers or arrays to immutable data, or references\n\tencapsulated in stdx.typecons.Isolated.\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 987,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 989,
						"kind": "variable",
						"char": 38,
						"name": "isWeaklyIsolated",
						"deco": "b",
						"init": "true"
					}
				],
				"name": "isWeaklyIsolated",
				"comment": "\tDetermines if the given list of types has any non-immutable and unshared aliasing outside of their object tree.\n\n\tThe types in particular may only contain plain data, pointers or arrays to immutable or shared data, or references\n\tencapsulated in stdx.typecons.Isolated. Values that do not have unshared and unisolated aliasing are safe to be passed\n\tbetween threads.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1065,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 1067,
						"kind": "variable",
						"char": 66,
						"name": "isCopyable",
						"init": "true"
					}
				],
				"name": "isCopyable"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1082,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "FreeListRef!(shared(Tuple!(T, string)))",
								"char": 3,
								"line": 1086,
								"name": "ResultRef"
							},
							{
								"kind": "variable",
								"type": "ResultRef",
								"char": 13,
								"line": 1088,
								"name": "m_result"
							},
							{
								"kind": "variable",
								"type": "Task",
								"char": 8,
								"line": 1089,
								"name": "m_task"
							},
							{
								"line": 1093,
								"kind": "function",
								"char": 17,
								"name": "ready",
								"type": "const @property @safe bool()",
								"endchar": 63,
								"endline": 1093,
								"comment": "Checks if the values was fully computed.\n"
							},
							{
								"line": 1102,
								"kind": "function",
								"char": 8,
								"name": "getResult",
								"type": "ref @safe T()",
								"endchar": 2,
								"endline": 1112,
								"comment": " Returns the computed value.\n\n\t\tThis function waits for the computation to finish, if necessary, and\n\t\tthen returns the final value. In case of an uncaught exception\n\t\thappening during the computation, the exception will be thrown\n\t\tinstead.\n"
							},
							{
								"line": 1116,
								"kind": "function",
								"char": 15,
								"name": "init",
								"type": "@safe void()",
								"endchar": 2,
								"endline": 1119
							}
						],
						"line": 1082,
						"name": "Future"
					}
				],
				"name": "Future",
				"comment": "\n\n\n\n\tRepresents a values that will be computed asynchronously.\n\n\tThis type uses $(D alias this) to enable transparent access to the result\n\tvalue.\n"
			},
			{
				"constraint": "is(typeof(callable(args)) == ReturnType!CALLABLE)",
				"parameters": [
					{
						"kind": "type",
						"name": "CALLABLE"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 1141,
				"kind": "template",
				"char": 30,
				"members": [
					{
						"parameters": [
							{
								"type": "CALLABLE",
								"name": "callable"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 1141,
						"kind": "function",
						"char": 30,
						"name": "async",
						"type": "Future!(ReturnType!CALLABLE)(CALLABLE callable, ARGS args)",
						"endchar": 1,
						"endline": 1161
					}
				],
				"name": "async",
				"comment": "\tStarts an asynchronous computation and returns a future for the result value.\n\n\tIf the supplied callable and arguments are all weakly isolated,\n\t$(D vibe.core.core.runWorkerTask) will be used to perform the computation in\n\ta separate worker thread. Otherwise, $(D vibe.core.core.runTask) will be\n\tused and the result is computed within a separate task within the calling thread.\n\n\tParams:\n\t\tcallable = A callable value, can be either a function, a delegate, or a\n\t\t\tuser defined type that defines an $(D opCall).\n\t\targs = Arguments to pass to the callable.\n\n\tReturns:\n\t\tReturns a $(D Future) object that can be used to access the result.\n\n\tSee_also: $(D isWeaklyIsolated)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1164_C7)\n---\nimport vibe.core.core;\nimport vibe.core.log;\n\nvoid test()\n{\n\tstatic if (__VERSION__ >= 2065) {\n\tauto val = async({\n\t\tlogInfo(\"Starting to compute value in worker task.\");\n\t\tsleep(500.msecs); // simulate some lengthy computation\n\t\tlogInfo(\"Finished computing value in worker task.\");\n\t\treturn 32;\n\t});\n\n\tlogInfo(\"Starting computation in main task\");\n\tsleep(200.msecs); // simulate some lengthy computation\n\tlogInfo(\"Finished computation in main task. Waiting for async value.\");\n\tlogInfo(\"Result: %s\", val.getResult());\n\t}\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1164_C7)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1187_C1)\n---\nint sum(int a, int b)\n{\n\treturn a + b;\n}\n\nstatic int sum2(int a, int b)\n{\n\treturn a + b;\n}\n\nvoid test()\n{\n\t// Using a delegate will use runTask internally\n\tassert(async(&sum, 2, 3).getResult() == 5);\n\n\t// Using a static function will use runTaskWorker internally,\n\t// if all arguments are weakly isolated\n\tassert(async(&sum2, 2, 3).getResult() == 5);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1187_C1)\n"
			},
			{
				"constraint": "is(typeof(callable(args)) == ReturnType!CALLABLE) && isWeaklyIsolated!CALLABLE && isWeaklyIsolated!ARGS",
				"parameters": [
					{
						"kind": "type",
						"name": "CALLABLE"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 1209,
				"kind": "template",
				"char": 30,
				"members": [
					{
						"parameters": [
							{
								"type": "CALLABLE",
								"name": "callable"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 1209,
						"kind": "function",
						"char": 30,
						"name": "asyncWork",
						"type": "@safe Future!(ReturnType!CALLABLE)(CALLABLE callable, ARGS args)",
						"endchar": 1,
						"endline": 1226
					}
				],
				"name": "asyncWork"
			},
			{
				"line": 1233,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 1234,
						"name": "task"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 1235,
						"name": "workerTask"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 1236,
						"name": "thread"
					}
				],
				"name": "ConcurrencyPrimitive",
				"baseDeco": "i",
				"comment": "\n\n\n"
			},
			{
				"parameters": [
					{
						"deco": "E4vibe4core11concurrency20ConcurrencyPrimitive",
						"name": "primitive"
					}
				],
				"line": 1244,
				"kind": "function",
				"char": 6,
				"name": "setConcurrencyPrimitive",
				"deco": "FE4vibe4core11concurrency20ConcurrencyPrimitiveZv",
				"endchar": 1,
				"endline": 1248,
				"comment": " Sets the concurrency primitive to use for `śtd.concurrency.spawn()`.\n\n\tBy default, `spawn()` will start a thread for each call, mimicking the\n\tdefault behavior of `std.concurrency`.\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 1250,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "Task",
								"name": "task"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 1250,
						"kind": "function",
						"char": 6,
						"name": "send",
						"type": "void(Task task, ARGS args)",
						"endchar": 82,
						"endline": 1250
					}
				],
				"name": "send"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 1251,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "Tid",
								"name": "tid"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 1251,
						"kind": "function",
						"char": 6,
						"name": "send",
						"type": "void(Tid tid, ARGS args)",
						"endchar": 75,
						"endline": 1251
					}
				],
				"name": "send"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 1252,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "Task",
								"name": "task"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 1252,
						"kind": "function",
						"char": 6,
						"name": "prioritySend",
						"type": "void(Task task, ARGS args)",
						"endchar": 98,
						"endline": 1252
					}
				],
				"name": "prioritySend"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 1253,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "Tid",
								"name": "tid"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 1253,
						"kind": "function",
						"char": 6,
						"name": "prioritySend",
						"type": "void(Tid tid, ARGS args)",
						"endchar": 91,
						"endline": 1253
					}
				],
				"name": "prioritySend"
			}
		],
		"comment": "\tFunctions and structures for dealing with threads and concurrent access.\n\n\tThis module is modeled after std.concurrency, but provides a fiber-aware alternative\n\tto it. All blocking operations will yield the calling fiber instead of blocking it.\n\n\tCopyright: © 2013-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.core.concurrency"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/connectionpool.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Connection"
					}
				],
				"line": 30,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"kind": "class",
						"char": 7,
						"members": [
							{
								"kind": "variable",
								"type": "Connection delegate() @safe",
								"char": 31,
								"line": 33,
								"name": "m_connectionFactory"
							},
							{
								"kind": "variable",
								"type": "Connection[]",
								"char": 16,
								"line": 34,
								"name": "m_connections"
							},
							{
								"kind": "variable",
								"type": "int[const(Connection)]",
								"char": 26,
								"line": 35,
								"name": "m_lockCount"
							},
							{
								"kind": "variable",
								"type": "FreeListRef!LocalTaskSemaphore",
								"char": 34,
								"line": 36,
								"name": "m_sem"
							},
							{
								"kind": "variable",
								"type": "Thread",
								"char": 16,
								"line": 37,
								"name": "m_thread"
							},
							{
								"parameters": [
									{
										"type": "Connection delegate() @safe",
										"name": "connection_factory"
									},
									{
										"deco": "k",
										"default": "(uint).max",
										"name": "max_concurrent"
									}
								],
								"line": 40,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(Connection delegate() @safe connection_factory, uint max_concurrent = (uint).max)",
								"endchar": 2,
								"endline": 45
							},
							{
								"parameters": [
									{
										"type": "Connection delegate()",
										"name": "connection_factory"
									},
									{
										"deco": "k",
										"default": "(uint).max",
										"name": "max_concurrent"
									}
								],
								"line": 48,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "@system (Connection delegate() connection_factory, uint max_concurrent = (uint).max)",
								"endchar": 2,
								"endline": 51
							},
							{
								"parameters": [
									{
										"deco": "k",
										"name": "max_concurrent"
									}
								],
								"line": 59,
								"kind": "function",
								"char": 17,
								"name": "maxConcurrency",
								"type": "@property void(uint max_concurrent)",
								"endchar": 2,
								"endline": 61,
								"comment": " Determines the maximum number of concurrently open connections.\n\n\t\tAttempting to lock more connections that this number will cause the\n\t\tcalling fiber to be blocked until one of the locked connections\n\t\tbecomes available for reuse.\n"
							},
							{
								"line": 63,
								"kind": "function",
								"char": 17,
								"name": "maxConcurrency",
								"type": "@property uint()",
								"endchar": 2,
								"endline": 65,
								"comment": "ditto\n"
							},
							{
								"line": 72,
								"kind": "function",
								"char": 30,
								"name": "lockConnection",
								"type": "@safe LockedConnection!Connection()",
								"endchar": 2,
								"endline": 105,
								"comment": " Retrieves a connection to temporarily associate with the calling fiber.\n\n\t\tThe returned `LockedConnection` object uses RAII and reference counting\n\t\tto determine when to unlock the connection.\n"
							},
							{
								"parameters": [
									{
										"type": "void delegate(Connection conn) nothrow @safe",
										"storageClass": [
											"scope"
										],
										"name": "disconnect_callback"
									}
								],
								"line": 113,
								"kind": "function",
								"char": 7,
								"name": "removeUnused",
								"type": "void(scope void delegate(Connection conn) nothrow @safe disconnect_callback)",
								"endchar": 2,
								"endline": 127,
								"comment": " Removes all currently unlocked connections from the pool.\n\n\t\tParams:\n\t\t\tdisconnect_callback = Gets called for every removed connection to\n\t\t\t\tallow closing connections and freeing associated resources.\n"
							}
						],
						"line": 30,
						"name": "ConnectionPool"
					}
				],
				"name": "ConnectionPool",
				"comment": "\tGeneric connection pool class.\n\n\tThe connection pool is creating connections using the supplied factory\n\tfunction as needed whenever `lockConnection` is called. Connections are\n\tassociated to the calling fiber, as long as any copy of the returned\n\t`LockedConnection` object still exists. Connections that are not associated\n\tto any fiber will be kept in a pool of open connections for later reuse.\n\n\tNote that, after retrieving a connection with `lockConnection`, the caller\n\thas to make sure that the connection is actually physically open and to\n\treopen it if necessary. The `ConnectionPool` class has no knowledge of the\n\tinternals of the connection objects.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L131_C1)\n---\nclass Connection {\n\tvoid write() {}\n}\n\nauto pool = new ConnectionPool!Connection({\n\treturn new Connection; // perform the connection here\n});\n\n// create and lock a first connection\nauto c1 = pool.lockConnection();\nc1.write();\n\n// create and lock a second connection\nauto c2 = pool.lockConnection();\nc2.write();\n\n// writing to c1 will still write to the first connection\nc1.write();\n\n// free up the reference to the first connection, so that it can be reused\ndestroy(c1);\n\n// locking a new connection will reuse the first connection now instead of creating a new one\nauto c3 = pool.lockConnection();\nc3.write();\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L131_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Connection"
					}
				],
				"line": 190,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "ConnectionPool!Connection",
								"char": 29,
								"line": 194,
								"name": "m_pool"
							},
							{
								"kind": "variable",
								"type": "Task",
								"char": 8,
								"line": 195,
								"name": "m_task"
							},
							{
								"kind": "variable",
								"type": "Connection",
								"char": 14,
								"line": 196,
								"name": "m_conn"
							},
							{
								"line": 197,
								"kind": "variable",
								"char": 14,
								"name": "m_magic",
								"deco": "k",
								"init": "2972998338u"
							},
							{
								"parameters": [
									{
										"type": "ConnectionPool!Connection",
										"name": "pool"
									},
									{
										"type": "Connection",
										"name": "conn"
									}
								],
								"line": 202,
								"kind": "constructor",
								"char": 10,
								"name": "this",
								"type": "(ConnectionPool!Connection pool, Connection conn)",
								"endchar": 2,
								"endline": 208
							},
							{
								"line": 222,
								"kind": "destructor",
								"char": 2,
								"name": "~this",
								"endchar": 2,
								"endline": 238
							}
						],
						"line": 190,
						"name": "LockedConnection"
					}
				],
				"name": "LockedConnection"
			}
		],
		"comment": "\tGeneric connection pool for reusing persistent connections across fibers.\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.core.connectionpool"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/core.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.core.task"
			},
			{
				"parameters": [
					{
						"deco": "PAAya",
						"default": "null",
						"name": "args_out"
					}
				],
				"line": 90,
				"kind": "function",
				"char": 5,
				"name": "runApplication",
				"deco": "FNfPAAyaZi",
				"endchar": 1,
				"endline": 116,
				"comment": "\n\n\n\n\tPerforms final initialization and runs the event loop.\n\n\tThis function performs three tasks:\n\t$(OL\n\t\t$(LI Makes sure that no unrecognized command line options are passed to\n\t\t\tthe application and potentially displays command line help. See also\n\t\t\t`vibe.core.args.finalizeCommandLineOptions`.)\n\t\t$(LI Performs privilege lowering if required.)\n\t\t$(LI Runs the event loop and blocks until it finishes.)\n\t)\n\n\tParams:\n\t\targs_out = Optional parameter to receive unrecognized command line\n\t\t\targuments. If left to `null`, an error will be reported if\n\t\t\tany unrecognized argument is passed.\n\n\tSee_also: ` vibe.core.args.finalizeCommandLineOptions`, `lowerPrivileges`,\n\t\t`runEventLoop`\nExample:\nA simple echo server, listening on a privileged TCP port.$(DDOX_UNITTEST_HEADER __unittest_L119_C1)\n---\nimport vibe.core.core;\nimport vibe.core.net;\n\nint main()\n{\n\t// first, perform any application specific setup (privileged ports still\n\t// available if run as root)\n\tlistenTCP(7, (conn) {\n\t\ttry conn.write(conn);\n\t\tcatch (Exception e) { /* log error */ }\n\t});\n\n\t// then use runApplication to perform the remaining initialization and\n\t// to run the event loop\n\treturn runApplication();\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L119_C1)\nExample:\nThe same as above, but performing the initialization sequence manually.\n\n\tThis allows to skip any additional initialization (opening the listening\n\tport) if an invalid command line argument or the `--help`  switch is\n\tpassed to the application.$(DDOX_UNITTEST_HEADER __unittest_L144_C1)\n---\nimport vibe.core.core;\nimport vibe.core.net;\n\nint main()\n{\n\t// process the command line first, to be able to skip the application\n\t// setup if not required\n\tif (!finalizeCommandLineOptions()) return 0;\n\n\t// then set up the application\n\tlistenTCP(7, (conn) {\n\t\ttry conn.write(conn);\n\t\tcatch (Exception e) { /* log error */ }\n\t});\n\n\t// finally, perform privilege lowering (safe to skip for non-server\n\t// applications)\n\tlowerPrivileges();\n\n\t// and start the event loop\n\treturn runEventLoop();\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L144_C1)\n"
			},
			{
				"line": 187,
				"kind": "function",
				"char": 5,
				"name": "runEventLoop",
				"deco": "FNbNfZi",
				"endchar": 1,
				"endline": 236,
				"comment": "\tStarts the vibe.d event loop for the calling thread.\n\n\tNote that this function is usually called automatically by the vibe.d\n\tframework. However, if you provide your own `main()` function, you may need\n\tto call either this or `runApplication` manually.\n\n\tThe event loop will by default continue running during the whole life time\n\tof the application, but calling `runEventLoop` multiple times in sequence\n\tis allowed. Tasks will be started and handled only while the event loop is\n\trunning.\n\n\tReturns:\n\t\tThe returned value is the suggested code to return to the operating\n\t\tsystem from the `main` function.\n\n\tSee_Also: `runApplication`\n"
			},
			{
				"parameters": [
					{
						"deco": "b",
						"default": "false",
						"name": "shutdown_all_threads"
					}
				],
				"line": 250,
				"kind": "function",
				"char": 6,
				"name": "exitEventLoop",
				"deco": "FNbNfbZv",
				"endchar": 1,
				"endline": 266,
				"comment": "\tStops the currently running event loop.\n\n\tCalling this function will cause the event loop to stop event processing and\n\tthe corresponding call to runEventLoop() will return to its caller.\n\n\tParams:\n\t\tshutdown_all_threads = If true, exits event loops of all threads -\n\t\t\tfalse by default. Note that the event loops of all threads are\n\t\t\tautomatically stopped when the main thread exits, so usually\n\t\t\tthere is no need to set shutdown_all_threads to true.\n"
			},
			{
				"line": 275,
				"kind": "function",
				"char": 6,
				"name": "processEvents",
				"deco": "FNbNfZb",
				"endchar": 1,
				"endline": 278,
				"comment": "\tProcess all pending events without blocking.\n\n\tChecks if events are ready to trigger immediately, and run their callbacks if so.\n\n\tReturns: Returns false $(I iff) exitEventLoop was called in the process.\n"
			},
			{
				"line": 283,
				"kind": "function",
				"char": 12,
				"name": "runEventLoopOnce",
				"deco": "FNbNfZE9eventcore6driver10ExitReason",
				"endchar": 1,
				"endline": 289,
				"comment": "\tWait once for events and process them.\n"
			},
			{
				"parameters": [
					{
						"deco": "DFNbNfZv",
						"name": "del"
					}
				],
				"line": 299,
				"kind": "function",
				"char": 6,
				"name": "setIdleHandler",
				"deco": "FNbNfDFNbNfZvZv",
				"endchar": 1,
				"endline": 302,
				"comment": "\tSets a callback that is called whenever no events are left in the event queue.\n\n\tThe callback delegate is called whenever all events in the event queue have been\n\tprocessed. Returning true from the callback will cause another idle event to\n\tbe triggered immediately after processing any events that have arrived in the\n\tmeantime. Returning false will instead wait until another event has arrived first.\n"
			},
			{
				"parameters": [
					{
						"deco": "DFNbNfZb",
						"name": "del"
					}
				],
				"line": 304,
				"kind": "function",
				"char": 6,
				"name": "setIdleHandler",
				"deco": "FNbNfDFNbNfZbZv",
				"endchar": 1,
				"endline": 307,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 318,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "void delegate(ARGS) @safe",
								"name": "task"
							},
							{
								"type": "ARGS",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "args"
							}
						],
						"line": 318,
						"kind": "function",
						"char": 6,
						"name": "runTask",
						"type": "Task(void delegate(ARGS) @safe task, auto ref ARGS args)",
						"endchar": 1,
						"endline": 321
					}
				],
				"name": "runTask",
				"comment": "\tRuns a new asynchronous task.\n\n\ttask will be called synchronously from within the vibeRunTask call. It will\n\tcontinue to run until vibeYield() or any of the I/O or wait functions is\n\tcalled.\n\n\tNote that the maximum size of all args must not exceed `maxTaskParameterSize`.\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 323,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "void delegate(ARGS) @system",
								"name": "task"
							},
							{
								"type": "ARGS",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "args"
							}
						],
						"line": 323,
						"kind": "function",
						"char": 6,
						"name": "runTask",
						"type": "@system Task(void delegate(ARGS) @system task, auto ref ARGS args)",
						"endchar": 1,
						"endline": 326
					}
				],
				"name": "runTask",
				"comment": "\n"
			},
			{
				"constraint": "!is(CALLABLE : void delegate(ARGS)) && is(typeof(CALLABLE.init(ARGS.init)))",
				"parameters": [
					{
						"kind": "type",
						"name": "CALLABLE"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 328,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "CALLABLE",
								"name": "task"
							},
							{
								"type": "ARGS",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "args"
							}
						],
						"line": 328,
						"kind": "function",
						"char": 6,
						"name": "runTask",
						"type": "Task(CALLABLE task, auto ref ARGS args)",
						"endchar": 1,
						"endline": 332
					}
				],
				"name": "runTask",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "FT"
					},
					{
						"kind": "type",
						"name": "ARGS"
					}
				],
				"line": 338,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "FT",
								"storageClass": [
									"scope"
								],
								"name": "callable"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 338,
						"kind": "function",
						"char": 6,
						"name": "runTaskScoped",
						"type": "(scope FT callable, ARGS args)",
						"endchar": 1,
						"endline": 352
					}
				],
				"name": "runTaskScoped",
				"comment": "\tRuns an asyncronous task that is guaranteed to finish before the caller's\n\tscope is left.\n"
			},
			{
				"constraint": "isFunctionPointer!FT",
				"parameters": [
					{
						"kind": "type",
						"name": "FT"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 418,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "FT",
								"name": "func"
							},
							{
								"type": "ARGS",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "args"
							}
						],
						"line": 418,
						"kind": "function",
						"char": 6,
						"name": "runWorkerTask",
						"type": "void(FT func, auto ref ARGS args)",
						"endchar": 1,
						"endline": 423
					}
				],
				"name": "runWorkerTask",
				"comment": "\tRuns a new asynchronous task in a worker thread.\n\n\tOnly function pointers with weakly isolated arguments are allowed to be\n\table to guarantee thread-safety.\n"
			},
			{
				"constraint": "is(typeof(__traits(getMember, object, __traits(identifier, method))))",
				"parameters": [
					{
						"kind": "alias",
						"name": "method"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 426,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "shared(T)",
								"name": "object"
							},
							{
								"type": "ARGS",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "args"
							}
						],
						"line": 426,
						"kind": "function",
						"char": 6,
						"name": "runWorkerTask",
						"type": "void(shared(T) object, auto ref ARGS args)",
						"endchar": 1,
						"endline": 431
					}
				],
				"name": "runWorkerTask",
				"comment": "ditto\n"
			},
			{
				"constraint": "isFunctionPointer!FT",
				"parameters": [
					{
						"kind": "type",
						"name": "FT"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 442,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "FT",
								"name": "func"
							},
							{
								"type": "ARGS",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "args"
							}
						],
						"line": 442,
						"kind": "function",
						"char": 6,
						"name": "runWorkerTaskH",
						"type": "Task(FT func, auto ref ARGS args)",
						"endchar": 1,
						"endline": 447
					}
				],
				"name": "runWorkerTaskH",
				"comment": "\tRuns a new asynchronous task in a worker thread, returning the task handle.\n\n\tThis function will yield and wait for the new task to be created and started\n\tin the worker thread, then resume and return it.\n\n\tOnly function pointers with weakly isolated arguments are allowed to be\n\table to guarantee thread-safety.\nExample:\nRunning a worker task using a function$(DDOX_UNITTEST_HEADER __unittest_L457_C1)\n---\nstatic void workerFunc(int param)\n{\n\tlogInfo(\"Param: %s\", param);\n}\n\nstatic void test()\n{\n\trunWorkerTask(&workerFunc, 42);\n\trunWorkerTask(&workerFunc, cast(ubyte)42); // implicit conversion #719\n\trunWorkerTaskDist(&workerFunc, 42);\n\trunWorkerTaskDist(&workerFunc, cast(ubyte)42); // implicit conversion #719\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L457_C1)\nExample:\nRunning a worker task using a class method$(DDOX_UNITTEST_HEADER __unittest_L473_C1)\n---\nstatic class Test {\n\tvoid workerMethod(int param)\n\tshared {\n\t\tlogInfo(\"Param: %s\", param);\n\t}\n}\n\nstatic void test()\n{\n\tauto cls = new shared Test;\n\trunWorkerTask!(Test.workerMethod)(cls, 42);\n\trunWorkerTask!(Test.workerMethod)(cls, cast(ubyte)42); // #719\n\trunWorkerTaskDist!(Test.workerMethod)(cls, 42);\n\trunWorkerTaskDist!(Test.workerMethod)(cls, cast(ubyte)42); // #719\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L473_C1)\nExample:\nRunning a worker task using a function and communicating with it$(DDOX_UNITTEST_HEADER __unittest_L492_C1)\n---\nstatic void workerFunc(Task caller)\n{\n\tint counter = 10;\n\twhile (receiveOnly!string() == \"ping\" && --counter) {\n\t\tlogInfo(\"pong\");\n\t\tcaller.send(\"pong\");\n\t}\n\tcaller.send(\"goodbye\");\n\n}\n\nstatic void test()\n{\n\tTask callee = runWorkerTaskH(&workerFunc, Task.getThis);\n\tdo {\n\t\tlogInfo(\"ping\");\n\t\tcallee.send(\"ping\");\n\t} while (receiveOnly!string() == \"pong\");\n}\n\nstatic void work719(int) {}\nstatic void test719() { runWorkerTaskH(&work719, cast(ubyte)42); }\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L492_C1)\nExample:\nRunning a worker task using a class method and communicating with it$(DDOX_UNITTEST_HEADER __unittest_L518_C1)\n---\nstatic class Test {\n\tvoid workerMethod(Task caller) shared {\n\t\tint counter = 10;\n\t\twhile (receiveOnly!string() == \"ping\" && --counter) {\n\t\t\tlogInfo(\"pong\");\n\t\t\tcaller.send(\"pong\");\n\t\t}\n\t\tcaller.send(\"goodbye\");\n\t}\n}\n\nstatic void test()\n{\n\tauto cls = new shared Test;\n\tTask callee = runWorkerTaskH!(Test.workerMethod)(cls, Task.getThis());\n\tdo {\n\t\tlogInfo(\"ping\");\n\t\tcallee.send(\"ping\");\n\t} while (receiveOnly!string() == \"pong\");\n}\n\nstatic class Class719 {\n\tvoid work(int) shared {}\n}\nstatic void test719() {\n\tauto cls = new shared Class719;\n\trunWorkerTaskH!(Class719.work)(cls, cast(ubyte)42);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L518_C1)\n"
			},
			{
				"constraint": "is(typeof(__traits(getMember, object, __traits(identifier, method))))",
				"parameters": [
					{
						"kind": "alias",
						"name": "method"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 449,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "shared(T)",
								"name": "object"
							},
							{
								"type": "ARGS",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "args"
							}
						],
						"line": 449,
						"kind": "function",
						"char": 6,
						"name": "runWorkerTaskH",
						"type": "Task(shared(T) object, auto ref ARGS args)",
						"endchar": 1,
						"endline": 454
					}
				],
				"name": "runWorkerTaskH",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(typeof(*func) == function)",
				"parameters": [
					{
						"kind": "type",
						"name": "FT"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 574,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "FT",
								"name": "func"
							},
							{
								"type": "ARGS",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "args"
							}
						],
						"line": 574,
						"kind": "function",
						"char": 6,
						"name": "runWorkerTaskDist",
						"type": "void(FT func, auto ref ARGS args)",
						"endchar": 1,
						"endline": 579
					}
				],
				"name": "runWorkerTaskDist",
				"comment": "\tRuns a new asynchronous task in all worker threads concurrently.\n\n\tThis function is mainly useful for long-living tasks that distribute their\n\twork across all CPU cores. Only function pointers with weakly isolated\n\targuments are allowed to be able to guarantee thread-safety.\n\n\tThe number of tasks started is guaranteed to be equal to\n\t`workerThreadCount`.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "method"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 581,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "shared(T)",
								"name": "object"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 581,
						"kind": "function",
						"char": 6,
						"name": "runWorkerTaskDist",
						"type": "void(shared(T) object, ARGS args)",
						"endchar": 1,
						"endline": 585
					}
				],
				"name": "runWorkerTaskDist",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(typeof(*func) == function)",
				"parameters": [
					{
						"kind": "type",
						"name": "HCB"
					},
					{
						"kind": "type",
						"name": "FT"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 595,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "HCB",
								"storageClass": [
									"scope"
								],
								"name": "on_handle"
							},
							{
								"type": "FT",
								"name": "func"
							},
							{
								"type": "ARGS",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "args"
							}
						],
						"line": 595,
						"kind": "function",
						"char": 6,
						"name": "runWorkerTaskDistH",
						"type": "void(scope HCB on_handle, FT func, auto ref ARGS args)",
						"endchar": 1,
						"endline": 600
					}
				],
				"name": "runWorkerTaskDistH",
				"comment": " Runs a new asynchronous task in all worker threads and returns the handles.\n\n\t`on_handle` is a callble that takes a `Task` as its only argument and is\n\tcalled for every task instance that gets created.\n\n\tSee_also: `runWorkerTaskDist`\n"
			},
			{
				"parameters": [
					{
						"deco": "k",
						"default": "logicalProcessorCount()",
						"name": "num"
					}
				],
				"line": 616,
				"kind": "function",
				"char": 13,
				"name": "setupWorkerThreads",
				"deco": "FNfkZv",
				"endchar": 1,
				"endline": 628,
				"comment": "\tSets up num worker threads.\n\n\tThis function gives explicit control over the number of worker threads.\n\tNote, to have an effect the function must be called prior to related worker\n\ttasks functions which set up the default number of worker threads\n\timplicitly.\n\n\tParams:\n\t\tnum = The number of worker threads to initialize. Defaults to\n\t\t\t`logicalProcessorCount`.\n\tSee_also: `runWorkerTask`, `runWorkerTaskH`, `runWorkerTaskDist`\n"
			},
			{
				"line": 636,
				"kind": "function",
				"char": 23,
				"name": "logicalProcessorCount",
				"deco": "FNdZk",
				"endchar": 1,
				"endline": 640,
				"comment": "\tDetermines the number of logical processors in the system.\n\n\tThis number includes virtual cores on hyper-threading enabled CPUs.\n"
			},
			{
				"line": 655,
				"kind": "function",
				"char": 6,
				"name": "yield",
				"deco": "FNfZv",
				"endchar": 1,
				"endline": 668,
				"comment": "\tSuspends the execution of the calling task to let other tasks and events be\n\thandled.\n\n\tCalling this function in short intervals is recommended if long CPU\n\tcomputations are carried out by a task. It can also be used in conjunction\n\twith Signals to implement cross-fiber events with no polling.\n\n\tThrows:\n\t\tMay throw an `InterruptException` if `Task.interrupt()` gets called on\n\t\tthe calling task.\n"
			},
			{
				"parameters": [
					{
						"deco": "DFNbNfZv",
						"storageClass": [
							"scope"
						],
						"default": "cast(void delegate() nothrow @safe)null",
						"name": "on_interrupt"
					}
				],
				"line": 697,
				"kind": "function",
				"originalType": "nothrow @safe void(scope void delegate() nothrow @safe on_interrupt = null)",
				"char": 6,
				"name": "hibernate",
				"deco": "FNbNfMDFNbNfZvZv",
				"endchar": 1,
				"endline": 709,
				"comment": "\tSuspends the execution of the calling task until `switchToTask` is called\n\tmanually.\n\n\tThis low-level scheduling function is usually only used internally. Failure\n\tto call `switchToTask` will result in task starvation and resource leakage.\n\n\tParams:\n\t\ton_interrupt = If specified, is required to\n\n\tSee_Also: `switchToTask`\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4task4Task",
						"name": "t"
					}
				],
				"line": 720,
				"kind": "function",
				"char": 6,
				"name": "switchToTask",
				"deco": "FNbNfS4vibe4core4task4TaskZv",
				"endchar": 1,
				"endline": 725,
				"comment": "\tSwitches execution to the given task.\n\n\tThis function can be used in conjunction with `hibernate` to wake up a\n\ttask. The task must live in the same thread as the caller.\n\n\tSee_Also: `hibernate`\n"
			},
			{
				"parameters": [
					{
						"deco": "S4core4time8Duration",
						"name": "timeout"
					}
				],
				"line": 738,
				"kind": "function",
				"char": 6,
				"name": "sleep",
				"deco": "FNfS4core4time8DurationZv",
				"endchar": 1,
				"endline": 744,
				"comment": "\tSuspends the execution of the calling task for the specified amount of time.\n\n\tNote that other tasks of the same thread will continue to run during the\n\twait time, in contrast to $(D core.thread.Thread.sleep), which shouldn't be\n\tused in vibe.d applications.\n\n\tThrows: May throw an `InterruptException` if the task gets interrupted using\n\t\t`Task.interrupt()`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L746_C1)\n---\nimport vibe.core.core : sleep;\nimport vibe.core.log : logInfo;\nimport core.time : msecs;\n\nvoid test()\n{\n\tlogInfo(\"Sleeping for half a second...\");\n\tsleep(500.msecs);\n\tlogInfo(\"Done sleeping.\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L746_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "S4core4time8Duration",
						"name": "timeout"
					},
					{
						"deco": "DFNbNfZv",
						"name": "callback"
					},
					{
						"deco": "b",
						"default": "false",
						"name": "periodic"
					}
				],
				"line": 776,
				"kind": "function",
				"originalType": "nothrow @safe Timer(Duration timeout, Timer.Callback callback, bool periodic = false)",
				"char": 7,
				"name": "setTimer",
				"deco": "FNbNfS4core4time8DurationDFNbNfZvbZS4vibeQBjQBm5Timer",
				"endchar": 1,
				"endline": 781,
				"comment": "\tReturns a new armed timer.\n\n\tNote that timers can only work if an event loop is running, explicitly or\n\timplicitly by running a blocking operation, such as `sleep` or `File.read`.\n\n\tParams:\n\t\ttimeout = Determines the minimum amount of time that elapses before the timer fires.\n\t\tcallback = If non-`null`, this delegate will be called when the timer fires\n\t\tperiodic = Speficies if the timer fires repeatedly or only once\n\n\tReturns:\n\t\tReturns a Timer object that can be used to identify and modify the timer.\n\n\tSee_also: `createTimer`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L783_C1)\n---\nvoid printTime()\n@safe nothrow {\n\timport std.datetime;\n\tlogInfo(\"The time is: %s\", Clock.currTime());\n}\n\nvoid test()\n{\n\timport vibe.core.core;\n\t// start a periodic timer that prints the time every second\n\tsetTimer(1.seconds, toDelegate(&printTime), true);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L783_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "S4core4time8Duration",
						"name": "timeout"
					},
					{
						"deco": "DFZv",
						"name": "callback"
					},
					{
						"deco": "b",
						"default": "false",
						"name": "periodic"
					}
				],
				"line": 799,
				"kind": "function",
				"char": 7,
				"name": "setTimer",
				"deco": "FNbS4core4time8DurationDFZvbZS4vibeQBfQBi5Timer",
				"endchar": 1,
				"endline": 809,
				"comment": "Compatibility overload - use a `@safe nothrow` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "DFNbNfZv",
						"default": "cast(void delegate() nothrow @safe)null",
						"name": "callback"
					}
				],
				"line": 823,
				"kind": "function",
				"originalType": "nothrow @safe Timer(void delegate() nothrow @safe callback = null)",
				"char": 7,
				"name": "createTimer",
				"deco": "FNbNfDFNbNfZvZS4vibe4coreQf5Timer",
				"endchar": 1,
				"endline": 836,
				"comment": " Creates a new timer without arming it.\n\n\tEach time `callback` gets invoked, it will be run inside of a newly started\n\ttask.\n\n\tParams:\n\t\tcallback = If non-`null`, this delegate will be called when the timer\n\t\t\tfires\n\n\tSee_also: `createLeanTimer`, `setTimer`\n"
			},
			{
				"constraint": "is(typeof(()\n{\ncallback();\n}\n()))",
				"parameters": [
					{
						"kind": "type",
						"name": "CALLABLE"
					}
				],
				"line": 854,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "CALLABLE",
								"name": "callback"
							}
						],
						"line": 854,
						"kind": "function",
						"char": 7,
						"name": "createLeanTimer",
						"type": "Timer(CALLABLE callback)",
						"endchar": 1,
						"endline": 858
					}
				],
				"name": "createLeanTimer",
				"comment": " Creates a new timer with a lean callback mechanism.\n\n\tIn contrast to the standard `createTimer`, `callback` will not be called\n\tin a new task, but is instead called directly in the context of the event\n\tloop.\n\n\tFor this reason, the supplied callback is not allowed to perform any\n\toperation that needs to block/yield execution. In this case, `runTask`\n\tneeds to be used explicitly to perform the operation asynchronously.\n\n\tAdditionally, `callback` can carry arbitrary state without requiring a heap\n\tallocation.\n\n\tSee_also: `createTimer`\n"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "file_descriptor"
					},
					{
						"deco": "E4vibe4coreQf19FileDescriptorEvent7Trigger",
						"name": "event_mask"
					}
				],
				"line": 875,
				"kind": "function",
				"originalType": "nothrow @safe FileDescriptorEvent(int file_descriptor, FileDescriptorEvent.Trigger event_mask)",
				"char": 21,
				"name": "createFileDescriptorEvent",
				"deco": "FNbNfiE4vibe4coreQf19FileDescriptorEvent7TriggerZSQBrQBpQBsQBo",
				"endchar": 1,
				"endline": 878,
				"comment": "\tCreates an event to wait on an existing file descriptor.\n\n\tThe file descriptor usually needs to be a non-blocking socket for this to\n\twork.\n\n\tParams:\n\t\tfile_descriptor = The Posix file descriptor to watch\n\t\tevent_mask = Specifies which events will be listened for\n\n\tReturns:\n\t\tReturns a newly created FileDescriptorEvent associated with the given\n\t\tfile descriptor.\n"
			},
			{
				"parameters": [
					{
						"deco": "m",
						"name": "sz"
					}
				],
				"line": 898,
				"kind": "function",
				"originalType": "nothrow void(size_t sz)",
				"char": 6,
				"name": "setTaskStackSize",
				"deco": "FNbmZv",
				"endchar": 1,
				"endline": 901,
				"comment": "\tSets the stack size to use for tasks.\n\n\tThe default stack size is set to 512 KiB on 32-bit systems and to 16 MiB\n\ton 64-bit systems, which is sufficient for most tasks. Tuning this value\n\tcan be used to reduce memory usage for large numbers of concurrent tasks\n\tor to avoid stack overflows for applications with heavy stack use.\n\n\tNote that this function must be called at initialization time, before any\n\ttask is started to have an effect.\n\n\tAlso note that the stack will initially not consume actual physical memory -\n\tit just reserves virtual address space. Only once the stack gets actually\n\tfilled up with data will physical memory then be reserved page by page. This\n\tmeans that the stack can safely be set to large sizes on 64-bit systems\n\twithout having to worry about memory usage.\n"
			},
			{
				"line": 913,
				"kind": "function",
				"originalType": "@property size_t()",
				"char": 18,
				"name": "workerThreadCount",
				"deco": "FNdZm",
				"endchar": 1,
				"endline": 919,
				"comment": "\tThe number of worker threads used for processing worker tasks.\n\n\tNote that this function will cause the worker threads to be started,\n\tif they haven't\talready.\n\n\tSee_also: `runWorkerTask`, `runWorkerTaskH`, `runWorkerTaskDist`,\n\t`setupWorkerThreads`\n"
			},
			{
				"line": 932,
				"kind": "function",
				"char": 6,
				"name": "disableDefaultSignalHandlers",
				"deco": "FZv",
				"endchar": 1,
				"endline": 936,
				"comment": "\tDisables the signal handlers usually set up by vibe.d.\n\n\tDuring the first call to `runEventLoop`, vibe.d usually sets up a set of\n\tevent handlers for SIGINT, SIGTERM and SIGPIPE. Since in some situations\n\tthis can be undesirable, this function can be called before the first\n\tinvocation of the event loop to avoid this.\n\n\tCalling this function after `runEventLoop` will have no effect.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "uname"
					},
					{
						"deco": "Aya",
						"name": "gname"
					}
				],
				"line": 945,
				"kind": "function",
				"char": 6,
				"name": "lowerPrivileges",
				"deco": "FNfAyaQdZv",
				"endchar": 1,
				"endline": 961,
				"comment": "\tSets the effective user and group ID to the ones configured for privilege lowering.\n\n\tThis function is useful for services run as root to give up on the privileges that\n\tthey only need for initialization (such as listening on ports <= 1024 or opening\n\tsystem log files).\n"
			},
			{
				"line": 964,
				"kind": "function",
				"char": 6,
				"name": "lowerPrivileges",
				"deco": "FNfZv",
				"endchar": 1,
				"endline": 967
			},
			{
				"parameters": [
					{
						"deco": "PFNbE4vibe4core4task9TaskEventSQBaQyQv4TaskZv",
						"name": "func"
					}
				],
				"line": 977,
				"kind": "function",
				"originalType": "void(TaskEventCallback func)",
				"char": 6,
				"name": "setTaskEventCallback",
				"deco": "FPFNbE4vibe4core4task9TaskEventSQBaQyQv4TaskZvZv",
				"endchar": 1,
				"endline": 980,
				"comment": "\tSets a callback that is invoked whenever a task changes its status.\n\n\tThis function is useful mostly for implementing debuggers that\n\tanalyze the life time of tasks, including task switches. Note that\n\tthe callback will only be called for debug builds.\n"
			},
			{
				"parameters": [
					{
						"deco": "PFNbNfKS4vibe4core4task16TaskCreationInfoZv",
						"name": "func"
					}
				],
				"line": 992,
				"kind": "function",
				"originalType": "void(TaskCreationCallback func)",
				"char": 6,
				"name": "setTaskCreationCallback",
				"deco": "FPFNbNfKS4vibe4core4task16TaskCreationInfoZvZv",
				"endchar": 1,
				"endline": 995,
				"comment": "\tSets a callback that is invoked whenever new task is created.\n\n\tThe callback is guaranteed to be invoked before the one set by\n\t`setTaskEventCallback` for the same task handle.\n\n\tThis function is useful mostly for implementing debuggers that\n\tanalyze the life time of tasks, including task switches. Note that\n\tthe callback will only be called for debug builds.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 1001,
				"kind": "variable",
				"char": 6,
				"name": "vibeVersionString",
				"deco": "Aya",
				"init": "\"1.7.0\"",
				"comment": "\tA version string representing the current vibe.d core version\n"
			},
			{
				"kind": "struct",
				"line": 1011,
				"char": 1,
				"members": [
					{
						"line": 1014,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"line": 1015,
								"char": 3,
								"value": "0",
								"comment": "Match no event (invalid value)\n",
								"name": "none"
							},
							{
								"kind": "enum member",
								"line": 1016,
								"char": 3,
								"value": "1",
								"comment": "React on read-ready events\n",
								"name": "read"
							},
							{
								"kind": "enum member",
								"line": 1017,
								"char": 3,
								"value": "2",
								"comment": "React on write-ready events\n",
								"name": "write"
							},
							{
								"kind": "enum member",
								"line": 1018,
								"char": 3,
								"value": "3",
								"comment": "Match any kind of event\n",
								"name": "any"
							}
						],
						"name": "Trigger",
						"baseDeco": "i",
						"comment": " Event mask selecting the kind of events to listen for.\n"
					},
					{
						"line": 1047,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 1051
					},
					{
						"parameters": [
							{
								"deco": "E4vibe4coreQf19FileDescriptorEvent7Trigger",
								"default": "cast(Trigger)3",
								"name": "which"
							}
						],
						"line": 1064,
						"kind": "function",
						"originalType": "@safe void(Trigger which = Trigger.any)",
						"char": 7,
						"name": "wait",
						"deco": "FNfE4vibe4coreQf19FileDescriptorEvent7TriggerZv",
						"endchar": 2,
						"endline": 1067,
						"comment": " Waits for the selected event to occur.\n\n\t\tParams:\n\t\t\twhich = Optional event mask to react only on certain events\n\t\t\ttimeout = Maximum time to wait for an event\n\n\t\tReturns:\n\t\t\tThe overload taking the timeout parameter returns true if\n\t\t\tan event was received on time and false otherwise.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							},
							{
								"deco": "E4vibe4coreQf19FileDescriptorEvent7Trigger",
								"default": "cast(Trigger)3",
								"name": "which"
							}
						],
						"line": 1069,
						"kind": "function",
						"originalType": "@safe bool(Duration timeout, Trigger which = Trigger.any)",
						"char": 7,
						"name": "wait",
						"deco": "FNfS4core4time8DurationE4vibeQzQBb19FileDescriptorEvent7TriggerZb",
						"endchar": 2,
						"endline": 1086,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4coreQf19FileDescriptorEvent",
								"name": "p"
							}
						],
						"line": 1011,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS4vibe4coreQf19FileDescriptorEventZQBj"
					}
				],
				"comment": "\tGeneric file descriptor event.\n\n\tThis kind of event can be used to wait for events on a non-blocking\n\tfile descriptor. Note that this can usually only be used on socket\n\tbased file descriptors.\n",
				"name": "FileDescriptorEvent"
			},
			{
				"kind": "struct",
				"line": 1093,
				"char": 1,
				"members": [
					{
						"line": 1097,
						"kind": "variable",
						"char": 14,
						"name": "m_magicNumber",
						"deco": "k",
						"init": "1295317270"
					},
					{
						"kind": "alias",
						"deco": "DFNbNfZv",
						"char": 2,
						"line": 1100,
						"name": "Callback"
					},
					{
						"line": 1128,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 1132
					},
					{
						"line": 1135,
						"kind": "function",
						"char": 17,
						"name": "pending",
						"deco": "FNbNdNfZb",
						"endchar": 77,
						"endline": 1135,
						"comment": "True if the timer is yet to fire.\n"
					},
					{
						"line": 1138,
						"kind": "function",
						"originalType": "const nothrow @property @safe size_t()",
						"char": 19,
						"name": "id",
						"deco": "xFNbNdNfZm",
						"endchar": 53,
						"endline": 1138,
						"comment": "The internal ID of the timer.\n"
					},
					{
						"line": 1140,
						"kind": "function",
						"char": 7,
						"name": "opCast",
						"deco": "xFNbNfZb",
						"endchar": 58,
						"endline": 1140
					},
					{
						"line": 1143,
						"kind": "function",
						"char": 17,
						"name": "unique",
						"deco": "xFNbNdNfZb",
						"endchar": 100,
						"endline": 1143,
						"comment": "Determines if this reference is the only one\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "dur"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "periodic"
							}
						],
						"line": 1147,
						"kind": "function",
						"char": 7,
						"name": "rearm",
						"deco": "FNbNfS4core4time8DurationbZv",
						"endchar": 70,
						"endline": 1149,
						"comment": " Resets the timer to the specified timeout\n"
					},
					{
						"line": 1153,
						"kind": "function",
						"char": 7,
						"name": "stop",
						"deco": "FNbNfZv",
						"endchar": 66,
						"endline": 1153,
						"comment": " Resets the timer and avoids any firing.\n"
					},
					{
						"line": 1162,
						"kind": "function",
						"char": 7,
						"name": "wait",
						"deco": "FNfZb",
						"endchar": 2,
						"endline": 1172,
						"comment": " Waits until the timer fires.\n\n\t\tThis method may only be used if no timer callback has been specified.\n\n\t\tReturns:\n\t\t\t`true` is returned $(I iff) the timer was fired.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4coreQf5Timer",
								"name": "p"
							}
						],
						"line": 1093,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS4vibe4coreQf5TimerZQu"
					}
				],
				"comment": "\tRepresents a timer.\n",
				"name": "Timer"
			},
			{
				"storageClass": [
					"auto"
				],
				"line": 1201,
				"kind": "function",
				"originalType": "nothrow @safe ()",
				"char": 6,
				"name": "yieldLock",
				"deco": "FNbNfZS4vibe4coreQf9yieldLockFNbNfZ9YieldLock",
				"endchar": 1,
				"endline": 1223,
				"comment": " Returns an object that ensures that no task switches happen during its life time.\n\n\tAny attempt to run the event loop or switching to another task will cause\n\tan assertion to be thrown within the scope that defines the lifetime of the\n\treturned object.\n\n\tMultiple yield locks can appear in nested scopes.\n"
			}
		],
		"comment": "\tThis module contains the core functionality of the vibe.d framework.\n\n\tCopyright: © 2012-2019 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.core.core"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/file.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					},
					{
						"deco": "E4vibe4core4file8FileMode",
						"default": "cast(FileMode)0",
						"name": "mode"
					}
				],
				"line": 42,
				"kind": "function",
				"originalType": "@safe FileStream(NativePath path, FileMode mode = FileMode.read)",
				"char": 12,
				"name": "openFile",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqEQCmQCk4file8FileModeZSQDiQDgQw10FileStream",
				"endchar": 1,
				"endline": 47,
				"comment": "\tOpens a file stream with the specified mode.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "E4vibe4core4file8FileMode",
						"default": "cast(FileMode)0",
						"name": "mode"
					}
				],
				"line": 49,
				"kind": "function",
				"originalType": "@safe FileStream(string path, FileMode mode = FileMode.read)",
				"char": 12,
				"name": "openFile",
				"deco": "FNfAyaE4vibe4core4file8FileModeZSQBaQyQv10FileStream",
				"endchar": 1,
				"endline": 52,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					},
					{
						"deco": "Ah",
						"default": "null",
						"name": "buffer"
					},
					{
						"deco": "m",
						"default": "18446744073709551615LU",
						"name": "max_size"
					}
				],
				"line": 65,
				"kind": "function",
				"originalType": "@safe ubyte[](NativePath path, ubyte[] buffer = null, size_t max_size = size_t.max)",
				"char": 9,
				"name": "readFile",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqAhmZQe",
				"endchar": 1,
				"endline": 74,
				"comment": "\tRead a whole file into a buffer.\n\n\tIf the supplied buffer is large enough, it will be used to store the\n\tcontents of the file. Otherwise, a new buffer will be allocated.\n\n\tParams:\n\t\tpath = The path of the file to read\n\t\tbuffer = An optional buffer to use for storing the file contents\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "Ah",
						"default": "null",
						"name": "buffer"
					},
					{
						"deco": "m",
						"default": "18446744073709551615LU",
						"name": "max_size"
					}
				],
				"line": 76,
				"kind": "function",
				"originalType": "@safe ubyte[](string path, ubyte[] buffer = null, size_t max_size = size_t.max)",
				"char": 9,
				"name": "readFile",
				"deco": "FNfAyaAhmZQe",
				"endchar": 1,
				"endline": 79,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					},
					{
						"deco": "xAh",
						"name": "contents"
					}
				],
				"line": 85,
				"kind": "function",
				"originalType": "@safe void(NativePath path, in ubyte[] contents)",
				"char": 6,
				"name": "writeFile",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqxAhZv",
				"endchar": 1,
				"endline": 90,
				"comment": "\tWrite a whole file at once.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "xAh",
						"name": "contents"
					}
				],
				"line": 92,
				"kind": "function",
				"originalType": "@safe void(string path, in ubyte[] contents)",
				"char": 6,
				"name": "writeFile",
				"deco": "FNfAyaxAhZv",
				"endchar": 1,
				"endline": 95,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					},
					{
						"deco": "Aya",
						"name": "data"
					}
				],
				"line": 100,
				"kind": "function",
				"originalType": "@safe void(NativePath path, string data)",
				"char": 6,
				"name": "appendToFile",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqAyaZv",
				"endchar": 1,
				"endline": 104,
				"comment": "\tConvenience function to append to a file.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "Aya",
						"name": "data"
					}
				],
				"line": 106,
				"kind": "function",
				"char": 6,
				"name": "appendToFile",
				"deco": "FNfAyaQdZv",
				"endchar": 1,
				"endline": 109,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					}
				],
				"line": 117,
				"kind": "function",
				"originalType": "@safe string(NativePath path)",
				"char": 8,
				"name": "readFileUTF8",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZAya",
				"endchar": 1,
				"endline": 122,
				"comment": "\tRead a whole UTF-8 encoded file into a string.\n\n\tThe resulting string will be sanitized and will have the\n\toptional byte order mark (BOM) removed.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"line": 124,
				"kind": "function",
				"char": 8,
				"name": "readFileUTF8",
				"deco": "FNfAyaZQe",
				"endchar": 1,
				"endline": 127,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					},
					{
						"deco": "Aya",
						"name": "contents"
					}
				],
				"line": 135,
				"kind": "function",
				"originalType": "@safe void(NativePath path, string contents)",
				"char": 6,
				"name": "writeFileUTF8",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqAyaZv",
				"endchar": 1,
				"endline": 142,
				"comment": "\tWrite a string into a UTF-8 encoded file.\n\n\tThe file will have a byte order mark (BOM) prepended.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"default": "null",
						"name": "suffix"
					}
				],
				"line": 147,
				"kind": "function",
				"char": 12,
				"name": "createTempFile",
				"deco": "FNfAyaZS4vibe4core4file10FileStream",
				"endchar": 1,
				"endline": 172,
				"comment": "\tCreates and opens a temporary file for writing.\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "from"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "to"
					},
					{
						"deco": "b",
						"default": "false",
						"name": "copy_fallback"
					}
				],
				"line": 183,
				"kind": "function",
				"originalType": "@safe void(NativePath from, NativePath to, bool copy_fallback = false)",
				"char": 6,
				"name": "moveFile",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqQCmbZv",
				"endchar": 1,
				"endline": 186,
				"comment": "\tMoves or renames a file.\n\n\tParams:\n\t\tfrom = Path to the file/directory to move/rename.\n\t\tto = The target path\n\t\tcopy_fallback = Determines if copy/remove should be used in case of the\n\t\t\tsource and destination path pointing to different devices.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "from"
					},
					{
						"deco": "Aya",
						"name": "to"
					},
					{
						"deco": "b",
						"default": "false",
						"name": "copy_fallback"
					}
				],
				"line": 188,
				"kind": "function",
				"char": 6,
				"name": "moveFile",
				"deco": "FNfAyaQdbZv",
				"endchar": 1,
				"endline": 200,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "from"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "to"
					},
					{
						"deco": "b",
						"default": "false",
						"name": "overwrite"
					}
				],
				"line": 217,
				"kind": "function",
				"originalType": "@safe void(NativePath from, NativePath to, bool overwrite = false)",
				"char": 6,
				"name": "copyFile",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqQCmbZv",
				"endchar": 1,
				"endline": 250,
				"comment": "\tCopies a file.\n\n\tNote that attributes and time stamps are currently not retained.\n\n\tParams:\n\t\tfrom = Path of the source file\n\t\tto = Path for the destination file\n\t\toverwrite = If true, any file existing at the destination path will be\n\t\t\toverwritten. If this is false, an exception will be thrown should\n\t\t\ta file already exist at the destination path.\n\n\tThrows:\n\t\tAn Exception if the copy operation fails for some reason.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "from"
					},
					{
						"deco": "Aya",
						"name": "to"
					}
				],
				"line": 252,
				"kind": "function",
				"char": 6,
				"name": "copyFile",
				"deco": "FNfAyaQdZv",
				"endchar": 1,
				"endline": 255,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					}
				],
				"line": 260,
				"kind": "function",
				"originalType": "@safe void(NativePath path)",
				"char": 6,
				"name": "removeFile",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZv",
				"endchar": 1,
				"endline": 263,
				"comment": "\tRemoves a file\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"line": 265,
				"kind": "function",
				"char": 6,
				"name": "removeFile",
				"deco": "FNfAyaZv",
				"endchar": 1,
				"endline": 268,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					}
				],
				"line": 273,
				"kind": "function",
				"originalType": "nothrow @safe bool(NativePath path)",
				"char": 6,
				"name": "existsFile",
				"deco": "FNbNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZb",
				"endchar": 1,
				"endline": 276,
				"comment": "\tChecks if a file exists\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"line": 278,
				"kind": "function",
				"char": 6,
				"name": "existsFile",
				"deco": "FNbNfAyaZb",
				"endchar": 1,
				"endline": 289,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					}
				],
				"line": 295,
				"kind": "function",
				"originalType": "@trusted FileInfo(NativePath path)",
				"char": 10,
				"name": "getFileInfo",
				"deco": "FNeS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZSQCnQCl4file8FileInfo",
				"endchar": 1,
				"endline": 298,
				"comment": " Stores information about the specified file/directory into 'info'\n\n\tThrows: A `FileException` is thrown if the file does not exist.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"line": 300,
				"kind": "function",
				"char": 10,
				"name": "getFileInfo",
				"deco": "FNfAyaZS4vibe4core4file8FileInfo",
				"endchar": 1,
				"endline": 314,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					}
				],
				"line": 319,
				"kind": "function",
				"originalType": "@safe void(NativePath path)",
				"char": 6,
				"name": "createDirectory",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZv",
				"endchar": 1,
				"endline": 322,
				"comment": "\tCreates a new directory.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa9_726563757273697665ZQBf",
						"default": "cast(Flag)false",
						"name": "recursive"
					}
				],
				"line": 324,
				"kind": "function",
				"originalType": "@safe void(string path, Flag!\"recursive\" recursive = No.recursive)",
				"char": 6,
				"name": "createDirectory",
				"deco": "FNfAyaE3std8typecons__T4FlagVQBaa9_726563757273697665ZQBfZv",
				"endchar": 1,
				"endline": 337,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					},
					{
						"deco": "DFNfS4vibe4core4file8FileInfoZb",
						"storageClass": [
							"scope"
						],
						"name": "del"
					}
				],
				"line": 342,
				"kind": "function",
				"originalType": "@safe void(NativePath path, scope bool delegate(FileInfo info) @safe del)",
				"char": 6,
				"name": "listDirectory",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqMDFNfSQCrQCp4file8FileInfoZbZv",
				"endchar": 1,
				"endline": 345,
				"comment": "\tEnumerates all files in the specified directory.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "DFNfS4vibe4core4file8FileInfoZb",
						"storageClass": [
							"scope"
						],
						"name": "del"
					}
				],
				"line": 347,
				"kind": "function",
				"char": 6,
				"name": "listDirectory",
				"deco": "FNfAyaMDFNfS4vibe4core4file8FileInfoZbZv",
				"endchar": 1,
				"endline": 382,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					},
					{
						"deco": "DFS4vibe4core4file8FileInfoZb",
						"storageClass": [
							"scope"
						],
						"name": "del"
					}
				],
				"line": 384,
				"kind": "function",
				"originalType": "@system void(NativePath path, scope bool delegate(FileInfo info) @system del)",
				"char": 6,
				"name": "listDirectory",
				"deco": "FS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqMDFSQCpQCn4file8FileInfoZbZv",
				"endchar": 1,
				"endline": 387,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "DFS4vibe4core4file8FileInfoZb",
						"storageClass": [
							"scope"
						],
						"name": "del"
					}
				],
				"line": 389,
				"kind": "function",
				"char": 6,
				"name": "listDirectory",
				"deco": "FAyaMDFS4vibe4core4file8FileInfoZbZv",
				"endchar": 1,
				"endline": 392,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					}
				],
				"line": 394,
				"kind": "function",
				"originalType": "@safe int delegate(scope int delegate(ref FileInfo))(NativePath path)",
				"char": 48,
				"name": "iterateDirectory",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZDFMDFKSQCtQCr4file8FileInfoZiZi",
				"endchar": 1,
				"endline": 405,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"line": 407,
				"kind": "function",
				"char": 48,
				"name": "iterateDirectory",
				"deco": "FNfAyaZDFMDFKS4vibe4core4file8FileInfoZiZi",
				"endchar": 1,
				"endline": 410,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "recursive"
					}
				],
				"line": 415,
				"kind": "function",
				"originalType": "@safe DirectoryWatcher(NativePath path, bool recursive = true)",
				"char": 18,
				"name": "watchDirectory",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqbZSQCoQCm4file16DirectoryWatcher",
				"endchar": 1,
				"endline": 418,
				"comment": "\tStarts watching a directory for changes.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "recursive"
					}
				],
				"line": 420,
				"kind": "function",
				"char": 18,
				"name": "watchDirectory",
				"deco": "FNfAyabZS4vibe4core4file16DirectoryWatcher",
				"endchar": 1,
				"endline": 423
			},
			{
				"line": 428,
				"kind": "function",
				"originalType": "@safe NativePath()",
				"char": 12,
				"name": "getWorkingDirectory",
				"deco": "FNfZS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
				"endchar": 1,
				"endline": 431,
				"comment": "\tReturns the current working directory.\n"
			},
			{
				"kind": "struct",
				"line": 436,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 438,
						"kind": "variable",
						"char": 9,
						"name": "name",
						"deco": "Aya",
						"offset": 0,
						"comment": "Name of the file (not including the path)\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 441,
						"kind": "variable",
						"char": 8,
						"name": "size",
						"deco": "m",
						"offset": 16,
						"comment": "Size of the file (zero for directories)\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 444,
						"kind": "variable",
						"char": 10,
						"name": "timeModified",
						"deco": "S3std8datetime7systime7SysTime",
						"offset": 24,
						"comment": "Time of the last modification\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 447,
						"kind": "variable",
						"char": 10,
						"name": "timeCreated",
						"deco": "S3std8datetime7systime7SysTime",
						"offset": 40,
						"comment": "Time of creation (not available on all operating systems/file systems)\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 450,
						"kind": "variable",
						"char": 7,
						"name": "isSymlink",
						"deco": "b",
						"offset": 56,
						"comment": "True if this is a symlink to an actual file\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 453,
						"kind": "variable",
						"char": 7,
						"name": "isDirectory",
						"deco": "b",
						"offset": 57,
						"comment": "True if this is a directory or a symlink pointing to a directory\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 456,
						"kind": "variable",
						"char": 7,
						"name": "isFile",
						"deco": "b",
						"offset": 58,
						"comment": "True if this is a file. On POSIX if both isFile and isDirectory are false it is a special file.\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 463,
						"kind": "variable",
						"char": 7,
						"name": "hidden",
						"deco": "b",
						"offset": 59,
						"comment": " True if the file's hidden attribute is set.\n\n\t\tOn systems that don't support a hidden attribute, any file starting with\n\t\ta single dot will be treated as hidden.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core4file8FileInfo",
								"name": "p"
							}
						],
						"line": 436,
						"kind": "generated function",
						"originalType": "pure nothrow ref @safe FileInfo(FileInfo p) return",
						"char": 1,
						"name": "opAssign",
						"deco": "FNaNbNcNiNjNfS4vibe4core4file8FileInfoZQBa"
					}
				],
				"comment": " Contains general information about a file.\n",
				"name": "FileInfo"
			},
			{
				"line": 469,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 471,
						"char": 2,
						"value": "0",
						"comment": "The file is opened read-only.\n",
						"name": "read"
					},
					{
						"kind": "enum member",
						"line": 473,
						"char": 2,
						"value": "1",
						"comment": "The file is opened for read-write random access.\n",
						"name": "readWrite"
					},
					{
						"kind": "enum member",
						"line": 475,
						"char": 2,
						"value": "2",
						"comment": "The file is truncated if it exists or created otherwise and then opened for read-write access.\n",
						"name": "createTrunc"
					},
					{
						"kind": "enum member",
						"line": 477,
						"char": 2,
						"value": "3",
						"comment": "The file is opened for appending data to it and created if it does not exist.\n",
						"name": "append"
					}
				],
				"name": "FileMode",
				"baseDeco": "i",
				"comment": "\tSpecifies how a file is manipulated on disk.\n"
			},
			{
				"kind": "struct",
				"line": 483,
				"char": 1,
				"members": [
					{
						"line": 519,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 523
					},
					{
						"line": 525,
						"kind": "function",
						"char": 16,
						"name": "fd",
						"deco": "FNdNfZi",
						"endchar": 45,
						"endline": 525
					},
					{
						"line": 528,
						"kind": "function",
						"originalType": "const @property @safe NativePath()",
						"char": 23,
						"name": "path",
						"deco": "xFNdNfZS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"endchar": 55,
						"endline": 528,
						"comment": "The path of the file.\n"
					},
					{
						"line": 531,
						"kind": "function",
						"char": 17,
						"name": "isOpen",
						"deco": "xFNdNfZb",
						"endchar": 65,
						"endline": 531,
						"comment": "Determines if the file stream is still open\n"
					},
					{
						"line": 532,
						"kind": "function",
						"char": 18,
						"name": "size",
						"deco": "xFNbNdNfZm",
						"endchar": 58,
						"endline": 532
					},
					{
						"line": 533,
						"kind": "function",
						"char": 17,
						"name": "readable",
						"deco": "xFNbNdNfZb",
						"endchar": 80,
						"endline": 533
					},
					{
						"line": 534,
						"kind": "function",
						"char": 17,
						"name": "writable",
						"deco": "xFNbNdNfZb",
						"endchar": 78,
						"endline": 534
					},
					{
						"constraint": "is(T == bool)",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 536,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 536,
								"kind": "function",
								"char": 7,
								"name": "opCast",
								"type": "bool()",
								"endchar": 72,
								"endline": 536
							}
						],
						"name": "opCast"
					},
					{
						"line": 538,
						"kind": "function",
						"char": 7,
						"name": "takeOwnershipOfFD",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 541
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "offset"
							}
						],
						"line": 543,
						"kind": "function",
						"char": 7,
						"name": "seek",
						"deco": "FNfmZv",
						"endchar": 2,
						"endline": 547
					},
					{
						"line": 549,
						"kind": "function",
						"char": 8,
						"name": "tell",
						"deco": "FNbNfZm",
						"endchar": 41,
						"endline": 549
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "size"
							}
						],
						"line": 551,
						"kind": "function",
						"char": 7,
						"name": "truncate",
						"deco": "FNfmZv",
						"endchar": 2,
						"endline": 560
					},
					{
						"line": 563,
						"kind": "function",
						"char": 7,
						"name": "close",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 571,
						"comment": "Closes the file handle.\n"
					},
					{
						"line": 573,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "xFNdNfZb",
						"endchar": 84,
						"endline": 573
					},
					{
						"line": 574,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "xFNdNfZm",
						"endchar": 88,
						"endline": 574
					},
					{
						"line": 575,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 55,
						"endline": 575
					},
					{
						"line": 577,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 2,
						"endline": 580
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"line": 582,
						"kind": "function",
						"originalType": "@safe size_t(ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 591
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"line": 593,
						"kind": "function",
						"char": 7,
						"name": "read",
						"deco": "FNfAhZv",
						"endchar": 2,
						"endline": 597
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"line": 599,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 609
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"line": 611,
						"kind": "function",
						"originalType": "@safe void(in ubyte[] bytes)",
						"char": 7,
						"name": "write",
						"deco": "FNfxAhZv",
						"endchar": 2,
						"endline": 614
					},
					{
						"parameters": [
							{
								"deco": "xAa",
								"name": "bytes"
							}
						],
						"line": 616,
						"kind": "function",
						"originalType": "@safe void(in char[] bytes)",
						"char": 7,
						"name": "write",
						"deco": "FNfxAaZv",
						"endchar": 2,
						"endline": 619
					},
					{
						"constraint": "isInputStream!InputStream",
						"parameters": [
							{
								"kind": "type",
								"name": "InputStream"
							}
						],
						"line": 621,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "InputStream",
										"name": "stream"
									},
									{
										"deco": "m",
										"default": "(ulong).max",
										"name": "nbytes"
									}
								],
								"line": 621,
								"kind": "function",
								"char": 7,
								"name": "write",
								"type": "void(InputStream stream, ulong nbytes = (ulong).max)",
								"endchar": 2,
								"endline": 625
							}
						],
						"name": "write"
					},
					{
						"line": 627,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 630
					},
					{
						"line": 632,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 635
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core4file10FileStream",
								"name": "p"
							}
						],
						"line": 483,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNcNjNeS4vibe4core4file10FileStreamZQBd"
					}
				],
				"comment": "\tAccesses the contents of a file as a stream.\n",
				"name": "FileStream"
			},
			{
				"kind": "mixin",
				"char": 1,
				"line": 640,
				"name": "validateRandomAccessStream!(FileStream)"
			},
			{
				"kind": "struct",
				"line": 681,
				"char": 1,
				"members": [
					{
						"line": 731,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 735
					},
					{
						"line": 738,
						"kind": "function",
						"originalType": "const nothrow @property @safe NativePath()",
						"char": 23,
						"name": "path",
						"deco": "xFNbNdNfZS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"endchar": 69,
						"endline": 738,
						"comment": "The path of the watched directory\n"
					},
					{
						"line": 741,
						"kind": "function",
						"char": 17,
						"name": "recursive",
						"deco": "xFNbNdNfZb",
						"endchar": 73,
						"endline": 741,
						"comment": "Indicates if the directory is watched recursively\n"
					},
					{
						"parameters": [
							{
								"deco": "AS4vibe4core4file15DirectoryChange",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"deco": "S4core4time8Duration",
								"default": "max()",
								"name": "timeout"
							}
						],
						"line": 757,
						"kind": "function",
						"originalType": "@safe bool(ref DirectoryChange[] dst, Duration timeout = Duration.max)",
						"char": 7,
						"name": "readChanges",
						"deco": "FNfKAS4vibe4core4file15DirectoryChangeSQBc4time8DurationZb",
						"endchar": 2,
						"endline": 776,
						"comment": " Fills the destination array with all changes that occurred since the last call.\n\n\t\tThe function will block until either directory changes have occurred or until the\n\t\ttimeout has elapsed. Specifying a negative duration will cause the function to\n\t\twait without a timeout.\n\n\t\tParams:\n\t\t\tdst = The destination array to which the changes will be appended\n\t\t\ttimeout = Optional timeout for the read operation. A value of\n\t\t\t\t`Duration.max` will wait indefinitely.\n\n\t\tReturns:\n\t\t\tIf the call completed successfully, true is returned.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core4file16DirectoryWatcher",
								"name": "p"
							}
						],
						"line": 681,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS4vibe4core4file16DirectoryWatcherZQBj"
					}
				],
				"comment": "\tInterface for directory watcher implementations.\n\n\tDirectory watchers monitor the contents of a directory (wither recursively or non-recursively)\n\tfor changes, such as file additions, deletions or modifications.\n",
				"name": "DirectoryWatcher"
			},
			{
				"line": 782,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 784,
						"char": 2,
						"value": "0",
						"comment": "A file or directory was added\n",
						"name": "added"
					},
					{
						"kind": "enum member",
						"line": 786,
						"char": 2,
						"value": "1",
						"comment": "A file or directory was deleted\n",
						"name": "removed"
					},
					{
						"kind": "enum member",
						"line": 788,
						"char": 2,
						"value": "2",
						"comment": "A file or directory was modified\n",
						"name": "modified"
					}
				],
				"name": "DirectoryChangeType",
				"baseDeco": "i",
				"comment": " Specifies the kind of change in a watched directory.\n"
			},
			{
				"kind": "struct",
				"line": 794,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 796,
						"kind": "variable",
						"char": 22,
						"name": "type",
						"deco": "E4vibe4core4file19DirectoryChangeType",
						"offset": 0,
						"comment": "The type of change\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 799,
						"kind": "variable",
						"originalType": "NativePath",
						"char": 13,
						"name": "path",
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"offset": 8,
						"comment": "Path of the file/directory that was changed\n"
					}
				],
				"comment": " Describes a single change in a watched directory.\n",
				"name": "DirectoryChange"
			}
		],
		"comment": "\tFile handling functions and types.\n\n\tCopyright: © 2012-2019 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.core.file"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/internal/release.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "subsys"
					},
					{
						"kind": "type",
						"name": "H"
					}
				],
				"line": 6,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "H",
								"name": "handle"
							},
							{
								"type": "shared(NativeEventDriver)",
								"name": "drv"
							}
						],
						"line": 6,
						"kind": "function",
						"char": 6,
						"name": "releaseHandle",
						"type": "void(H handle, shared(NativeEventDriver) drv)",
						"endchar": 1,
						"endline": 26
					}
				],
				"name": "releaseHandle",
				"comment": "Release a handle in a thread-safe way\n"
			}
		],
		"name": "vibe.core.internal.release"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/log.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "E4vibe4core3log8LogLevel",
						"name": "level"
					}
				],
				"line": 30,
				"kind": "function",
				"char": 6,
				"name": "setLogLevel",
				"deco": "FNbNfE4vibe4core3log8LogLevelZv",
				"endchar": 1,
				"endline": 34,
				"comment": "\tSets the minimum log level to be printed using the default console logger.\n\n\tThis level applies to the default stdout/stderr logger only.\n"
			},
			{
				"parameters": [
					{
						"deco": "E4vibe4core3log10FileLogger6Format",
						"name": "fmt"
					},
					{
						"deco": "E4vibe4core3log10FileLogger6Format",
						"default": "cast(Format)0",
						"name": "infoFmt"
					}
				],
				"line": 46,
				"kind": "function",
				"originalType": "nothrow @safe void(FileLogger.Format fmt, FileLogger.Format infoFmt = FileLogger.Format.plain)",
				"char": 6,
				"name": "setLogFormat",
				"deco": "FNbNfE4vibe4core3log10FileLogger6FormatQBiZv",
				"endchar": 1,
				"endline": 53,
				"comment": "\tSets the log format used for the default console logger.\n\n\tThis level applies to the default stdout/stderr logger only.\n\n\tParams:\n\t\tfmt = The log format for the stderr (default is `FileLogger.Format.thread`)\n\t\tinfoFmt = The log format for the stdout (default is `FileLogger.Format.plain`)\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "filename"
					},
					{
						"deco": "E4vibe4core3log8LogLevel",
						"default": "cast(LogLevel)6",
						"name": "min_level"
					}
				],
				"line": 62,
				"kind": "function",
				"originalType": "void(string filename, LogLevel min_level = LogLevel.error)",
				"char": 6,
				"name": "setLogFile",
				"deco": "FAyaE4vibe4core3log8LogLevelZv",
				"endchar": 1,
				"endline": 71,
				"comment": "\tSets a log file for disk file logging.\n\n\tMultiple calls to this function will register multiple log\n\tfiles for output.\n"
			},
			{
				"parameters": [
					{
						"deco": "OC4vibe4core3log6Logger",
						"name": "logger"
					}
				],
				"line": 89,
				"kind": "function",
				"char": 6,
				"name": "registerLogger",
				"deco": "FNbOC4vibe4core3log6LoggerZv",
				"endchar": 1,
				"endline": 92,
				"comment": "\tRegisters a new logger instance.\n\n\tThe specified Logger will receive all log messages in its Logger.log\n\tmethod after it has been registered.\n\n\tExamples:\n\t---\n\tauto logger = cast(shared)new HTMLLogger(\"log.html\");\n\tlogger.lock().format = FileLogger.Format.threadTime;\n\tregisterLogger(logger);\n\t---\n\n\tSee_Also: deregisterLogger\n"
			},
			{
				"parameters": [
					{
						"deco": "OC4vibe4core3log6Logger",
						"name": "logger"
					}
				],
				"line": 100,
				"kind": "function",
				"char": 6,
				"name": "deregisterLogger",
				"deco": "FNbOC4vibe4core3log6LoggerZv",
				"endchar": 1,
				"endline": 106,
				"comment": "\tDeregisters an active logger instance.\n\n\tSee_Also: registerLogger\n"
			},
			{
				"constraint": "isSomeString!S && (level != LogLevel.none)",
				"parameters": [
					{
						"kind": "value",
						"deco": "E4vibe4core3log8LogLevel",
						"name": "level"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "i",
						"defaultValue": "__LINE__",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 117,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 117,
						"kind": "function",
						"char": 6,
						"name": "log",
						"type": "nothrow void(S fmt, lazy T args)",
						"endchar": 1,
						"endline": 121
					}
				],
				"name": "log",
				"comment": "\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n\t\targs = Any input values needed for formatting\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L142_C7)\n---\nvoid test() nothrow\n{\n\tlogInfo(\"Hello, World!\");\n\tlogWarn(\"This may not be %s.\", \"good\");\n\tlog!(LogLevel.info)(\"This is a %s.\", \"test\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L142_C7)\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "i",
						"defaultValue": "__LINE__",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 123,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 123,
						"kind": "function",
						"char": 6,
						"name": "logTrace",
						"type": "nothrow void(S fmt, lazy T args)",
						"endchar": 229,
						"endline": 123
					}
				],
				"name": "logTrace",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "i",
						"defaultValue": "__LINE__",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 125,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 125,
						"kind": "function",
						"char": 6,
						"name": "logDebugV",
						"type": "nothrow void(S fmt, lazy T args)",
						"endchar": 231,
						"endline": 125
					}
				],
				"name": "logDebugV",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "i",
						"defaultValue": "__LINE__",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 127,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 127,
						"kind": "function",
						"char": 6,
						"name": "logDebug",
						"type": "nothrow void(S fmt, lazy T args)",
						"endchar": 230,
						"endline": 127
					}
				],
				"name": "logDebug",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "i",
						"defaultValue": "__LINE__",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 129,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 129,
						"kind": "function",
						"char": 6,
						"name": "logDiagnostic",
						"type": "nothrow void(S fmt, lazy T args)",
						"endchar": 239,
						"endline": 129
					}
				],
				"name": "logDiagnostic",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "i",
						"defaultValue": "__LINE__",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 131,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 131,
						"kind": "function",
						"char": 6,
						"name": "logInfo",
						"type": "nothrow void(S fmt, lazy T args)",
						"endchar": 227,
						"endline": 131
					}
				],
				"name": "logInfo",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "i",
						"defaultValue": "__LINE__",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 133,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 133,
						"kind": "function",
						"char": 6,
						"name": "logWarn",
						"type": "nothrow void(S fmt, lazy T args)",
						"endchar": 227,
						"endline": 133
					}
				],
				"name": "logWarn",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "i",
						"defaultValue": "__LINE__",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 135,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 135,
						"kind": "function",
						"char": 6,
						"name": "logError",
						"type": "nothrow void(S fmt, lazy T args)",
						"endchar": 229,
						"endline": 135
					}
				],
				"name": "logError",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "i",
						"defaultValue": "__LINE__",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 137,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 137,
						"kind": "function",
						"char": 6,
						"name": "logCritical",
						"type": "nothrow void(S fmt, lazy T args)",
						"endchar": 235,
						"endline": 137
					}
				],
				"name": "logCritical",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "i",
						"defaultValue": "__LINE__",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 139,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 139,
						"kind": "function",
						"char": 6,
						"name": "logFatal",
						"type": "nothrow void(S fmt, lazy T args)",
						"endchar": 157,
						"endline": 139
					}
				],
				"name": "logFatal",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "E4vibe4core3log8LogLevel",
						"defaultValue": "LogLevel.error",
						"name": "level"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "i",
						"defaultValue": "__LINE__",
						"name": "line"
					}
				],
				"line": 154,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "Throwable",
								"name": "exception"
							},
							{
								"type": "string",
								"name": "error_description"
							}
						],
						"line": 154,
						"kind": "function",
						"char": 6,
						"name": "logException",
						"type": "nothrow @safe void(Throwable exception, string error_description)",
						"endchar": 1,
						"endline": 160
					}
				],
				"name": "logException",
				"comment": " Logs an exception, including a debug stack trace.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L163_C1)\n---\nvoid test() nothrow\n{\n\ttry {\n\t\tthrow new Exception(\"Something failed!\");\n\t} catch (Exception e) {\n\t\tlogException(e, \"Failed to carry out some operation\");\n\t}\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L163_C1)\n"
			},
			{
				"line": 176,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 177,
						"char": 2,
						"value": "0",
						"comment": "Developer information for locating events when no useful stack traces are available\n",
						"name": "trace"
					},
					{
						"kind": "enum member",
						"line": 178,
						"char": 2,
						"value": "1",
						"comment": "Developer information useful for algorithm debugging - for verbose output\n",
						"name": "debugV"
					},
					{
						"kind": "enum member",
						"line": 179,
						"char": 2,
						"value": "2",
						"comment": "Developer information useful for algorithm debugging\n",
						"name": "debug_"
					},
					{
						"kind": "enum member",
						"line": 180,
						"char": 2,
						"value": "3",
						"comment": "Extended user information (e.g. for more detailed error information)\n",
						"name": "diagnostic"
					},
					{
						"kind": "enum member",
						"line": 181,
						"char": 2,
						"value": "4",
						"comment": "Informational message for normal user education\n",
						"name": "info"
					},
					{
						"kind": "enum member",
						"line": 182,
						"char": 2,
						"value": "5",
						"comment": "Unexpected condition that could indicate an error but has no direct consequences\n",
						"name": "warn"
					},
					{
						"kind": "enum member",
						"line": 183,
						"char": 2,
						"value": "6",
						"comment": "Normal error that is handled gracefully\n",
						"name": "error"
					},
					{
						"kind": "enum member",
						"line": 184,
						"char": 2,
						"value": "7",
						"comment": "Error that severely influences the execution of the application\n",
						"name": "critical"
					},
					{
						"kind": "enum member",
						"line": 185,
						"char": 2,
						"value": "8",
						"comment": "Error that forces the application to terminate\n",
						"name": "fatal"
					},
					{
						"kind": "enum member",
						"line": 186,
						"char": 2,
						"value": "9",
						"comment": "Special value used to indicate no logging when set as the minimum log level\n",
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 188,
						"char": 2,
						"value": "3",
						"comment": "Alias for diagnostic messages\n",
						"name": "verbose1"
					},
					{
						"kind": "enum member",
						"line": 189,
						"char": 2,
						"value": "2",
						"comment": "Alias for debug messages\n",
						"name": "verbose2"
					},
					{
						"kind": "enum member",
						"line": 190,
						"char": 2,
						"value": "1",
						"comment": "Alias for verbose debug messages\n",
						"name": "verbose3"
					},
					{
						"kind": "enum member",
						"line": 191,
						"char": 2,
						"value": "0",
						"comment": "Alias for trace messages\n",
						"name": "verbose4"
					}
				],
				"name": "LogLevel",
				"baseDeco": "i",
				"comment": "Specifies the log level for a particular log message.\n"
			},
			{
				"kind": "struct",
				"line": 195,
				"char": 1,
				"members": [
					{
						"line": 196,
						"kind": "variable",
						"char": 9,
						"name": "mod",
						"deco": "Aya",
						"offset": 0
					},
					{
						"line": 197,
						"kind": "variable",
						"char": 9,
						"name": "func",
						"deco": "Aya",
						"offset": 16
					},
					{
						"line": 198,
						"kind": "variable",
						"char": 9,
						"name": "file",
						"deco": "Aya",
						"offset": 32
					},
					{
						"line": 199,
						"kind": "variable",
						"char": 6,
						"name": "line",
						"deco": "i",
						"offset": 48
					},
					{
						"line": 200,
						"kind": "variable",
						"char": 11,
						"name": "level",
						"deco": "E4vibe4core3log8LogLevel",
						"offset": 52
					},
					{
						"line": 201,
						"kind": "variable",
						"originalType": "Thread",
						"char": 9,
						"name": "thread",
						"deco": "C4core6thread6Thread",
						"offset": 56
					},
					{
						"line": 202,
						"kind": "variable",
						"char": 9,
						"name": "threadName",
						"deco": "Aya",
						"offset": 64
					},
					{
						"line": 203,
						"kind": "variable",
						"char": 7,
						"name": "threadID",
						"deco": "k",
						"offset": 80
					},
					{
						"line": 204,
						"kind": "variable",
						"originalType": "Fiber",
						"char": 8,
						"name": "fiber",
						"deco": "C4core6thread5Fiber",
						"offset": 88
					},
					{
						"line": 205,
						"kind": "variable",
						"char": 7,
						"name": "fiberID",
						"deco": "k",
						"offset": 96
					},
					{
						"line": 206,
						"kind": "variable",
						"char": 10,
						"name": "time",
						"deco": "S3std8datetime7systime7SysTime",
						"offset": 104
					},
					{
						"line": 207,
						"kind": "variable",
						"char": 9,
						"name": "text",
						"deco": "Aya",
						"offset": 120,
						"comment": "Legacy field used in `Logger.log`\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core3log7LogLine",
								"name": "p"
							}
						],
						"line": 195,
						"kind": "generated function",
						"originalType": "pure nothrow ref @safe LogLine(LogLine p) return",
						"char": 1,
						"name": "opAssign",
						"deco": "FNaNbNcNiNjNfS4vibe4core3log7LogLineZQy"
					}
				],
				"comment": "Represents a single logged line\n",
				"name": "LogLine"
			},
			{
				"kind": "class",
				"line": 211,
				"char": 1,
				"members": [
					{
						"line": 212,
						"kind": "variable",
						"char": 11,
						"name": "minLevel",
						"deco": "E4vibe4core3log8LogLevel",
						"init": "cast(LogLevel)0",
						"offset": 16
					},
					{
						"line": 218,
						"kind": "variable",
						"char": 17,
						"name": "multilineLogger",
						"deco": "b",
						"init": "false",
						"protection": "protected",
						"offset": 20,
						"comment": " Whether the logger can handle multiple lines in a single beginLine/endLine.\n\n\t   By default log text with newlines gets split into multiple log lines.\n"
					},
					{
						"storageClass": [
							"final"
						],
						"parameters": [
							{
								"deco": "E4vibe4core3log8LogLevel",
								"name": "value"
							}
						],
						"line": 225,
						"kind": "function",
						"char": 13,
						"name": "acceptsLevel",
						"deco": "FNaNbNfE4vibe4core3log8LogLevelZb",
						"endchar": 94,
						"endline": 225
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core3log7LogLine",
								"storageClass": [
									"ref"
								],
								"name": "line"
							}
						],
						"line": 232,
						"kind": "function",
						"char": 7,
						"name": "log",
						"deco": "FNfKS4vibe4core3log7LogLineZv",
						"endchar": 36,
						"endline": 232,
						"comment": " Legacy logging interface relying on dynamic memory allocation.\n\n\t\tOverride `beginLine`, `put`, `endLine` instead for a more efficient and\n\t\tpossibly allocation-free implementation.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core3log7LogLine",
								"storageClass": [
									"ref"
								],
								"name": "line_info"
							}
						],
						"line": 235,
						"kind": "function",
						"char": 7,
						"name": "beginLine",
						"deco": "FNfKS4vibe4core3log7LogLineZv",
						"endchar": 2,
						"endline": 239,
						"comment": "Starts a new log line.\n"
					},
					{
						"parameters": [
							{
								"deco": "Axa",
								"storageClass": [
									"scope"
								],
								"name": "text"
							}
						],
						"line": 242,
						"kind": "function",
						"char": 7,
						"name": "put",
						"deco": "FNfMAxaZv",
						"endchar": 2,
						"endline": 245,
						"comment": "Writes part of a log line message.\n"
					},
					{
						"line": 248,
						"kind": "function",
						"char": 7,
						"name": "endLine",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 254,
						"comment": "Finalizes a log line.\n"
					}
				],
				"comment": "Abstract base class for all loggers\n",
				"name": "Logger"
			},
			{
				"line": 261,
				"kind": "class",
				"char": 7,
				"base": "vibe.core.log.Logger",
				"members": [
					{
						"line": 263,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"line": 264,
								"char": 3,
								"value": "0",
								"comment": "Output only the plain log message\n",
								"name": "plain"
							},
							{
								"kind": "enum member",
								"line": 265,
								"char": 3,
								"value": "1",
								"comment": "Prefix \"[thread-id:fiber-id loglevel]\"\n",
								"name": "thread"
							},
							{
								"kind": "enum member",
								"line": 266,
								"char": 3,
								"value": "2",
								"comment": "Prefix \"[thread-id:fiber-id timestamp loglevel]\"\n",
								"name": "threadTime"
							}
						],
						"name": "Format",
						"baseDeco": "i",
						"comment": "The log format used by the FileLogger\n"
					},
					{
						"line": 275,
						"kind": "variable",
						"char": 9,
						"name": "format",
						"deco": "E4vibe4core3log10FileLogger6Format",
						"init": "cast(Format)1",
						"offset": 240
					},
					{
						"line": 276,
						"kind": "variable",
						"char": 9,
						"name": "infoFormat",
						"deco": "E4vibe4core3log10FileLogger6Format",
						"init": "cast(Format)1",
						"offset": 244
					},
					{
						"line": 282,
						"kind": "variable",
						"char": 7,
						"name": "useColors",
						"deco": "b",
						"init": "false",
						"offset": 248,
						"comment": " Use escape sequences to color log output.\n\n\t\tNote that the terminal must support 256-bit color codes.\n"
					},
					{
						"parameters": [
							{
								"deco": "S3std5stdio4File",
								"name": "info_file"
							},
							{
								"deco": "S3std5stdio4File",
								"name": "diag_file"
							}
						],
						"line": 284,
						"kind": "constructor",
						"originalType": "(File info_file, File diag_file)",
						"char": 2,
						"name": "this",
						"deco": "FS3std5stdio4FileQqZC4vibe4core3log10FileLogger",
						"endchar": 2,
						"endline": 288
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "filename"
							}
						],
						"line": 290,
						"kind": "constructor",
						"originalType": "(string filename)",
						"char": 2,
						"name": "this",
						"deco": "FAyaZC4vibe4core3log10FileLogger",
						"endchar": 2,
						"endline": 294
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "S4vibe4core3log7LogLine",
								"storageClass": [
									"ref"
								],
								"name": "msg"
							}
						],
						"overrides": [
							"vibe.core.log.Logger.beginLine"
						],
						"line": 296,
						"kind": "function",
						"char": 16,
						"name": "beginLine",
						"deco": "FNeKS4vibe4core3log7LogLineZv",
						"endchar": 2,
						"endline": 360
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "Axa",
								"storageClass": [
									"scope"
								],
								"name": "text"
							}
						],
						"overrides": [
							"vibe.core.log.Logger.put"
						],
						"line": 362,
						"kind": "function",
						"originalType": "void(scope const(char)[] text)",
						"char": 16,
						"name": "put",
						"deco": "FNfMAxaZv",
						"endchar": 2,
						"endline": 367
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.core.log.Logger.endLine"
						],
						"line": 369,
						"kind": "function",
						"originalType": "void()",
						"char": 16,
						"name": "endLine",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 381
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 7,
						"line": 261,
						"name": "~this"
					}
				],
				"name": "FileLogger",
				"comment": "\tPlain-text based logger for logging to regular files or stdout/stderr\n"
			},
			{
				"line": 387,
				"kind": "class",
				"char": 7,
				"base": "vibe.core.log.Logger",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "\"log.html\"",
								"name": "filename"
							}
						],
						"line": 392,
						"kind": "constructor",
						"originalType": "(string filename = \"log.html\")",
						"char": 2,
						"name": "this",
						"deco": "FAyaZC4vibe4core3log10HTMLLogger",
						"endchar": 2,
						"endline": 396
					},
					{
						"line": 398,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FZv",
						"endchar": 2,
						"endline": 404
					},
					{
						"parameters": [
							{
								"deco": "E4vibe4core3log8LogLevel",
								"name": "value"
							}
						],
						"line": 406,
						"kind": "function",
						"char": 17,
						"name": "minLogLevel",
						"deco": "FNaNbNdNfE4vibe4core3log8LogLevelZv",
						"endchar": 89,
						"endline": 406
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "S4vibe4core3log7LogLine",
								"storageClass": [
									"ref"
								],
								"name": "msg"
							}
						],
						"overrides": [
							"vibe.core.log.Logger.beginLine"
						],
						"line": 408,
						"kind": "function",
						"char": 16,
						"name": "beginLine",
						"deco": "FNeKS4vibe4core3log7LogLineZv",
						"endchar": 2,
						"endline": 431
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "Axa",
								"storageClass": [
									"scope"
								],
								"name": "text"
							}
						],
						"overrides": [
							"vibe.core.log.Logger.put"
						],
						"line": 433,
						"kind": "function",
						"originalType": "void(scope const(char)[] text)",
						"char": 16,
						"name": "put",
						"deco": "FNfMAxaZv",
						"endchar": 2,
						"endline": 442
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.core.log.Logger.endLine"
						],
						"line": 444,
						"kind": "function",
						"originalType": "void()",
						"char": 16,
						"name": "endLine",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 451
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 2,
						"line": 398,
						"name": "~this"
					},
					{
						"line": 398,
						"kind": "destructor",
						"originalType": "void()",
						"char": 2,
						"name": "~this",
						"deco": "FZv"
					}
				],
				"name": "HTMLLogger",
				"comment": "\tLogger implementation for logging to an HTML file with dynamic filtering support.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 583,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"kind": "class",
						"char": 7,
						"members": [
							{
								"kind": "variable",
								"type": "string",
								"char": 10,
								"line": 585,
								"name": "m_hostName"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 10,
								"line": 586,
								"name": "m_appName"
							},
							{
								"kind": "variable",
								"type": "OutputStream",
								"char": 16,
								"line": 587,
								"name": "m_ostream"
							},
							{
								"kind": "variable",
								"type": "Facility",
								"char": 12,
								"line": 588,
								"name": "m_facility"
							},
							{
								"kind": "enum",
								"line": 592,
								"char": 2,
								"members": [
									{
										"kind": "enum member",
										"line": 593,
										"char": 3,
										"comment": "kernel messages\n",
										"name": "kern"
									},
									{
										"kind": "enum member",
										"line": 594,
										"char": 3,
										"comment": "user-level messages\n",
										"name": "user"
									},
									{
										"kind": "enum member",
										"line": 595,
										"char": 3,
										"comment": "mail system\n",
										"name": "mail"
									},
									{
										"kind": "enum member",
										"line": 596,
										"char": 3,
										"comment": "system daemons\n",
										"name": "daemon"
									},
									{
										"kind": "enum member",
										"line": 597,
										"char": 3,
										"comment": "security/authorization messages\n",
										"name": "auth"
									},
									{
										"kind": "enum member",
										"line": 598,
										"char": 3,
										"comment": "messages generated internally by syslogd\n",
										"name": "syslog"
									},
									{
										"kind": "enum member",
										"line": 599,
										"char": 3,
										"comment": "line printer subsystem\n",
										"name": "lpr"
									},
									{
										"kind": "enum member",
										"line": 600,
										"char": 3,
										"comment": "network news subsystem\n",
										"name": "news"
									},
									{
										"kind": "enum member",
										"line": 601,
										"char": 3,
										"comment": "UUCP subsystem\n",
										"name": "uucp"
									},
									{
										"kind": "enum member",
										"line": 602,
										"char": 3,
										"comment": "clock daemon\n",
										"name": "clockDaemon"
									},
									{
										"kind": "enum member",
										"line": 603,
										"char": 3,
										"comment": "security/authorization messages\n",
										"name": "authpriv"
									},
									{
										"kind": "enum member",
										"line": 604,
										"char": 3,
										"comment": "FTP daemon\n",
										"name": "ftp"
									},
									{
										"kind": "enum member",
										"line": 605,
										"char": 3,
										"comment": "NTP subsystem\n",
										"name": "ntp"
									},
									{
										"kind": "enum member",
										"line": 606,
										"char": 3,
										"comment": "log audit\n",
										"name": "logAudit"
									},
									{
										"kind": "enum member",
										"line": 607,
										"char": 3,
										"comment": "log alert\n",
										"name": "logAlert"
									},
									{
										"kind": "enum member",
										"line": 608,
										"char": 3,
										"comment": "clock daemon\n",
										"name": "cron"
									},
									{
										"kind": "enum member",
										"line": 609,
										"char": 3,
										"comment": "local use 0\n",
										"name": "local0"
									},
									{
										"kind": "enum member",
										"line": 610,
										"char": 3,
										"comment": "local use 1\n",
										"name": "local1"
									},
									{
										"kind": "enum member",
										"line": 611,
										"char": 3,
										"comment": "local use 2\n",
										"name": "local2"
									},
									{
										"kind": "enum member",
										"line": 612,
										"char": 3,
										"comment": "local use 3\n",
										"name": "local3"
									},
									{
										"kind": "enum member",
										"line": 613,
										"char": 3,
										"comment": "local use 4\n",
										"name": "local4"
									},
									{
										"kind": "enum member",
										"line": 614,
										"char": 3,
										"comment": "local use 5\n",
										"name": "local5"
									},
									{
										"kind": "enum member",
										"line": 615,
										"char": 3,
										"comment": "local use 6\n",
										"name": "local6"
									},
									{
										"kind": "enum member",
										"line": 616,
										"char": 3,
										"comment": "local use 7\n",
										"name": "local7"
									}
								],
								"comment": "Facilities\n",
								"name": "Facility"
							},
							{
								"kind": "enum",
								"line": 620,
								"char": 10,
								"members": [
									{
										"kind": "enum member",
										"line": 621,
										"char": 3,
										"comment": "system is unusable\n",
										"name": "emergency"
									},
									{
										"kind": "enum member",
										"line": 622,
										"char": 3,
										"comment": "action must be taken immediately\n",
										"name": "alert"
									},
									{
										"kind": "enum member",
										"line": 623,
										"char": 3,
										"comment": "critical conditions\n",
										"name": "critical"
									},
									{
										"kind": "enum member",
										"line": 624,
										"char": 3,
										"comment": "error conditions\n",
										"name": "error"
									},
									{
										"kind": "enum member",
										"line": 625,
										"char": 3,
										"comment": "warning conditions\n",
										"name": "warning"
									},
									{
										"kind": "enum member",
										"line": 626,
										"char": 3,
										"comment": "normal but significant condition\n",
										"name": "notice"
									},
									{
										"kind": "enum member",
										"line": 627,
										"char": 3,
										"comment": "informational messages\n",
										"name": "info"
									},
									{
										"kind": "enum member",
										"line": 628,
										"char": 3,
										"comment": "debug-level messages\n",
										"name": "debug_"
									}
								],
								"comment": "Severities\n",
								"name": "Severity"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 633,
								"kind": "variable",
								"char": 15,
								"name": "SYSLOG_MESSAGE_FORMAT_VERSION1",
								"init": "\"<%.3s>1 %s %.255s %.48s %.128s %.32s %s %s\"",
								"comment": "syslog message format (version 1)\nsee section 6 in RFC 5424\n"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 635,
								"kind": "variable",
								"char": 15,
								"name": "NILVALUE",
								"init": "\"-\"",
								"comment": "\n"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 637,
								"kind": "variable",
								"char": 15,
								"name": "BOM",
								"init": "hexString!\"EFBBBF\"",
								"comment": "\n"
							},
							{
								"parameters": [
									{
										"type": "OutputStream",
										"name": "stream"
									},
									{
										"type": "Facility",
										"name": "facility"
									},
									{
										"type": "string",
										"default": "null",
										"name": "appName"
									},
									{
										"type": "string",
										"default": "hostName()",
										"name": "hostName"
									}
								],
								"line": 651,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(OutputStream stream, Facility facility, string appName = null, string hostName = hostName())",
								"endchar": 2,
								"endline": 658,
								"comment": "\t\tConstruct a SyslogLogger.\n\n\t\tThe log messages are sent to the given OutputStream stream using the given\n\t\tFacility facility.Optionally the appName and hostName can be set. The\n\t\tappName defaults to null. The hostName defaults to hostName().\n\n\t\tNote that the passed stream's write function must not use logging with\n\t\ta level for that this Logger's acceptsLevel returns true. Because this\n\t\tLogger uses the stream's write function when it logs and would hence\n\t\tlog forevermore.\n"
							},
							{
								"storageClass": [
									"override"
								],
								"parameters": [
									{
										"type": "LogLine",
										"storageClass": [
											"ref"
										],
										"name": "msg"
									}
								],
								"line": 665,
								"kind": "function",
								"char": 16,
								"name": "beginLine",
								"type": "@trusted void(ref LogLine msg)",
								"endchar": 2,
								"endline": 704,
								"comment": "\t\tLogs the given LogLine msg.\n\n\t\tIt uses the msg's time, level, and text field.\n"
							},
							{
								"storageClass": [
									"override"
								],
								"parameters": [
									{
										"type": "const(char)[]",
										"storageClass": [
											"scope"
										],
										"name": "text"
									}
								],
								"line": 706,
								"kind": "function",
								"char": 16,
								"name": "put",
								"type": "@trusted void(scope const(char)[] text)",
								"endchar": 2,
								"endline": 709
							},
							{
								"storageClass": [
									"override"
								],
								"line": 711,
								"kind": "function",
								"char": 16,
								"name": "endLine",
								"type": "@trusted void()",
								"endchar": 2,
								"endline": 715
							}
						],
						"line": 583,
						"name": "SyslogLogger"
					}
				],
				"name": "SyslogLogger",
				"comment": "\tA logger that logs in syslog format according to RFC 5424.\n\n\tMessages can be logged to files (via file streams) or over the network (via\n\tTCP or SSL streams).\n\n\tStandards: Conforms to RFC 5424.\n"
			},
			{
				"line": 783,
				"kind": "function",
				"char": 18,
				"name": "getLoggers",
				"deco": "FNbNeZAOC4vibe4core3log6Logger",
				"endchar": 69,
				"endline": 783,
				"comment": "Returns a list of all registered loggers.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 922,
				"kind": "variable",
				"char": 7,
				"name": "STD_OUTPUT_HANDLE",
				"init": "cast(DWORD)-11"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 923,
				"kind": "variable",
				"char": 7,
				"name": "STD_ERROR_HANDLE",
				"init": "cast(DWORD)-12"
			},
			{
				"parameters": [
					{
						"type": "DWORD",
						"name": "nStdHandle"
					}
				],
				"line": 924,
				"kind": "function",
				"char": 24,
				"name": "GetStdHandle",
				"type": "extern (System) HANDLE(DWORD nStdHandle)"
			}
		],
		"comment": "\tCentral logging facility for vibe.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.core.log"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/net.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "E3std6socket13AddressFamily",
						"default": "cast(AddressFamily)0",
						"name": "address_family"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "use_dns"
					}
				],
				"line": 30,
				"kind": "function",
				"originalType": "@safe NetworkAddress(string host, AddressFamily address_family = AddressFamily.UNSPEC, bool use_dns = true)",
				"char": 16,
				"name": "resolveHost",
				"deco": "FNfAyaE3std6socket13AddressFamilybZS4vibe4core3net14NetworkAddress",
				"endchar": 1,
				"endline": 33,
				"comment": "\tResolves the given host name/IP address string.\n\n\tSetting use_dns to false will only allow IP address strings but also guarantees\n\tthat the call will not block.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"name": "address_family"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "use_dns"
					}
				],
				"line": 35,
				"kind": "function",
				"char": 16,
				"name": "resolveHost",
				"deco": "FNfAyatbZS4vibe4core3net14NetworkAddress",
				"endchar": 1,
				"endline": 74,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "DFNbNfS4vibe4core3net13TCPConnectionZv",
						"name": "connection_callback"
					},
					{
						"deco": "E4vibe4core3net16TCPListenOptions",
						"default": "cast(TCPListenOptions)8",
						"name": "options"
					}
				],
				"line": 88,
				"kind": "function",
				"originalType": "@safe TCPListener[](ushort port, TCPConnectionDelegate connection_callback, TCPListenOptions options = TCPListenOptions.defaults)",
				"char": 15,
				"name": "listenTCP",
				"deco": "FNftDFNbNfS4vibe4core3net13TCPConnectionZvEQBgQBeQBc16TCPListenOptionsZASQCkQCiQCg11TCPListener",
				"endchar": 1,
				"endline": 97,
				"comment": "\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. Each new connection gets its own fiber. The stream parameter\n\tthen allows to perform blocking I/O on the client socket.\n\n\tThe address parameter can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n"
			},
			{
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "DFNbNfS4vibe4core3net13TCPConnectionZv",
						"name": "connection_callback"
					},
					{
						"deco": "Aya",
						"name": "address"
					},
					{
						"deco": "E4vibe4core3net16TCPListenOptions",
						"default": "cast(TCPListenOptions)8",
						"name": "options"
					}
				],
				"line": 99,
				"kind": "function",
				"originalType": "@safe TCPListener(ushort port, TCPConnectionDelegate connection_callback, string address, TCPListenOptions options = TCPListenOptions.defaults)",
				"char": 13,
				"name": "listenTCP",
				"deco": "FNftDFNbNfS4vibe4core3net13TCPConnectionZvAyaEQBjQBhQBf16TCPListenOptionsZSQCmQCkQCi11TCPListener",
				"endchar": 1,
				"endline": 121,
				"comment": "ditto\n"
			},
			{
				"storageClass": [
					"deprecated"
				],
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "DFS4vibe4core3net13TCPConnectionZv",
						"name": "connection_callback"
					},
					{
						"deco": "E4vibe4core3net16TCPListenOptions",
						"default": "cast(TCPListenOptions)8",
						"name": "options"
					}
				],
				"line": 125,
				"kind": "function",
				"originalType": "@safe TCPListener[](ushort port, void delegate(TCPConnection) connection_callback, TCPListenOptions options = TCPListenOptions.defaults)",
				"char": 15,
				"name": "listenTCP",
				"deco": "FNftDFS4vibe4core3net13TCPConnectionZvEQBgQBeQBc16TCPListenOptionsZASQCkQCiQCg11TCPListener",
				"endchar": 1,
				"endline": 134,
				"comment": "Compatibility overload - use an `@safe nothrow` callback instead.\n"
			},
			{
				"storageClass": [
					"deprecated"
				],
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "DFS4vibe4core3net13TCPConnectionZv",
						"name": "connection_callback"
					},
					{
						"deco": "Aya",
						"name": "address"
					},
					{
						"deco": "E4vibe4core3net16TCPListenOptions",
						"default": "cast(TCPListenOptions)8",
						"name": "options"
					}
				],
				"line": 137,
				"kind": "function",
				"originalType": "@safe TCPListener(ushort port, void delegate(TCPConnection) connection_callback, string address, TCPListenOptions options = TCPListenOptions.defaults)",
				"char": 13,
				"name": "listenTCP",
				"deco": "FNftDFS4vibe4core3net13TCPConnectionZvAyaEQBjQBhQBf16TCPListenOptionsZSQCmQCkQCi11TCPListener",
				"endchar": 1,
				"endline": 147,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "PFNbNfS4vibe4core3net13TCPConnectionZv",
						"name": "connection_callback"
					},
					{
						"deco": "E4vibe4core3net16TCPListenOptions",
						"default": "cast(TCPListenOptions)8",
						"name": "options"
					}
				],
				"line": 154,
				"kind": "function",
				"originalType": "@trusted TCPListener[](ushort port, TCPConnectionFunction connection_callback, TCPListenOptions options = TCPListenOptions.defaults)",
				"char": 15,
				"name": "listenTCP_s",
				"deco": "FNetPFNbNfS4vibe4core3net13TCPConnectionZvEQBgQBeQBc16TCPListenOptionsZASQCkQCiQCg11TCPListener",
				"endchar": 1,
				"endline": 157,
				"comment": "\tStarts listening on the specified port.\n\n\tThis function is the same as listenTCP but takes a function callback instead of a delegate.\n"
			},
			{
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "PFNbNfS4vibe4core3net13TCPConnectionZv",
						"name": "connection_callback"
					},
					{
						"deco": "Aya",
						"name": "address"
					},
					{
						"deco": "E4vibe4core3net16TCPListenOptions",
						"default": "cast(TCPListenOptions)8",
						"name": "options"
					}
				],
				"line": 159,
				"kind": "function",
				"originalType": "@trusted TCPListener(ushort port, TCPConnectionFunction connection_callback, string address, TCPListenOptions options = TCPListenOptions.defaults)",
				"char": 13,
				"name": "listenTCP_s",
				"deco": "FNetPFNbNfS4vibe4core3net13TCPConnectionZvAyaEQBjQBhQBf16TCPListenOptionsZSQCmQCkQCi11TCPListener",
				"endchar": 1,
				"endline": 162,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "bind_interface"
					},
					{
						"deco": "t",
						"default": "cast(ushort)0u",
						"name": "bind_port"
					},
					{
						"deco": "S4core4time8Duration",
						"default": "max()",
						"name": "timeout"
					}
				],
				"line": 167,
				"kind": "function",
				"originalType": "@safe TCPConnection(string host, ushort port, string bind_interface = null, ushort bind_port = 0, Duration timeout = Duration.max)",
				"char": 15,
				"name": "connectTCP",
				"deco": "FNfAyatQetS4core4time8DurationZS4vibeQBa3net13TCPConnection",
				"endchar": 1,
				"endline": 186,
				"comment": "\tEstablishes a connection to the given host/port.\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core3net14NetworkAddress",
						"name": "addr"
					},
					{
						"deco": "S4vibe4core3net14NetworkAddress",
						"default": "anyAddress()",
						"name": "bind_address"
					},
					{
						"deco": "S4core4time8Duration",
						"default": "max()",
						"name": "timeout"
					}
				],
				"line": 188,
				"kind": "function",
				"originalType": "@safe TCPConnection(NetworkAddress addr, NetworkAddress bind_address = anyAddress, Duration timeout = Duration.max)",
				"char": 15,
				"name": "connectTCP",
				"deco": "FNfS4vibe4core3net14NetworkAddressQBfSQBd4time8DurationZSQCbQBzQBx13TCPConnection",
				"endchar": 1,
				"endline": 235,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core3net14NetworkAddress",
						"storageClass": [
							"ref"
						],
						"name": "addr"
					}
				],
				"line": 241,
				"kind": "function",
				"char": 15,
				"name": "listenUDP",
				"deco": "FNfKS4vibe4core3net14NetworkAddressZSQBgQBeQBc13UDPConnection",
				"endchar": 1,
				"endline": 244,
				"comment": "\tCreates a bound UDP socket suitable for sending and receiving packets.\n"
			},
			{
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "Aya",
						"default": "\"0.0.0.0\"",
						"name": "bind_address"
					}
				],
				"line": 246,
				"kind": "function",
				"char": 15,
				"name": "listenUDP",
				"deco": "FNftAyaZS4vibe4core3net13UDPConnection",
				"endchar": 1,
				"endline": 251,
				"comment": "ditto\n"
			},
			{
				"line": 253,
				"kind": "function",
				"char": 16,
				"name": "anyAddress",
				"deco": "FNfZS4vibe4core3net14NetworkAddress",
				"endchar": 1,
				"endline": 258
			},
			{
				"kind": "alias",
				"line": 262,
				"char": 15,
				"deco": "DFNbNfS4vibe4core3net13TCPConnectionZv",
				"comment": "Callback invoked for incoming TCP connections.\n",
				"name": "TCPConnectionDelegate"
			},
			{
				"kind": "alias",
				"line": 264,
				"char": 15,
				"deco": "PFNbNfS4vibe4core3net13TCPConnectionZv",
				"comment": "ditto\n",
				"name": "TCPConnectionFunction"
			},
			{
				"kind": "struct",
				"line": 270,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum",
							"@safe"
						],
						"line": 288,
						"kind": "variable",
						"originalType": "socklen_t",
						"char": 17,
						"name": "sockAddrMaxLen",
						"deco": "k",
						"init": "28u"
					},
					{
						"parameters": [
							{
								"deco": "C3std6socket7Address",
								"name": "addr"
							}
						],
						"line": 291,
						"kind": "constructor",
						"originalType": "ref @trusted (Address addr)",
						"char": 2,
						"name": "this",
						"deco": "FNcNeC3std6socket7AddressZS4vibe4core3net14NetworkAddress",
						"endchar": 2,
						"endline": 315
					},
					{
						"line": 319,
						"kind": "function",
						"char": 19,
						"name": "family",
						"deco": "xFNaNbNdNfZt",
						"endchar": 72,
						"endline": 319,
						"comment": " Family of the socket address.\n"
					},
					{
						"parameters": [
							{
								"deco": "E3std6socket13AddressFamily",
								"name": "val"
							}
						],
						"line": 321,
						"kind": "function",
						"char": 17,
						"name": "family",
						"deco": "FNaNbNdNfE3std6socket13AddressFamilyZv",
						"endchar": 91,
						"endline": 321,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "t",
								"name": "val"
							}
						],
						"line": 323,
						"kind": "function",
						"char": 17,
						"name": "family",
						"deco": "FNaNbNdNftZv",
						"endchar": 84,
						"endline": 323,
						"comment": "ditto\n"
					},
					{
						"line": 327,
						"kind": "function",
						"char": 19,
						"name": "port",
						"deco": "xFNaNbNdNfZt",
						"endchar": 2,
						"endline": 336,
						"comment": " The port in host byte order.\n"
					},
					{
						"parameters": [
							{
								"deco": "t",
								"name": "val"
							}
						],
						"line": 338,
						"kind": "function",
						"char": 17,
						"name": "port",
						"deco": "FNaNbNdNftZv",
						"endchar": 2,
						"endline": 346,
						"comment": "ditto\n"
					},
					{
						"line": 350,
						"kind": "function",
						"char": 29,
						"name": "sockAddr",
						"deco": "NgFNaNbNdNfZPNgS4core3sys5posixQk6socket8sockaddr",
						"endchar": 75,
						"endline": 350,
						"comment": " A pointer to a sockaddr struct suitable for passing to socket functions.\n"
					},
					{
						"line": 354,
						"kind": "function",
						"originalType": "const pure nothrow @property @safe socklen_t()",
						"char": 22,
						"name": "sockAddrLen",
						"deco": "xFNaNbNdNfZk",
						"endchar": 2,
						"endline": 364,
						"comment": " Size of the sockaddr struct that is returned by sockAddr().\n"
					},
					{
						"line": 366,
						"kind": "function",
						"char": 32,
						"name": "sockAddrInet4",
						"deco": "NgFNaNbNdNfZPNgS4core3sys5posix7netinet3in_11sockaddr_in",
						"endchar": 28,
						"endline": 368
					},
					{
						"line": 370,
						"kind": "function",
						"char": 33,
						"name": "sockAddrInet6",
						"deco": "NgFNaNbNdNfZPNgS4core3sys5posix7netinet3in_12sockaddr_in6",
						"endchar": 28,
						"endline": 372
					},
					{
						"line": 375,
						"kind": "function",
						"char": 33,
						"name": "sockAddrUnix",
						"deco": "NgFNaNbNdNfZPNgS4core3sys5posixQk2un11sockaddr_un",
						"endchar": 30,
						"endline": 377
					},
					{
						"line": 375,
						"kind": "function",
						"char": 33,
						"name": "sockAddrUnix",
						"deco": "NgFNaNbNdNfZPNgS4core3sys5posixQk2un11sockaddr_un",
						"endchar": 30,
						"endline": 377
					},
					{
						"line": 382,
						"kind": "function",
						"char": 9,
						"name": "toAddressString",
						"deco": "xFNbNfZAya",
						"endchar": 2,
						"endline": 389,
						"comment": " Returns a string representation of the IP address\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfAxaZv",
								"storageClass": [
									"scope"
								],
								"name": "sink"
							}
						],
						"line": 391,
						"kind": "function",
						"char": 7,
						"name": "toAddressString",
						"deco": "xFNbNfMDFNfAxaZvZv",
						"endchar": 2,
						"endline": 427,
						"comment": "ditto\n"
					},
					{
						"line": 431,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFNbNfZAya",
						"endchar": 2,
						"endline": 437,
						"comment": " Returns a full string representation of the address, including the port number.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfAxaZv",
								"storageClass": [
									"scope"
								],
								"name": "sink"
							}
						],
						"line": 439,
						"kind": "function",
						"char": 7,
						"name": "toString",
						"deco": "xFNbNfMDFNfAxaZvZv",
						"endchar": 2,
						"endline": 464,
						"comment": "ditto\n"
					}
				],
				"comment": "\tRepresents a network/socket address.\n",
				"name": "NetworkAddress"
			},
			{
				"kind": "struct",
				"line": 483,
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 9,
						"members": [
							{
								"storageClass": [
									"@safe"
								],
								"line": 491,
								"kind": "variable",
								"originalType": "BatchBuffer!ubyte",
								"char": 21,
								"name": "readBuffer",
								"deco": "S4vibe8internal5array__T11BatchBufferThVmi0ZQu",
								"offset": 0
							},
							{
								"storageClass": [
									"@safe"
								],
								"line": 492,
								"kind": "variable",
								"char": 8,
								"name": "tcpNoDelay",
								"deco": "b",
								"init": "false",
								"offset": 32
							},
							{
								"storageClass": [
									"@safe"
								],
								"line": 493,
								"kind": "variable",
								"char": 8,
								"name": "keepAlive",
								"deco": "b",
								"init": "false",
								"offset": 33
							},
							{
								"storageClass": [
									"@safe"
								],
								"line": 494,
								"kind": "variable",
								"char": 12,
								"name": "readTimeout",
								"deco": "S4core4time8Duration",
								"init": "Duration(9223372036854775807L)",
								"offset": 40
							},
							{
								"storageClass": [
									"@safe"
								],
								"line": 495,
								"kind": "variable",
								"char": 10,
								"name": "remoteAddressString",
								"deco": "Aya",
								"offset": 48
							},
							{
								"storageClass": [
									"shared",
									"@safe"
								],
								"line": 496,
								"kind": "variable",
								"originalType": "shared(NativeEventDriver)",
								"char": 29,
								"name": "driver",
								"deco": "OC9eventcore7drivers5posix6driver__T16PosixEventDriverHTCQCdQBwQBr5epoll14EpollEventLoopZQCb",
								"offset": 64
							}
						],
						"line": 490,
						"name": "Context"
					},
					{
						"line": 520,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 524
					},
					{
						"constraint": "is(T == bool)",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 526,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 526,
								"kind": "function",
								"char": 7,
								"name": "opCast",
								"type": "const nothrow bool()",
								"endchar": 97,
								"endline": 526
							}
						],
						"name": "opCast"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "enabled"
							}
						],
						"line": 528,
						"kind": "function",
						"char": 17,
						"name": "tcpNoDelay",
						"deco": "FNbNdNfbZv",
						"endchar": 138,
						"endline": 528
					},
					{
						"line": 529,
						"kind": "function",
						"char": 17,
						"name": "tcpNoDelay",
						"deco": "xFNbNdNfZb",
						"endchar": 75,
						"endline": 529
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "enabled"
							}
						],
						"line": 530,
						"kind": "function",
						"char": 17,
						"name": "keepAlive",
						"deco": "FNbNdNfbZv",
						"endchar": 135,
						"endline": 530
					},
					{
						"line": 531,
						"kind": "function",
						"char": 17,
						"name": "keepAlive",
						"deco": "xFNbNdNfZb",
						"endchar": 73,
						"endline": 531
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "duration"
							}
						],
						"line": 532,
						"kind": "function",
						"char": 17,
						"name": "readTimeout",
						"deco": "FNdNfS4core4time8DurationZv",
						"endchar": 84,
						"endline": 532
					},
					{
						"line": 533,
						"kind": "function",
						"char": 21,
						"name": "readTimeout",
						"deco": "xFNbNdNfZS4core4time8Duration",
						"endchar": 81,
						"endline": 533
					},
					{
						"line": 534,
						"kind": "function",
						"char": 19,
						"name": "peerAddress",
						"deco": "xFNbNdNfZAya",
						"endchar": 87,
						"endline": 534
					},
					{
						"line": 535,
						"kind": "function",
						"char": 27,
						"name": "localAddress",
						"deco": "xFNbNdNfZS4vibe4core3net14NetworkAddress",
						"endchar": 2,
						"endline": 541
					},
					{
						"line": 542,
						"kind": "function",
						"char": 27,
						"name": "remoteAddress",
						"deco": "xFNbNdNfZS4vibe4core3net14NetworkAddress",
						"endchar": 2,
						"endline": 548
					},
					{
						"line": 549,
						"kind": "function",
						"char": 17,
						"name": "connected",
						"deco": "xFNbNdNfZb",
						"endchar": 2,
						"endline": 554
					},
					{
						"line": 555,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 50,
						"endline": 555
					},
					{
						"line": 557,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 2,
						"endline": 566
					},
					{
						"line": 568,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 73,
						"endline": 568
					},
					{
						"line": 570,
						"kind": "function",
						"char": 7,
						"name": "close",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 579
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"default": "max()",
								"name": "timeout"
							}
						],
						"line": 581,
						"kind": "function",
						"originalType": "@safe bool(Duration timeout = Duration.max)",
						"char": 7,
						"name": "waitForData",
						"deco": "FNfS4core4time8DurationZb",
						"endchar": 2,
						"endline": 584
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"default": "max()",
								"name": "timeout"
							}
						],
						"line": 586,
						"kind": "function",
						"originalType": "@safe WaitForDataStatus(Duration timeout = Duration.max)",
						"char": 20,
						"name": "waitForDataEx",
						"deco": "FNfS4core4time8DurationZE4vibeQBa3net17WaitForDataStatus",
						"endchar": 2,
						"endline": 628
					},
					{
						"constraint": "is(typeof(()\n{\nread_ready_callback(true);\n}\n()))",
						"parameters": [
							{
								"kind": "type",
								"name": "CALLABLE"
							}
						],
						"line": 654,
						"kind": "template",
						"char": 25,
						"members": [
							{
								"parameters": [
									{
										"type": "CALLABLE",
										"name": "read_ready_callback"
									},
									{
										"type": "Duration",
										"default": "Duration.max",
										"name": "timeout"
									}
								],
								"line": 654,
								"kind": "function",
								"char": 25,
								"name": "waitForDataAsync",
								"type": "WaitForDataAsyncStatus(CALLABLE read_ready_callback, Duration timeout = Duration.max)",
								"endchar": 2,
								"endline": 716
							}
						],
						"name": "waitForDataAsync",
						"comment": " Waits asynchronously for new data to arrive.\n\n\t\tThis function can be used to detach the `TCPConnection` from a\n\t\trunning task while waiting for data, so that the associated memory\n\t\tresources are available for other operations.\n\n\t\tNote that `read_ready_callback` may be called from outside of a\n\t\ttask, so no blocking operations may be performed. Instead, an existing\n\t\ttask should be notified, or a new one started with `runTask`.\n\n\t\tParams:\n\t\t\tread_ready_callback = A callback taking a `bool` parameter that\n\t\t\t\tsignals the read-readiness of the connection\n\t\t\ttimeout = Optional timeout to limit the maximum wait time\n\n\t\tReturns:\n\t\t\tIf the read readiness can be determined immediately, it will be\n\t\t\treturned as `WaitForDataAsyncStatus.dataAvailable` or\n\t\t\t`WaitForDataAsyncStatus.noModeData` and the callback will not be\n\t\t\tinvoked. Otherwise `WaitForDataAsyncStatus.waiting` is returned\n\t\t\tand the callback will be invoked once the status can be\n\t\t\tdetermined or the specified timeout is reached.\n"
					},
					{
						"line": 718,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 81,
						"endline": 718
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "count"
							}
						],
						"line": 720,
						"kind": "function",
						"char": 7,
						"name": "skip",
						"deco": "FNfmZv",
						"endchar": 2,
						"endline": 731
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"line": 733,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 757
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							}
						],
						"line": 759,
						"kind": "function",
						"char": 7,
						"name": "read",
						"deco": "FNfMAhZv",
						"endchar": 90,
						"endline": 759
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"line": 761,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 778
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"line": 780,
						"kind": "function",
						"originalType": "@safe void(in ubyte[] bytes)",
						"char": 7,
						"name": "write",
						"deco": "FNfxAhZv",
						"endchar": 95,
						"endline": 780
					},
					{
						"parameters": [
							{
								"deco": "xAa",
								"name": "bytes"
							}
						],
						"line": 781,
						"kind": "function",
						"originalType": "@safe void(in char[] bytes)",
						"char": 7,
						"name": "write",
						"deco": "FNfxAaZv",
						"endchar": 66,
						"endline": 781
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							}
						],
						"line": 782,
						"kind": "function",
						"char": 7,
						"name": "write",
						"deco": "FNfC4vibe4core6stream11InputStreamZv",
						"endchar": 53,
						"endline": 782
					},
					{
						"line": 784,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 786
					},
					{
						"line": 787,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 19,
						"endline": 787
					},
					{
						"constraint": "isInputStream!InputStream",
						"parameters": [
							{
								"kind": "type",
								"name": "InputStream"
							}
						],
						"line": 788,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "InputStream",
										"name": "stream"
									},
									{
										"deco": "m",
										"default": "0",
										"name": "nbytes"
									}
								],
								"line": 788,
								"kind": "function",
								"char": 7,
								"name": "write",
								"type": "void(InputStream stream, ulong nbytes = 0)",
								"endchar": 127,
								"endline": 788
							}
						],
						"name": "write"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core3net13TCPConnection",
								"name": "p"
							}
						],
						"line": 483,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS4vibe4core3net13TCPConnectionZQBf"
					}
				],
				"comment": "\tRepresents a single TCP connection.\n",
				"name": "TCPConnection"
			},
			{
				"line": 823,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 824,
						"name": "noMoreData"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 825,
						"name": "dataAvailable"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 826,
						"name": "waiting"
					}
				],
				"name": "WaitForDataAsyncStatus",
				"baseDeco": "i",
				"comment": " Represents possible return values for\n\tTCPConnection.waitForDataAsync.\n"
			},
			{
				"line": 829,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 830,
						"name": "dataAvailable"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 831,
						"name": "noMoreData"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 832,
						"name": "timeout"
					}
				],
				"name": "WaitForDataStatus",
				"baseDeco": "i"
			},
			{
				"kind": "mixin",
				"char": 1,
				"line": 850,
				"name": "validateConnectionStream!(TCPConnection)"
			},
			{
				"kind": "struct",
				"line": 879,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "S9eventcore6driver20StreamListenSocketFD",
								"name": "socket"
							}
						],
						"line": 892,
						"kind": "constructor",
						"originalType": "ref @safe (StreamListenSocketFD socket)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfS9eventcore6driver20StreamListenSocketFDZS4vibe4core3net11TCPListener",
						"endchar": 2,
						"endline": 897
					},
					{
						"constraint": "is(T == bool)",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 899,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 899,
								"kind": "function",
								"char": 7,
								"name": "opCast",
								"type": "const nothrow bool()",
								"endchar": 103,
								"endline": 899
							}
						],
						"name": "opCast"
					},
					{
						"line": 902,
						"kind": "function",
						"char": 27,
						"name": "bindAddress",
						"deco": "FNdNfZS4vibe4core3net14NetworkAddress",
						"endchar": 2,
						"endline": 909,
						"comment": "The local address at which TCP connections are accepted.\n"
					},
					{
						"line": 912,
						"kind": "function",
						"char": 7,
						"name": "stopListening",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 918,
						"comment": "Stops listening and closes the socket.\n"
					}
				],
				"comment": "\tRepresents a listening TCP socket.\n",
				"name": "TCPListener"
			},
			{
				"kind": "struct",
				"line": 925,
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 9,
						"members": [
							{
								"storageClass": [
									"@safe"
								],
								"line": 927,
								"kind": "variable",
								"char": 8,
								"name": "canBroadcast",
								"deco": "b",
								"offset": 0
							},
							{
								"storageClass": [
									"shared",
									"@safe"
								],
								"line": 928,
								"kind": "variable",
								"originalType": "shared(NativeEventDriver)",
								"char": 29,
								"name": "driver",
								"deco": "OC9eventcore7drivers5posix6driver__T16PosixEventDriverHTCQCdQBwQBr5epoll14EpollEventLoopZQCb",
								"offset": 8
							}
						],
						"line": 926,
						"name": "Context"
					},
					{
						"line": 952,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 956
					},
					{
						"constraint": "is(T == bool)",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 958,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 958,
								"kind": "function",
								"char": 7,
								"name": "opCast",
								"type": "const nothrow bool()",
								"endchar": 99,
								"endline": 958
							}
						],
						"name": "opCast"
					},
					{
						"line": 962,
						"kind": "function",
						"char": 19,
						"name": "bindAddress",
						"deco": "xFNdNfZAya",
						"endchar": 73,
						"endline": 962,
						"comment": " Returns the address to which the UDP socket is bound.\n"
					},
					{
						"line": 966,
						"kind": "function",
						"char": 17,
						"name": "canBroadcast",
						"deco": "xFNdNfZb",
						"endchar": 71,
						"endline": 966,
						"comment": " Determines if the socket is allowed to send to broadcast addresses.\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "val"
							}
						],
						"line": 968,
						"kind": "function",
						"char": 17,
						"name": "canBroadcast",
						"deco": "FNdNfbZv",
						"endchar": 167,
						"endline": 968,
						"comment": "ditto\n"
					},
					{
						"line": 971,
						"kind": "function",
						"char": 27,
						"name": "localAddress",
						"deco": "xFNbNdNfZS4vibe4core3net14NetworkAddress",
						"endchar": 2,
						"endline": 978,
						"comment": "The local/bind address of the underlying socket.\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "loop"
							}
						],
						"line": 985,
						"kind": "function",
						"char": 17,
						"name": "multicastLoopback",
						"deco": "FNdNfbZv",
						"endchar": 2,
						"endline": 989,
						"comment": " Set IP multicast loopback mode.\n\n\t\tThis is on by default. All packets send will also loopback if enabled.\n\t\tUseful if more than one application is running on same host and both need each other's packets.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"storageClass": [
									"ref"
								],
								"name": "multiaddr"
							},
							{
								"deco": "k",
								"default": "0u",
								"name": "interface_index"
							}
						],
						"line": 997,
						"kind": "function",
						"originalType": "@safe void(ref NetworkAddress multiaddr, uint interface_index = 0)",
						"char": 7,
						"name": "addMembership",
						"deco": "FNfKS4vibe4core3net14NetworkAddresskZv",
						"endchar": 2,
						"endline": 1002,
						"comment": " Become a member of an IP multicast group.\n\n\t\tThe multiaddr parameter should be in the range 239.0.0.0-239.255.255.255.\n\t\tSee https://www.iana.org/assignments/multicast-addresses/multicast-addresses.xml#multicast-addresses-12\n\t\tand https://www.iana.org/assignments/ipv6-multicast-addresses/ipv6-multicast-addresses.xhtml\n"
					},
					{
						"line": 1006,
						"kind": "function",
						"char": 7,
						"name": "close",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 1013,
						"comment": " Stops listening for datagrams and frees all resources.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"line": 1020,
						"kind": "function",
						"char": 7,
						"name": "connect",
						"deco": "FNfAyatZv",
						"endchar": 2,
						"endline": 1025,
						"comment": " Locks the UDP connection to a certain peer.\n\n\t\tOnce connected, the UDPConnection can only communicate with the specified peer.\n\t\tOtherwise communication with any reachable peer is possible.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"name": "address"
							}
						],
						"line": 1027,
						"kind": "function",
						"char": 7,
						"name": "connect",
						"deco": "FNfS4vibe4core3net14NetworkAddressZv",
						"endchar": 2,
						"endline": 1031,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "data"
							},
							{
								"deco": "xPS4vibe4core3net14NetworkAddress",
								"default": "null",
								"name": "peer_address"
							}
						],
						"line": 1038,
						"kind": "function",
						"originalType": "@safe void(in ubyte[] data, in NetworkAddress* peer_address = null)",
						"char": 7,
						"name": "send",
						"deco": "FNfxAhxPS4vibe4core3net14NetworkAddressZv",
						"endchar": 2,
						"endline": 1062,
						"comment": " Sends a single packet.\n\n\t\tIf peer_address is given, the packet is send to that address. Otherwise the packet\n\t\twill be sent to the address specified by a call to connect().\n"
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"default": "null",
								"name": "buf"
							},
							{
								"deco": "PS4vibe4core3net14NetworkAddress",
								"default": "null",
								"name": "peer_address"
							}
						],
						"line": 1071,
						"kind": "function",
						"char": 10,
						"name": "recv",
						"deco": "FNfAhPS4vibe4core3net14NetworkAddressZQBj",
						"endchar": 2,
						"endline": 1074,
						"comment": " Receives a single packet.\n\n\t\tIf a buffer is given, it must be large enough to hold the full packet.\n\n\t\tThe timeout overload will throw an Exception if no data arrives before the\n\t\tspecified duration has elapsed.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							},
							{
								"deco": "Ah",
								"default": "null",
								"name": "buf"
							},
							{
								"deco": "PS4vibe4core3net14NetworkAddress",
								"default": "null",
								"name": "peer_address"
							}
						],
						"line": 1076,
						"kind": "function",
						"char": 10,
						"name": "recv",
						"deco": "FNfS4core4time8DurationAhPS4vibeQBc3net14NetworkAddressZQBh",
						"endchar": 2,
						"endline": 1103,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core3net13UDPConnection",
								"name": "p"
							}
						],
						"line": 925,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS4vibe4core3net13UDPConnectionZQBf"
					}
				],
				"comment": "\tRepresents a bound and possibly 'connected' UDP socket.\n",
				"name": "UDPConnection"
			},
			{
				"line": 1110,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 1112,
						"char": 2,
						"value": "0",
						"comment": "Don't enable any particular option\n",
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 1114,
						"char": 2,
						"value": "1",
						"comment": "Deprecated: causes incoming connections to be distributed across the thread pool\n",
						"name": "distribute"
					},
					{
						"kind": "enum member",
						"line": 1116,
						"char": 2,
						"value": "2",
						"comment": "Disables automatic closing of the connection when the connection callback exits\n",
						"name": "disableAutoClose"
					},
					{
						"kind": "enum member",
						"line": 1120,
						"char": 2,
						"value": "4",
						"comment": " Enable port reuse on linux kernel version >=3.9, do nothing on other OS\n\t\tDoes not affect libasync driver because it is always enabled by libasync.\n",
						"name": "reusePort"
					},
					{
						"kind": "enum member",
						"line": 1122,
						"char": 2,
						"value": "8",
						"comment": "Enable address reuse\n",
						"name": "reuseAddress"
					},
					{
						"kind": "enum member",
						"line": 1124,
						"char": 2,
						"value": "8",
						"comment": "\n",
						"name": "defaults"
					}
				],
				"name": "TCPListenOptions",
				"baseDeco": "i",
				"comment": "\tFlags to control the behavior of listenTCP.\n"
			},
			{
				"line": 1149,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							}
						],
						"line": 1151,
						"kind": "constructor",
						"originalType": "pure nothrow @safe (string message, Throwable next, string file = __FILE__, size_t line = __LINE__)",
						"char": 21,
						"name": "this",
						"deco": "FNaNbNfAyaC6object9ThrowableQvmZC4vibe4core3net20ReadTimeoutException",
						"endchar": 2,
						"endline": 1157
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 1159,
						"kind": "constructor",
						"originalType": "pure nothrow @safe (string message, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 21,
						"name": "this",
						"deco": "FNaNbNfAyaQdmC6object9ThrowableZC4vibe4core3net20ReadTimeoutException",
						"endchar": 2,
						"endline": 1165
					}
				],
				"name": "ReadTimeoutException",
				"comment": "Thrown by TCPConnection read-alike operations when timeout is reached.\n"
			}
		],
		"comment": "\tTCP/UDP connection and server handling.\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
		"name": "vibe.core.net"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/path.d",
		"members": [
			{
				"constraint": "isInstanceOf!(GenericPath, Path)",
				"parameters": [
					{
						"kind": "type",
						"name": "Path"
					}
				],
				"line": 27,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "Path",
								"name": "path"
							},
							{
								"type": "Path",
								"name": "base_path"
							}
						],
						"line": 27,
						"kind": "function",
						"char": 6,
						"name": "relativeTo",
						"type": "@safe Path(Path path, Path base_path)",
						"endchar": 1,
						"endline": 75
					}
				],
				"name": "relativeTo",
				"comment": " Computes the relative path from `base_path` to this path.\n\n\tParams:\n\t\tpath = The destination path\n\t\tbase_path = The path from which the relative path starts\n\n\tSee_also: `relativeToWeb`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L78_C1)\n---\nimport std.array : array;\nimport std.conv : to;\nassert(PosixPath(\"/some/path\").relativeTo(PosixPath(\"/\")) == PosixPath(\"some/path\"));\nassert(PosixPath(\"/some/path/\").relativeTo(PosixPath(\"/some/other/path/\")) == PosixPath(\"../../path/\"));\nassert(PosixPath(\"/some/path/\").relativeTo(PosixPath(\"/some/other/path\")) == PosixPath(\"../../path/\"));\n\nassert(WindowsPath(\"C:\\\\some\\\\path\").relativeTo(WindowsPath(\"C:\\\\\")) == WindowsPath(\"some\\\\path\"));\nassert(WindowsPath(\"C:\\\\some\\\\path\\\\\").relativeTo(WindowsPath(\"C:\\\\some\\\\other\\\\path/\")) == WindowsPath(\"..\\\\..\\\\path\\\\\"));\nassert(WindowsPath(\"C:\\\\some\\\\path\\\\\").relativeTo(WindowsPath(\"C:\\\\some\\\\other\\\\path\")) == WindowsPath(\"..\\\\..\\\\path\\\\\"));\n\nassert(WindowsPath(\"\\\\\\\\server\\\\share\\\\some\\\\path\").relativeTo(WindowsPath(\"\\\\\\\\server\\\\share\\\\\")) == WindowsPath(\"some\\\\path\"));\nassert(WindowsPath(\"\\\\\\\\server\\\\share\\\\some\\\\path\\\\\").relativeTo(WindowsPath(\"\\\\\\\\server\\\\share\\\\some\\\\other\\\\path/\")) == WindowsPath(\"..\\\\..\\\\path\\\\\"));\nassert(WindowsPath(\"\\\\\\\\server\\\\share\\\\some\\\\path\\\\\").relativeTo(WindowsPath(\"\\\\\\\\server\\\\share\\\\some\\\\other\\\\path\")) == WindowsPath(\"..\\\\..\\\\path\\\\\"));\n\nassert(WindowsPath(\"C:\\\\some\\\\path\").relativeTo(WindowsPath(\"D:\\\\\")) == WindowsPath(\"C:\\\\some\\\\path\"));\nassert(WindowsPath(\"C:\\\\some\\\\path\\\\\").relativeTo(WindowsPath(\"\\\\\\\\server\\\\share\")) == WindowsPath(\"C:\\\\some\\\\path\\\\\"));\nassert(WindowsPath(\"\\\\\\\\server\\\\some\\\\path\\\\\").relativeTo(WindowsPath(\"C:\\\\some\\\\other\\\\path\")) == WindowsPath(\"\\\\\\\\server\\\\some\\\\path\\\\\"));\nassert(WindowsPath(\"\\\\\\\\server\\\\some\\\\path\\\\\").relativeTo(WindowsPath(\"\\\\\\\\otherserver\\\\path\")) == WindowsPath(\"\\\\\\\\server\\\\some\\\\path\\\\\"));\nassert(WindowsPath(\"\\\\some\\\\path\\\\\").relativeTo(WindowsPath(\"\\\\other\\\\path\")) == WindowsPath(\"..\\\\..\\\\some\\\\path\\\\\"));\n\nassert(WindowsPath(\"\\\\\\\\server\\\\share\\\\path1\").relativeTo(WindowsPath(\"\\\\\\\\server\\\\share\\\\path2\")) == WindowsPath(\"..\\\\path1\"));\nassert(WindowsPath(\"\\\\\\\\server\\\\share\\\\path1\").relativeTo(WindowsPath(\"\\\\\\\\server\\\\share2\\\\path2\")) == WindowsPath(\"\\\\\\\\server\\\\share\\\\path1\"));\nassert(WindowsPath(\"\\\\\\\\server\\\\share\\\\path1\").relativeTo(WindowsPath(\"\\\\\\\\server2\\\\share2\\\\path2\")) == WindowsPath(\"\\\\\\\\server\\\\share\\\\path1\"));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L78_C1)\n"
			},
			{
				"constraint": "isInstanceOf!(GenericPath, Path)",
				"parameters": [
					{
						"kind": "type",
						"name": "Path"
					}
				],
				"line": 159,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "Path",
								"name": "path"
							},
							{
								"type": "Path",
								"name": "base_path"
							}
						],
						"line": 159,
						"kind": "function",
						"char": 6,
						"name": "relativeToWeb",
						"type": "@safe Path(Path path, Path base_path)",
						"endchar": 1,
						"endline": 169
					}
				],
				"name": "relativeToWeb",
				"comment": " Computes the relative path to this path from `base_path` using web path rules.\n\n\tThe difference to `relativeTo` is that a path not ending in a slash\n\twill not be considered as a path to a directory and the parent path\n\twill instead be used.\n\n\tParams:\n\t\tpath = The destination path\n\t\tbase_path = The path from which the relative path starts\n\n\tSee_also: `relativeTo`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "P"
					}
				],
				"line": 181,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "P",
								"name": "path"
							}
						],
						"line": 181,
						"kind": "function",
						"char": 8,
						"name": "toNativeString",
						"type": "string(P path)",
						"endchar": 1,
						"endline": 184
					}
				],
				"name": "toNativeString",
				"comment": "\n\n Converts a path to its system native string representation.\n"
			},
			{
				"kind": "alias",
				"line": 188,
				"char": 1,
				"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBs",
				"comment": "Represents a path on Windows operating systems.\n",
				"name": "WindowsPath"
			},
			{
				"kind": "alias",
				"line": 191,
				"char": 1,
				"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
				"comment": "Represents a path on Unix/Posix systems.\n",
				"name": "PosixPath"
			},
			{
				"kind": "alias",
				"line": 194,
				"char": 1,
				"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd14InetPathFormatZQBp",
				"comment": "Represents a path as part of an URI.\n",
				"name": "InetPath"
			},
			{
				"kind": "alias",
				"line": 198,
				"char": 6,
				"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
				"comment": "The path type native to the target operating system.\n",
				"name": "NativePath"
			},
			{
				"kind": "alias",
				"line": 197,
				"char": 19,
				"type": "WindowsPath",
				"comment": "The path type native to the target operating system.\n",
				"name": "NativePath"
			},
			{
				"storageClass": [
					"deprecated"
				],
				"line": 201,
				"kind": "alias",
				"char": 1,
				"name": "Path",
				"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq"
			},
			{
				"storageClass": [
					"deprecated"
				],
				"line": 203,
				"kind": "alias",
				"char": 1,
				"name": "PathEntry",
				"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq7Segment"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					}
				],
				"line": 206,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "F",
								"char": 2,
								"line": 208,
								"name": "Format"
							},
							{
								"kind": "struct",
								"line": 212,
								"char": 9,
								"members": [
									{
										"kind": "variable",
										"type": "string",
										"char": 11,
										"line": 216,
										"name": "m_name"
									},
									{
										"kind": "variable",
										"type": "string",
										"char": 11,
										"line": 217,
										"name": "m_encodedName"
									},
									{
										"line": 218,
										"kind": "variable",
										"char": 9,
										"name": "m_separator",
										"deco": "a",
										"init": "0"
									},
									{
										"parameters": [
											{
												"type": "string",
												"name": "name"
											},
											{
												"deco": "a",
												"default": "'\\x00'",
												"name": "separator"
											}
										],
										"line": 233,
										"kind": "constructor",
										"char": 3,
										"name": "this",
										"type": "(string name, char separator = '\\x00')",
										"endchar": 3,
										"endline": 244,
										"comment": " Constructs a new path segment including an optional trailing\n\t\t\tseparator.\n\n\t\t\tParams:\n\t\t\t\tname = The raw (unencoded) name of the path segment\n\t\t\t\tseparator = Optional trailing path separator (e.g. `'/'`)\n\n\t\t\tThrows:\n\t\t\t\tA `PathValidationException` is thrown if the name contains\n\t\t\t\tcharacters that are invalid for the path type. In particular,\n\t\t\t\tany path separator characters may not be part of the name.\n"
									},
									{
										"storageClass": [
											"static"
										],
										"parameters": [
											{
												"type": "string",
												"name": "name"
											},
											{
												"deco": "a",
												"default": "'\\x00'",
												"name": "separator"
											}
										],
										"line": 255,
										"kind": "function",
										"char": 18,
										"name": "fromTrustedString",
										"type": "pure nothrow @nogc Segment(string name, char separator = '\\x00')",
										"endchar": 3,
										"endline": 265,
										"comment": " Constructs a path segment without performing validation.\n\n\t\t\tNote that in debug builds, there are still assertions in place\n\t\t\tthat verify that the provided values are valid.\n\n\t\t\tParams:\n\t\t\t\tname = The raw (unencoded) name of the path segment\n\t\t\t\tseparator = Optional trailing path separator (e.g. `'/'`)\n"
									},
									{
										"storageClass": [
											"static"
										],
										"parameters": [
											{
												"type": "string",
												"name": "name"
											}
										],
										"line": 268,
										"kind": "function",
										"char": 18,
										"name": "validateFilename",
										"type": "Segment(string name)",
										"endchar": 3,
										"endline": 271
									},
									{
										"line": 274,
										"kind": "function",
										"char": 20,
										"name": "name",
										"type": "const nothrow @nogc @property string()",
										"endchar": 64,
										"endline": 274,
										"comment": "The (file/directory) name of the path segment.\n"
									},
									{
										"line": 276,
										"kind": "function",
										"char": 18,
										"name": "separator",
										"type": "const nothrow @nogc @property char()",
										"endchar": 72,
										"endline": 276,
										"comment": "The trailing separator (e.g. `'/'`) or `'\\0'`.\n"
									},
									{
										"parameters": [
											{
												"deco": "a",
												"name": "ch"
											}
										],
										"line": 278,
										"kind": "function",
										"char": 18,
										"name": "separator",
										"type": "@property void(char ch)",
										"endchar": 3,
										"endline": 282,
										"comment": "ditto\n"
									},
									{
										"line": 284,
										"kind": "function",
										"char": 18,
										"name": "hasSeparator",
										"type": "const nothrow @nogc @property bool()",
										"endchar": 83,
										"endline": 284,
										"comment": "Returns `true` $(I iff) the segment has a trailing path separator.\n"
									},
									{
										"line": 287,
										"kind": "function",
										"char": 10,
										"name": "toString",
										"type": "const nothrow @nogc string()",
										"endchar": 58,
										"endline": 287
									},
									{
										"parameters": [
											{
												"kind": "type",
												"type": "GenericPath!F.Segment",
												"name": "T"
											},
											{
												"kind": "type",
												"name": "F"
											}
										],
										"line": 299,
										"kind": "template",
										"char": 25,
										"members": [
											{
												"line": 299,
												"kind": "function",
												"char": 25,
												"name": "opCast",
												"type": "GenericPath!F.Segment()",
												"endchar": 3,
												"endline": 307
											}
										],
										"name": "opCast",
										"comment": " Converts the segment to another path type.\n\n\t\t\tThe segment name will be re-validated during the conversion. The\n\t\t\tseparator, if any, will be adopted or replaced by the default\n\t\t\tseparator of the target path type.\n\n\t\t\tThrows:\n\t\t\t\tA `PathValidationException` is thrown if the segment name cannot\n\t\t\t\tbe represented in the target path format.\n"
									},
									{
										"parameters": [
											{
												"type": "Segment",
												"name": "other"
											}
										],
										"line": 310,
										"kind": "function",
										"char": 8,
										"name": "opEquals",
										"type": "const nothrow @nogc bool(Segment other)",
										"endchar": 129,
										"endline": 310,
										"comment": "Compares two path segment names\n"
									},
									{
										"parameters": [
											{
												"type": "string",
												"name": "name"
											}
										],
										"line": 312,
										"kind": "function",
										"char": 8,
										"name": "opEquals",
										"type": "const nothrow @nogc bool(string name)",
										"endchar": 78,
										"endline": 312,
										"comment": "ditto\n"
									}
								],
								"comment": " A single path segment.\n",
								"name": "Segment"
							},
							{
								"kind": "struct",
								"line": 317,
								"char": 9,
								"members": [
									{
										"kind": "variable",
										"type": "string",
										"char": 11,
										"line": 321,
										"name": "m_path"
									},
									{
										"kind": "variable",
										"type": "ReturnType!(Format.decodeSegment!Segment)",
										"char": 46,
										"line": 322,
										"name": "m_fronts"
									},
									{
										"parameters": [
											{
												"type": "string",
												"name": "path"
											}
										],
										"line": 325,
										"kind": "constructor",
										"char": 11,
										"name": "this",
										"type": "(string path)",
										"endchar": 3,
										"endline": 336
									},
									{
										"line": 338,
										"kind": "function",
										"char": 18,
										"name": "empty",
										"type": "const nothrow @nogc @property bool()",
										"endchar": 93,
										"endline": 338
									},
									{
										"line": 340,
										"kind": "function",
										"char": 23,
										"name": "save",
										"type": "@property PathRange()",
										"endchar": 45,
										"endline": 340
									},
									{
										"line": 342,
										"kind": "function",
										"char": 21,
										"name": "front",
										"type": "@property Segment()",
										"endchar": 54,
										"endline": 342
									},
									{
										"line": 344,
										"kind": "function",
										"char": 8,
										"name": "popFront",
										"type": "nothrow void()",
										"endchar": 3,
										"endline": 350
									},
									{
										"line": 352,
										"kind": "function",
										"char": 16,
										"name": "readFront",
										"type": "void()",
										"endchar": 3,
										"endline": 358
									}
								],
								"comment": " Represents a path as an forward range of `Segment`s.\n",
								"name": "PathRange"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 10,
								"line": 362,
								"name": "m_path"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 366,
								"kind": "variable",
								"char": 12,
								"name": "defaultSeparator",
								"deco": "a",
								"init": "Format.defaultSeparator",
								"comment": "The default path segment separator character.\n"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "p"
									}
								],
								"line": 374,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(string p)",
								"endchar": 2,
								"endline": 379,
								"comment": " Constructs a path from its string representation.\n\n\t\tThrows:\n\t\t\tA `PathValidationException` is thrown if the given path string\n\t\t\tis not valid.\n"
							},
							{
								"parameters": [
									{
										"type": "Segment",
										"name": "segment"
									}
								],
								"line": 386,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(Segment segment)",
								"endchar": 2,
								"endline": 390,
								"comment": " Constructs a path from a single path segment.\n\n\t\tThis is equivalent to calling the range based constructor with a\n\t\tsingle-element range.\n"
							},
							{
								"constraint": "isInputRange!R && is(ElementType!R : Segment)",
								"parameters": [
									{
										"kind": "type",
										"name": "R"
									}
								],
								"line": 398,
								"kind": "template",
								"char": 2,
								"members": [
									{
										"parameters": [
											{
												"type": "R",
												"name": "segments"
											}
										],
										"line": 398,
										"kind": "constructor",
										"char": 2,
										"name": "this",
										"type": "(R segments)",
										"endchar": 2,
										"endline": 405
									}
								],
								"name": "this",
								"comment": " Constructs a path from an input range of `Segment`s.\n\n\t\tThrows:\n\t\t\tSince path segments are pre-validated, this constructor does not\n\t\t\tthrow an exception.\n"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "string",
										"name": "p"
									}
								],
								"line": 411,
								"kind": "function",
								"char": 21,
								"name": "fromString",
								"type": "GenericPath(string p)",
								"endchar": 2,
								"endline": 414,
								"comment": " Constructs a path from its string representation.\n\n\t\tThis is equivalent to calling the string based constructor.\n"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "string",
										"name": "p"
									}
								],
								"line": 422,
								"kind": "function",
								"char": 21,
								"name": "fromTrustedString",
								"type": "nothrow @nogc GenericPath(string p)",
								"endchar": 2,
								"endline": 428,
								"comment": " Constructs a path from its string representation, skipping the\n\t\tvalidation.\n\n\t\tNote that it is required to pass a pre-validated path string\n\t\tto this function. Debug builds will enforce this with an assertion.\n"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"deco": "w",
										"name": "ch"
									}
								],
								"line": 431,
								"kind": "function",
								"char": 14,
								"name": "isSeparator",
								"type": "bool(dchar ch)",
								"endchar": 92,
								"endline": 431,
								"comment": "Tests if a certain character is a path segment separator.\n"
							},
							{
								"line": 434,
								"kind": "function",
								"char": 17,
								"name": "empty",
								"type": "const nothrow @nogc @property bool()",
								"endchar": 74,
								"endline": 434,
								"comment": "Tests if the path is represented by an empty string.\n"
							},
							{
								"line": 437,
								"kind": "function",
								"char": 17,
								"name": "absolute",
								"type": "const nothrow @nogc @property bool()",
								"endchar": 102,
								"endline": 437,
								"comment": "Tests if the path is absolute.\n"
							},
							{
								"line": 440,
								"kind": "function",
								"char": 17,
								"name": "endsWithSlash",
								"type": "const nothrow @nogc @property bool()",
								"endchar": 116,
								"endline": 440,
								"comment": "Determines whether the path ends with a path separator (i.e. represents a folder specifically).\n"
							},
							{
								"parameters": [
									{
										"deco": "b",
										"name": "v"
									}
								],
								"line": 442,
								"kind": "function",
								"char": 17,
								"name": "endsWithSlash",
								"type": "nothrow @property void(bool v)",
								"endchar": 2,
								"endline": 447,
								"comment": "ditto\n"
							},
							{
								"line": 450,
								"kind": "function",
								"char": 22,
								"name": "bySegment",
								"type": "const @property PathRange()",
								"endchar": 68,
								"endline": 450,
								"comment": "Iterates over the path by `Segment`.\n"
							},
							{
								"line": 453,
								"kind": "function",
								"char": 20,
								"name": "head",
								"type": "const @property Segment()",
								"endchar": 2,
								"endline": 462,
								"comment": "Returns the trailing segment of the path.\n"
							},
							{
								"line": 466,
								"kind": "function",
								"char": 7,
								"name": "hasParentPath",
								"type": "const @nogc bool()",
								"endchar": 2,
								"endline": 470,
								"comment": " Determines if the `parentPath` property is valid.\n"
							},
							{
								"line": 478,
								"kind": "function",
								"char": 14,
								"name": "parentPath",
								"type": "const @nogc GenericPath()",
								"endchar": 2,
								"endline": 484,
								"comment": " Returns a prefix of this path, where the last segment has been dropped.\n\n\t\tThrows:\n\t\t\tAn `Exception` is thrown if this path has no parent path. Use\n\t\t\t`hasParentPath` to test this upfront.\n"
							},
							{
								"line": 502,
								"kind": "function",
								"char": 7,
								"name": "normalize",
								"type": "void()",
								"endchar": 2,
								"endline": 528,
								"comment": " Removes any redundant path segments and replaces all separators by the\n\t\tdefault one.\n\n\t\tThe resulting path representation is suitable for basic semantic\n\t\tcomparison to other normalized paths.\n\n\t\tNote that there are still ways for different normalized paths to\n\t\trepresent the same file. Examples of this are the tilde shortcut to the\n\t\thome directory on Unix and Linux operating systems, symbolic or hard\n\t\tlinks, and possibly environment variables are examples of this.\n\n\t\tThrows:\n\t\t\tThrows an `Exception` if an absolute path contains parent directory\n\t\t\tsegments (\"..\") that lead to a path that is a parent path of the\n\t\t\troot path.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L531_C2)\n---\nauto path = WindowsPath(\"C:\\\\test/foo/./bar///../baz\");\npath.normalize();\nassert(path.toString() == \"C:\\\\test\\\\foo\\\\baz\", path.toString());\n\npath = WindowsPath(\"foo/../../bar/\");\npath.normalize();\nassert(path.toString() == \"..\\\\bar\\\\\");\n}\n\n/// Returns the string representation of the path.\nstring toString() const nothrow @nogc { return m_path; \n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L531_C2)\n"
							},
							{
								"line": 542,
								"kind": "function",
								"char": 9,
								"name": "toString",
								"type": "const nothrow @nogc string()",
								"endchar": 57,
								"endline": 542,
								"comment": "Returns the string representation of the path.\n"
							},
							{
								"line": 545,
								"kind": "function",
								"char": 9,
								"name": "toHash",
								"type": "const nothrow @trusted size_t()",
								"endchar": 2,
								"endline": 549,
								"comment": "Computes a hash sum, enabling storage within associative arrays.\n"
							},
							{
								"parameters": [
									{
										"type": "GenericPath",
										"name": "other"
									}
								],
								"line": 557,
								"kind": "function",
								"char": 7,
								"name": "opEquals",
								"type": "const @nogc bool(GenericPath other)",
								"endchar": 85,
								"endline": 557,
								"comment": " Compares two path objects.\n\n\t\tNote that the exact string representation of the two paths will be\n\t\tcompared. To get a basic semantic comparison, the paths must be\n\t\tnormalized first.\n"
							},
							{
								"constraint": "isInstanceOf!(.GenericPath, P)",
								"parameters": [
									{
										"kind": "type",
										"name": "P"
									}
								],
								"line": 568,
								"kind": "template",
								"char": 4,
								"members": [
									{
										"line": 568,
										"kind": "function",
										"char": 4,
										"name": "opCast",
										"type": "const P()",
										"endchar": 2,
										"endline": 571
									}
								],
								"name": "opCast",
								"comment": " Converts the path to a different path format.\n\n\t\tThrows:\n\t\t\tA `PathValidationException` will be thrown if the path is not\n\t\t\trepresentable in the requested path format. This can happen\n\t\t\tespecially when converting Posix or Internet paths to windows paths,\n\t\t\tsince Windows paths cannot contain a number of characters that the\n\t\t\tother representations can, in theory.\n"
							},
							{
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"~\"",
										"name": "op"
									}
								],
								"line": 577,
								"kind": "template",
								"char": 14,
								"members": [
									{
										"parameters": [
											{
												"type": "string",
												"name": "subpath"
											}
										],
										"line": 577,
										"kind": "function",
										"char": 14,
										"name": "opBinary",
										"type": "const GenericPath(string subpath)",
										"endchar": 100,
										"endline": 577
									}
								],
								"name": "opBinary",
								"comment": " Concatenates two paths.\n\n\t\tThe right hand side must represent a relative path.\n"
							},
							{
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"~\"",
										"name": "op"
									}
								],
								"line": 579,
								"kind": "template",
								"char": 14,
								"members": [
									{
										"parameters": [
											{
												"type": "Segment",
												"name": "subpath"
											}
										],
										"line": 579,
										"kind": "function",
										"char": 14,
										"name": "opBinary",
										"type": "const GenericPath(Segment subpath)",
										"endchar": 101,
										"endline": 579
									}
								],
								"name": "opBinary",
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"~\"",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "F"
									}
								],
								"line": 581,
								"kind": "template",
								"char": 14,
								"members": [
									{
										"parameters": [
											{
												"type": "GenericPath!F.Segment",
												"name": "subpath"
											}
										],
										"line": 581,
										"kind": "function",
										"char": 14,
										"name": "opBinary",
										"type": "const GenericPath(GenericPath!F.Segment subpath)",
										"endchar": 120,
										"endline": 581
									}
								],
								"name": "opBinary",
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"~\"",
										"name": "op"
									}
								],
								"line": 583,
								"kind": "template",
								"char": 14,
								"members": [
									{
										"parameters": [
											{
												"type": "GenericPath",
												"name": "subpath"
											}
										],
										"line": 583,
										"kind": "function",
										"char": 14,
										"name": "opBinary",
										"type": "const nothrow GenericPath(GenericPath subpath)",
										"endchar": 2,
										"endline": 587
									}
								],
								"name": "opBinary",
								"comment": "ditto\n"
							},
							{
								"constraint": "!is(F == Format)",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"~\"",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "F"
									}
								],
								"line": 589,
								"kind": "template",
								"char": 14,
								"members": [
									{
										"parameters": [
											{
												"type": "GenericPath!F",
												"name": "subpath"
											}
										],
										"line": 589,
										"kind": "function",
										"char": 14,
										"name": "opBinary",
										"type": "const GenericPath(GenericPath!F subpath)",
										"endchar": 136,
										"endline": 589
									}
								],
								"name": "opBinary",
								"comment": "ditto\n"
							},
							{
								"constraint": "isInputRange!R && is(ElementType!R : Segment)",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"~\"",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "R"
									}
								],
								"line": 591,
								"kind": "template",
								"char": 14,
								"members": [
									{
										"parameters": [
											{
												"type": "R",
												"name": "entries"
											}
										],
										"line": 591,
										"kind": "function",
										"char": 14,
										"name": "opBinary",
										"type": "const nothrow GenericPath(R entries)",
										"endchar": 2,
										"endline": 595
									}
								],
								"name": "opBinary",
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"~\"",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 598,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"name": "op"
											}
										],
										"line": 598,
										"kind": "function",
										"char": 7,
										"name": "opOpAssign",
										"type": "void(T op)",
										"endchar": 64,
										"endline": 598
									}
								],
								"name": "opOpAssign",
								"comment": "Appends a relative path to this path.\n"
							},
							{
								"parameters": [
									{
										"type": "GenericPath",
										"name": "prefix"
									}
								],
								"line": 604,
								"kind": "function",
								"char": 7,
								"name": "startsWith",
								"type": "const nothrow bool(GenericPath prefix)",
								"endchar": 2,
								"endline": 607,
								"comment": " Tests whether the given path is a prefix of this path.\n\n\t\tAny path separators will be ignored during the comparison.\n"
							}
						],
						"line": 206,
						"name": "GenericPath"
					}
				],
				"name": "GenericPath",
				"comment": "Provides a common interface to operate on paths of various kinds.\n"
			},
			{
				"line": 756,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "text"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "757LU",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 757,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string text, string file = __FILE__, size_t line = cast(size_t)757, Throwable next = null)",
						"char": 2,
						"name": "this",
						"deco": "FNaNbNiNfAyaQdmC6object9ThrowableZC4vibe4core4path23PathValidationException",
						"endchar": 2,
						"endline": 761
					}
				],
				"name": "PathValidationException",
				"comment": "Thrown when an invalid string representation of a path is detected.\n"
			},
			{
				"kind": "struct",
				"line": 768,
				"char": 1,
				"members": [
					{
						"constraint": "isInputRange!I && isOutputRange!(O, char)",
						"parameters": [
							{
								"kind": "type",
								"name": "I"
							},
							{
								"kind": "type",
								"name": "O"
							}
						],
						"line": 769,
						"kind": "template",
						"char": 14,
						"members": [
							{
								"parameters": [
									{
										"type": "I",
										"name": "segments"
									},
									{
										"type": "O",
										"name": "dst"
									}
								],
								"line": 769,
								"kind": "function",
								"char": 14,
								"name": "toString",
								"type": "void(I segments, O dst)",
								"endchar": 2,
								"endline": 792
							}
						],
						"name": "toString"
					},
					{
						"storageClass": [
							"enum",
							"nothrow",
							"pure",
							"@safe"
						],
						"line": 814,
						"kind": "variable",
						"char": 7,
						"name": "defaultSeparator",
						"deco": "a",
						"init": "'\\x5c'"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "w",
								"name": "ch"
							}
						],
						"line": 816,
						"kind": "function",
						"char": 14,
						"name": "isSeparator",
						"deco": "FNaNbNiNfwZb",
						"endchar": 2,
						"endline": 820
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 822,
						"kind": "function",
						"char": 16,
						"name": "getAbsolutePrefix",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 837
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 857,
						"kind": "function",
						"char": 16,
						"name": "getFrontNode",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 863
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 876,
						"kind": "function",
						"char": 16,
						"name": "getBackNode",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 883
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"line": 896,
						"kind": "template",
						"char": 14,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "string",
										"name": "segment"
									}
								],
								"line": 896,
								"kind": "function",
								"char": 14,
								"name": "decodeSegment",
								"type": "(string segment)",
								"endchar": 2,
								"endline": 922
							}
						],
						"name": "decodeSegment"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 934,
						"kind": "function",
						"char": 16,
						"name": "validatePath",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 960
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "segment"
							}
						],
						"line": 962,
						"kind": "function",
						"char": 16,
						"name": "validateDecodedSegment",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 970
					}
				],
				"comment": " Implements Windows path semantics.\n\n\tSee_also: `WindowsPath`\n",
				"name": "WindowsPathFormat"
			},
			{
				"kind": "struct",
				"line": 991,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"kind": "type",
								"name": "I"
							},
							{
								"kind": "type",
								"name": "O"
							}
						],
						"line": 992,
						"kind": "template",
						"char": 14,
						"members": [
							{
								"parameters": [
									{
										"type": "I",
										"name": "segments"
									},
									{
										"type": "O",
										"name": "dst"
									}
								],
								"line": 992,
								"kind": "function",
								"char": 14,
								"name": "toString",
								"type": "void(I segments, O dst)",
								"endchar": 2,
								"endline": 1003
							}
						],
						"name": "toString"
					},
					{
						"storageClass": [
							"enum",
							"nothrow",
							"pure",
							"@safe"
						],
						"line": 1020,
						"kind": "variable",
						"char": 7,
						"name": "defaultSeparator",
						"deco": "a",
						"init": "'/'"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "w",
								"name": "ch"
							}
						],
						"line": 1022,
						"kind": "function",
						"char": 14,
						"name": "isSeparator",
						"deco": "FNaNbNiNfwZb",
						"endchar": 2,
						"endline": 1025
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 1027,
						"kind": "function",
						"char": 16,
						"name": "getAbsolutePrefix",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 1032
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 1043,
						"kind": "function",
						"char": 16,
						"name": "getFrontNode",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 1048
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 1058,
						"kind": "function",
						"char": 16,
						"name": "getBackNode",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 1065
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 1075,
						"kind": "function",
						"char": 16,
						"name": "validatePath",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 1081
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "segment"
							}
						],
						"line": 1083,
						"kind": "function",
						"char": 16,
						"name": "validateDecodedSegment",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 1091
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"line": 1098,
						"kind": "template",
						"char": 14,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "string",
										"name": "segment"
									}
								],
								"line": 1098,
								"kind": "function",
								"char": 14,
								"name": "decodeSegment",
								"type": "(string segment)",
								"endchar": 2,
								"endline": 1106
							}
						],
						"name": "decodeSegment"
					}
				],
				"comment": " Implements Unix/Linux path semantics.\n\n\tSee_also: `WindowsPath`\n",
				"name": "PosixPathFormat"
			},
			{
				"kind": "struct",
				"line": 1122,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"kind": "type",
								"name": "I"
							},
							{
								"kind": "type",
								"name": "O"
							}
						],
						"line": 1123,
						"kind": "template",
						"char": 14,
						"members": [
							{
								"parameters": [
									{
										"type": "I",
										"name": "segments"
									},
									{
										"type": "O",
										"name": "dst"
									}
								],
								"line": 1123,
								"kind": "function",
								"char": 14,
								"name": "toString",
								"type": "void(I segments, O dst)",
								"endchar": 2,
								"endline": 1150
							}
						],
						"name": "toString"
					},
					{
						"storageClass": [
							"enum",
							"nothrow",
							"pure",
							"@safe"
						],
						"line": 1166,
						"kind": "variable",
						"char": 7,
						"name": "defaultSeparator",
						"deco": "a",
						"init": "'/'"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "w",
								"name": "ch"
							}
						],
						"line": 1168,
						"kind": "function",
						"char": 14,
						"name": "isSeparator",
						"deco": "FNaNbNiNfwZb",
						"endchar": 2,
						"endline": 1171
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 1173,
						"kind": "function",
						"char": 16,
						"name": "getAbsolutePrefix",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 1178
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 1189,
						"kind": "function",
						"char": 16,
						"name": "getFrontNode",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 1194
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 1204,
						"kind": "function",
						"char": 16,
						"name": "getBackNode",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 1211
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 1221,
						"kind": "function",
						"char": 16,
						"name": "validatePath",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 1255
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "seg"
							}
						],
						"line": 1257,
						"kind": "function",
						"char": 16,
						"name": "validateDecodedSegment",
						"deco": "FNaNbNiNfAyaZQe",
						"endchar": 2,
						"endline": 1260
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"line": 1276,
						"kind": "template",
						"char": 14,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "string",
										"name": "segment"
									}
								],
								"line": 1276,
								"kind": "function",
								"char": 14,
								"name": "decodeSegment",
								"type": "(string segment)",
								"endchar": 2,
								"endline": 1312
							}
						],
						"name": "decodeSegment"
					}
				],
				"comment": " Implements URI/Internet path semantics.\n\n\tSee_also: `WindowsPath`\n",
				"name": "InetPathFormat"
			}
		],
		"comment": "\tContains routines for high level path handling.\n\n\tCopyright: © 2012-2018 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.core.path"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/process.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"selective": [
					"Pid",
					"Redirect"
				],
				"line": 10,
				"name": "std.process"
			},
			{
				"parameters": [
					{
						"deco": "C3std7process3Pid",
						"name": "pid"
					}
				],
				"line": 35,
				"kind": "function",
				"char": 9,
				"name": "adoptProcessID",
				"deco": "FNeC3std7process3PidZS4vibe4coreQy7Process",
				"endchar": 1,
				"endline": 38,
				"comment": "    Register a process with vibe for fibre-aware handling. This process can be\n    started from anywhere including external libraries or std.process.\n\n    Params:\n        pid = A Pid or OS process id\n"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "pid"
					}
				],
				"line": 41,
				"kind": "function",
				"char": 9,
				"name": "adoptProcessID",
				"deco": "FNfiZS4vibe4core7process7Process",
				"endchar": 1,
				"endline": 44,
				"comment": "ditto\n"
			},
			{
				"line": 51,
				"kind": "function",
				"originalType": "@property @safe NativePath()",
				"char": 22,
				"name": "userShell",
				"deco": "FNdNfZS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
				"endchar": 78,
				"endline": 51,
				"comment": "    Path to the user's preferred command interpreter.\n\n    See_Also: `nativeShell`\n"
			},
			{
				"storageClass": [
					"const",
					"@safe"
				],
				"line": 58,
				"kind": "variable",
				"originalType": "NativePath",
				"char": 18,
				"name": "nativeShell",
				"deco": "xS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
				"init": "GenericPath(\"/bin/sh\")",
				"comment": "    The platform specific native shell path.\n\n    See_Also: `userShell`\n"
			},
			{
				"line": 63,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 5,
						"value": "cast(ProcessConfig)0",
						"line": 64,
						"name": "none"
					},
					{
						"kind": "enum member",
						"char": 5,
						"value": "cast(ProcessConfig)1",
						"line": 65,
						"name": "newEnv"
					},
					{
						"kind": "enum member",
						"char": 5,
						"value": "cast(ProcessConfig)16",
						"line": 66,
						"name": "suppressConsole"
					},
					{
						"kind": "enum member",
						"char": 5,
						"value": "cast(ProcessConfig)64",
						"line": 67,
						"name": "detached"
					}
				],
				"name": "Config",
				"baseDeco": "E9eventcore6driver13ProcessConfig",
				"comment": "    Equivalent to `std.process.Config` except with less flag support\n"
			},
			{
				"parameters": [
					{
						"deco": "AAya",
						"storageClass": [
							"scope"
						],
						"name": "args"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E4vibe4core7process6Config",
						"default": "cast(Config)cast(ProcessConfig)0",
						"name": "config"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"storageClass": [
							"scope"
						],
						"default": "GenericPath(null)",
						"name": "workDir"
					}
				],
				"line": 78,
				"kind": "function",
				"originalType": "@trusted Process(scope string[] args, const string[string] env = null, Config config = Config.none, scope NativePath workDir = NativePath.init)",
				"char": 9,
				"name": "spawnProcess",
				"deco": "FNeMAAyaxHQfAyaE4vibe4core7process6ConfigMSQBbQz4path__T11GenericPathTSQCdQCbQBd15PosixPathFormatZQBqZSQDjQDhQDf7Process",
				"endchar": 1,
				"endline": 93,
				"comment": "    Equivalent to `std.process.spawnProcess`.\n\n    Returns:\n        A reference to the running process.\n\n    See_Also: `pipeProcess`, `execute`\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"storageClass": [
							"scope"
						],
						"name": "program"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E4vibe4core7process6Config",
						"default": "cast(Config)cast(ProcessConfig)0",
						"name": "config"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"storageClass": [
							"scope"
						],
						"default": "GenericPath(null)",
						"name": "workDir"
					}
				],
				"line": 96,
				"kind": "function",
				"originalType": "@safe Process(scope string program, const string[string] env = null, Config config = Config.none, scope NativePath workDir = NativePath.init)",
				"char": 9,
				"name": "spawnProcess",
				"deco": "FNfMAyaxHQfAyaE4vibe4core7process6ConfigMSQBbQz4path__T11GenericPathTSQCdQCbQBd15PosixPathFormatZQBqZSQDjQDhQDf7Process",
				"endchar": 1,
				"endline": 108,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"storageClass": [
							"scope"
						],
						"name": "command"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E4vibe4core7process6Config",
						"default": "cast(Config)cast(ProcessConfig)0",
						"name": "config"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"storageClass": [
							"scope"
						],
						"default": "GenericPath(null)",
						"name": "workDir"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"storageClass": [
							"scope"
						],
						"default": "nativeShell",
						"name": "shellPath"
					}
				],
				"line": 111,
				"kind": "function",
				"originalType": "@safe Process(scope string command, const string[string] env = null, Config config = Config.none, scope NativePath workDir = NativePath.init, scope NativePath shellPath = nativeShell)",
				"char": 9,
				"name": "spawnShell",
				"deco": "FNfMAyaxHQfAyaE4vibe4core7process6ConfigMSQBbQz4path__T11GenericPathTSQCdQCbQBd15PosixPathFormatZQBqMQCiZSQDnQDlQDj7Process",
				"endchar": 1,
				"endline": 123,
				"comment": "ditto\n"
			},
			{
				"kind": "struct",
				"line": 151,
				"char": 1,
				"members": [
					{
						"line": 176,
						"kind": "destructor",
						"char": 5,
						"name": "~this",
						"deco": "FNbNfZv",
						"endchar": 5,
						"endline": 180
					},
					{
						"constraint": "is(T == bool)",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 186,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"line": 186,
								"kind": "function",
								"char": 10,
								"name": "opCast",
								"type": "const nothrow bool()",
								"endchar": 92,
								"endline": 186
							}
						],
						"name": "opCast",
						"comment": "        Check whether this is a valid process handle. The process may have\n        exited already.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L189_C5)\n---\nProcess p;\n\nassert(!p);\n}\n\n/**\nAn operating system handle to the process.\n*/\n@property int pid() const nothrow @nogc { return cast(int)m_pid; \n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L189_C5)\n"
					},
					{
						"line": 198,
						"kind": "function",
						"char": 19,
						"name": "pid",
						"deco": "xFNbNdNiNfZi",
						"endchar": 70,
						"endline": 198,
						"comment": "        An operating system handle to the process.\n"
					},
					{
						"line": 203,
						"kind": "function",
						"char": 20,
						"name": "exited",
						"deco": "xFNbNdNfZb",
						"endchar": 92,
						"endline": 203,
						"comment": "        Whether the process has exited.\n"
					},
					{
						"line": 216,
						"kind": "function",
						"char": 9,
						"name": "wait",
						"deco": "FNfZi",
						"endchar": 5,
						"endline": 221,
						"comment": "        Wait for the process to exit, allowing other fibers to continue in the\n        meantime.\n\n        Params:\n            timeout = Optionally wait until a timeout is reached.\n\n        Returns:\n            The exit code of the process. If a timeout is given and reached, a\n            null value is returned.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"line": 224,
						"kind": "function",
						"char": 18,
						"name": "wait",
						"deco": "FNfS4core4time8DurationZS3std8typecons__T8NullableTiZQm",
						"endchar": 5,
						"endline": 244,
						"comment": "Ditto\n"
					},
					{
						"line": 254,
						"kind": "function",
						"char": 10,
						"name": "kill",
						"deco": "FNfZv",
						"endchar": 5,
						"endline": 265,
						"comment": "        Kill the process.\n\n        By default on Linux this sends SIGTERM to the process.\n\n        Params:\n            signal = Optional parameter for the signal to send to the process.\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "signal"
							}
						],
						"line": 268,
						"kind": "function",
						"char": 10,
						"name": "kill",
						"deco": "FNfiZv",
						"endchar": 5,
						"endline": 271,
						"comment": "ditto\n"
					},
					{
						"line": 278,
						"kind": "function",
						"char": 10,
						"name": "forceKill",
						"deco": "FNfZv",
						"endchar": 5,
						"endline": 289,
						"comment": "        Terminate the process immediately.\n\n        On Linux this sends SIGKILL to the process.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"line": 298,
						"kind": "function",
						"char": 9,
						"name": "waitOrForceKill",
						"deco": "FNfS4core4time8DurationZi",
						"endchar": 5,
						"endline": 308,
						"comment": "        Wait for the process to exit until a timeout is reached. If the process\n        doesn't exit before the timeout, force kill it.\n\n        Returns:\n            The process exit code.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core7process7Process",
								"name": "p"
							}
						],
						"line": 151,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS4vibe4core7process7ProcessZQBc"
					}
				],
				"comment": "    Represents a running process.\n",
				"name": "Process"
			},
			{
				"kind": "struct",
				"line": 314,
				"char": 1,
				"members": [
					{
						"line": 341,
						"kind": "destructor",
						"char": 5,
						"name": "~this",
						"deco": "FNbNfZv",
						"endchar": 5,
						"endline": 345
					},
					{
						"constraint": "is(T == bool)",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 347,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"line": 347,
								"kind": "function",
								"char": 10,
								"name": "opCast",
								"type": "const nothrow bool()",
								"endchar": 91,
								"endline": 347
							}
						],
						"name": "opCast"
					},
					{
						"line": 349,
						"kind": "function",
						"char": 20,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 63,
						"endline": 349
					},
					{
						"line": 350,
						"kind": "function",
						"char": 21,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 5,
						"endline": 354
					},
					{
						"line": 355,
						"kind": "function",
						"char": 20,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 76,
						"endline": 355
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"default": "max()",
								"name": "timeout"
							}
						],
						"line": 357,
						"kind": "function",
						"originalType": "@safe bool(Duration timeout = Duration.max)",
						"char": 10,
						"name": "waitForData",
						"deco": "FNfS4core4time8DurationZb",
						"endchar": 5,
						"endline": 406
					},
					{
						"line": 408,
						"kind": "function",
						"char": 20,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 84,
						"endline": 408
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"line": 410,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 12,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 5,
						"endline": 439
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							}
						],
						"line": 441,
						"kind": "function",
						"char": 10,
						"name": "read",
						"deco": "FNfMAhZv",
						"endchar": 5,
						"endline": 445
					},
					{
						"line": 454,
						"kind": "function",
						"char": 10,
						"name": "close",
						"deco": "FNbNfZv",
						"endchar": 5,
						"endline": 457,
						"comment": "        Close the read end of the pipe immediately.\n\n        Make sure that the pipe is not used after this is called and is released\n        as soon as possible. Due to implementation detail in eventcore this\n        reference could conflict with future pipes.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core7process15PipeInputStream",
								"name": "p"
							}
						],
						"line": 314,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS4vibe4core7process15PipeInputStreamZQBl"
					}
				],
				"comment": "    A stream for tBatchBufferhe write end of a pipe.\n",
				"name": "PipeInputStream"
			},
			{
				"kind": "mixin",
				"char": 1,
				"line": 460,
				"name": "validateInputStream!(PipeInputStream)"
			},
			{
				"kind": "struct",
				"line": 465,
				"char": 1,
				"members": [
					{
						"line": 490,
						"kind": "destructor",
						"char": 5,
						"name": "~this",
						"deco": "FNbNfZv",
						"endchar": 5,
						"endline": 494
					},
					{
						"constraint": "is(T == bool)",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 496,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"line": 496,
								"kind": "function",
								"char": 10,
								"name": "opCast",
								"type": "const nothrow bool()",
								"endchar": 91,
								"endline": 496
							}
						],
						"name": "opCast"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"line": 498,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes, IOMode mode)",
						"char": 12,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 5,
						"endline": 514
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"line": 516,
						"kind": "function",
						"originalType": "@safe void(in ubyte[] bytes)",
						"char": 10,
						"name": "write",
						"deco": "FNfxAhZv",
						"endchar": 108,
						"endline": 516
					},
					{
						"parameters": [
							{
								"deco": "xAa",
								"name": "bytes"
							}
						],
						"line": 517,
						"kind": "function",
						"originalType": "@safe void(in char[] bytes)",
						"char": 10,
						"name": "write",
						"deco": "FNfxAaZv",
						"endchar": 79,
						"endline": 517
					},
					{
						"line": 519,
						"kind": "function",
						"char": 10,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 19,
						"endline": 519
					},
					{
						"line": 520,
						"kind": "function",
						"char": 10,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 22,
						"endline": 520
					},
					{
						"line": 529,
						"kind": "function",
						"char": 10,
						"name": "close",
						"deco": "FNbNfZv",
						"endchar": 5,
						"endline": 532,
						"comment": "        Close the write end of the pipe immediately.\n\n        Make sure that the pipe is not used after this is called and is released\n        as soon as possible. Due to implementation detail in eventcore this\n        reference could conflict with future pipes.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core7process16PipeOutputStream",
								"name": "p"
							}
						],
						"line": 465,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS4vibe4core7process16PipeOutputStreamZQBm"
					}
				],
				"comment": "    Stream for the read end of a pipe.\n",
				"name": "PipeOutputStream"
			},
			{
				"kind": "mixin",
				"char": 1,
				"line": 535,
				"name": "validateOutputStream!(PipeOutputStream)"
			},
			{
				"kind": "struct",
				"line": 540,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 542,
						"kind": "variable",
						"char": 21,
						"name": "readEnd",
						"deco": "S4vibe4core7process15PipeInputStream",
						"offset": 0,
						"comment": "Read end of the pipe\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 544,
						"kind": "variable",
						"char": 22,
						"name": "writeEnd",
						"deco": "S4vibe4core7process16PipeOutputStream",
						"offset": 16,
						"comment": "Write end of the pipe\n"
					},
					{
						"line": 549,
						"kind": "function",
						"char": 10,
						"name": "close",
						"deco": "FNbNfZv",
						"endchar": 5,
						"endline": 553,
						"comment": "        Close both ends of the pipe\n"
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 1,
						"line": 540,
						"name": "~this"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core7process4Pipe",
								"name": "p"
							}
						],
						"line": 540,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS4vibe4core7process4PipeZQz"
					}
				],
				"comment": "    A pipe created by `pipe`.\n",
				"name": "Pipe"
			},
			{
				"line": 562,
				"kind": "function",
				"char": 6,
				"name": "pipe",
				"deco": "FNfZS4vibe4core7process4Pipe",
				"endchar": 1,
				"endline": 570,
				"comment": "    Create a pipe, async equivalent of `std.process.pipe`.\n\n    Returns:\n        A stream for each end of the pipe.\n"
			},
			{
				"kind": "struct",
				"line": 577,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 578,
						"kind": "variable",
						"char": 13,
						"name": "process",
						"deco": "S4vibe4core7process7Process",
						"offset": 0
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 579,
						"kind": "variable",
						"char": 22,
						"name": "stdin",
						"deco": "S4vibe4core7process16PipeOutputStream",
						"offset": 16
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 580,
						"kind": "variable",
						"char": 21,
						"name": "stdout",
						"deco": "S4vibe4core7process15PipeInputStream",
						"offset": 32
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 581,
						"kind": "variable",
						"char": 21,
						"name": "stderr",
						"deco": "S4vibe4core7process15PipeInputStream",
						"offset": 48
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 1,
						"line": 577,
						"name": "~this"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core7process12ProcessPipes",
								"name": "p"
							}
						],
						"line": 577,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS4vibe4core7process12ProcessPipesZQBi"
					}
				],
				"comment": "    Returned from `pipeProcess`.\n\n    See_Also: `pipeProcess`, `pipeShell`\n",
				"name": "ProcessPipes"
			},
			{
				"parameters": [
					{
						"deco": "AAya",
						"storageClass": [
							"scope"
						],
						"name": "args"
					},
					{
						"deco": "E3std7process8Redirect",
						"default": "cast(Redirect)7",
						"name": "redirect"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E4vibe4core7process6Config",
						"default": "cast(Config)cast(ProcessConfig)0",
						"name": "config"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"storageClass": [
							"scope"
						],
						"default": "GenericPath(null)",
						"name": "workDir"
					}
				],
				"line": 592,
				"kind": "function",
				"originalType": "@trusted ProcessPipes(scope string[] args, Redirect redirect = Redirect.all, const string[string] env = null, Config config = Config.none, scope NativePath workDir = NativePath.init)",
				"char": 14,
				"name": "pipeProcess",
				"deco": "FNeMAAyaE3std7process8RedirectxHQBbAyaE4vibe4coreQBk6ConfigMSQwQt4path__T11GenericPathTSQBxQBvQBd15PosixPathFormatZQBqZSQDdQDbQEj12ProcessPipes",
				"endchar": 1,
				"endline": 633,
				"comment": "    Equivalent to `std.process.pipeProcess`.\n\n    Returns:\n        A struct containing the process and created pipes.\n\n    See_Also: `spawnProcess`, `execute`\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"storageClass": [
							"scope"
						],
						"name": "program"
					},
					{
						"deco": "E3std7process8Redirect",
						"default": "cast(Redirect)7",
						"name": "redirect"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E4vibe4core7process6Config",
						"default": "cast(Config)cast(ProcessConfig)0",
						"name": "config"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"storageClass": [
							"scope"
						],
						"default": "GenericPath(null)",
						"name": "workDir"
					}
				],
				"line": 636,
				"kind": "function",
				"originalType": "@safe ProcessPipes(scope string program, Redirect redirect = Redirect.all, const string[string] env = null, Config config = Config.none, scope NativePath workDir = NativePath.init)",
				"char": 14,
				"name": "pipeProcess",
				"deco": "FNfMAyaE3std7process8RedirectxHQBbAyaE4vibe4coreQBk6ConfigMSQwQt4path__T11GenericPathTSQBxQBvQBd15PosixPathFormatZQBqZSQDdQDbQEj12ProcessPipes",
				"endchar": 1,
				"endline": 650,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"storageClass": [
							"scope"
						],
						"name": "command"
					},
					{
						"deco": "E3std7process8Redirect",
						"default": "cast(Redirect)7",
						"name": "redirect"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E4vibe4core7process6Config",
						"default": "cast(Config)cast(ProcessConfig)0",
						"name": "config"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"storageClass": [
							"scope"
						],
						"default": "GenericPath(null)",
						"name": "workDir"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"storageClass": [
							"scope"
						],
						"default": "nativeShell",
						"name": "shellPath"
					}
				],
				"line": 653,
				"kind": "function",
				"originalType": "@safe ProcessPipes(scope string command, Redirect redirect = Redirect.all, const string[string] env = null, Config config = Config.none, scope NativePath workDir = NativePath.init, scope NativePath shellPath = nativeShell)",
				"char": 14,
				"name": "pipeShell",
				"deco": "FNfMAyaE3std7process8RedirectxHQBbAyaE4vibe4coreQBk6ConfigMSQwQt4path__T11GenericPathTSQBxQBvQBd15PosixPathFormatZQBqMQChZSQDhQDfQEn12ProcessPipes",
				"endchar": 1,
				"endline": 667,
				"comment": "ditto\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "AAya",
						"storageClass": [
							"scope"
						],
						"name": "args"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E4vibe4core7process6Config",
						"default": "cast(Config)cast(ProcessConfig)0",
						"name": "config"
					},
					{
						"deco": "m",
						"default": "18446744073709551615LU",
						"name": "maxOutput"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"storageClass": [
							"scope"
						],
						"default": "GenericPath(null)",
						"name": "workDir"
					}
				],
				"line": 677,
				"kind": "function",
				"originalType": "@safe (scope string[] args, const string[string] env = null, Config config = Config.none, size_t maxOutput = size_t.max, scope NativePath workDir = NativePath.init)",
				"char": 6,
				"name": "execute",
				"deco": "FNfMAAyaxHQfAyaE4vibe4core7process6ConfigmMSQBcQBa4path__T11GenericPathTSQCfQCdQBd15PosixPathFormatZQBqZS3std8typecons__T5TupleTiVQEva6_737461747573TQFoVQFsa6_6f7574707574ZQBz",
				"endchar": 1,
				"endline": 685,
				"comment": "    Equivalent to `std.process.execute`.\n\n    Returns:\n        Tuple containing the exit status and process output.\n\n    See_Also: `spawnProcess`, `pipeProcess`\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "Aya",
						"storageClass": [
							"scope"
						],
						"name": "program"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E4vibe4core7process6Config",
						"default": "cast(Config)cast(ProcessConfig)0",
						"name": "config"
					},
					{
						"deco": "m",
						"default": "18446744073709551615LU",
						"name": "maxOutput"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"storageClass": [
							"scope"
						],
						"default": "GenericPath(null)",
						"name": "workDir"
					}
				],
				"line": 688,
				"kind": "function",
				"originalType": "@trusted (scope string program, const string[string] env = null, Config config = Config.none, size_t maxOutput = size_t.max, scope NativePath workDir = NativePath.init)",
				"char": 6,
				"name": "execute",
				"deco": "FNeMAyaxHQfAyaE4vibe4core7process6ConfigmMSQBcQBa4path__T11GenericPathTSQCfQCdQBd15PosixPathFormatZQBqZS3std8typecons__T5TupleTiVQEva6_737461747573TQFoVQFsa6_6f7574707574ZQBz",
				"endchar": 1,
				"endline": 696,
				"comment": "ditto\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "Aya",
						"storageClass": [
							"scope"
						],
						"name": "command"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E4vibe4core7process6Config",
						"default": "cast(Config)cast(ProcessConfig)0",
						"name": "config"
					},
					{
						"deco": "m",
						"default": "18446744073709551615LU",
						"name": "maxOutput"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"storageClass": [
							"scope"
						],
						"default": "GenericPath(null).this(null)",
						"name": "workDir"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"default": "nativeShell",
						"name": "shellPath"
					}
				],
				"line": 699,
				"kind": "function",
				"originalType": "@safe (scope string command, const string[string] env = null, Config config = Config.none, size_t maxOutput = size_t.max, scope NativePath workDir = null, NativePath shellPath = nativeShell)",
				"char": 6,
				"name": "executeShell",
				"deco": "FNfMAyaxHQfAyaE4vibe4core7process6ConfigmMSQBcQBa4path__T11GenericPathTSQCfQCdQBd15PosixPathFormatZQBqQCiZS3std8typecons__T5TupleTiVQEya6_737461747573TQFrVQFva6_6f7574707574ZQBz",
				"endchar": 1,
				"endline": 708,
				"comment": "ditto\n"
			}
		],
		"comment": "    Functions and structures for dealing with subprocesses and pipes.\n\n    This module is modeled after std.process, but provides a fiber-aware\n    alternative to it. All blocking operations will yield the calling fiber\n    instead of blocking it.\n",
		"name": "vibe.core.process"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/stream.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"selective": [
					"IOMode"
				],
				"line": 25,
				"name": "eventcore.driver"
			},
			{
				"constraint": "isOutputStream!OutputStream && isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					},
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 38,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "source"
							},
							{
								"type": "OutputStream",
								"name": "sink"
							},
							{
								"deco": "m",
								"name": "nbytes"
							}
						],
						"line": 38,
						"kind": "function",
						"char": 7,
						"name": "pipe",
						"type": "@trusted ulong(InputStream source, OutputStream sink, ulong nbytes)",
						"endchar": 1,
						"endline": 69
					}
				],
				"name": "pipe",
				"comment": " Pipes an InputStream directly into this OutputStream.\n\n\tThe number of bytes written is either the whole input stream when `nbytes == 0`, or exactly\n\t`nbytes` for `nbytes > 0`. If the input stream contains less than `nbytes` of data, an\n\texception is thrown.\n\n\tReturns:\n\t\tThe actual number of bytes written is returned. If `nbytes` is  given\n\t\tand not equal to `ulong.max`, íts value will be returned.\n"
			},
			{
				"constraint": "isOutputStream!OutputStream && isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					},
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 71,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "source"
							},
							{
								"type": "OutputStream",
								"name": "sink"
							}
						],
						"line": 71,
						"kind": "function",
						"char": 7,
						"name": "pipe",
						"type": "ulong(InputStream source, OutputStream sink)",
						"endchar": 1,
						"endline": 76
					}
				],
				"name": "pipe",
				"comment": "ditto\n"
			},
			{
				"kind": "struct",
				"line": 88,
				"char": 1,
				"members": [],
				"comment": " Marks a function as blocking.\n\n\tBlocking in this case means that it may contain an operation that needs to wait for\n\texternal events, such as I/O operations, and may result in other tasks in the same\n\tthrea being executed before it returns.\n\n\tCurrently this attribute serves only as a documentation aid and is not enforced\n\tor used for deducation in any way.\n",
				"name": "blocking"
			},
			{
				"line": 100,
				"kind": "function",
				"char": 18,
				"name": "nullSink",
				"deco": "FNbNfZC4vibe4core6stream16NullOutputStream",
				"endchar": 1,
				"endline": 105,
				"comment": "\n\n\n\n\tReturns a `NullOutputStream` instance.\n\n\tThe instance will only be created on the first request and gets reused for\n\tall subsequent calls from the same thread.\n"
			},
			{
				"kind": "interface",
				"line": 114,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"line": 122,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"comment": " Returns true $(I iff) the end of the input stream has been reached.\n\n\t\tFor connection oriented streams, this function will block until either\n\t\tnew data arrives or the connection got closed.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 129,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"comment": "\t(Scheduled for deprecation) Returns the maximum number of bytes that are known to remain available for read.\n\n\t\tAfter `leastSize()` bytes have been read, the stream will either have reached EOS\n\t\tand `empty()` returns `true`, or `leastSize()` returns again a number greater than `0`.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 133,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"comment": " (Scheduled for deprecation) Queries if there is data available for immediate, non-blocking read.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 144,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"comment": " Returns a temporary reference to the data that is currently buffered.\n\n\t\tThe returned slice typically has the size `leastSize()` or `0` if `dataAvailableForRead()`\n\t\treturns `false`. Streams that don't have an internal buffer will always return an empty\n\t\tslice.\n\n\t\tNote that any method invocation on the same stream potentially invalidates the contents of\n\t\tthe returned buffer.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"line": 164,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"comment": "\tFills the preallocated array 'bytes' with data from the stream.\n\n\t\tThis function will continue read from the stream until the buffer has\n\t\tbeen fully filled.\n\n\t\tParams:\n\t\t\tdst = The buffer into which to write the data that was read\n\t\t\tmode = Optional reading mode (defaults to `IOMode.all`).\n\n\t\tReturn:\n\t\t\tReturns the number of bytes read. The `dst` buffer will be filled up\n\t\t\tto this index. The return value is guaranteed to be `dst.length` for\n\t\t\t`IOMode.all`.\n\n\t\tThrows: An exception if the operation reads past the end of the stream\n\n\t\tSee_Also: `readOnce`, `tryRead`\n"
					},
					{
						"storageClass": [
							"final",
							"abstract"
						],
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							}
						],
						"line": 166,
						"kind": "function",
						"char": 13,
						"name": "read",
						"deco": "FNfMAhZv",
						"endchar": 106,
						"endline": 166,
						"comment": "ditto\n"
					}
				],
				"comment": "\n\n\n\n\tInterface for all classes implementing readable streams.\n",
				"name": "InputStream"
			},
			{
				"kind": "interface",
				"line": 173,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"line": 178,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"comment": " Writes an array of bytes to the stream.\n"
					},
					{
						"storageClass": [
							"final",
							"abstract"
						],
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"line": 180,
						"kind": "function",
						"originalType": "@safe void(in ubyte[] bytes)",
						"char": 13,
						"name": "write",
						"deco": "FNfxAhZv",
						"endchar": 111,
						"endline": 180,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"final",
							"abstract"
						],
						"parameters": [
							{
								"deco": "xAa",
								"name": "bytes"
							}
						],
						"line": 182,
						"kind": "function",
						"originalType": "@safe void(in char[] bytes)",
						"char": 13,
						"name": "write",
						"deco": "FNfxAaZv",
						"endchar": 82,
						"endline": 182,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 186,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"comment": " Flushes the stream and makes sure that all data is being written to the output device.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 193,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"comment": " Flushes and finalizes the stream.\n\n\t\tFinalize has to be called on certain types of streams. No writes are possible after a\n\t\tcall to finalize().\n"
					}
				],
				"comment": "\tInterface for all classes implementing writeable streams.\n",
				"name": "OutputStream"
			},
			{
				"line": 199,
				"kind": "interface",
				"char": 1,
				"members": [],
				"name": "Stream",
				"interfaces": [
					"vibe.core.stream.InputStream",
					"vibe.core.stream.OutputStream"
				],
				"comment": "\tInterface for all classes implementing readable and writable streams.\n"
			},
			{
				"line": 211,
				"kind": "interface",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"line": 220,
						"kind": "function",
						"char": 17,
						"name": "connected",
						"deco": "xFNdNfZb",
						"comment": " Determines The current connection status.\n\n\t\tIf `connected` is `false`, writing to the connection will trigger an exception. Reading may\n\t\tstill succeed as long as there is data left in the input buffer. Use `InputStream.empty`\n\t\tinstead to determine when to stop reading.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 230,
						"kind": "function",
						"char": 7,
						"name": "close",
						"deco": "FNfZv",
						"comment": " Actively closes the connection and frees associated resources.\n\n\t\tNote that close must always be called, even if the remote has already closed the connection.\n\t\tFailure to do so will result in resource and memory leakage.\n\n\t\tClosing a connection implies a call to `finalize`, so that it doesn't need to be called\n\t\texplicitly (it will be a no-op in that case).\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"default": "max()",
								"name": "timeout"
							}
						],
						"line": 245,
						"kind": "function",
						"originalType": "@safe bool(Duration timeout = Duration.max)",
						"char": 7,
						"name": "waitForData",
						"deco": "FNfS4core4time8DurationZb",
						"comment": " Blocks until data becomes available for read.\n\n\t\tThe maximum wait time can be customized with the `timeout` parameter. If there is already\n\t\tdata availabe for read, or if the connection is closed, the function will return immediately\n\t\twithout blocking.\n\n\t\tParams:\n\t\t\ttimeout = Optional timeout, the default value of `Duration.max` waits without a timeout.\n\n\t\tReturns:\n\t\t\tThe function will return `true` if data becomes available before the timeout is reached.\n\t\t\tIf the connection gets closed, or the timeout gets reached, `false` is returned instead.\n"
					}
				],
				"name": "ConnectionStream",
				"interfaces": [
					"vibe.core.stream.Stream"
				],
				"comment": "\tInterface for streams based on a connection.\n\n\tConnection streams are based on streaming socket connections, pipes and similar end-to-end\n\tstreams.\n\n\tSee_also: `vibe.core.net.TCPConnection`\n"
			},
			{
				"line": 252,
				"kind": "interface",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"line": 256,
						"kind": "function",
						"char": 18,
						"name": "size",
						"deco": "xFNbNdNfZm",
						"comment": "Returns the total size of the file.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 259,
						"kind": "function",
						"char": 17,
						"name": "readable",
						"deco": "xFNbNdNfZb",
						"comment": "Determines if this stream is readable.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 262,
						"kind": "function",
						"char": 17,
						"name": "writable",
						"deco": "xFNbNdNfZb",
						"comment": "Determines if this stream is writable.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "m",
								"name": "offset"
							}
						],
						"line": 265,
						"kind": "function",
						"char": 7,
						"name": "seek",
						"deco": "FNfmZv",
						"comment": "Seeks to a specific position in the file if supported by the stream.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 268,
						"kind": "function",
						"char": 8,
						"name": "tell",
						"deco": "FNbNfZm",
						"comment": "Returns the current offset of the file pointer\n"
					}
				],
				"name": "RandomAccessStream",
				"interfaces": [
					"vibe.core.stream.Stream"
				],
				"comment": "\tInterface for all streams supporting random access.\n"
			},
			{
				"line": 278,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "_param_1"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 279,
						"kind": "function",
						"originalType": "size_t(in ubyte[] bytes, IOMode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 64,
						"endline": 279
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 280,
						"name": "write"
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 281,
						"kind": "function",
						"originalType": "void()",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 16,
						"endline": 281
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 282,
						"kind": "function",
						"originalType": "void()",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 19,
						"endline": 282
					}
				],
				"name": "NullOutputStream",
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"comment": "\tStream implementation acting as a sink with no function.\n\n\tAny data written to the stream will be ignored and discarded. This stream type is useful if\n\tthe output of a particular stream is not needed but the stream needs to be drained.\n"
			},
			{
				"kind": "alias",
				"line": 287,
				"char": 1,
				"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream11InputStreamZQBv",
				"comment": "Generic storage for types that implement the `InputStream` interface\n",
				"name": "InputStreamProxy"
			},
			{
				"kind": "alias",
				"line": 289,
				"char": 1,
				"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream12OutputStreamZQBw",
				"comment": "Generic storage for types that implement the `OutputStream` interface\n",
				"name": "OutputStreamProxy"
			},
			{
				"kind": "alias",
				"line": 291,
				"char": 1,
				"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
				"comment": "Generic storage for types that implement the `Stream` interface\n",
				"name": "StreamProxy"
			},
			{
				"kind": "alias",
				"line": 293,
				"char": 1,
				"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream16ConnectionStreamZQCa",
				"comment": "Generic storage for types that implement the `ConnectionStream` interface\n",
				"name": "ConnectionStreamProxy"
			},
			{
				"kind": "alias",
				"line": 295,
				"char": 1,
				"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream18RandomAccessStreamZQCc",
				"comment": "Generic storage for types that implement the `RandomAccessStream` interface\n",
				"name": "RandomAccessStreamProxy"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 302,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 302,
						"kind": "variable",
						"char": 6,
						"name": "isInputStream",
						"init": "checkInterfaceConformance!(T, InputStream) is null"
					}
				],
				"name": "isInputStream",
				"comment": " Tests if the given aggregate type is a valid input stream.\n\n\tSee_also: `validateInputStream`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 308,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 308,
						"kind": "variable",
						"char": 6,
						"name": "isOutputStream",
						"init": "checkInterfaceConformance!(T, OutputStream) is null"
					}
				],
				"name": "isOutputStream",
				"comment": " Tests if the given aggregate type is a valid output stream.\n\n\tSee_also: `validateOutputStream`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 314,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 314,
						"kind": "variable",
						"char": 6,
						"name": "isStream",
						"init": "checkInterfaceConformance!(T, Stream) is null"
					}
				],
				"name": "isStream",
				"comment": " Tests if the given aggregate type is a valid bidirectional stream.\n\n\tSee_also: `validateStream`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 320,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 320,
						"kind": "variable",
						"char": 6,
						"name": "isConnectionStream",
						"init": "checkInterfaceConformance!(T, ConnectionStream) is null"
					}
				],
				"name": "isConnectionStream",
				"comment": " Tests if the given aggregate type is a valid connection stream.\n\n\tSee_also: `validateConnectionStream`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 326,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 326,
						"kind": "variable",
						"char": 6,
						"name": "isRandomAccessStream",
						"init": "checkInterfaceConformance!(T, RandomAccessStream) is null"
					}
				],
				"name": "isRandomAccessStream",
				"comment": " Tests if the given aggregate type is a valid random access stream.\n\n\tSee_also: `validateRandomAccessStream`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 336,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"kind": "mixin",
						"char": 101,
						"line": 336,
						"name": "validateInterfaceConformance!(T, .InputStream)"
					}
				],
				"name": "validateInputStream",
				"comment": " Verifies that the given type is a valid input stream.\n\n\tA valid input stream type must implement all methods of the `InputStream` interface. Inheriting\n\tform `InputStream` is not strictly necessary, which also enables struct types to be considered\n\tas stream implementations.\n\n\tSee_Also: `isInputStream`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 346,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"kind": "mixin",
						"char": 102,
						"line": 346,
						"name": "validateInterfaceConformance!(T, .OutputStream)"
					}
				],
				"name": "validateOutputStream",
				"comment": " Verifies that the given type is a valid output stream.\n\n\tA valid output stream type must implement all methods of the `OutputStream` interface. Inheriting\n\tform `OutputStream` is not strictly necessary, which also enables struct types to be considered\n\tas stream implementations.\n\n\tSee_Also: `isOutputStream`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 356,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"kind": "mixin",
						"char": 96,
						"line": 356,
						"name": "validateInterfaceConformance!(T, .Stream)"
					}
				],
				"name": "validateStream",
				"comment": " Verifies that the given type is a valid bidirectional stream.\n\n\tA valid stream type must implement all methods of the `Stream` interface. Inheriting\n\tform `Stream` is not strictly necessary, which also enables struct types to be considered\n\tas stream implementations.\n\n\tSee_Also: `isStream`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 366,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"kind": "mixin",
						"char": 106,
						"line": 366,
						"name": "validateInterfaceConformance!(T, .ConnectionStream)"
					}
				],
				"name": "validateConnectionStream",
				"comment": " Verifies that the given type is a valid connection stream.\n\n\tA valid connection stream type must implement all methods of the `ConnectionStream` interface.\n\tInheriting form `ConnectionStream` is not strictly necessary, which also enables struct types\n\tto be considered as stream implementations.\n\n\tSee_Also: `isConnectionStream`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 376,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"kind": "mixin",
						"char": 108,
						"line": 376,
						"name": "validateInterfaceConformance!(T, .RandomAccessStream)"
					}
				],
				"name": "validateRandomAccessStream",
				"comment": " Verifies that the given type is a valid random access stream.\n\n\tA valid random access stream type must implement all methods of the `RandomAccessStream`\n\tinterface. Inheriting form `RandomAccessStream` is not strictly necessary, which also enables\n\tstruct types to be considered as stream implementations.\n\n\tSee_Also: `isRandomAccessStream`\n"
			}
		],
		"comment": "\tGeneric stream interface used by several stream-like classes.\n\n\tThis module defines the basic (buffered) stream primitives. For concrete stream types, take a\n\tlook at the `vibe.stream` package. The `vibe.stream.operations` module contains additional\n\thigh-level operations on streams, such as reading streams by line or as a whole.\n\n\tNote that starting with vibe-core 1.0.0, streams can be of either `struct`  or `class` type.\n\tAny APIs that take streams as a parameter should use a template type parameter that is tested\n\tusing the appropriate trait (e.g. `isInputStream`) instead of assuming the specific interface\n\ttype (e.g. `InputStream`).\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.core.stream"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/sync.d",
		"members": [
			{
				"line": 34,
				"kind": "function",
				"char": 18,
				"name": "createManualEvent",
				"deco": "FNfZS4vibe4core4sync16LocalManualEvent",
				"endchar": 1,
				"endline": 39,
				"comment": " Creates a new signal that can be shared between fibers.\n"
			},
			{
				"line": 41,
				"kind": "function",
				"char": 21,
				"name": "createSharedManualEvent",
				"deco": "FNeZOS4vibe4core4sync11ManualEvent",
				"endchar": 1,
				"endline": 44,
				"comment": "ditto\n"
			},
			{
				"constraint": "is(M : Mutex) || is(M : Lockable)",
				"parameters": [
					{
						"kind": "type",
						"name": "M"
					}
				],
				"line": 53,
				"kind": "template",
				"char": 19,
				"members": [
					{
						"parameters": [
							{
								"type": "M",
								"name": "mutex"
							},
							{
								"type": "LockMode",
								"default": "LockMode.lock",
								"name": "mode"
							}
						],
						"line": 53,
						"kind": "function",
						"char": 19,
						"name": "scopedMutexLock",
						"type": "ScopedMutexLock!M(M mutex, LockMode mode = LockMode.lock)",
						"endchar": 1,
						"endline": 57
					}
				],
				"name": "scopedMutexLock",
				"comment": " Performs RAII based locking/unlocking of a mutex.\n\n\tNote that while `TaskMutex` can be used with D's built-in `synchronized`\n\tstatement, `InterruptibleTaskMutex` cannot. This function provides a\n\tlibrary based alternative that is suitable for use with all mutex types.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L60_C1)\n---\nimport vibe.core.core : runWorkerTaskH;\n\n__gshared int counter;\n__gshared InterruptibleTaskMutex mutex;\n\nmutex = new InterruptibleTaskMutex;\n\nTask[] tasks;\n\nforeach (i; 0 .. 100) {\n\ttasks ~= runWorkerTaskH({\n\t\tauto l = scopedMutexLock(mutex);\n\t\tcounter++;\n\t});\n}\n\nforeach (t; tasks) t.join();\n\nassert(counter == 100);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L60_C1)\n"
			},
			{
				"line": 88,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 89,
						"name": "lock"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 90,
						"name": "tryLock"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 91,
						"name": "defer"
					}
				],
				"name": "LockMode",
				"baseDeco": "i"
			},
			{
				"kind": "interface",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"line": 96,
						"kind": "function",
						"char": 7,
						"name": "lock",
						"deco": "FNfZv"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 97,
						"kind": "function",
						"char": 7,
						"name": "unlock",
						"deco": "FNfZv"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 98,
						"kind": "function",
						"char": 7,
						"name": "tryLock",
						"deco": "FNfZb"
					}
				],
				"line": 94,
				"name": "Lockable"
			},
			{
				"constraint": "is(M : Mutex) || is(M : Lockable)",
				"parameters": [
					{
						"kind": "type",
						"name": "M"
					}
				],
				"line": 103,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "M",
								"char": 5,
								"line": 108,
								"name": "m_mutex"
							},
							{
								"kind": "variable",
								"deco": "b",
								"char": 8,
								"line": 109,
								"name": "m_locked"
							},
							{
								"kind": "variable",
								"type": "LockMode",
								"char": 12,
								"line": 110,
								"name": "m_mode"
							},
							{
								"parameters": [
									{
										"type": "M",
										"name": "mutex"
									},
									{
										"type": "LockMode",
										"default": "LockMode.lock",
										"name": "mode"
									}
								],
								"line": 113,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(M mutex, LockMode mode = LockMode.lock)",
								"endchar": 2,
								"endline": 122
							},
							{
								"line": 124,
								"kind": "destructor",
								"char": 2,
								"name": "~this",
								"endchar": 2,
								"endline": 128
							},
							{
								"line": 130,
								"kind": "function",
								"char": 17,
								"name": "locked",
								"type": "const @property bool()",
								"endchar": 51,
								"endline": 130
							},
							{
								"line": 132,
								"kind": "function",
								"char": 7,
								"name": "unlock",
								"type": "void()",
								"endchar": 2,
								"endline": 137
							},
							{
								"line": 139,
								"kind": "function",
								"char": 7,
								"name": "tryLock",
								"type": "bool()",
								"endchar": 2,
								"endline": 143
							},
							{
								"line": 145,
								"kind": "function",
								"char": 7,
								"name": "lock",
								"type": "void()",
								"endchar": 2,
								"endline": 150
							}
						],
						"line": 103,
						"name": "ScopedMutexLock"
					}
				],
				"name": "ScopedMutexLock",
				"comment": " RAII lock for the Mutex class.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L173_C1)\n---\nint protected_var = 0;\nauto mtx = new TaskMutex;\nmtx.performLocked!({\n\tprotected_var++;\n});\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L173_C1)\n"
			},
			{
				"kind": "class",
				"line": 189,
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "k",
								"name": "max_locks"
							}
						],
						"line": 211,
						"kind": "constructor",
						"originalType": "@safe (uint max_locks)",
						"char": 2,
						"name": "this",
						"deco": "FNfkZC4vibe4core4sync18LocalTaskSemaphore",
						"endchar": 2,
						"endline": 215
					},
					{
						"parameters": [
							{
								"deco": "k",
								"name": "max_locks"
							}
						],
						"line": 218,
						"kind": "function",
						"char": 17,
						"name": "maxLocks",
						"deco": "FNdNfkZv",
						"endchar": 68,
						"endline": 218,
						"comment": "Maximum number of concurrent locks\n"
					},
					{
						"line": 220,
						"kind": "function",
						"char": 17,
						"name": "maxLocks",
						"deco": "xFNdNfZk",
						"endchar": 55,
						"endline": 220,
						"comment": "ditto\n"
					},
					{
						"line": 223,
						"kind": "function",
						"char": 17,
						"name": "available",
						"deco": "xFNdNfZk",
						"endchar": 66,
						"endline": 223,
						"comment": "Number of concurrent locks still available\n"
					},
					{
						"line": 234,
						"kind": "function",
						"char": 7,
						"name": "tryLock",
						"deco": "FNfZb",
						"endchar": 2,
						"endline": 242,
						"comment": " Try to acquire a lock.\n\n\t\tIf a lock cannot be acquired immediately, returns `false` and leaves the\n\t\tsemaphore in its previous state.\n\n\t\tReturns:\n\t\t\t`true` is returned $(I iff) the number of available locks is greater\n\t\t\tthan one.\n"
					},
					{
						"parameters": [
							{
								"deco": "h",
								"default": "cast(ubyte)0u",
								"name": "priority"
							}
						],
						"line": 249,
						"kind": "function",
						"originalType": "@safe void(ubyte priority = 0)",
						"char": 7,
						"name": "lock",
						"deco": "FNfhZv",
						"endchar": 2,
						"endline": 270,
						"comment": " Acquires a lock.\n\n\t\tOnce the limit of concurrent locks is reached, this method will block\n\t\tuntil the number of locks drops below the limit.\n"
					},
					{
						"line": 274,
						"kind": "function",
						"char": 7,
						"name": "unlock",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 280,
						"comment": " Gives up an existing lock.\n"
					},
					{
						"kind": "destructor",
						"deco": "FZv",
						"char": 7,
						"line": 189,
						"name": "~this"
					}
				],
				"comment": "\tThread-local semaphore implementation for tasks.\n\n\tWhen the semaphore runs out of concurrent locks, it will suspend. This class\n\tis used in `vibe.core.connectionpool` to limit the number of concurrent\n\tconnections.\n",
				"name": "LocalTaskSemaphore"
			},
			{
				"line": 323,
				"kind": "class",
				"char": 7,
				"base": "core.sync.mutex.Mutex",
				"members": [
					{
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"line": 327,
						"kind": "constructor",
						"originalType": "@safe (Object o)",
						"char": 2,
						"name": "this",
						"deco": "FNfC6ObjectZC4vibe4core4sync9TaskMutex",
						"endchar": 45,
						"endline": 327
					},
					{
						"line": 328,
						"kind": "constructor",
						"originalType": "@safe ()",
						"char": 2,
						"name": "this",
						"deco": "FNfZC4vibe4core4sync9TaskMutex",
						"endchar": 27,
						"endline": 328
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"core.sync.mutex.Mutex.tryLock",
							"vibe.core.sync.Lockable.tryLock"
						],
						"line": 330,
						"kind": "function",
						"char": 16,
						"name": "tryLock",
						"deco": "FNbNfZb",
						"endchar": 61,
						"endline": 330
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"core.sync.mutex.Mutex.lock",
							"vibe.core.sync.Lockable.lock"
						],
						"line": 331,
						"kind": "function",
						"char": 16,
						"name": "lock",
						"deco": "FNbNfZv",
						"endchar": 48,
						"endline": 331
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"core.sync.mutex.Mutex.unlock",
							"vibe.core.sync.Lockable.unlock"
						],
						"line": 332,
						"kind": "function",
						"char": 16,
						"name": "unlock",
						"deco": "FNbNfZv",
						"endchar": 52,
						"endline": 332
					}
				],
				"name": "TaskMutex",
				"interfaces": [
					"vibe.core.sync.Lockable"
				],
				"comment": "\tMutex implementation for fibers.\n\n\tThis mutex type can be used in exchange for a core.sync.mutex.Mutex, but\n\tdoes not block the event loop when contention happens. Note that this\n\tmutex does not allow recursive locking.\n\n\tNotice:\n\t\tBecause this class is annotated nothrow, it cannot be interrupted\n\t\tusing $(D vibe.core.task.Task.interrupt()). The corresponding\n\t\t$(D InterruptException) will be deferred until the next blocking\n\t\toperation yields the event loop.\n\n\t\tUse $(D InterruptibleTaskMutex) as an alternative that can be\n\t\tinterrupted.\n\n\tSee_Also: InterruptibleTaskMutex, RecursiveTaskMutex, core.sync.mutex.Mutex\n"
			},
			{
				"line": 421,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"line": 426,
						"kind": "constructor",
						"originalType": "@safe ()",
						"char": 2,
						"name": "this",
						"deco": "FNfZC4vibe4core4sync22InterruptibleTaskMutex",
						"endchar": 2,
						"endline": 432
					},
					{
						"overrides": [
							"vibe.core.sync.Lockable.tryLock"
						],
						"line": 434,
						"kind": "function",
						"char": 7,
						"name": "tryLock",
						"deco": "FNbNfZb",
						"endchar": 52,
						"endline": 434
					},
					{
						"overrides": [
							"vibe.core.sync.Lockable.lock"
						],
						"line": 435,
						"kind": "function",
						"char": 7,
						"name": "lock",
						"deco": "FNfZv",
						"endchar": 31,
						"endline": 435
					},
					{
						"overrides": [
							"vibe.core.sync.Lockable.unlock"
						],
						"line": 436,
						"kind": "function",
						"char": 7,
						"name": "unlock",
						"deco": "FNbNfZv",
						"endchar": 43,
						"endline": 436
					}
				],
				"name": "InterruptibleTaskMutex",
				"interfaces": [
					"vibe.core.sync.Lockable"
				],
				"comment": "\tAlternative to $(D TaskMutex) that supports interruption.\n\n\tThis class supports the use of $(D vibe.core.task.Task.interrupt()) while\n\twaiting in the $(D lock()) method. However, because the interface is not\n\t$(D nothrow), it cannot be used as an object monitor.\n\n\tSee_Also: $(D TaskMutex), $(D InterruptibleRecursiveTaskMutex)\n"
			},
			{
				"line": 463,
				"kind": "class",
				"char": 7,
				"base": "core.sync.mutex.Mutex",
				"members": [
					{
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"line": 468,
						"kind": "constructor",
						"originalType": "@safe (Object o)",
						"char": 2,
						"name": "this",
						"deco": "FNfC6ObjectZC4vibe4core4sync18RecursiveTaskMutex",
						"endchar": 45,
						"endline": 468
					},
					{
						"line": 469,
						"kind": "constructor",
						"originalType": "@safe ()",
						"char": 2,
						"name": "this",
						"deco": "FNfZC4vibe4core4sync18RecursiveTaskMutex",
						"endchar": 27,
						"endline": 469
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"core.sync.mutex.Mutex.tryLock",
							"vibe.core.sync.Lockable.tryLock"
						],
						"line": 471,
						"kind": "function",
						"char": 16,
						"name": "tryLock",
						"deco": "FNfZb",
						"endchar": 53,
						"endline": 471
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"core.sync.mutex.Mutex.lock",
							"vibe.core.sync.Lockable.lock"
						],
						"line": 472,
						"kind": "function",
						"char": 16,
						"name": "lock",
						"deco": "FNfZv",
						"endchar": 40,
						"endline": 472
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"core.sync.mutex.Mutex.unlock",
							"vibe.core.sync.Lockable.unlock"
						],
						"line": 473,
						"kind": "function",
						"char": 16,
						"name": "unlock",
						"deco": "FNfZv",
						"endchar": 44,
						"endline": 473
					}
				],
				"name": "RecursiveTaskMutex",
				"interfaces": [
					"vibe.core.sync.Lockable"
				],
				"comment": "\tRecursive mutex implementation for tasks.\n\n\tThis mutex type can be used in exchange for a `core.sync.mutex.Mutex`, but\n\tdoes not block the event loop when contention happens.\n\n\tNotice:\n\t\tBecause this class is annotated `nothrow`, it cannot be interrupted\n\t\tusing $(D vibe.core.task.Task.interrupt()). The corresponding\n\t\t$(D InterruptException) will be deferred until the next blocking\n\t\toperation yields the event loop.\n\n\t\tUse $(D InterruptibleRecursiveTaskMutex) as an alternative that can be\n\t\tinterrupted.\n\n\tSee_Also: `TaskMutex`, `core.sync.mutex.Mutex`\n"
			},
			{
				"line": 491,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"line": 495,
						"kind": "constructor",
						"originalType": "@safe ()",
						"char": 2,
						"name": "this",
						"deco": "FNfZC4vibe4core4sync31InterruptibleRecursiveTaskMutex",
						"endchar": 2,
						"endline": 501
					},
					{
						"overrides": [
							"vibe.core.sync.Lockable.tryLock"
						],
						"line": 503,
						"kind": "function",
						"char": 7,
						"name": "tryLock",
						"deco": "FNfZb",
						"endchar": 44,
						"endline": 503
					},
					{
						"overrides": [
							"vibe.core.sync.Lockable.lock"
						],
						"line": 504,
						"kind": "function",
						"char": 7,
						"name": "lock",
						"deco": "FNfZv",
						"endchar": 31,
						"endline": 504
					},
					{
						"overrides": [
							"vibe.core.sync.Lockable.unlock"
						],
						"line": 505,
						"kind": "function",
						"char": 7,
						"name": "unlock",
						"deco": "FNfZv",
						"endchar": 35,
						"endline": 505
					}
				],
				"name": "InterruptibleRecursiveTaskMutex",
				"interfaces": [
					"vibe.core.sync.Lockable"
				],
				"comment": "\tAlternative to $(D RecursiveTaskMutex) that supports interruption.\n\n\tThis class supports the use of $(D vibe.core.task.Task.interrupt()) while\n\twaiting in the $(D lock()) method. However, because the interface is not\n\t$(D nothrow), it cannot be used as an object monitor.\n\n\tSee_Also: $(D RecursiveTaskMutex), $(D InterruptibleTaskMutex)\n"
			},
			{
				"line": 669,
				"kind": "class",
				"char": 7,
				"base": "core.sync.condition.Condition",
				"members": [
					{
						"parameters": [
							{
								"deco": "C4core4sync5mutex5Mutex",
								"name": "mtx"
							}
						],
						"line": 674,
						"kind": "constructor",
						"originalType": "@safe (core.sync.mutex.Mutex mtx)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4core4sync5mutex5MutexZC4vibeQBdQBb13TaskCondition",
						"endchar": 2,
						"endline": 681
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"core.sync.condition.Condition.mutex"
						],
						"line": 682,
						"kind": "function",
						"char": 27,
						"name": "mutex",
						"deco": "FNbNdNfZC4core4sync5mutex5Mutex",
						"endchar": 66,
						"endline": 682
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"core.sync.condition.Condition.wait"
						],
						"line": 683,
						"kind": "function",
						"char": 16,
						"name": "wait",
						"deco": "FNbNfZv",
						"endchar": 48,
						"endline": 683
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"overrides": [
							"core.sync.condition.Condition.wait"
						],
						"line": 684,
						"kind": "function",
						"char": 16,
						"name": "wait",
						"deco": "FNbNfS4core4time8DurationZb",
						"endchar": 78,
						"endline": 684
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"core.sync.condition.Condition.notify"
						],
						"line": 685,
						"kind": "function",
						"char": 16,
						"name": "notify",
						"deco": "FNbNfZv",
						"endchar": 52,
						"endline": 685
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"core.sync.condition.Condition.notifyAll"
						],
						"line": 686,
						"kind": "function",
						"char": 16,
						"name": "notifyAll",
						"deco": "FNbNfZv",
						"endchar": 59,
						"endline": 686
					}
				],
				"name": "TaskCondition",
				"comment": "\tEvent loop based condition variable or \"event\" implementation.\n\n\tThis class can be used in exchange for a $(D core.sync.condition.Condition)\n\tto avoid blocking the event loop when waiting.\n\n\tNotice:\n\t\tBecause this class is annotated nothrow, it cannot be interrupted\n\t\tusing $(D vibe.core.task.Task.interrupt()). The corresponding\n\t\t$(D InterruptException) will be deferred until the next blocking\n\t\toperation yields to the event loop.\n\n\t\tUse $(D InterruptibleTaskCondition) as an alternative that can be\n\t\tinterrupted.\n\n\t\tNote that it is generally not safe to use a `TaskCondition` together with an\n\t\tinterruptible mutex type.\n\n\tSee_Also: `InterruptibleTaskCondition`\nExample:\nThis example shows the typical usage pattern using a `while` loop to make\n\tsure that the final condition is reached.$(DDOX_UNITTEST_HEADER __unittest_L698_C1)\n---\nimport vibe.core.core;\nimport vibe.core.log;\n\n__gshared Mutex mutex;\n__gshared TaskCondition condition;\n__gshared int workers_still_running = 0;\n\n// setup the task condition\nmutex = new Mutex;\ncondition = new TaskCondition(mutex);\n\nlogDebug(\"SETTING UP TASKS\");\n\n// start up the workers and count how many are running\nforeach (i; 0 .. 4) {\n\tworkers_still_running++;\n\trunWorkerTask({\n\t\t// simulate some work\n\t\tsleep(100.msecs);\n\n\t\t// notify the waiter that we're finished\n\t\tsynchronized (mutex) {\n\t\t\tworkers_still_running--;\n\t\tlogDebug(\"DECREMENT %s\", workers_still_running);\n\t\t}\n\t\tlogDebug(\"NOTIFY\");\n\t\tcondition.notify();\n\t});\n}\n\nlogDebug(\"STARTING WAIT LOOP\");\n\n// wait until all tasks have decremented the counter back to zero\nsynchronized (mutex) {\n\twhile (workers_still_running > 0) {\n\t\tlogDebug(\"STILL running %s\", workers_still_running);\n\t\tcondition.wait();\n\t}\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L698_C1)\n"
			},
			{
				"kind": "class",
				"line": 755,
				"char": 7,
				"members": [
					{
						"constraint": "is(M : Mutex) || is(M : Lockable)",
						"parameters": [
							{
								"kind": "type",
								"name": "M"
							}
						],
						"line": 760,
						"kind": "template",
						"char": 2,
						"members": [
							{
								"parameters": [
									{
										"type": "M",
										"name": "mutex"
									}
								],
								"line": 760,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(M mutex)",
								"endchar": 2,
								"endline": 767
							}
						],
						"name": "this"
					},
					{
						"line": 769,
						"kind": "function",
						"char": 21,
						"name": "mutex",
						"deco": "FNdNfZC4vibe4core4sync8Lockable",
						"endchar": 52,
						"endline": 769
					},
					{
						"line": 770,
						"kind": "function",
						"char": 7,
						"name": "wait",
						"deco": "FNfZv",
						"endchar": 31,
						"endline": 770
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"line": 771,
						"kind": "function",
						"char": 7,
						"name": "wait",
						"deco": "FNfS4core4time8DurationZb",
						"endchar": 61,
						"endline": 771
					},
					{
						"line": 772,
						"kind": "function",
						"char": 7,
						"name": "notify",
						"deco": "FNfZv",
						"endchar": 35,
						"endline": 772
					},
					{
						"line": 773,
						"kind": "function",
						"char": 7,
						"name": "notifyAll",
						"deco": "FNfZv",
						"endchar": 41,
						"endline": 773
					}
				],
				"comment": "\tAlternative to `TaskCondition` that supports interruption.\n\n\tThis class supports the use of `vibe.core.task.Task.interrupt()` while\n\twaiting in the `wait()` method.\n\n\tSee `TaskCondition` for an example.\n\n\tNotice:\n\t\tNote that it is generally not safe to use an\n\t\t`InterruptibleTaskCondition` together with an interruptible mutex type.\n\n\tSee_Also: `TaskCondition`\n",
				"name": "InterruptibleTaskCondition"
			},
			{
				"kind": "struct",
				"line": 787,
				"char": 1,
				"members": [
					{
						"line": 814,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 821
					},
					{
						"line": 823,
						"kind": "function",
						"char": 7,
						"name": "opCast",
						"deco": "xFNbNfZb",
						"endchar": 58,
						"endline": 823
					},
					{
						"line": 826,
						"kind": "function",
						"char": 6,
						"name": "emitCount",
						"deco": "xFNbNfZi",
						"endchar": 63,
						"endline": 826,
						"comment": "A counter that is increased with every emit() call\n"
					},
					{
						"line": 829,
						"kind": "function",
						"char": 6,
						"name": "emit",
						"deco": "FNbNfZi",
						"endchar": 2,
						"endline": 836,
						"comment": "Emits the signal, waking up all owners of the signal.\n"
					},
					{
						"line": 839,
						"kind": "function",
						"char": 6,
						"name": "emitSingle",
						"deco": "FNbNfZi",
						"endchar": 2,
						"endline": 846,
						"comment": "Emits the signal, waking up a single owners of the signal.\n"
					},
					{
						"line": 857,
						"kind": "function",
						"char": 6,
						"name": "wait",
						"deco": "FNfZi",
						"endchar": 44,
						"endline": 857,
						"comment": " Acquires ownership and waits until the signal is emitted.\n\n\t\tNote that in order not to miss any emits it is necessary to use the\n\t\toverload taking an integer.\n\n\t\tThrows:\n\t\t\tMay throw an $(D InterruptException) if the task gets interrupted\n\t\t\tusing $(D Task.interrupt()).\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "emit_count"
							}
						],
						"line": 866,
						"kind": "function",
						"char": 6,
						"name": "wait",
						"deco": "FNfiZi",
						"endchar": 75,
						"endline": 866,
						"comment": " Acquires ownership and waits until the signal is emitted and the emit\n\t\tcount is larger than a given one.\n\n\t\tThrows:\n\t\t\tMay throw an $(D InterruptException) if the task gets interrupted\n\t\t\tusing $(D Task.interrupt()).\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							},
							{
								"deco": "i",
								"name": "emit_count"
							}
						],
						"line": 868,
						"kind": "function",
						"char": 6,
						"name": "wait",
						"deco": "FNfS4core4time8DurationiZi",
						"endchar": 88,
						"endline": 868,
						"comment": "ditto\n"
					},
					{
						"line": 875,
						"kind": "function",
						"char": 6,
						"name": "waitUninterruptible",
						"deco": "FNbNfZi",
						"endchar": 82,
						"endline": 875,
						"comment": " Same as $(D wait), but defers throwing any $(D InterruptException).\n\n\t\tThis method is annotated $(D nothrow) at the expense that it cannot be\n\t\tinterrupted.\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "emit_count"
							}
						],
						"line": 877,
						"kind": "function",
						"char": 6,
						"name": "waitUninterruptible",
						"deco": "FNbNfiZi",
						"endchar": 99,
						"endline": 877,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							},
							{
								"deco": "i",
								"name": "emit_count"
							}
						],
						"line": 879,
						"kind": "function",
						"char": 6,
						"name": "waitUninterruptible",
						"deco": "FNbNfS4core4time8DurationiZi",
						"endchar": 112,
						"endline": 879,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core4sync16LocalManualEvent",
								"name": "p"
							}
						],
						"line": 787,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNcNjNeS4vibe4core4sync16LocalManualEventZQBj"
					}
				],
				"comment": " A manually triggered single threaded cross-task event.\n\n\tNote: the ownership can be shared between multiple fibers of the same thread.\n",
				"name": "LocalManualEvent"
			},
			{
				"kind": "struct",
				"line": 982,
				"char": 1,
				"members": [
					{
						"line": 1003,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"char": 3,
								"value": "0",
								"line": 1004,
								"name": "single"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "1",
								"line": 1005,
								"name": "all"
							}
						],
						"name": "EmitMode",
						"baseDeco": "i"
					},
					{
						"storageClass": [
							"deprecated"
						],
						"line": 1011,
						"kind": "function",
						"char": 7,
						"name": "opCast",
						"deco": "OxFNbNfZb",
						"endchar": 52,
						"endline": 1011
					},
					{
						"line": 1014,
						"kind": "function",
						"char": 6,
						"name": "emitCount",
						"deco": "OxFNbNeZi",
						"endchar": 82,
						"endline": 1014,
						"comment": "A counter that is increased with every emit() call\n"
					},
					{
						"line": 1017,
						"kind": "function",
						"char": 6,
						"name": "emit",
						"deco": "OFNbNeZi",
						"endchar": 2,
						"endline": 1050,
						"comment": "Emits the signal, waking up all owners of the signal.\n"
					},
					{
						"line": 1053,
						"kind": "function",
						"char": 6,
						"name": "emitSingle",
						"deco": "OFNbNeZi",
						"endchar": 2,
						"endline": 1087,
						"comment": "Emits the signal, waking up at least one waiting task\n"
					},
					{
						"line": 1098,
						"kind": "function",
						"char": 6,
						"name": "wait",
						"deco": "OFNfZi",
						"endchar": 51,
						"endline": 1098,
						"comment": " Acquires ownership and waits until the signal is emitted.\n\n\t\tNote that in order not to miss any emits it is necessary to use the\n\t\toverload taking an integer.\n\n\t\tThrows:\n\t\t\tMay throw an $(D InterruptException) if the task gets interrupted\n\t\t\tusing $(D Task.interrupt()).\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "emit_count"
							}
						],
						"line": 1107,
						"kind": "function",
						"char": 6,
						"name": "wait",
						"deco": "OFNfiZi",
						"endchar": 88,
						"endline": 1107,
						"comment": " Acquires ownership and waits until the emit count differs from the\n\t\tgiven one or until a timeout is reached.\n\n\t\tThrows:\n\t\t\tMay throw an $(D InterruptException) if the task gets interrupted\n\t\t\tusing $(D Task.interrupt()).\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							},
							{
								"deco": "i",
								"name": "emit_count"
							}
						],
						"line": 1109,
						"kind": "function",
						"char": 6,
						"name": "wait",
						"deco": "OFNfS4core4time8DurationiZi",
						"endchar": 101,
						"endline": 1109,
						"comment": "ditto\n"
					},
					{
						"line": 1116,
						"kind": "function",
						"char": 6,
						"name": "waitUninterruptible",
						"deco": "OFNbNfZi",
						"endchar": 89,
						"endline": 1116,
						"comment": " Same as $(D wait), but defers throwing any $(D InterruptException).\n\n\t\tThis method is annotated $(D nothrow) at the expense that it cannot be\n\t\tinterrupted.\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "emit_count"
							}
						],
						"line": 1118,
						"kind": "function",
						"char": 6,
						"name": "waitUninterruptible",
						"deco": "OFNbNfiZi",
						"endchar": 112,
						"endline": 1118,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							},
							{
								"deco": "i",
								"name": "emit_count"
							}
						],
						"line": 1120,
						"kind": "function",
						"char": 6,
						"name": "waitUninterruptible",
						"deco": "OFNbNfS4core4time8DurationiZi",
						"endchar": 125,
						"endline": 1120,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core4sync11ManualEvent",
								"name": "p"
							}
						],
						"line": 982,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNaNbNcNiNjNeS4vibe4core4sync11ManualEventZQBe"
					}
				],
				"comment": " A manually triggered multi threaded cross-task event.\n\n\tNote: the ownership can be shared between multiple fibers and threads.\n",
				"name": "ManualEvent"
			},
			{
				"kind": "class",
				"line": 2076,
				"char": 7,
				"members": [
					{
						"kind": "alias",
						"line": 2100,
						"char": 5,
						"deco": "E4vibe4core4sync__T19ReadWriteMutexStateVbi0ZQBa6Policy",
						"comment": " The policy with which the mutex should operate.\n\n  The policy determines how the acquisition of the locks is\n  performed and can be used to tune the mutex according to the\n  underlying algorithm in which it is used.\n\n  According to the provided policy, the mutex will either favor\n  reading or writing tasks and could potentially starve the\n  respective opposite.\n\n  cf. $(D core.sync.rwmutex.ReadWriteMutex.Policy)\n",
						"name": "Policy"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "E4vibe4core4sync__T19ReadWriteMutexStateVbi0ZQBa13LockingIntent",
								"name": "INTENT"
							}
						],
						"line": 2108,
						"kind": "template",
						"char": 11,
						"members": [
							{
								"kind": "class",
								"char": 11,
								"members": [
									{
										"storageClass": [
											"override"
										],
										"line": 2111,
										"kind": "function",
										"char": 23,
										"name": "tryLock",
										"type": "bool()",
										"endchar": 68,
										"endline": 2111,
										"comment": " Try to lock the mutex. cf. $(D core.sync.mutex.Mutex)\n"
									},
									{
										"storageClass": [
											"override"
										],
										"line": 2113,
										"kind": "function",
										"char": 23,
										"name": "lock",
										"type": "void()",
										"endchar": 58,
										"endline": 2113,
										"comment": " Lock the mutex. cf. $(D core.sync.mutex.Mutex)\n"
									},
									{
										"storageClass": [
											"override"
										],
										"line": 2115,
										"kind": "function",
										"char": 23,
										"name": "unlock",
										"type": "void()",
										"endchar": 60,
										"endline": 2115,
										"comment": " Unlock the mutex. cf. $(D core.sync.mutex.Mutex)\n"
									}
								],
								"line": 2108,
								"name": "Mutex"
							}
						],
						"name": "Mutex",
						"comment": " A common baseclass for both of the provided mutexes.\n\n  The intent for the according mutex is specified through the\n  $(D INTENT) template argument, which determines if a mutex is\n  used for read or write locking.\n"
					},
					{
						"kind": "alias",
						"deco": "C4vibe4core4sync18TaskReadWriteMutex__T5MutexVEQBuQBsQBq__T19ReadWriteMutexStateVbi0ZQBa13LockingIntenti0ZQCp",
						"char": 5,
						"line": 2117,
						"name": "Reader"
					},
					{
						"kind": "alias",
						"deco": "C4vibe4core4sync18TaskReadWriteMutex__T5MutexVEQBuQBsQBq__T19ReadWriteMutexStateVbi0ZQBa13LockingIntenti1ZQCp",
						"char": 5,
						"line": 2118,
						"name": "Writer"
					},
					{
						"line": 2120,
						"kind": "variable",
						"originalType": "Reader",
						"char": 12,
						"name": "reader",
						"deco": "C4vibe4core4sync18TaskReadWriteMutex__T5MutexVEQBuQBsQBq__T19ReadWriteMutexStateVbi0ZQBa13LockingIntenti0ZQCp",
						"offset": 112
					},
					{
						"line": 2121,
						"kind": "variable",
						"originalType": "Writer",
						"char": 12,
						"name": "writer",
						"deco": "C4vibe4core4sync18TaskReadWriteMutex__T5MutexVEQBuQBsQBq__T19ReadWriteMutexStateVbi0ZQBa13LockingIntenti1ZQCp",
						"offset": 120
					},
					{
						"parameters": [
							{
								"deco": "E4vibe4core4sync__T19ReadWriteMutexStateVbi0ZQBa6Policy",
								"default": "cast(Policy)1",
								"name": "policy"
							}
						],
						"line": 2123,
						"kind": "constructor",
						"originalType": "(Policy policy = Policy.PREFER_WRITERS)",
						"char": 5,
						"name": "this",
						"deco": "FE4vibe4core4sync__T19ReadWriteMutexStateVbi0ZQBa6PolicyZCQCeQCcQCa18TaskReadWriteMutex",
						"endchar": 5,
						"endline": 2128
					},
					{
						"line": 2131,
						"kind": "function",
						"char": 22,
						"name": "policy",
						"deco": "xFNdZE4vibe4core4sync__T19ReadWriteMutexStateVbi0ZQBa6Policy",
						"endchar": 62,
						"endline": 2131,
						"comment": " The policy with which the lock has been created.\n"
					}
				],
				"comment": " A ReadWriteMutex implementation for fibers.\n\n  This mutex can be used in exchange for a $(D core.sync.mutex.ReadWriteMutex),\n  but does not block the event loop in contention situations. The `reader` and `writer`\n  members are used for locking. Locking the `reader` mutex allows access to multiple\n  readers at once, while the `writer` mutex only allows a single writer to lock it at\n  any given time. Locks on `reader` and `writer` are mutually exclusive (i.e. whenever a\n  writer is active, no readers can be active at the same time, and vice versa).\n\n  Notice:\n      Mutexes implemented by this class cannot be interrupted\n      using $(D vibe.core.task.Task.interrupt()). The corresponding\n      InterruptException will be deferred until the next blocking\n      operation yields the event loop.\n\n      Use $(D InterruptibleTaskReadWriteMutex) as an alternative that can be\n      interrupted.\n\n  cf. $(D core.sync.mutex.ReadWriteMutex)\n",
				"name": "TaskReadWriteMutex"
			},
			{
				"kind": "class",
				"line": 2141,
				"char": 7,
				"members": [
					{
						"kind": "alias",
						"line": 2167,
						"char": 5,
						"deco": "E4vibe4core4sync__T19ReadWriteMutexStateVbi1ZQBa6Policy",
						"comment": " The policy with which the mutex should operate.\n\n  The policy determines how the acquisition of the locks is\n  performed and can be used to tune the mutex according to the\n  underlying algorithm in which it is used.\n\n  According to the provided policy, the mutex will either favor\n  reading or writing tasks and could potentially starve the\n  respective opposite.\n\n  cf. $(D core.sync.rwmutex.ReadWriteMutex.Policy)\n",
						"name": "Policy"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "E4vibe4core4sync__T19ReadWriteMutexStateVbi1ZQBa13LockingIntent",
								"name": "INTENT"
							}
						],
						"line": 2176,
						"kind": "template",
						"char": 11,
						"members": [
							{
								"kind": "class",
								"char": 11,
								"members": [
									{
										"storageClass": [
											"override"
										],
										"line": 2179,
										"kind": "function",
										"char": 23,
										"name": "tryLock",
										"type": "bool()",
										"endchar": 68,
										"endline": 2179,
										"comment": " Try to lock the mutex. cf. $(D core.sync.mutex.Mutex)\n"
									},
									{
										"storageClass": [
											"override"
										],
										"line": 2181,
										"kind": "function",
										"char": 23,
										"name": "lock",
										"type": "void()",
										"endchar": 58,
										"endline": 2181,
										"comment": " Lock the mutex. cf. $(D core.sync.mutex.Mutex)\n"
									},
									{
										"storageClass": [
											"override"
										],
										"line": 2183,
										"kind": "function",
										"char": 23,
										"name": "unlock",
										"type": "void()",
										"endchar": 60,
										"endline": 2183,
										"comment": " Unlock the mutex. cf. $(D core.sync.mutex.Mutex)\n"
									}
								],
								"line": 2176,
								"name": "Mutex"
							}
						],
						"name": "Mutex",
						"comment": " A common baseclass for both of the provided mutexes.\n\n  The intent for the according mutex is specified through the\n  $(D INTENT) template argument, which determines if a mutex is\n  used for read or write locking.\n\n"
					},
					{
						"kind": "alias",
						"deco": "C4vibe4core4sync31InterruptibleTaskReadWriteMutex__T5MutexVEQChQCfQCd__T19ReadWriteMutexStateVbi1ZQBa13LockingIntenti0ZQCp",
						"char": 5,
						"line": 2185,
						"name": "Reader"
					},
					{
						"kind": "alias",
						"deco": "C4vibe4core4sync31InterruptibleTaskReadWriteMutex__T5MutexVEQChQCfQCd__T19ReadWriteMutexStateVbi1ZQBa13LockingIntenti1ZQCp",
						"char": 5,
						"line": 2186,
						"name": "Writer"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 2188,
						"kind": "variable",
						"originalType": "Reader",
						"char": 12,
						"name": "reader",
						"deco": "C4vibe4core4sync31InterruptibleTaskReadWriteMutex__T5MutexVEQChQCfQCd__T19ReadWriteMutexStateVbi1ZQBa13LockingIntenti0ZQCp",
						"offset": 112
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 2189,
						"kind": "variable",
						"originalType": "Writer",
						"char": 12,
						"name": "writer",
						"deco": "C4vibe4core4sync31InterruptibleTaskReadWriteMutex__T5MutexVEQChQCfQCd__T19ReadWriteMutexStateVbi1ZQBa13LockingIntenti1ZQCp",
						"offset": 120
					},
					{
						"parameters": [
							{
								"deco": "E4vibe4core4sync__T19ReadWriteMutexStateVbi1ZQBa6Policy",
								"default": "cast(Policy)1",
								"name": "policy"
							}
						],
						"line": 2191,
						"kind": "constructor",
						"originalType": "@safe (Policy policy = Policy.PREFER_WRITERS)",
						"char": 5,
						"name": "this",
						"deco": "FNfE4vibe4core4sync__T19ReadWriteMutexStateVbi1ZQBa6PolicyZCQCeQCcQCa31InterruptibleTaskReadWriteMutex",
						"endchar": 5,
						"endline": 2196
					},
					{
						"line": 2199,
						"kind": "function",
						"char": 22,
						"name": "policy",
						"deco": "xFNdNfZE4vibe4core4sync__T19ReadWriteMutexStateVbi1ZQBa6Policy",
						"endchar": 62,
						"endline": 2199,
						"comment": " The policy with which the lock has been created.\n"
					}
				],
				"comment": " Alternative to $(D TaskReadWriteMutex) that supports interruption.\n\n  This class supports the use of $(D vibe.core.task.Task.interrupt()) while\n  waiting in the `lock()` method.\n\n  cf. $(D core.sync.mutex.ReadWriteMutex)\n",
				"name": "InterruptibleTaskReadWriteMutex"
			}
		],
		"comment": "\tEvent loop compatible task synchronization facilities.\n\n\tThis module provides replacement primitives for the modules in `core.sync`\n\tthat do not block vibe.d's event loop in their wait states. These should\n\talways be preferred over the ones in Druntime under usual circumstances.\n\n\tUsing a standard `Mutex` is possible as long as it is ensured that no event\n\tloop based functionality (I/O, task interaction or anything that implicitly\n\tcalls `vibe.core.core.yield`) is executed within a section of code that is\n\tprotected by the mutex. $(B Failure to do so may result in dead-locks and\n\thigh-level race-conditions!)\n\n\tCopyright: © 2012-2019 Sönke Ludwig\n\tAuthors: Leonid Kramer, Sönke Ludwig, Manuel Frischknecht\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
		"name": "vibe.core.sync"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/task.d",
		"members": [
			{
				"kind": "struct",
				"line": 26,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "xS4vibe4core4task4Task",
								"name": "other"
							}
						],
						"line": 40,
						"kind": "constructor",
						"originalType": "nothrow ref @safe (in Task other)",
						"char": 2,
						"name": "this",
						"deco": "FNbNcNfxS4vibe4core4task4TaskZSQwQtQqQn",
						"endchar": 2,
						"endline": 44
					},
					{
						"storageClass": [
							"static"
						],
						"line": 48,
						"kind": "function",
						"char": 14,
						"name": "getThis",
						"deco": "FNbNfZS4vibe4core4task4Task",
						"endchar": 2,
						"endline": 62,
						"comment": " Returns the Task instance belonging to the calling task.\n"
					},
					{
						"line": 66,
						"kind": "function",
						"char": 26,
						"name": "fiber",
						"deco": "NgFNbNdZNgC4core6thread5Fiber",
						"endchar": 73,
						"endline": 66
					},
					{
						"line": 67,
						"kind": "function",
						"originalType": "const nothrow @property @safe size_t()",
						"char": 20,
						"name": "taskCounter",
						"deco": "xFNbNdNfZm",
						"endchar": 70,
						"endline": 67
					},
					{
						"line": 68,
						"kind": "function",
						"char": 27,
						"name": "thread",
						"deco": "NgFNbNdNeZNgC4core6thread6Thread",
						"endchar": 109,
						"endline": 68
					},
					{
						"line": 72,
						"kind": "function",
						"char": 18,
						"name": "running",
						"deco": "xFNbNdNeZb",
						"endchar": 3,
						"endline": 81,
						"comment": " Determines if the task is still running or scheduled to be run.\n"
					},
					{
						"line": 89,
						"kind": "function",
						"char": 17,
						"name": "tid",
						"deco": "FNbNdNeZS3std11concurrency3Tid",
						"endchar": 56,
						"endline": 89,
						"comment": " Gets the `Tid` associated with this task for use with\n\t\t\t`std.concurrency`.\n"
					},
					{
						"line": 91,
						"kind": "function",
						"char": 24,
						"name": "tid",
						"deco": "xFNbNdNeZxS3std11concurrency3Tid",
						"endchar": 69,
						"endline": 91,
						"comment": "ditto\n"
					},
					{
						"constraint": "is(T == bool)",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 94,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"line": 94,
								"kind": "function",
								"char": 4,
								"name": "opCast",
								"type": "const nothrow @safe T()",
								"endchar": 82,
								"endline": 94
							}
						],
						"name": "opCast"
					},
					{
						"line": 96,
						"kind": "function",
						"char": 7,
						"name": "join",
						"deco": "FNeZv",
						"endchar": 72,
						"endline": 96
					},
					{
						"line": 97,
						"kind": "function",
						"char": 7,
						"name": "joinUninterruptible",
						"deco": "FNbNeZv",
						"endchar": 96,
						"endline": 97
					},
					{
						"line": 98,
						"kind": "function",
						"char": 7,
						"name": "interrupt",
						"deco": "FNbNeZv",
						"endchar": 85,
						"endline": 98
					},
					{
						"line": 100,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFNfZAya",
						"endchar": 139,
						"endline": 100
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 102,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "R",
										"storageClass": [
											"ref"
										],
										"name": "dst"
									}
								],
								"line": 102,
								"kind": "function",
								"char": 7,
								"name": "getDebugID",
								"type": "void(ref R dst)",
								"endchar": 2,
								"endline": 119
							}
						],
						"name": "getDebugID"
					},
					{
						"line": 120,
						"kind": "function",
						"char": 9,
						"name": "getDebugID",
						"deco": "FNeZAya",
						"endchar": 2,
						"endline": 126
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4core4task4Task",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 128,
						"kind": "function",
						"originalType": "const nothrow @safe bool(ref Task other)",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNbNfKxS4vibe4core4task4TaskZb",
						"endchar": 130,
						"endline": 128
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4core4task4Task",
								"name": "other"
							}
						],
						"line": 129,
						"kind": "function",
						"originalType": "const nothrow @safe bool(in Task other)",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNbNfxS4vibe4core4task4TaskZb",
						"endchar": 126,
						"endline": 129
					}
				],
				"comment": " Represents a single task as started using vibe.core.runTask.\n\n\tNote that the Task type is considered weakly isolated and thus can be\n\tpassed between threads using vibe.core.concurrency.send or by passing\n\tit as a parameter to vibe.core.core.runWorkerTask.\n",
				"name": "Task"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 169,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"line": 172,
								"kind": "variable",
								"char": 10,
								"name": "m_offset",
								"init": "size_t.max",
								"type": "size_t"
							},
							{
								"kind": "variable",
								"type": "size_t",
								"char": 10,
								"line": 173,
								"name": "m_id"
							},
							{
								"kind": "variable",
								"type": "T",
								"char": 5,
								"line": 174,
								"name": "m_initValue"
							},
							{
								"line": 175,
								"kind": "variable",
								"char": 8,
								"name": "m_hasInitValue",
								"deco": "b",
								"init": "false"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "init_val"
									}
								],
								"line": 178,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(T init_val)",
								"endchar": 68,
								"endline": 178
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 182,
								"kind": "function",
								"char": 7,
								"name": "opAssign",
								"type": "void(T value)",
								"endchar": 49,
								"endline": 182
							},
							{
								"line": 184,
								"kind": "function",
								"char": 18,
								"name": "storage",
								"type": "@property ref @safe T()",
								"endchar": 2,
								"endline": 247
							}
						],
						"line": 169,
						"name": "TaskLocal"
					}
				],
				"name": "TaskLocal",
				"comment": "\tImplements a task local storage variable.\n\n\tTask local variables, similar to thread local variables, exist separately\n\tin each task. Consequently, they do not need any form of synchronization\n\twhen accessing them.\n\n\tNote, however, that each TaskLocal variable will increase the memory footprint\n\tof any task that uses task local storage. There is also an overhead to access\n\tTaskLocal variables, higher than for thread local variables, but generelly\n\tstill O(1) (since actual storage acquisition is done lazily the first access\n\tcan require a memory allocation with unknown computational costs).\n\n\tNotice:\n\t\tFiberLocal instances MUST be declared as static/global thread-local\n\t\tvariables. Defining them as a temporary/stack variable will cause\n\t\tcrashes or data corruption!\n\n\tExamples:\n\t\t---\n\t\tTaskLocal!string s_myString = \"world\";\n\n\t\tvoid taskFunc()\n\t\t{\n\t\t\tassert(s_myString == \"world\");\n\t\t\ts_myString = \"hello\";\n\t\t\tassert(s_myString == \"hello\");\n\t\t}\n\n\t\tshared static this()\n\t\t{\n\t\t\t// both tasks will get independent storage for s_myString\n\t\t\trunTask(&taskFunc);\n\t\t\trunTask(&taskFunc);\n\t\t}\n\t\t---\n"
			},
			{
				"line": 255,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"line": 256,
						"kind": "constructor",
						"originalType": "nothrow @safe ()",
						"char": 2,
						"name": "this",
						"deco": "FNbNfZC4vibe4core4task18InterruptException",
						"endchar": 2,
						"endline": 259
					}
				],
				"name": "InterruptException",
				"comment": " Exception that is thrown by Task.interrupt.\n"
			},
			{
				"line": 265,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 266,
						"char": 2,
						"value": "0",
						"comment": "Just about to invoke the fiber which starts execution\n",
						"name": "preStart"
					},
					{
						"kind": "enum member",
						"line": 267,
						"char": 2,
						"value": "1",
						"comment": "After the fiber has returned for the first time (by yield or exit)\n",
						"name": "postStart"
					},
					{
						"kind": "enum member",
						"line": 268,
						"char": 2,
						"value": "2",
						"comment": "Just about to start execution\n",
						"name": "start"
					},
					{
						"kind": "enum member",
						"line": 269,
						"char": 2,
						"value": "3",
						"comment": "Temporarily paused\n",
						"name": "yield"
					},
					{
						"kind": "enum member",
						"line": 270,
						"char": 2,
						"value": "4",
						"comment": "Resumed from a prior yield\n",
						"name": "resume"
					},
					{
						"kind": "enum member",
						"line": 271,
						"char": 2,
						"value": "5",
						"comment": "Ended normally\n",
						"name": "end"
					},
					{
						"kind": "enum member",
						"line": 272,
						"char": 2,
						"value": "6",
						"comment": "Ended with an exception\n",
						"name": "fail"
					}
				],
				"name": "TaskEvent",
				"baseDeco": "i",
				"comment": "\tHigh level state change events for a Task\n"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 276,
						"kind": "variable",
						"char": 7,
						"name": "handle",
						"deco": "S4vibe4core4task4Task",
						"offset": 0
					},
					{
						"line": 277,
						"kind": "variable",
						"char": 15,
						"name": "functionPointer",
						"deco": "Pxv",
						"offset": 16
					}
				],
				"line": 275,
				"name": "TaskCreationInfo"
			},
			{
				"kind": "alias",
				"deco": "PFNbE4vibe4core4task9TaskEventSQBaQyQv4TaskZv",
				"char": 1,
				"line": 280,
				"name": "TaskEventCallback"
			},
			{
				"kind": "alias",
				"deco": "PFNbNfKS4vibe4core4task16TaskCreationInfoZv",
				"char": 1,
				"line": 281,
				"name": "TaskCreationCallback"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 288,
				"kind": "variable",
				"char": 6,
				"name": "maxTaskParameterSize",
				"deco": "i",
				"init": "128",
				"comment": "\tThe maximum combined size of all parameters passed to a task delegate\n\n\tSee_Also: runTask\n"
			}
		],
		"comment": "\tContains interfaces and enums for evented I/O drivers.\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
		"name": "vibe.core.task"
	},
	{
		"kind": "module",
		"file": "../vibe-core/source/vibe/core/taskpool.d",
		"members": [
			{
				"kind": "class",
				"line": 23,
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"deco": "m",
								"default": "cast(ulong)logicalProcessorCount()",
								"name": "thread_count"
							}
						],
						"line": 40,
						"kind": "constructor",
						"originalType": "shared @safe (size_t thread_count = logicalProcessorCount())",
						"char": 2,
						"name": "this",
						"deco": "OFNfmZOC4vibe4core8taskpool8TaskPool",
						"endchar": 2,
						"endline": 60,
						"comment": " Creates a new task pool with the specified number of threads.\n\n\t\tParams:\n\t\t\tthread_count = The number of worker threads to create\n"
					},
					{
						"line": 64,
						"kind": "function",
						"originalType": "shared const @property size_t()",
						"char": 19,
						"name": "threadCount",
						"deco": "OxFNdZm",
						"endchar": 70,
						"endline": 64,
						"comment": " Returns the number of worker threads.\n"
					},
					{
						"line": 69,
						"kind": "function",
						"char": 7,
						"name": "terminate",
						"deco": "OFNbNfZv",
						"endchar": 2,
						"endline": 96,
						"comment": " Instructs all worker threads to terminate and waits until all have\n\t\tfinished.\n"
					},
					{
						"line": 101,
						"kind": "function",
						"char": 7,
						"name": "join",
						"deco": "OFNbNfZv",
						"endchar": 2,
						"endline": 104,
						"comment": " Instructs all worker threads to terminate as soon as all tasks have\n\t\tbeen processed and waits for them to finish.\n"
					},
					{
						"constraint": "isFunctionPointer!FT",
						"parameters": [
							{
								"kind": "type",
								"name": "FT"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 111,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "FT",
										"name": "func"
									},
									{
										"type": "ARGS",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "args"
									}
								],
								"line": 111,
								"kind": "function",
								"char": 7,
								"name": "runTask",
								"type": "void(FT func, auto ref ARGS args)",
								"endchar": 2,
								"endline": 116
							}
						],
						"name": "runTask",
						"comment": " Runs a new asynchronous task in a worker thread.\n\n\t\tOnly function pointers with weakly isolated arguments are allowed to be\n\t\table to guarantee thread-safety.\n"
					},
					{
						"constraint": "is(typeof(__traits(getMember, object, __traits(identifier, method))))",
						"parameters": [
							{
								"kind": "alias",
								"name": "method"
							},
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 119,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "shared(T)",
										"name": "object"
									},
									{
										"type": "ARGS",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "args"
									}
								],
								"line": 119,
								"kind": "function",
								"char": 7,
								"name": "runTask",
								"type": "void(shared(T) object, auto ref ARGS args)",
								"endchar": 2,
								"endline": 125
							}
						],
						"name": "runTask",
						"comment": "ditto\n"
					},
					{
						"constraint": "isFunctionPointer!FT",
						"parameters": [
							{
								"kind": "type",
								"name": "FT"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 135,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "FT",
										"name": "func"
									},
									{
										"type": "ARGS",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "args"
									}
								],
								"line": 135,
								"kind": "function",
								"char": 7,
								"name": "runTaskH",
								"type": "Task(FT func, auto ref ARGS args)",
								"endchar": 2,
								"endline": 146
							}
						],
						"name": "runTaskH",
						"comment": " Runs a new asynchronous task in a worker thread, returning the task handle.\n\n\t\tThis function will yield and wait for the new task to be created and started\n\t\tin the worker thread, then resume and return it.\n\n\t\tOnly function pointers with weakly isolated arguments are allowed to be\n\t\table to guarantee thread-safety.\n"
					},
					{
						"constraint": "is(typeof(__traits(getMember, object, __traits(identifier, method))))",
						"parameters": [
							{
								"kind": "alias",
								"name": "method"
							},
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 148,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "shared(T)",
										"name": "object"
									},
									{
										"type": "ARGS",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "args"
									}
								],
								"line": 148,
								"kind": "function",
								"char": 7,
								"name": "runTaskH",
								"type": "Task(shared(T) object, auto ref ARGS args)",
								"endchar": 2,
								"endline": 155
							}
						],
						"name": "runTaskH",
						"comment": "ditto\n"
					},
					{
						"constraint": "is(typeof(*func) == function)",
						"parameters": [
							{
								"kind": "type",
								"name": "FT"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 189,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "FT",
										"name": "func"
									},
									{
										"type": "ARGS",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "args"
									}
								],
								"line": 189,
								"kind": "function",
								"char": 7,
								"name": "runTaskDist",
								"type": "void(FT func, auto ref ARGS args)",
								"endchar": 2,
								"endline": 194
							}
						],
						"name": "runTaskDist",
						"comment": " Runs a new asynchronous task in all worker threads concurrently.\n\n\t\tThis function is mainly useful for long-living tasks that distribute their\n\t\twork across all CPU cores. Only function pointers with weakly isolated\n\t\targuments are allowed to be able to guarantee thread-safety.\n\n\t\tThe number of tasks started is guaranteed to be equal to\n\t\t`threadCount`.\n"
					},
					{
						"parameters": [
							{
								"kind": "alias",
								"name": "method"
							},
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 196,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "shared(T)",
										"name": "object"
									},
									{
										"type": "ARGS",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "args"
									}
								],
								"line": 196,
								"kind": "function",
								"char": 7,
								"name": "runTaskDist",
								"type": "void(shared(T) object, auto ref ARGS args)",
								"endchar": 2,
								"endline": 202
							}
						],
						"name": "runTaskDist",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "HCB"
							},
							{
								"kind": "type",
								"name": "FT"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 211,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "HCB",
										"storageClass": [
											"scope"
										],
										"name": "on_handle"
									},
									{
										"type": "FT",
										"name": "func"
									},
									{
										"type": "ARGS",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "args"
									}
								],
								"line": 211,
								"kind": "function",
								"char": 7,
								"name": "runTaskDistH",
								"type": "void(scope HCB on_handle, FT func, auto ref ARGS args)",
								"endchar": 2,
								"endline": 232
							}
						],
						"name": "runTaskDistH",
						"comment": " Runs a new asynchronous task in all worker threads and returns the handles.\n\n\t\t`on_handle` is an alias to a callble that takes a `Task` as its only\n\t\targument and is called for every task instance that gets created.\n\n\t\tSee_also: `runTaskDist`\n"
					}
				],
				"comment": " Implements a shared, multi-threaded task pool.\n",
				"name": "TaskPool"
			}
		],
		"comment": "\tMulti-threaded task pool implementation.\n\n\tCopyright: © 2012-2017 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.core.taskpool"
	},
	{
		"kind": "module",
		"file": "../eventcore/source/eventcore/core.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 3,
				"name": "eventcore.driver"
			},
			{
				"kind": "alias",
				"deco": "C9eventcore7drivers5posix6driver__T16PosixEventDriverHTCQCdQBwQBr5epoll14EpollEventLoopZQCb",
				"char": 32,
				"line": 12,
				"name": "NativeEventDriver"
			},
			{
				"kind": "alias",
				"deco": "C9eventcore7drivers5posix6driver__T16PosixEventDriverHTCQCdQBwQBr5epoll14EpollEventLoopZQCb",
				"char": 32,
				"line": 12,
				"name": "NativeEventDriver"
			},
			{
				"line": 19,
				"kind": "function",
				"originalType": "nothrow @nogc @property @safe NativeEventDriver()",
				"char": 29,
				"name": "eventDriver",
				"deco": "FNbNdNiNfZC9eventcore7drivers5posix6driver__T16PosixEventDriverHTCQCdQBwQBr5epoll14EpollEventLoopZQCb",
				"endchar": 1,
				"endline": 29
			}
		],
		"name": "eventcore.core"
	},
	{
		"kind": "module",
		"file": "../eventcore/source/eventcore/driver.d",
		"members": [
			{
				"kind": "interface",
				"line": 34,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"line": 37,
						"kind": "function",
						"char": 35,
						"name": "core",
						"deco": "NgFNbNdNfZNgC9eventcore6driver15EventDriverCore",
						"comment": "Core event loop functionality\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 39,
						"kind": "function",
						"char": 43,
						"name": "core",
						"deco": "ONgFNbNdNfZONgC9eventcore6driver15EventDriverCore",
						"comment": "Core event loop functionality\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 41,
						"kind": "function",
						"char": 37,
						"name": "timers",
						"deco": "NgFNbNdNfZNgC9eventcore6driver17EventDriverTimers",
						"comment": "Single shot and recurring timers\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 43,
						"kind": "function",
						"char": 37,
						"name": "events",
						"deco": "NgFNbNdNfZNgC9eventcore6driver17EventDriverEvents",
						"comment": "Cross-thread events (thread local access)\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 45,
						"kind": "function",
						"char": 45,
						"name": "events",
						"deco": "ONgFNbNdNfZONgC9eventcore6driver17EventDriverEvents",
						"comment": "Cross-thread events (cross-thread access)\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 47,
						"kind": "function",
						"char": 38,
						"name": "signals",
						"deco": "NgFNbNdNfZNgC9eventcore6driver18EventDriverSignals",
						"comment": "UNIX/POSIX signal reception\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 49,
						"kind": "function",
						"char": 38,
						"name": "sockets",
						"deco": "NgFNbNdNfZNgC9eventcore6driver18EventDriverSockets",
						"comment": "Stream and datagram sockets\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 51,
						"kind": "function",
						"char": 34,
						"name": "dns",
						"deco": "NgFNbNdNfZNgC9eventcore6driver14EventDriverDNS",
						"comment": "DNS queries\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 53,
						"kind": "function",
						"char": 36,
						"name": "files",
						"deco": "NgFNbNdNfZNgC9eventcore6driver16EventDriverFiles",
						"comment": "Local file operations\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 55,
						"kind": "function",
						"char": 39,
						"name": "watchers",
						"deco": "NgFNbNdNfZNgC9eventcore6driver19EventDriverWatchers",
						"comment": "Directory change watching\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 57,
						"kind": "function",
						"char": 40,
						"name": "processes",
						"deco": "NgFNbNdNfZNgC9eventcore6driver20EventDriverProcesses",
						"comment": "Sub-process handling\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 59,
						"kind": "function",
						"char": 36,
						"name": "pipes",
						"deco": "NgFNbNdNfZNgC9eventcore6driver16EventDriverPipes",
						"comment": "Pipes\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 67,
						"kind": "function",
						"char": 7,
						"name": "dispose",
						"deco": "FNbNfZb",
						"comment": " Releases all resources associated with the driver.\n\n\t\tIn case of any left-over referenced handles, this function returns\n\t\t`false` and does not free any resources. It may choose to free the\n\t\tresources once the last handle gets dereferenced.\n"
					}
				],
				"comment": " Encapsulates a full event driver.\n\n\tThis interface provides access to the individual driver features, as well as\n\ta central `dispose` method that must be called before the driver gets\n\tdestroyed or before the process gets terminated.\n",
				"name": "EventDriver"
			},
			{
				"kind": "interface",
				"line": 73,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"line": 81,
						"kind": "function",
						"originalType": "nothrow @safe size_t()",
						"char": 9,
						"name": "waiterCount",
						"deco": "FNbNfZm",
						"comment": " The number of pending callbacks.\n\n\t\tWhen this number drops to zero, the event loop can safely be quit. It is\n\t\tguaranteed that no callbacks will be made anymore, unless new callbacks\n\t\tget registered.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"line": 95,
						"kind": "function",
						"char": 13,
						"name": "processEvents",
						"deco": "FNbNfS4core4time8DurationZE9eventcore6driver10ExitReason",
						"comment": " Runs the event loop to process a chunk of events.\n\n\t\tThis method optionally waits for an event to arrive if none are present\n\t\tin the event queue. The function will return after either the specified\n\t\ttimeout has elapsed, or once the event queue has been fully emptied.\n\n\t\tParams:\n\t\t\ttimeout = Maximum amount of time to wait for an event. A duration of\n\t\t\t\tzero will cause the function to only process pending events. A\n\t\t\t\tduration of `Duration.max`, if necessary, will wait indefinitely\n\t\t\t\tuntil an event arrives.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 104,
						"kind": "function",
						"char": 7,
						"name": "exit",
						"deco": "FNbNfZv",
						"comment": " Causes `processEvents` to return with `ExitReason.exited` as soon as\n\t\tpossible.\n\n\t\tA call to `processEvents` that is currently in progress will be notified\n\t\tso that it returns immediately. If no call is in progress, the next call\n\t\tto `processEvents` will immediately return with `ExitReason.exited`.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 113,
						"kind": "function",
						"char": 7,
						"name": "clearExitFlag",
						"deco": "FNbNfZv",
						"comment": " Resets the exit flag.\n\n\t\t`processEvents` will automatically reset the exit flag before it returns\n\t\twith `ExitReason.exited`. However, if `exit` is called outside of\n\t\t`processEvents`, the next call to `processEvents` will return with\n\t\t`ExitCode.exited` immediately. This function can be used to avoid this.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "PFNbNflZv",
								"name": "del"
							},
							{
								"deco": "l",
								"name": "param"
							}
						],
						"line": 117,
						"kind": "function",
						"originalType": "shared nothrow @safe void(ThreadCallback del, intptr_t param)",
						"char": 7,
						"name": "runInOwnerThread",
						"deco": "OFNbNfPFNbNflZvlZv",
						"comment": " Executes a callback in the thread owning the driver.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "descriptor"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "initialize"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "destroy"
							}
						],
						"line": 120,
						"kind": "function",
						"originalType": "nothrow @system void*(StreamSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
						"char": 18,
						"name": "rawUserData",
						"deco": "FNbS9eventcore6driver14StreamSocketFDmPFNbNiPvZvQkZQh",
						"protection": "protected",
						"comment": "Low-level user data access. Use `getUserData` instead.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver16DatagramSocketFD",
								"name": "descriptor"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "initialize"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "destroy"
							}
						],
						"line": 122,
						"kind": "function",
						"originalType": "nothrow @system void*(DatagramSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
						"char": 18,
						"name": "rawUserData",
						"deco": "FNbS9eventcore6driver16DatagramSocketFDmPFNbNiPvZvQkZQh",
						"protection": "protected",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "FD"
							}
						],
						"line": 127,
						"kind": "template",
						"char": 24,
						"members": [
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "FD",
										"name": "descriptor"
									}
								],
								"line": 127,
								"kind": "function",
								"char": 24,
								"name": "userData",
								"type": "@property ref @trusted T(FD descriptor)",
								"endchar": 2,
								"endline": 133
							}
						],
						"name": "userData",
						"comment": " Deprecated - use `EventDriverSockets.userData` instead.\n"
					}
				],
				"comment": " Provides generic event loop control.\n",
				"name": "EventDriverCore"
			},
			{
				"kind": "interface",
				"line": 142,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "C3std6socket7Address",
								"storageClass": [
									"scope"
								],
								"name": "peer_address"
							},
							{
								"deco": "C3std6socket7Address",
								"storageClass": [
									"scope"
								],
								"name": "bind_address"
							},
							{
								"deco": "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb13ConnectStatusZv",
								"name": "on_connect"
							}
						],
						"line": 146,
						"kind": "function",
						"originalType": "nothrow @safe StreamSocketFD(scope Address peer_address, scope Address bind_address, ConnectCallback on_connect)",
						"char": 17,
						"name": "connectStream",
						"deco": "FNbNfMC3std6socket7AddressMQvDFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb13ConnectStatusZvZQCh",
						"comment": " Connects to a stream listening socket.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "sock"
							}
						],
						"line": 163,
						"kind": "function",
						"char": 7,
						"name": "cancelConnectStream",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDZv",
						"comment": " Aborts asynchronous connect by closing the socket.\n\n\t\tThis function may only invoked if the connection state is\n\t\t`ConnectionState.connecting`. It will cancel the connection attempt and\n\t\tguarantees that the connection callback will not be invoked in the\n\t\tfuture.\n\n\t\tNote that upon completion, the socket handle will be invalid, regardless\n\t\tof the number of calls to `addRef`, and must not be used for further\n\t\toperations.\n\n\t\tParams:\n\t\t\tsock = Handle of the socket that is currently establishing a\n\t\t\t\tconnection\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "i",
								"name": "socket"
							}
						],
						"line": 180,
						"kind": "function",
						"char": 17,
						"name": "adoptStream",
						"deco": "FNbNfiZS9eventcore6driver14StreamSocketFD",
						"comment": " Adopts an existing stream socket.\n\n\t\tThe given socket must be in a connected state. It will be automatically\n\t\tswitched to non-blocking mode if necessary. Beware that this may have\n\t\tside effects in other code that uses the socket and assumes blocking\n\t\toperations.\n\n\t\tParams:\n\t\t\tsocket = Socket file descriptor to adopt\n\n\t\tReturns:\n\t\t\tReturns a socket handle corresponding to the passed socket\n\t\t\t\tdescriptor. If the same file descriptor is already registered,\n\t\t\t\t`StreamSocketFD.invalid` will be returned instead.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "C3std6socket7Address",
								"storageClass": [
									"scope"
								],
								"name": "bind_address"
							},
							{
								"deco": "E9eventcore6driver19StreamListenOptions",
								"name": "options"
							},
							{
								"deco": "DFNbNfS9eventcore6driver20StreamListenSocketFDSQBoQBh14StreamSocketFDMCQCmQCf10RefAddressZv",
								"name": "on_accept"
							}
						],
						"line": 183,
						"kind": "function",
						"originalType": "nothrow @safe StreamListenSocketFD(scope Address bind_address, StreamListenOptions options, AcceptCallback on_accept)",
						"char": 23,
						"name": "listenStream",
						"deco": "FNbNfMC3std6socket7AddressE9eventcore6driver19StreamListenOptionsDFNbNfSQBtQBm20StreamListenSocketFDSQCwQCp14StreamSocketFDMCQDuQDn10RefAddressZvZQCx",
						"comment": "Creates a socket listening for incoming stream connections.\n"
					},
					{
						"storageClass": [
							"final",
							"abstract"
						],
						"parameters": [
							{
								"deco": "C3std6socket7Address",
								"storageClass": [
									"scope"
								],
								"name": "bind_address"
							},
							{
								"deco": "DFNbNfS9eventcore6driver20StreamListenSocketFDSQBoQBh14StreamSocketFDMCQCmQCf10RefAddressZv",
								"name": "on_accept"
							}
						],
						"line": 185,
						"kind": "function",
						"originalType": "nothrow @safe StreamListenSocketFD(scope Address bind_address, AcceptCallback on_accept)",
						"char": 29,
						"name": "listenStream",
						"deco": "FNbNfMC3std6socket7AddressDFNbNfS9eventcore6driver20StreamListenSocketFDSQBoQBh14StreamSocketFDMCQCmQCf10RefAddressZvZQDi",
						"endchar": 2,
						"endline": 187
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver20StreamListenSocketFD",
								"name": "sock"
							},
							{
								"deco": "DFNbNfS9eventcore6driver20StreamListenSocketFDSQBoQBh14StreamSocketFDMCQCmQCf10RefAddressZv",
								"name": "on_accept"
							}
						],
						"line": 190,
						"kind": "function",
						"originalType": "nothrow @safe void(StreamListenSocketFD sock, AcceptCallback on_accept)",
						"char": 7,
						"name": "waitForConnections",
						"deco": "FNbNfS9eventcore6driver20StreamListenSocketFDDFNbNfQBuSQBxQBq14StreamSocketFDMCQCvQCo10RefAddressZvZv",
						"comment": "Starts to wait for incoming connections on a listening socket.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "sock"
							}
						],
						"line": 193,
						"kind": "function",
						"char": 18,
						"name": "getConnectionState",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDZEQBjQBc15ConnectionState",
						"comment": "Determines the current connection state.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver8SocketFD",
								"name": "sock"
							},
							{
								"deco": "C9eventcore6driver10RefAddress",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							}
						],
						"line": 207,
						"kind": "function",
						"char": 7,
						"name": "getLocalAddress",
						"deco": "FNbNfS9eventcore6driver8SocketFDMCQBcQv10RefAddressZb",
						"comment": " Retrieves the bind address of a socket.\n\n\t\tExample:\n\t\tThe following code can be used to retrieve an IPv4/IPv6 address\n\t\tallocated on the stack. Note that Unix domain sockets require a larger\n\t\tbuffer (e.g. `sockaddr_storage`).\n\t\t---\n\t\tscope storage = new UnknownAddress;\n\t\tscope sockaddr = new RefAddress(storage.name, storage.nameLen);\n\t\teventDriver.sockets.getLocalAddress(sock, sockaddr);\n\t\t---\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver8SocketFD",
								"name": "sock"
							},
							{
								"deco": "C9eventcore6driver10RefAddress",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							}
						],
						"line": 221,
						"kind": "function",
						"char": 7,
						"name": "getRemoteAddress",
						"deco": "FNbNfS9eventcore6driver8SocketFDMCQBcQv10RefAddressZb",
						"comment": " Retrieves the address of the connected peer.\n\n\t\tExample:\n\t\tThe following code can be used to retrieve an IPv4/IPv6 address\n\t\tallocated on the stack. Note that Unix domain sockets require a larger\n\t\tbuffer (e.g. `sockaddr_storage`).\n\t\t---\n\t\tscope storage = new UnknownAddress;\n\t\tscope sockaddr = new RefAddress(storage.name, storage.nameLen);\n\t\teventDriver.sockets.getLocalAddress(sock, sockaddr);\n\t\t---\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "socket"
							},
							{
								"deco": "b",
								"name": "enable"
							}
						],
						"line": 224,
						"kind": "function",
						"char": 7,
						"name": "setTCPNoDelay",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDbZv",
						"comment": "Sets the `TCP_NODELAY` option on a socket\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "socket"
							},
							{
								"deco": "b",
								"name": "enable"
							}
						],
						"line": 227,
						"kind": "function",
						"char": 7,
						"name": "setKeepAlive",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDbZv",
						"comment": "Sets to `SO_KEEPALIVE` socket option on a socket.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "socket"
							},
							{
								"deco": "S4core4time8Duration",
								"name": "idle"
							},
							{
								"deco": "S4core4time8Duration",
								"name": "interval"
							},
							{
								"deco": "i",
								"default": "5",
								"name": "probeCount"
							}
						],
						"line": 240,
						"kind": "function",
						"char": 7,
						"name": "setKeepAliveParams",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDS4core4time8DurationQuiZv",
						"comment": " Enables keepalive for the TCP socket and sets additional parameters.\n\t\tSilently ignores unsupported systems (anything but Windows and Linux).\n\n\t\tParams:\n\t\t\tsocket = Socket file descriptor to set options on.\n\t\t\tidle = The time the connection needs to remain idle\n\t\t\t\tbefore TCP starts sending keepalive probes.\n\t\t\tinterval = The time between individual keepalive probes.\n\t\t\tprobeCount = The maximum number of keepalive probes TCP should send\n\t\t\t\tbefore dropping the connection. Has no effect on Windows.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "socket"
							},
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"line": 243,
						"kind": "function",
						"char": 7,
						"name": "setUserTimeout",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDS4core4time8DurationZv",
						"comment": "Sets `TCP_USER_TIMEOUT` socket option (linux only). https://tools.ietf.org/html/rfc5482\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "socket"
							},
							{
								"deco": "Ah",
								"name": "buffer"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							},
							{
								"deco": "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb8IOStatusmZv",
								"name": "on_read_finish"
							}
						],
						"line": 263,
						"kind": "function",
						"originalType": "nothrow @safe void(StreamSocketFD socket, ubyte[] buffer, IOMode mode, IOCallback on_read_finish)",
						"char": 7,
						"name": "read",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDAhEQBkQBd6IOModeDFNbNfQCeEQChQCa8IOStatusmZvZv",
						"comment": " Reads data from a stream socket.\n\n\t\tNote that only a single read operation is allowed at once. The caller\n\t\tneeds to make sure that either `on_read_finish` got called, or\n\t\t`cancelRead` was called before issuing the next call to `read`.\n\t\tHowever, concurrent writes are legal.\n\n\t\tWaiting_for_data_availability:\n\t\t\tWith the special combination of a zero-length buffer and `mode`\n\t\t\tset to either `IOMode.once` or `IOMode.all`, this function will\n\t\t\twait until data is available on the socket without reading\n\t\t\tanything.\n\n\t\t\tNote that in this case the `IOStatus` parameter of the callback\n\t\t\twill not reliably reflect a passive connection close. It is\n\t\t\tnecessary to actually read some data to make sure this case\n\t\t\tis detected.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "socket"
							}
						],
						"line": 270,
						"kind": "function",
						"char": 7,
						"name": "cancelRead",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDZv",
						"comment": " Cancels an ongoing read operation.\n\n\t\tAfter this function has been called, the `IOCallback` specified in\n\t\tthe call to `read` is guaranteed to not be called.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "socket"
							},
							{
								"deco": "Axh",
								"name": "buffer"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							},
							{
								"deco": "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb8IOStatusmZv",
								"name": "on_write_finish"
							}
						],
						"line": 279,
						"kind": "function",
						"originalType": "nothrow @safe void(StreamSocketFD socket, const(ubyte)[] buffer, IOMode mode, IOCallback on_write_finish)",
						"char": 7,
						"name": "write",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDAxhEQBlQBe6IOModeDFNbNfQCfEQCiQCb8IOStatusmZvZv",
						"comment": " Reads data from a stream socket.\n\n\t\tNote that only a single write operation is allowed at once. The caller\n\t\tneeds to make sure that either `on_write_finish` got called, or\n\t\t`cancelWrite` was called before issuing the next call to `write`.\n\t\tHowever, concurrent reads are legal.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "socket"
							}
						],
						"line": 286,
						"kind": "function",
						"char": 7,
						"name": "cancelWrite",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDZv",
						"comment": " Cancels an ongoing write operation.\n\n\t\tAfter this function has been called, the `IOCallback` specified in\n\t\tthe call to `write` is guaranteed to not be called.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "socket"
							},
							{
								"deco": "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb8IOStatusmZv",
								"name": "on_data_available"
							}
						],
						"line": 290,
						"kind": "function",
						"originalType": "nothrow @safe void(StreamSocketFD socket, IOCallback on_data_available)",
						"char": 7,
						"name": "waitForData",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDDFNbNfQBoEQBrQBk8IOStatusmZvZv",
						"comment": " Waits for incoming data without actually reading it.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "socket"
							},
							{
								"deco": "b",
								"name": "shut_read"
							},
							{
								"deco": "b",
								"name": "shut_write"
							}
						],
						"line": 294,
						"kind": "function",
						"char": 7,
						"name": "shutdown",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDbbZv",
						"comment": " Initiates a connection close.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "C3std6socket7Address",
								"storageClass": [
									"scope"
								],
								"name": "bind_address"
							},
							{
								"deco": "C3std6socket7Address",
								"storageClass": [
									"scope"
								],
								"name": "target_address"
							}
						],
						"line": 309,
						"kind": "function",
						"char": 19,
						"name": "createDatagramSocket",
						"deco": "FNbNfMC3std6socket7AddressMQvZS9eventcore6driver16DatagramSocketFD",
						"comment": " Creates a connection-less datagram socket.\n\n\t\tParams:\n\t\t\tbind_address = The local bind address to use for the socket. It\n\t\t\t\twill be able to receive any messages sent to this address.\n\t\t\ttarget_address = Optional default target address. If this is\n\t\t\t\tspecified and the target address parameter of `send` is\n\t\t\t\tleft to `null`, it will be used instead.\n\n\t\tReturns:\n\t\t\tReturns a datagram socket handle if the socket was created\n\t\t\tsuccessfully. Otherwise returns `DatagramSocketFD.invalid`.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "i",
								"name": "socket"
							}
						],
						"line": 323,
						"kind": "function",
						"char": 19,
						"name": "adoptDatagramSocket",
						"deco": "FNbNfiZS9eventcore6driver16DatagramSocketFD",
						"comment": " Adopts an existing datagram socket.\n\n\t\tThe socket must be properly bound before this function is called.\n\n\t\tParams:\n\t\t\tsocket = Socket file descriptor to adopt\n\n\t\tReturns:\n\t\t\tReturns a socket handle corresponding to the passed socket\n\t\t\t\tdescriptor. If the same file descriptor is already registered,\n\t\t\t\t`DatagramSocketFD.invalid` will be returned instead.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver16DatagramSocketFD",
								"name": "socket"
							},
							{
								"deco": "C3std6socket7Address",
								"storageClass": [
									"scope"
								],
								"name": "target_address"
							}
						],
						"line": 327,
						"kind": "function",
						"char": 7,
						"name": "setTargetAddress",
						"deco": "FNbNfS9eventcore6driver16DatagramSocketFDMC3std6socket7AddressZv",
						"comment": " Sets an address to use as the default target address for sent datagrams.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver16DatagramSocketFD",
								"name": "socket"
							},
							{
								"deco": "b",
								"name": "enable"
							}
						],
						"line": 330,
						"kind": "function",
						"char": 7,
						"name": "setBroadcast",
						"deco": "FNbNfS9eventcore6driver16DatagramSocketFDbZb",
						"comment": "Sets the `SO_BROADCAST` socket option.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver16DatagramSocketFD",
								"name": "socket"
							},
							{
								"deco": "C3std6socket7Address",
								"storageClass": [
									"scope"
								],
								"name": "multicast_address"
							},
							{
								"deco": "k",
								"default": "0u",
								"name": "interface_index"
							}
						],
						"line": 333,
						"kind": "function",
						"originalType": "nothrow @safe bool(DatagramSocketFD socket, scope Address multicast_address, uint interface_index = 0)",
						"char": 7,
						"name": "joinMulticastGroup",
						"deco": "FNbNfS9eventcore6driver16DatagramSocketFDMC3std6socket7AddresskZb",
						"comment": "Joins the multicast group associated with the given IP address.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver16DatagramSocketFD",
								"name": "socket"
							},
							{
								"deco": "Ah",
								"name": "buffer"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							},
							{
								"deco": "DFNbNfS9eventcore6driver16DatagramSocketFDEQBkQBd8IOStatusmMCQCcQBv10RefAddressZv",
								"name": "on_receive_finish"
							}
						],
						"line": 336,
						"kind": "function",
						"originalType": "nothrow @safe void(DatagramSocketFD socket, ubyte[] buffer, IOMode mode, DatagramIOCallback on_receive_finish)",
						"char": 7,
						"name": "receive",
						"deco": "FNbNfS9eventcore6driver16DatagramSocketFDAhEQBmQBf6IOModeDFNbNfQCgEQCjQCc8IOStatusmMCQDbQCu10RefAddressZvZv",
						"comment": "Receives a single datagram.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver16DatagramSocketFD",
								"name": "socket"
							}
						],
						"line": 338,
						"kind": "function",
						"char": 7,
						"name": "cancelReceive",
						"deco": "FNbNfS9eventcore6driver16DatagramSocketFDZv",
						"comment": "Cancels an ongoing wait for an incoming datagram.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver16DatagramSocketFD",
								"name": "socket"
							},
							{
								"deco": "Axh",
								"name": "buffer"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							},
							{
								"deco": "C3std6socket7Address",
								"name": "target_address"
							},
							{
								"deco": "DFNbNfS9eventcore6driver16DatagramSocketFDEQBkQBd8IOStatusmMCQCcQBv10RefAddressZv",
								"name": "on_send_finish"
							}
						],
						"line": 340,
						"kind": "function",
						"originalType": "nothrow @safe void(DatagramSocketFD socket, const(ubyte)[] buffer, IOMode mode, Address target_address, DatagramIOCallback on_send_finish)",
						"char": 7,
						"name": "send",
						"deco": "FNbNfS9eventcore6driver16DatagramSocketFDAxhEQBnQBg6IOModeC3std6socket7AddressDFNbNfQDbEQDeQCx8IOStatusmMCQDwQDp10RefAddressZvZv",
						"comment": "Sends a single datagram.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver16DatagramSocketFD",
								"name": "socket"
							}
						],
						"line": 342,
						"kind": "function",
						"char": 7,
						"name": "cancelSend",
						"deco": "FNbNfS9eventcore6driver16DatagramSocketFDZv",
						"comment": "Cancels an ongoing wait for an outgoing datagram.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver8SocketFD",
								"name": "descriptor"
							}
						],
						"line": 346,
						"kind": "function",
						"char": 7,
						"name": "addRef",
						"deco": "FNbNfS9eventcore6driver8SocketFDZv",
						"comment": " Increments the reference count of the given socket.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver8SocketFD",
								"name": "descriptor"
							}
						],
						"line": 356,
						"kind": "function",
						"char": 7,
						"name": "releaseRef",
						"deco": "FNbNfS9eventcore6driver8SocketFDZb",
						"comment": " Decrements the reference count of the given socket.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver16DatagramSocketFD",
								"name": "socket"
							},
							{
								"deco": "E9eventcore6driver20DatagramSocketOption",
								"name": "option"
							},
							{
								"deco": "b",
								"name": "enable"
							}
						],
						"line": 360,
						"kind": "function",
						"char": 7,
						"name": "setOption",
						"deco": "FNbNfS9eventcore6driver16DatagramSocketFDEQBkQBd20DatagramSocketOptionbZb",
						"comment": " Enables or disables a socket option.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "socket"
							},
							{
								"deco": "E9eventcore6driver18StreamSocketOption",
								"name": "option"
							},
							{
								"deco": "b",
								"name": "enable"
							}
						],
						"line": 362,
						"kind": "function",
						"char": 7,
						"name": "setOption",
						"deco": "FNbNfS9eventcore6driver14StreamSocketFDEQBiQBb18StreamSocketOptionbZb",
						"comment": "ditto\n"
					},
					{
						"constraint": "hasNoGCLifetime!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "FD"
							}
						],
						"line": 366,
						"kind": "template",
						"char": 24,
						"members": [
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "FD",
										"name": "descriptor"
									}
								],
								"line": 366,
								"kind": "function",
								"char": 24,
								"name": "userData",
								"type": "@nogc @property ref @trusted T(FD descriptor)",
								"endchar": 2,
								"endline": 373
							}
						],
						"name": "userData",
						"comment": " Retrieves a reference to a user-defined value associated with a descriptor.\n"
					},
					{
						"constraint": "!hasNoGCLifetime!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "FD"
							}
						],
						"line": 376,
						"kind": "template",
						"char": 24,
						"members": [
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "FD",
										"name": "descriptor"
									}
								],
								"line": 376,
								"kind": "function",
								"char": 24,
								"name": "userData",
								"type": "@property ref @trusted T(FD descriptor)",
								"endchar": 2,
								"endline": 386
							}
						],
						"name": "userData",
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14StreamSocketFD",
								"name": "descriptor"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "initialize"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "destroy"
							}
						],
						"line": 389,
						"kind": "function",
						"originalType": "nothrow @nogc @system void*(StreamSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
						"char": 18,
						"name": "rawUserData",
						"deco": "FNbNiS9eventcore6driver14StreamSocketFDmPFNbNiPvZvQkZQh",
						"protection": "protected",
						"comment": "Low-level user data access. Use `getUserData` instead.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver20StreamListenSocketFD",
								"name": "descriptor"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "initialize"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "destroy"
							}
						],
						"line": 391,
						"kind": "function",
						"originalType": "nothrow @nogc @system void*(StreamListenSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
						"char": 18,
						"name": "rawUserData",
						"deco": "FNbNiS9eventcore6driver20StreamListenSocketFDmPFNbNiPvZvQkZQh",
						"protection": "protected",
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver16DatagramSocketFD",
								"name": "descriptor"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "initialize"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "destroy"
							}
						],
						"line": 393,
						"kind": "function",
						"originalType": "nothrow @nogc @system void*(DatagramSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
						"char": 18,
						"name": "rawUserData",
						"deco": "FNbNiS9eventcore6driver16DatagramSocketFDmPFNbNiPvZvQkZQh",
						"protection": "protected",
						"comment": "ditto\n"
					}
				],
				"comment": " Provides access to socket functionality.\n\n\tThe interface supports two classes of sockets - stream sockets and datagram\n\tsockets.\n",
				"name": "EventDriverSockets"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 396,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 396,
						"kind": "variable",
						"char": 6,
						"name": "hasNoGCLifetime",
						"init": "__traits(compiles, ()\n{\nimport std.conv : emplace;\nT b = void;\nemplace!T(&b);\ndestroy(b);\n}\n)"
					}
				],
				"name": "hasNoGCLifetime"
			},
			{
				"kind": "interface",
				"line": 407,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "DFNbNfS9eventcore6driver11DNSLookupIDEQBfQy9DNSStatusMACQBxQBq10RefAddressZv",
								"name": "on_lookup_finished"
							}
						],
						"line": 410,
						"kind": "function",
						"originalType": "nothrow @safe DNSLookupID(string name, DNSLookupCallback on_lookup_finished)",
						"char": 14,
						"name": "lookupHost",
						"deco": "FNbNfAyaDFNbNfS9eventcore6driver11DNSLookupIDEQBfQy9DNSStatusMACQBxQBq10RefAddressZvZQCt",
						"comment": "Looks up addresses corresponding to the given DNS name.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver11DNSLookupID",
								"name": "handle"
							}
						],
						"line": 413,
						"kind": "function",
						"char": 7,
						"name": "cancelLookup",
						"deco": "FNbNfS9eventcore6driver11DNSLookupIDZv",
						"comment": "Cancels an ongoing DNS lookup.\n"
					}
				],
				"comment": " Performs asynchronous DNS queries.\n",
				"name": "EventDriverDNS"
			},
			{
				"kind": "interface",
				"line": 419,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							},
							{
								"deco": "E9eventcore6driver12FileOpenMode",
								"name": "mode"
							}
						],
						"line": 421,
						"kind": "function",
						"char": 9,
						"name": "open",
						"deco": "FNbNfAyaE9eventcore6driver12FileOpenModeZSQBhQBa6FileFD"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "i",
								"name": "system_file_handle"
							}
						],
						"line": 422,
						"kind": "function",
						"char": 9,
						"name": "adopt",
						"deco": "FNbNfiZS9eventcore6driver6FileFD"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6FileFD",
								"name": "file"
							}
						],
						"line": 431,
						"kind": "function",
						"char": 7,
						"name": "close",
						"deco": "FNbNfS9eventcore6driver6FileFDZv",
						"comment": " Disallows any reads/writes and removes any exclusive locks.\n\n\t\tNote that this function may not actually close the file handle. The\n\t\thandle is only guaranteed to be closed one the reference count drops\n\t\tto zero. However, the remaining effects of calling this function will\n\t\tbe similar to actually closing the file.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6FileFD",
								"name": "file"
							}
						],
						"line": 433,
						"kind": "function",
						"char": 8,
						"name": "getSize",
						"deco": "FNbNfS9eventcore6driver6FileFDZm"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6FileFD",
								"name": "file"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "DFNbNfS9eventcore6driver6FileFDEQzQr8IOStatusmZv",
								"name": "on_finish"
							}
						],
						"line": 443,
						"kind": "function",
						"originalType": "nothrow @safe void(FileFD file, ulong size, FileIOCallback on_finish)",
						"char": 7,
						"name": "truncate",
						"deco": "FNbNfS9eventcore6driver6FileFDmDFNbNfQBgEQBjQBc8IOStatusmZvZv",
						"comment": " Shrinks or extends a file to the specified size.\n\n\t\tParams:\n\t\t\tfile = Handle of the file to resize\n\t\t\tsize = Desired file size in bytes\n\t\t\ton_finish = Called when the operation finishes - the `size`\n\t\t\t\tparameter is always set to zero\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6FileFD",
								"name": "file"
							},
							{
								"deco": "m",
								"name": "offset"
							},
							{
								"deco": "Axh",
								"name": "buffer"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							},
							{
								"deco": "DFNbNfS9eventcore6driver6FileFDEQzQr8IOStatusmZv",
								"name": "on_write_finish"
							}
						],
						"line": 445,
						"kind": "function",
						"originalType": "nothrow @safe void(FileFD file, ulong offset, const(ubyte)[] buffer, IOMode mode, FileIOCallback on_write_finish)",
						"char": 7,
						"name": "write",
						"deco": "FNbNfS9eventcore6driver6FileFDmAxhEQBdQw6IOModeDFNbNfQBwEQBzQBs8IOStatusmZvZv"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6FileFD",
								"name": "file"
							},
							{
								"deco": "m",
								"name": "offset"
							},
							{
								"deco": "Ah",
								"name": "buffer"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							},
							{
								"deco": "DFNbNfS9eventcore6driver6FileFDEQzQr8IOStatusmZv",
								"name": "on_read_finish"
							}
						],
						"line": 446,
						"kind": "function",
						"originalType": "nothrow @safe void(FileFD file, ulong offset, ubyte[] buffer, IOMode mode, FileIOCallback on_read_finish)",
						"char": 7,
						"name": "read",
						"deco": "FNbNfS9eventcore6driver6FileFDmAhEQBcQv6IOModeDFNbNfQBvEQByQBr8IOStatusmZvZv"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6FileFD",
								"name": "file"
							}
						],
						"line": 447,
						"kind": "function",
						"char": 7,
						"name": "cancelWrite",
						"deco": "FNbNfS9eventcore6driver6FileFDZv"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6FileFD",
								"name": "file"
							}
						],
						"line": 448,
						"kind": "function",
						"char": 7,
						"name": "cancelRead",
						"deco": "FNbNfS9eventcore6driver6FileFDZv"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6FileFD",
								"name": "descriptor"
							}
						],
						"line": 452,
						"kind": "function",
						"char": 7,
						"name": "addRef",
						"deco": "FNbNfS9eventcore6driver6FileFDZv",
						"comment": " Increments the reference count of the given file.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6FileFD",
								"name": "descriptor"
							}
						],
						"line": 462,
						"kind": "function",
						"char": 7,
						"name": "releaseRef",
						"deco": "FNbNfS9eventcore6driver6FileFDZb",
						"comment": " Decrements the reference count of the given file.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 466,
						"kind": "template",
						"char": 24,
						"members": [
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "FileFD",
										"name": "descriptor"
									}
								],
								"line": 466,
								"kind": "function",
								"char": 24,
								"name": "userData",
								"type": "@property ref @trusted T(FileFD descriptor)",
								"endchar": 2,
								"endline": 472
							}
						],
						"name": "userData",
						"comment": " Retrieves a reference to a user-defined value associated with a descriptor.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6FileFD",
								"name": "descriptor"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "initialize"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "destroy"
							}
						],
						"line": 475,
						"kind": "function",
						"originalType": "nothrow @system void*(FileFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
						"char": 18,
						"name": "rawUserData",
						"deco": "FNbS9eventcore6driver6FileFDmPFNbNiPvZvQkZQh",
						"protection": "protected",
						"comment": "Low-level user data access. Use `userData` instead.\n"
					}
				],
				"comment": " Provides read/write operations on the local file system.\n",
				"name": "EventDriverFiles"
			},
			{
				"kind": "interface",
				"line": 488,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"line": 491,
						"kind": "function",
						"char": 10,
						"name": "create",
						"deco": "FNbNfZS9eventcore6driver7EventID",
						"comment": "Creates a new cross-thread event.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7EventID",
								"name": "event"
							},
							{
								"deco": "b",
								"name": "notify_all"
							}
						],
						"line": 494,
						"kind": "function",
						"char": 7,
						"name": "trigger",
						"deco": "FNbNfS9eventcore6driver7EventIDbZv",
						"comment": "Triggers an event owned by the current thread.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7EventID",
								"name": "event"
							},
							{
								"deco": "b",
								"name": "notify_all"
							}
						],
						"line": 497,
						"kind": "function",
						"char": 7,
						"name": "trigger",
						"deco": "OFNbNfS9eventcore6driver7EventIDbZv",
						"comment": "Triggers an event possibly owned by a different thread.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7EventID",
								"name": "event"
							},
							{
								"deco": "DFNbNfS9eventcore6driver7EventIDZv",
								"name": "on_event"
							}
						],
						"line": 503,
						"kind": "function",
						"originalType": "nothrow @safe void(EventID event, EventCallback on_event)",
						"char": 7,
						"name": "wait",
						"deco": "FNbNfS9eventcore6driver7EventIDDFNbNfQBgZvZv",
						"comment": " Waits until an event gets triggered.\n\n\t\tMultiple concurrent waits are allowed.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7EventID",
								"name": "event"
							},
							{
								"deco": "DFNbNfS9eventcore6driver7EventIDZv",
								"name": "on_event"
							}
						],
						"line": 506,
						"kind": "function",
						"originalType": "nothrow @safe void(EventID event, EventCallback on_event)",
						"char": 7,
						"name": "cancelWait",
						"deco": "FNbNfS9eventcore6driver7EventIDDFNbNfQBgZvZv",
						"comment": "Cancels an ongoing wait operation.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7EventID",
								"name": "descriptor"
							}
						],
						"line": 510,
						"kind": "function",
						"char": 7,
						"name": "addRef",
						"deco": "FNbNfS9eventcore6driver7EventIDZv",
						"comment": " Increments the reference count of the given event.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7EventID",
								"name": "descriptor"
							}
						],
						"line": 520,
						"kind": "function",
						"char": 7,
						"name": "releaseRef",
						"deco": "FNbNfS9eventcore6driver7EventIDZb",
						"comment": " Decrements the reference count of the given event.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 524,
						"kind": "template",
						"char": 24,
						"members": [
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "EventID",
										"name": "descriptor"
									}
								],
								"line": 524,
								"kind": "function",
								"char": 24,
								"name": "userData",
								"type": "@property ref @trusted T(EventID descriptor)",
								"endchar": 2,
								"endline": 530
							}
						],
						"name": "userData",
						"comment": " Retrieves a reference to a user-defined value associated with a descriptor.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7EventID",
								"name": "descriptor"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "initialize"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "destroy"
							}
						],
						"line": 533,
						"kind": "function",
						"originalType": "nothrow @system void*(EventID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
						"char": 18,
						"name": "rawUserData",
						"deco": "FNbS9eventcore6driver7EventIDmPFNbNiPvZvQkZQh",
						"protection": "protected",
						"comment": "Low-level user data access. Use `userData` instead.\n"
					}
				],
				"comment": " Cross-thread notifications\n\n\t\"Events\" can be used to wake up the event loop of a foreign thread. This is\n\tthe basis for all kinds of thread synchronization primitives, such as\n\tmutexes, condition variables, message queues etc. Such primitives, in case\n\tof extended wait periods, should use events rather than traditional means\n\tto block, such as busy loops or kernel based wait mechanisms to avoid\n\tstalling the event loop.\n",
				"name": "EventDriverEvents"
			},
			{
				"kind": "interface",
				"line": 539,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "i",
								"name": "sig"
							},
							{
								"deco": "DFNbNfS9eventcore6driver14SignalListenIDEQBiQBb12SignalStatusiZv",
								"name": "on_signal"
							}
						],
						"line": 559,
						"kind": "function",
						"originalType": "nothrow @safe SignalListenID(int sig, SignalCallback on_signal)",
						"char": 17,
						"name": "listen",
						"deco": "FNbNfiDFNbNfS9eventcore6driver14SignalListenIDEQBiQBb12SignalStatusiZvZQCh",
						"comment": " Starts listening for the specified POSIX signal.\n\n\t\tNote that if a default signal handler exists for the signal, it will be\n\t\tdisabled by using this function.\n\n\t\tParams:\n\t\t\tsig = The number of the signal to listen for\n\t\t\ton_signal = Callback that gets called whenever a matching signal\n\t\t\t\tgets received\n\n\t\tReturns:\n\t\t\tReturns an identifier that identifies the resource associated with\n\t\t\tthe signal. Giving up ownership of this resource using `releaseRef`\n\t\t\twill re-enable the default signal handler, if any was present.\n\n\t\t\tFor any error condition, `SignalListenID.invalid` will be returned\n\t\t\tinstead.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14SignalListenID",
								"name": "descriptor"
							}
						],
						"line": 563,
						"kind": "function",
						"char": 7,
						"name": "addRef",
						"deco": "FNbNfS9eventcore6driver14SignalListenIDZv",
						"comment": " Increments the reference count of the given resource.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver14SignalListenID",
								"name": "descriptor"
							}
						],
						"line": 573,
						"kind": "function",
						"char": 7,
						"name": "releaseRef",
						"deco": "FNbNfS9eventcore6driver14SignalListenIDZb",
						"comment": " Decrements the reference count of the given resource.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n"
					}
				],
				"comment": " Handling of POSIX signals.\n",
				"name": "EventDriverSignals"
			},
			{
				"kind": "interface",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"line": 578,
						"kind": "function",
						"char": 10,
						"name": "create",
						"deco": "FNbNfZS9eventcore6driver7TimerID"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7TimerID",
								"name": "timer"
							},
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							},
							{
								"deco": "S4core4time8Duration",
								"name": "repeat"
							}
						],
						"line": 579,
						"kind": "function",
						"char": 7,
						"name": "set",
						"deco": "FNbNfS9eventcore6driver7TimerIDS4core4time8DurationQuZv"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7TimerID",
								"name": "timer"
							}
						],
						"line": 580,
						"kind": "function",
						"char": 7,
						"name": "stop",
						"deco": "FNbNfS9eventcore6driver7TimerIDZv"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7TimerID",
								"name": "timer"
							}
						],
						"line": 581,
						"kind": "function",
						"char": 7,
						"name": "isPending",
						"deco": "FNbNfS9eventcore6driver7TimerIDZb"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7TimerID",
								"name": "timer"
							}
						],
						"line": 582,
						"kind": "function",
						"char": 7,
						"name": "isPeriodic",
						"deco": "FNbNfS9eventcore6driver7TimerIDZb"
					},
					{
						"storageClass": [
							"final",
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7TimerID",
								"name": "timer"
							},
							{
								"deco": "DFNbNfS9eventcore6driver7TimerIDZv",
								"name": "callback"
							}
						],
						"line": 583,
						"kind": "function",
						"originalType": "nothrow @safe void(TimerID timer, TimerCallback callback)",
						"char": 13,
						"name": "wait",
						"deco": "FNbNfS9eventcore6driver7TimerIDDFNbNfQBgZvZv",
						"endchar": 2,
						"endline": 587
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7TimerID",
								"name": "timer"
							},
							{
								"deco": "DFNbNfS9eventcore6driver7TimerIDbZv",
								"name": "callback"
							}
						],
						"line": 588,
						"kind": "function",
						"originalType": "nothrow @safe void(TimerID timer, TimerCallback2 callback)",
						"char": 7,
						"name": "wait",
						"deco": "FNbNfS9eventcore6driver7TimerIDDFNbNfQBgbZvZv"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7TimerID",
								"name": "timer"
							}
						],
						"line": 589,
						"kind": "function",
						"char": 7,
						"name": "cancelWait",
						"deco": "FNbNfS9eventcore6driver7TimerIDZv"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7TimerID",
								"name": "descriptor"
							}
						],
						"line": 593,
						"kind": "function",
						"char": 7,
						"name": "addRef",
						"deco": "FNbNfS9eventcore6driver7TimerIDZv",
						"comment": " Increments the reference count of the given resource.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7TimerID",
								"name": "descriptor"
							}
						],
						"line": 603,
						"kind": "function",
						"char": 7,
						"name": "releaseRef",
						"deco": "FNbNfS9eventcore6driver7TimerIDZb",
						"comment": " Decrements the reference count of the given resource.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7TimerID",
								"name": "descriptor"
							}
						],
						"line": 606,
						"kind": "function",
						"char": 7,
						"name": "isUnique",
						"deco": "xFNbNfS9eventcore6driver7TimerIDZb",
						"comment": "Determines if the given timer's reference count equals one.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 610,
						"kind": "template",
						"char": 24,
						"members": [
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "TimerID",
										"name": "descriptor"
									}
								],
								"line": 610,
								"kind": "function",
								"char": 24,
								"name": "userData",
								"type": "@property ref @trusted T(TimerID descriptor)",
								"endchar": 2,
								"endline": 616
							}
						],
						"name": "userData",
						"comment": " Retrieves a reference to a user-defined value associated with a descriptor.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver7TimerID",
								"name": "descriptor"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "initialize"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "destroy"
							}
						],
						"line": 619,
						"kind": "function",
						"originalType": "nothrow @system void*(TimerID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
						"char": 18,
						"name": "rawUserData",
						"deco": "FNbS9eventcore6driver7TimerIDmPFNbNiPvZvQkZQh",
						"protection": "protected",
						"comment": "Low-level user data access. Use `userData` instead.\n"
					}
				],
				"line": 576,
				"name": "EventDriverTimers"
			},
			{
				"kind": "interface",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							},
							{
								"deco": "b",
								"name": "recursive"
							},
							{
								"deco": "DFNbNfS9eventcore6driver9WatcherIDKxSQBeQx10FileChangeZv",
								"name": "callback"
							}
						],
						"line": 625,
						"kind": "function",
						"originalType": "nothrow @safe WatcherID(string path, bool recursive, FileChangesCallback callback)",
						"char": 12,
						"name": "watchDirectory",
						"deco": "FNbNfAyabDFNbNfS9eventcore6driver9WatcherIDKxSQBeQx10FileChangeZvZQBz",
						"comment": "Watches a directory or a directory sub tree for changes.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver9WatcherID",
								"name": "descriptor"
							}
						],
						"line": 629,
						"kind": "function",
						"char": 7,
						"name": "addRef",
						"deco": "FNbNfS9eventcore6driver9WatcherIDZv",
						"comment": " Increments the reference count of the given resource.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver9WatcherID",
								"name": "descriptor"
							}
						],
						"line": 639,
						"kind": "function",
						"char": 7,
						"name": "releaseRef",
						"deco": "FNbNfS9eventcore6driver9WatcherIDZb",
						"comment": " Decrements the reference count of the given resource.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 643,
						"kind": "template",
						"char": 24,
						"members": [
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "WatcherID",
										"name": "descriptor"
									}
								],
								"line": 643,
								"kind": "function",
								"char": 24,
								"name": "userData",
								"type": "@property ref @trusted T(WatcherID descriptor)",
								"endchar": 2,
								"endline": 649
							}
						],
						"name": "userData",
						"comment": " Retrieves a reference to a user-defined value associated with a descriptor.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver9WatcherID",
								"name": "descriptor"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "initialize"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "destroy"
							}
						],
						"line": 652,
						"kind": "function",
						"originalType": "nothrow @system void*(WatcherID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
						"char": 18,
						"name": "rawUserData",
						"deco": "FNbS9eventcore6driver9WatcherIDmPFNbNiPvZvQkZQh",
						"protection": "protected",
						"comment": "Low-level user data access. Use `userData` instead.\n"
					}
				],
				"line": 622,
				"name": "EventDriverWatchers"
			},
			{
				"kind": "interface",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "i",
								"name": "system_pid"
							}
						],
						"line": 659,
						"kind": "function",
						"char": 12,
						"name": "adopt",
						"deco": "FNbNfiZS9eventcore6driver9ProcessID",
						"comment": " Adopt an existing process.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "AAya",
								"name": "args"
							},
							{
								"deco": "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectZQCa",
								"name": "stdin"
							},
							{
								"deco": "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectTEQBkQBd21ProcessStdoutRedirectZQDf",
								"name": "stdout"
							},
							{
								"deco": "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectTEQBkQBd21ProcessStderrRedirectZQDf",
								"name": "stderr"
							},
							{
								"deco": "xHAyaAya",
								"default": "cast(const(string[string]))null",
								"name": "env"
							},
							{
								"deco": "E9eventcore6driver13ProcessConfig",
								"default": "cast(ProcessConfig)0",
								"name": "config"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "working_dir"
							}
						],
						"line": 681,
						"kind": "function",
						"originalType": "nothrow @safe Process(string[] args, ProcessStdinFile stdin, ProcessStdoutFile stdout, ProcessStderrFile stderr, const string[string] env = null, ProcessConfig config = ProcessConfig.none, string working_dir = null)",
						"char": 10,
						"name": "spawn",
						"deco": "FNbNfAAyaS3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectZQCaSQCtQCs__TQCnVmi4TiTQChTEQClQCe21ProcessStdoutRedirectZQEgSQEzQEy__TQEtVmi4TiTQEnTEQErQEk21ProcessStderrRedirectZQGmxHQHkAyaEQGhQGa13ProcessConfigQImZSQHhQHa7Process",
						"comment": " Spawn a child process.\n\n\t\tNote that if a default signal handler exists for the signal, it will be\n\t\tdisabled by using this function.\n\n\t\tParams:\n\t\t\targs = The program arguments. First one must be an executable.\n\t\t\tstdin = What should be done for stdin. Allows inheritance, piping,\n\t\t\t\tnothing or any specific fd. If this results in a Pipe,\n\t\t\t\tthe PipeFD will be set in the stdin result.\n\t\t\tstdout = See stdin, but also allows redirecting to stderr.\n\t\t\tstderr = See stdin, but also allows redirecting to stdout.\n\t\t\tenv = The environment variables to spawn the process with.\n\t\t\tconfig = Special process configurations.\n\t\t\tworking_dir = What to set the working dir in the process.\n\n\t\tReturns:\n\t\t\tReturns a Process struct containing the ProcessID and whatever\n\t\t\tpipes have been adopted for stdin, stdout and stderr.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver9ProcessID",
								"name": "pid"
							}
						],
						"line": 685,
						"kind": "function",
						"char": 7,
						"name": "hasExited",
						"deco": "FNbNfS9eventcore6driver9ProcessIDZb",
						"comment": " Returns whether the process has exited yet.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver9ProcessID",
								"name": "pid"
							},
							{
								"deco": "i",
								"name": "signal"
							}
						],
						"line": 689,
						"kind": "function",
						"char": 7,
						"name": "kill",
						"deco": "FNbNfS9eventcore6driver9ProcessIDiZv",
						"comment": " Kill the process using the given signal. Has different effects on different platforms.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver9ProcessID",
								"name": "pid"
							},
							{
								"deco": "DFNbNfS9eventcore6driver9ProcessIDiZv",
								"name": "on_process_exit"
							}
						],
						"line": 693,
						"kind": "function",
						"originalType": "nothrow @safe size_t(ProcessID pid, ProcessWaitCallback on_process_exit)",
						"char": 9,
						"name": "wait",
						"deco": "FNbNfS9eventcore6driver9ProcessIDDFNbNfQBiiZvZm",
						"comment": " Wait for the process to exit. Returns an identifier that can be used to cancel the wait.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver9ProcessID",
								"name": "pid"
							},
							{
								"deco": "m",
								"name": "waitId"
							}
						],
						"line": 697,
						"kind": "function",
						"originalType": "nothrow @safe void(ProcessID pid, size_t waitId)",
						"char": 7,
						"name": "cancelWait",
						"deco": "FNbNfS9eventcore6driver9ProcessIDmZv",
						"comment": " Cancel a wait for the given identifier returned by wait.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver9ProcessID",
								"name": "pid"
							}
						],
						"line": 701,
						"kind": "function",
						"char": 7,
						"name": "addRef",
						"deco": "FNbNfS9eventcore6driver9ProcessIDZv",
						"comment": " Increments the reference count of the given resource.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver9ProcessID",
								"name": "pid"
							}
						],
						"line": 712,
						"kind": "function",
						"char": 7,
						"name": "releaseRef",
						"deco": "FNbNfS9eventcore6driver9ProcessIDZb",
						"comment": " Decrements the reference count of the given resource.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated. This will not kill\n\t\tthe sub-process, nor \"detach\" it.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 716,
						"kind": "template",
						"char": 24,
						"members": [
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "ProcessID",
										"name": "descriptor"
									}
								],
								"line": 716,
								"kind": "function",
								"char": 24,
								"name": "userData",
								"type": "@property ref @trusted T(ProcessID descriptor)",
								"endchar": 2,
								"endline": 722
							}
						],
						"name": "userData",
						"comment": " Retrieves a reference to a user-defined value associated with a descriptor.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver9ProcessID",
								"name": "descriptor"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "initialize"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "destroy"
							}
						],
						"line": 725,
						"kind": "function",
						"originalType": "nothrow @system void*(ProcessID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
						"char": 18,
						"name": "rawUserData",
						"deco": "FNbS9eventcore6driver9ProcessIDmPFNbNiPvZvQkZQh",
						"protection": "protected",
						"comment": "Low-level user data access. Use `userData` instead.\n"
					}
				],
				"line": 655,
				"name": "EventDriverProcesses"
			},
			{
				"kind": "interface",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "i",
								"name": "system_pipe_handle"
							}
						],
						"line": 735,
						"kind": "function",
						"char": 9,
						"name": "adopt",
						"deco": "FNbNfiZS9eventcore6driver6PipeFD",
						"comment": " Adopt an existing pipe. This will modify the pipe to be non-blocking.\n\n\t\tNote that pipes generally only allow either reads or writes but not\n\t\tboth, it is up to you to only call valid functions.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6PipeFD",
								"name": "pipe"
							},
							{
								"deco": "Ah",
								"name": "buffer"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							},
							{
								"deco": "DFNbNfS9eventcore6driver6PipeFDEQzQr8IOStatusmZv",
								"name": "on_read_finish"
							}
						],
						"line": 743,
						"kind": "function",
						"originalType": "nothrow @safe void(PipeFD pipe, ubyte[] buffer, IOMode mode, PipeIOCallback on_read_finish)",
						"char": 7,
						"name": "read",
						"deco": "FNbNfS9eventcore6driver6PipeFDAhEQBbQu6IOModeDFNbNfQBuEQBxQBq8IOStatusmZvZv",
						"comment": " Reads data from a stream socket.\n\n\t\tNote that only a single read operation is allowed at once. The caller\n\t\tneeds to make sure that either `on_read_finish` got called, or\n\t\t`cancelRead` was called before issuing the next call to `read`.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6PipeFD",
								"name": "pipe"
							}
						],
						"line": 750,
						"kind": "function",
						"char": 7,
						"name": "cancelRead",
						"deco": "FNbNfS9eventcore6driver6PipeFDZv",
						"comment": " Cancels an ongoing read operation.\n\n\t\tAfter this function has been called, the `PipeIOCallback` specified in\n\t\tthe call to `read` is guaranteed to not be called.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6PipeFD",
								"name": "pipe"
							},
							{
								"deco": "Axh",
								"name": "buffer"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							},
							{
								"deco": "DFNbNfS9eventcore6driver6PipeFDEQzQr8IOStatusmZv",
								"name": "on_write_finish"
							}
						],
						"line": 758,
						"kind": "function",
						"originalType": "nothrow @safe void(PipeFD pipe, const(ubyte)[] buffer, IOMode mode, PipeIOCallback on_write_finish)",
						"char": 7,
						"name": "write",
						"deco": "FNbNfS9eventcore6driver6PipeFDAxhEQBcQv6IOModeDFNbNfQBvEQByQBr8IOStatusmZvZv",
						"comment": " Writes data from a stream socket.\n\n\t\tNote that only a single write operation is allowed at once. The caller\n\t\tneeds to make sure that either `on_write_finish` got called, or\n\t\t`cancelWrite` was called before issuing the next call to `write`.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6PipeFD",
								"name": "pipe"
							}
						],
						"line": 765,
						"kind": "function",
						"char": 7,
						"name": "cancelWrite",
						"deco": "FNbNfS9eventcore6driver6PipeFDZv",
						"comment": " Cancels an ongoing write operation.\n\n\t\tAfter this function has been called, the `PipeIOCallback` specified in\n\t\tthe call to `write` is guaranteed to not be called.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6PipeFD",
								"name": "pipe"
							},
							{
								"deco": "DFNbNfS9eventcore6driver6PipeFDEQzQr8IOStatusmZv",
								"name": "on_data_available"
							}
						],
						"line": 769,
						"kind": "function",
						"originalType": "nothrow @safe void(PipeFD pipe, PipeIOCallback on_data_available)",
						"char": 7,
						"name": "waitForData",
						"deco": "FNbNfS9eventcore6driver6PipeFDDFNbNfQBfEQBiQBb8IOStatusmZvZv",
						"comment": " Waits for incoming data without actually reading it.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6PipeFD",
								"name": "pipe"
							}
						],
						"line": 773,
						"kind": "function",
						"char": 7,
						"name": "close",
						"deco": "FNbNfS9eventcore6driver6PipeFDZv",
						"comment": " Immediately close the pipe. Future read or write operations may fail.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6PipeFD",
								"name": "pid"
							}
						],
						"line": 777,
						"kind": "function",
						"char": 7,
						"name": "addRef",
						"deco": "FNbNfS9eventcore6driver6PipeFDZv",
						"comment": " Increments the reference count of the given resource.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6PipeFD",
								"name": "pid"
							}
						],
						"line": 787,
						"kind": "function",
						"char": 7,
						"name": "releaseRef",
						"deco": "FNbNfS9eventcore6driver6PipeFDZb",
						"comment": " Decrements the reference count of the given resource.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 791,
						"kind": "template",
						"char": 24,
						"members": [
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "PipeFD",
										"name": "descriptor"
									}
								],
								"line": 791,
								"kind": "function",
								"char": 24,
								"name": "userData",
								"type": "@property ref @trusted T(PipeFD descriptor)",
								"endchar": 2,
								"endline": 797
							}
						],
						"name": "userData",
						"comment": " Retrieves a reference to a user-defined value associated with a descriptor.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S9eventcore6driver6PipeFD",
								"name": "descriptor"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "initialize"
							},
							{
								"deco": "PFNbNiPvZv",
								"name": "destroy"
							}
						],
						"line": 800,
						"kind": "function",
						"originalType": "nothrow @system void*(PipeFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
						"char": 18,
						"name": "rawUserData",
						"deco": "FNbS9eventcore6driver6PipeFDmPFNbNiPvZvQkZQh",
						"protection": "protected",
						"comment": "Low-level user data access. Use `userData` instead.\n"
					}
				],
				"line": 728,
				"name": "EventDriverPipes"
			},
			{
				"line": 805,
				"kind": "class",
				"char": 7,
				"base": "std.socket.Address",
				"members": [
					{
						"line": 814,
						"kind": "constructor",
						"originalType": "nothrow @safe ()",
						"char": 2,
						"name": "this",
						"deco": "FNbNfZC9eventcore6driver10RefAddress",
						"endchar": 24,
						"endline": 814
					},
					{
						"parameters": [
							{
								"deco": "PS4core3sys5posixQk6socket8sockaddr",
								"name": "addr"
							},
							{
								"deco": "k",
								"name": "addr_len"
							}
						],
						"line": 815,
						"kind": "constructor",
						"originalType": "nothrow @safe (sockaddr* addr, socklen_t addr_len)",
						"char": 2,
						"name": "this",
						"deco": "FNbNfPS4core3sys5posixQk6socket8sockaddrkZC9eventcore6driver10RefAddress",
						"endchar": 80,
						"endline": 815
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"std.socket.Address.name"
						],
						"line": 817,
						"kind": "function",
						"originalType": "@property @safe sockaddr*()",
						"char": 31,
						"name": "name",
						"deco": "FNaNbNdNiNfZPS4core3sys5posixQk6socket8sockaddr",
						"endchar": 55,
						"endline": 817
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"std.socket.Address.name"
						],
						"line": 818,
						"kind": "function",
						"originalType": "const @property @safe const(sockaddr)*()",
						"char": 38,
						"name": "name",
						"deco": "xFNaNbNdNiNfZPxS4core3sys5posixQk6socket8sockaddr",
						"endchar": 68,
						"endline": 818
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"std.socket.Address.nameLen"
						],
						"line": 819,
						"kind": "function",
						"originalType": "const @property @safe socklen_t()",
						"char": 31,
						"name": "nameLen",
						"deco": "xFNaNbNdNiNfZk",
						"endchar": 67,
						"endline": 819
					},
					{
						"parameters": [
							{
								"deco": "PS4core3sys5posixQk6socket8sockaddr",
								"name": "addr"
							},
							{
								"deco": "k",
								"name": "addr_len"
							}
						],
						"line": 821,
						"kind": "function",
						"originalType": "nothrow @safe void(sockaddr* addr, socklen_t addr_len)",
						"char": 7,
						"name": "set",
						"deco": "FNbNfPS4core3sys5posixQk6socket8sockaddrkZv",
						"endchar": 100,
						"endline": 821
					},
					{
						"parameters": [
							{
								"deco": "k",
								"name": "new_len"
							}
						],
						"line": 823,
						"kind": "function",
						"originalType": "nothrow @safe void(socklen_t new_len)",
						"char": 7,
						"name": "cap",
						"deco": "FNbNfkZv",
						"endchar": 2,
						"endline": 827
					}
				],
				"name": "RefAddress"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb13ConnectStatusZv",
				"char": 1,
				"line": 831,
				"name": "ConnectCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver20StreamListenSocketFDSQBoQBh14StreamSocketFDMCQCmQCf10RefAddressZv",
				"char": 1,
				"line": 832,
				"name": "AcceptCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb8IOStatusmZv",
				"char": 1,
				"line": 833,
				"name": "IOCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver16DatagramSocketFDEQBkQBd8IOStatusmMCQCcQBv10RefAddressZv",
				"char": 1,
				"line": 834,
				"name": "DatagramIOCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver11DNSLookupIDEQBfQy9DNSStatusMACQBxQBq10RefAddressZv",
				"char": 1,
				"line": 835,
				"name": "DNSLookupCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver6FileFDEQzQr8IOStatusmZv",
				"char": 1,
				"line": 836,
				"name": "FileIOCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver6PipeFDEQzQr8IOStatusmZv",
				"char": 1,
				"line": 837,
				"name": "PipeIOCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver7EventIDZv",
				"char": 1,
				"line": 838,
				"name": "EventCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver14SignalListenIDEQBiQBb12SignalStatusiZv",
				"char": 1,
				"line": 839,
				"name": "SignalCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver7TimerIDZv",
				"char": 1,
				"line": 840,
				"name": "TimerCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver7TimerIDbZv",
				"char": 1,
				"line": 841,
				"name": "TimerCallback2"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver9WatcherIDKxSQBeQx10FileChangeZv",
				"char": 1,
				"line": 842,
				"name": "FileChangesCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNbNfS9eventcore6driver9ProcessIDiZv",
				"char": 1,
				"line": 843,
				"name": "ProcessWaitCallback"
			},
			{
				"kind": "alias",
				"deco": "PFNbNiPvZv",
				"char": 9,
				"line": 844,
				"name": "DataInitializer"
			},
			{
				"line": 846,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 24,
						"value": "0",
						"line": 846,
						"name": "inherit"
					},
					{
						"kind": "enum member",
						"char": 33,
						"value": "1",
						"line": 846,
						"name": "pipe"
					},
					{
						"kind": "enum member",
						"char": 39,
						"value": "2",
						"line": 846,
						"name": "none"
					}
				],
				"name": "ProcessRedirect",
				"baseDeco": "i"
			},
			{
				"kind": "alias",
				"deco": "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectZQCa",
				"char": 1,
				"line": 847,
				"name": "ProcessStdinFile"
			},
			{
				"line": 848,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 30,
						"value": "0",
						"line": 848,
						"name": "toStderr"
					}
				],
				"name": "ProcessStdoutRedirect",
				"baseDeco": "i"
			},
			{
				"kind": "alias",
				"deco": "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectTEQBkQBd21ProcessStdoutRedirectZQDf",
				"char": 1,
				"line": 849,
				"name": "ProcessStdoutFile"
			},
			{
				"line": 850,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 30,
						"value": "0",
						"line": 850,
						"name": "toStdout"
					}
				],
				"name": "ProcessStderrRedirect",
				"baseDeco": "i"
			},
			{
				"kind": "alias",
				"deco": "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectTEQBkQBd21ProcessStderrRedirectZQDf",
				"char": 1,
				"line": 851,
				"name": "ProcessStderrFile"
			},
			{
				"line": 853,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 854,
						"name": "timeout"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 855,
						"name": "idle"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 856,
						"name": "outOfWaiters"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "3",
						"line": 857,
						"name": "exited"
					}
				],
				"name": "ExitReason",
				"baseDeco": "i"
			},
			{
				"line": 860,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 861,
						"name": "connected"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 862,
						"name": "refused"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 863,
						"name": "timeout"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "3",
						"line": 864,
						"name": "bindFailure"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "4",
						"line": 865,
						"name": "socketCreateFailure"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "5",
						"line": 866,
						"name": "unknownError"
					}
				],
				"name": "ConnectStatus",
				"baseDeco": "i"
			},
			{
				"line": 869,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 870,
						"name": "initialized"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 871,
						"name": "connecting"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 872,
						"name": "connected"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "3",
						"line": 873,
						"name": "passiveClose"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "4",
						"line": 874,
						"name": "activeClose"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "5",
						"line": 875,
						"name": "closed"
					}
				],
				"name": "ConnectionState",
				"baseDeco": "i"
			},
			{
				"line": 878,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 879,
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 881,
						"char": 2,
						"value": "1",
						"comment": "Applies the `SO_REUSEPORT` flag\n",
						"name": "reusePort"
					},
					{
						"kind": "enum member",
						"line": 883,
						"char": 2,
						"value": "2",
						"comment": "Avoids applying the `SO_REUSEADDR` flag\n",
						"name": "reuseAddress"
					},
					{
						"kind": "enum member",
						"line": 885,
						"char": 2,
						"value": "2",
						"comment": "\n",
						"name": "defaults"
					}
				],
				"name": "StreamListenOptions",
				"baseDeco": "i"
			},
			{
				"line": 888,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 889,
						"name": "noDelay"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 890,
						"name": "keepAlive"
					}
				],
				"name": "StreamSocketOption",
				"baseDeco": "i"
			},
			{
				"line": 893,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 894,
						"name": "broadcast"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 895,
						"name": "multicastLoopback"
					}
				],
				"name": "DatagramSocketOption",
				"baseDeco": "i"
			},
			{
				"line": 901,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 903,
						"char": 2,
						"value": "0",
						"comment": "The file is opened read-only.\n",
						"name": "read"
					},
					{
						"kind": "enum member",
						"line": 905,
						"char": 2,
						"value": "1",
						"comment": "The file is opened for read-write random access.\n",
						"name": "readWrite"
					},
					{
						"kind": "enum member",
						"line": 907,
						"char": 2,
						"value": "2",
						"comment": "The file is truncated if it exists or created otherwise and then opened for read-write access.\n",
						"name": "createTrunc"
					},
					{
						"kind": "enum member",
						"line": 909,
						"char": 2,
						"value": "3",
						"comment": "The file is opened for appending data to it and created if it does not exist.\n",
						"name": "append"
					}
				],
				"name": "FileOpenMode",
				"baseDeco": "i",
				"comment": "\tSpecifies how a file is manipulated on disk.\n"
			},
			{
				"line": 912,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 913,
						"char": 2,
						"value": "0",
						"comment": "Process only as much as possible without waiting\n",
						"name": "immediate"
					},
					{
						"kind": "enum member",
						"line": 914,
						"char": 2,
						"value": "1",
						"comment": "Process as much as possible with a single call\n",
						"name": "once"
					},
					{
						"kind": "enum member",
						"line": 915,
						"char": 2,
						"value": "2",
						"comment": "Process the full buffer\n",
						"name": "all"
					}
				],
				"name": "IOMode",
				"baseDeco": "i"
			},
			{
				"line": 918,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 919,
						"char": 2,
						"value": "0",
						"comment": "The data has been transferred normally\n",
						"name": "ok"
					},
					{
						"kind": "enum member",
						"line": 920,
						"char": 2,
						"value": "1",
						"comment": "The connection was closed before all data could be transterred\n",
						"name": "disconnected"
					},
					{
						"kind": "enum member",
						"line": 921,
						"char": 2,
						"value": "2",
						"comment": "An error occured while transferring the data\n",
						"name": "error"
					},
					{
						"kind": "enum member",
						"line": 922,
						"char": 2,
						"value": "3",
						"comment": "Returned for `IOMode.immediate` when no data is readily readable/writable\n",
						"name": "wouldBlock"
					}
				],
				"name": "IOStatus",
				"baseDeco": "i"
			},
			{
				"line": 925,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 926,
						"name": "ok"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 927,
						"name": "error"
					}
				],
				"name": "DNSStatus",
				"baseDeco": "i"
			},
			{
				"line": 932,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 934,
						"char": 2,
						"value": "0",
						"comment": "A file or directory was added\n",
						"name": "added"
					},
					{
						"kind": "enum member",
						"line": 936,
						"char": 2,
						"value": "1",
						"comment": "A file or directory was deleted\n",
						"name": "removed"
					},
					{
						"kind": "enum member",
						"line": 938,
						"char": 2,
						"value": "2",
						"comment": "A file or directory was modified\n",
						"name": "modified"
					}
				],
				"name": "FileChangeKind",
				"baseDeco": "i",
				"comment": " Specifies the kind of change in a watched directory.\n"
			},
			{
				"line": 941,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 942,
						"name": "ok"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 943,
						"name": "error"
					}
				],
				"name": "SignalStatus",
				"baseDeco": "i"
			},
			{
				"line": 947,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 948,
						"name": "none"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "64",
						"line": 949,
						"name": "detached"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 950,
						"name": "newEnv"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "16",
						"line": 951,
						"name": "suppressConsole"
					}
				],
				"name": "ProcessConfig",
				"baseDeco": "i",
				"comment": "See std.process.Config\n"
			},
			{
				"kind": "struct",
				"line": 956,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 958,
						"kind": "variable",
						"char": 17,
						"name": "kind",
						"deco": "E9eventcore6driver14FileChangeKind",
						"offset": 0,
						"comment": "The type of change\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 961,
						"kind": "variable",
						"char": 9,
						"name": "baseDirectory",
						"deco": "Aya",
						"offset": 8,
						"comment": "The root directory of the watcher\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 964,
						"kind": "variable",
						"char": 9,
						"name": "directory",
						"deco": "Aya",
						"offset": 24,
						"comment": "Subdirectory containing the changed file\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 967,
						"kind": "variable",
						"char": 16,
						"name": "name",
						"deco": "Axa",
						"offset": 40,
						"comment": "Name of the changed file\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 974,
						"kind": "variable",
						"char": 7,
						"name": "isDirectory",
						"deco": "b",
						"offset": 56,
						"comment": " Determines if the changed entity is a file or a directory.\n\n\t\tNote that depending on the platform this may not be accurate for\n\t\t`FileChangeKind.removed`.\n"
					}
				],
				"comment": " Describes a single change in a watched directory.\n",
				"name": "FileChange"
			},
			{
				"kind": "struct",
				"line": 979,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 980,
						"kind": "variable",
						"char": 12,
						"name": "pid",
						"deco": "S9eventcore6driver9ProcessID",
						"offset": 0
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 983,
						"kind": "variable",
						"char": 9,
						"name": "stdin",
						"deco": "S9eventcore6driver6PipeFD",
						"offset": 8
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 984,
						"kind": "variable",
						"char": 9,
						"name": "stdout",
						"deco": "S9eventcore6driver6PipeFD",
						"offset": 16
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 985,
						"kind": "variable",
						"char": 9,
						"name": "stderr",
						"deco": "S9eventcore6driver6PipeFD",
						"offset": 24
					}
				],
				"comment": " Describes a spawned process\n",
				"name": "Process"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "NAME"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"type": "T",
						"defaultValue": "T.init",
						"name": "invalid_value"
					}
				],
				"line": 988,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"kind": "alias",
						"type": "T.BaseType",
						"char": 29,
						"line": 989,
						"name": "BaseType"
					},
					{
						"kind": "alias",
						"type": "NAME",
						"char": 2,
						"line": 992,
						"name": "name"
					},
					{
						"storageClass": [
							"enum"
						],
						"line": 994,
						"kind": "variable",
						"char": 7,
						"name": "invalid",
						"init": "(typeof(this)).init"
					},
					{
						"line": 998,
						"kind": "variable",
						"char": 4,
						"name": "value",
						"init": "invalid_value",
						"type": "T"
					},
					{
						"parameters": [
							{
								"type": "BaseType",
								"name": "value"
							}
						],
						"line": 1000,
						"kind": "constructor",
						"char": 2,
						"name": "this",
						"type": "(BaseType value)",
						"endchar": 48,
						"endline": 1000
					},
					{
						"parameters": [
							{
								"kind": "type",
								"type": "Handle!(V, M)",
								"name": "U"
							},
							{
								"kind": "type",
								"name": "V"
							},
							{
								"kind": "value",
								"deco": "i",
								"name": "M"
							}
						],
						"line": 1002,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"line": 1002,
								"kind": "function",
								"char": 4,
								"name": "opCast",
								"type": "const U()",
								"endchar": 2,
								"endline": 1006
							}
						],
						"name": "opCast"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"type": "BaseType",
								"name": "U"
							}
						],
						"line": 1008,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"line": 1008,
								"kind": "function",
								"char": 4,
								"name": "opCast",
								"type": "const U()",
								"endchar": 2,
								"endline": 1011
							}
						],
						"name": "opCast"
					}
				],
				"name": "Handle"
			},
			{
				"kind": "alias",
				"deco": "PFNbNflZv",
				"char": 1,
				"line": 1016,
				"name": "ThreadCallback"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 13,
						"line": 1018,
						"name": "Handle!(\"fd\", ulong, 18446744073709551615LU)"
					}
				],
				"line": 1018,
				"name": "FD"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 19,
						"line": 1019,
						"name": "Handle!(\"socket\", FD, FD(18446744073709551615LU))"
					}
				],
				"line": 1019,
				"name": "SocketFD"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 25,
						"line": 1020,
						"name": "Handle!(\"streamSocket\", SocketFD, SocketFD(FD(18446744073709551615LU)))"
					}
				],
				"line": 1020,
				"name": "StreamSocketFD"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 31,
						"line": 1021,
						"name": "Handle!(\"streamListen\", SocketFD, SocketFD(FD(18446744073709551615LU)))"
					}
				],
				"line": 1021,
				"name": "StreamListenSocketFD"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 27,
						"line": 1022,
						"name": "Handle!(\"datagramSocket\", SocketFD, SocketFD(FD(18446744073709551615LU)))"
					}
				],
				"line": 1022,
				"name": "DatagramSocketFD"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 17,
						"line": 1023,
						"name": "Handle!(\"file\", FD, FD(18446744073709551615LU))"
					}
				],
				"line": 1023,
				"name": "FileFD"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 17,
						"line": 1025,
						"name": "Handle!(\"pipe\", FD, FD(18446744073709551615LU))"
					}
				],
				"line": 1025,
				"name": "PipeFD"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 18,
						"line": 1026,
						"name": "Handle!(\"event\", FD, FD(18446744073709551615LU))"
					}
				],
				"line": 1026,
				"name": "EventID"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 18,
						"line": 1027,
						"name": "Handle!(\"timer\", ulong, 18446744073709551615LU)"
					}
				],
				"line": 1027,
				"name": "TimerID"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 20,
						"line": 1028,
						"name": "Handle!(\"watcher\", ulong, 18446744073709551615LU)"
					}
				],
				"line": 1028,
				"name": "WatcherID"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 22,
						"line": 1029,
						"name": "Handle!(\"eventWait\", ulong, 18446744073709551615LU)"
					}
				],
				"line": 1029,
				"name": "EventWaitID"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 25,
						"line": 1030,
						"name": "Handle!(\"signal\", ulong, 18446744073709551615LU)"
					}
				],
				"line": 1030,
				"name": "SignalListenID"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 22,
						"line": 1031,
						"name": "Handle!(\"dns\", ulong, 18446744073709551615LU)"
					}
				],
				"line": 1031,
				"name": "DNSLookupID"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"kind": "mixin",
						"char": 20,
						"line": 1032,
						"name": "Handle!(\"process\", ulong, 18446744073709551615LU)"
					}
				],
				"line": 1032,
				"name": "ProcessID"
			}
		],
		"comment": " Definition of the core event driver interface.\n\n\tThis module contains all declarations necessary for defining and using\n\tevent drivers. Event driver implementations will usually inherit from\n\t`EventDriver` using a `final` class to avoid virtual function overhead.\n\n\tCallback_Behavior:\n\t\tAll callbacks follow the same rules to enable generic implementation\n\t\tof high-level libraries, such as vibe.d. Except for \"listen\" style\n\t\tcallbacks, each callback will only ever be called at most once.\n\n\t\tIf the operation does not get canceled, the callback will be called\n\t\texactly once. In case it gets manually canceled using the corresponding\n\t\tAPI function, the callback is guaranteed to not be called. However,\n\t\tthe associated operation might still finish - either before the\n\t\tcancellation function returns, or afterwards.\n",
		"name": "eventcore.driver"
	},
	{
		"kind": "module",
		"file": "../eventcore/source/eventcore/socket.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "callback"
					}
				],
				"line": 10,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Address",
								"storageClass": [
									"scope"
								],
								"name": "peer_address"
							}
						],
						"line": 10,
						"kind": "function",
						"char": 14,
						"name": "connectStream",
						"type": "@safe StreamSocket(scope Address peer_address)",
						"endchar": 1,
						"endline": 22
					}
				],
				"name": "connectStream"
			},
			{
				"parameters": [
					{
						"deco": "C3std6socket7Address",
						"storageClass": [
							"scope"
						],
						"name": "bind_address"
					}
				],
				"line": 24,
				"kind": "function",
				"char": 20,
				"name": "listenStream",
				"deco": "FNfMC3std6socket7AddressZS9eventcoreQBb18StreamListenSocket",
				"endchar": 1,
				"endline": 29
			},
			{
				"parameters": [
					{
						"deco": "C3std6socket7Address",
						"storageClass": [
							"scope"
						],
						"name": "bind_address"
					},
					{
						"deco": "C3std6socket7Address",
						"storageClass": [
							"scope"
						],
						"default": "null",
						"name": "target_address"
					}
				],
				"line": 31,
				"kind": "function",
				"char": 16,
				"name": "createDatagramSocket",
				"deco": "FNfMC3std6socket7AddressMQvZS9eventcoreQBe14DatagramSocket",
				"endchar": 1,
				"endline": 36
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 49,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNbNfZv",
						"endchar": 86,
						"endline": 49
					},
					{
						"line": 51,
						"kind": "function",
						"char": 28,
						"name": "state",
						"deco": "FNbNdNfZE9eventcore6driver15ConnectionState",
						"endchar": 91,
						"endline": 51
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "enable"
							}
						],
						"line": 52,
						"kind": "function",
						"char": 17,
						"name": "tcpNoDelay",
						"deco": "FNbNdNfbZv",
						"endchar": 92,
						"endline": 52
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "enable"
							}
						],
						"line": 53,
						"kind": "function",
						"char": 7,
						"name": "setKeepAlive",
						"deco": "FNbNfbZv",
						"endchar": 83,
						"endline": 53
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "idle"
							},
							{
								"deco": "S4core4time8Duration",
								"name": "interval"
							},
							{
								"deco": "i",
								"default": "5",
								"name": "probeCount"
							}
						],
						"line": 54,
						"kind": "function",
						"char": 7,
						"name": "setKeepAliveParams",
						"deco": "FNbNfS4core4time8DurationQuiZv",
						"endchar": 2,
						"endline": 56
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"line": 57,
						"kind": "function",
						"char": 7,
						"name": "setUserTimeout",
						"deco": "FNbNfS4core4time8DurationZv",
						"endchar": 93,
						"endline": 57
					},
					{
						"parameters": [
							{
								"deco": "S9eventcore6socket12StreamSocket",
								"name": "p"
							}
						],
						"line": 38,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS9eventcore6socket12StreamSocketZQBh"
					}
				],
				"line": 38,
				"name": "StreamSocket"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "callback"
					}
				],
				"line": 60,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "StreamSocket",
								"storageClass": [
									"ref"
								],
								"name": "socket"
							},
							{
								"type": "ubyte[]",
								"name": "buffer"
							},
							{
								"type": "IOMode",
								"name": "mode"
							}
						],
						"line": 60,
						"kind": "function",
						"char": 6,
						"name": "read",
						"type": "void(ref StreamSocket socket, ubyte[] buffer, IOMode mode)",
						"endchar": 1,
						"endline": 66
					}
				],
				"name": "read"
			},
			{
				"parameters": [
					{
						"deco": "S9eventcore6socket12StreamSocket",
						"storageClass": [
							"ref"
						],
						"name": "socket"
					}
				],
				"line": 67,
				"kind": "function",
				"char": 6,
				"name": "cancelRead",
				"deco": "FKS9eventcore6socket12StreamSocketZv",
				"endchar": 89,
				"endline": 67
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "callback"
					}
				],
				"line": 68,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "StreamSocket",
								"storageClass": [
									"ref"
								],
								"name": "socket"
							}
						],
						"line": 68,
						"kind": "function",
						"char": 6,
						"name": "waitForData",
						"type": "void(ref StreamSocket socket)",
						"endchar": 1,
						"endline": 74
					}
				],
				"name": "waitForData"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "callback"
					}
				],
				"line": 75,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "StreamSocket",
								"storageClass": [
									"ref"
								],
								"name": "socket"
							},
							{
								"type": "const(ubyte)[]",
								"name": "buffer"
							},
							{
								"type": "IOMode",
								"name": "mode"
							}
						],
						"line": 75,
						"kind": "function",
						"char": 6,
						"name": "write",
						"type": "void(ref StreamSocket socket, const(ubyte)[] buffer, IOMode mode)",
						"endchar": 1,
						"endline": 81
					}
				],
				"name": "write"
			},
			{
				"parameters": [
					{
						"deco": "S9eventcore6socket12StreamSocket",
						"storageClass": [
							"ref"
						],
						"name": "socket"
					}
				],
				"line": 82,
				"kind": "function",
				"char": 6,
				"name": "cancelWrite",
				"deco": "FKS9eventcore6socket12StreamSocketZv",
				"endchar": 91,
				"endline": 82
			},
			{
				"parameters": [
					{
						"deco": "S9eventcore6socket12StreamSocket",
						"storageClass": [
							"ref"
						],
						"name": "socket"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "shut_read"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "shut_write"
					}
				],
				"line": 83,
				"kind": "function",
				"char": 6,
				"name": "shutdown",
				"deco": "FKS9eventcore6socket12StreamSocketbbZv",
				"endchar": 155,
				"endline": 83
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 97,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNbNfZv",
						"endchar": 92,
						"endline": 97
					},
					{
						"parameters": [
							{
								"deco": "S9eventcore6socket18StreamListenSocket",
								"name": "p"
							}
						],
						"line": 86,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS9eventcore6socket18StreamListenSocketZQBn"
					}
				],
				"line": 86,
				"name": "StreamListenSocket"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "callback"
					}
				],
				"line": 100,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "StreamListenSocket",
								"storageClass": [
									"ref"
								],
								"name": "socket"
							}
						],
						"line": 100,
						"kind": "function",
						"char": 6,
						"name": "waitForConnections",
						"type": "void(ref StreamListenSocket socket)",
						"endchar": 1,
						"endline": 107
					}
				],
				"name": "waitForConnections"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 121,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNbNfZv",
						"endchar": 88,
						"endline": 121
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "enable"
							}
						],
						"line": 123,
						"kind": "function",
						"char": 17,
						"name": "broadcast",
						"deco": "FNbNdNfbZv",
						"endchar": 90,
						"endline": 123
					},
					{
						"parameters": [
							{
								"deco": "S9eventcore6socket14DatagramSocket",
								"name": "p"
							}
						],
						"line": 110,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNeS9eventcore6socket14DatagramSocketZQBj"
					}
				],
				"line": 110,
				"name": "DatagramSocket"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "callback"
					}
				],
				"line": 126,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "DatagramSocket",
								"storageClass": [
									"ref"
								],
								"name": "socket"
							},
							{
								"type": "ubyte[]",
								"name": "buffer"
							},
							{
								"type": "IOMode",
								"name": "mode"
							}
						],
						"line": 126,
						"kind": "function",
						"char": 6,
						"name": "receive",
						"type": "void(ref DatagramSocket socket, ubyte[] buffer, IOMode mode)",
						"endchar": 1,
						"endline": 131
					}
				],
				"name": "receive"
			},
			{
				"parameters": [
					{
						"deco": "S9eventcore6socket14DatagramSocket",
						"storageClass": [
							"ref"
						],
						"name": "socket"
					}
				],
				"line": 132,
				"kind": "function",
				"char": 6,
				"name": "cancelReceive",
				"deco": "FKS9eventcore6socket14DatagramSocketZv",
				"endchar": 97,
				"endline": 132
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "callback"
					}
				],
				"line": 133,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "DatagramSocket",
								"storageClass": [
									"ref"
								],
								"name": "socket"
							},
							{
								"type": "const(ubyte)[]",
								"name": "buffer"
							},
							{
								"type": "IOMode",
								"name": "mode"
							},
							{
								"type": "Address",
								"default": "null",
								"name": "target_address"
							}
						],
						"line": 133,
						"kind": "function",
						"char": 6,
						"name": "send",
						"type": "void(ref DatagramSocket socket, const(ubyte)[] buffer, IOMode mode, Address target_address = null)",
						"endchar": 1,
						"endline": 138
					}
				],
				"name": "send"
			},
			{
				"parameters": [
					{
						"deco": "S9eventcore6socket14DatagramSocket",
						"storageClass": [
							"ref"
						],
						"name": "socket"
					}
				],
				"line": 139,
				"kind": "function",
				"char": 6,
				"name": "cancelSend",
				"deco": "FKS9eventcore6socket14DatagramSocketZv",
				"endchar": 91,
				"endline": 139
			}
		],
		"name": "eventcore.socket"
	},
	{
		"kind": "module",
		"file": "../../.dub/packages/taggedalgebraic-0.11.4/taggedalgebraic/source/taggedalgebraic/package.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 3,
				"name": "taggedalgebraic.taggedalgebraic"
			}
		],
		"name": "taggedalgebraic"
	},
	{
		"kind": "module",
		"file": "../../.dub/packages/taggedalgebraic-0.11.4/taggedalgebraic/source/taggedalgebraic/taggedalgebraic.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "taggedalgebraic.taggedunion"
			},
			{
				"constraint": "is(U == union) || is(U == struct) || is(U == enum)",
				"parameters": [
					{
						"kind": "type",
						"name": "U"
					}
				],
				"line": 46,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"line": 52,
								"char": 13,
								"type": "U",
								"comment": "Alias of the type used for defining the possible storage types/kinds.\n",
								"name": "Union"
							},
							{
								"kind": "alias",
								"type": "U",
								"char": 10,
								"line": 54,
								"name": "FieldDefinitionType"
							},
							{
								"kind": "alias",
								"line": 57,
								"char": 2,
								"type": "TaggedUnion!U",
								"comment": "The underlying tagged union type\n",
								"name": "UnionType"
							},
							{
								"kind": "variable",
								"type": "TaggedUnion!U",
								"char": 24,
								"line": 59,
								"name": "m_union"
							},
							{
								"kind": "alias",
								"line": 62,
								"char": 2,
								"type": "UnionType.Kind",
								"comment": "A type enum that identifies the type of value currently stored.\n",
								"name": "Kind"
							},
							{
								"kind": "alias",
								"line": 65,
								"char": 36,
								"type": "Kind",
								"comment": "Compatibility alias\n",
								"name": "Type"
							},
							{
								"line": 68,
								"kind": "function",
								"char": 17,
								"name": "kind",
								"type": "const @property Kind()",
								"endchar": 53,
								"endline": 68,
								"comment": "The type ID of the currently stored value.\n"
							},
							{
								"kind": "alias",
								"type": "kind",
								"char": 2,
								"line": 72,
								"name": "typeID"
							},
							{
								"parameters": [
									{
										"type": "TaggedAlgebraic",
										"name": "other"
									}
								],
								"line": 78,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(TaggedAlgebraic other)",
								"endchar": 2,
								"endline": 81
							},
							{
								"parameters": [
									{
										"type": "TaggedAlgebraic",
										"name": "other"
									}
								],
								"line": 83,
								"kind": "function",
								"char": 7,
								"name": "opAssign",
								"type": "void(TaggedAlgebraic other)",
								"endchar": 2,
								"endline": 86
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 89,
								"kind": "template",
								"char": 4,
								"members": [
									{
										"line": 89,
										"kind": "function",
										"char": 4,
										"name": "opCast",
										"type": "T()",
										"endchar": 41,
										"endline": 89
									}
								],
								"name": "opCast",
								"comment": "Enables conversion or extraction of the stored value.\n"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 91,
								"kind": "template",
								"char": 4,
								"members": [
									{
										"line": 91,
										"kind": "function",
										"char": 4,
										"name": "opCast",
										"type": "const T()",
										"endchar": 47,
										"endline": 91
									}
								],
								"name": "opCast",
								"comment": "ditto\n"
							},
							{
								"line": 94,
								"kind": "function",
								"char": 9,
								"name": "toString",
								"type": "const string()",
								"endchar": 53,
								"endline": 94,
								"comment": "Uses `cast(string)`/`to!string` to return a string representation of the enclosed value.\n"
							},
							{
								"constraint": "hasOp!(TA, OpKind.method, name, ARGS)",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "name"
									},
									{
										"kind": "this",
										"name": "TA"
									},
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"line": 102,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "ARGS",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "args"
											}
										],
										"line": 102,
										"kind": "function",
										"char": 7,
										"name": "opDispatch",
										"type": "(auto ref ARGS args)",
										"endchar": 168,
										"endline": 102
									}
								],
								"name": "opDispatch",
								"comment": "Enables the invocation of methods of the stored value.\n"
							},
							{
								"constraint": "hasOp!(TA, OpKind.field, name, ARGS) && !hasOp!(TA, OpKind.method, name, ARGS)",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "name"
									},
									{
										"kind": "this",
										"name": "TA"
									},
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"line": 104,
								"kind": "template",
								"char": 17,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "ARGS",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "args"
											}
										],
										"line": 104,
										"kind": "function",
										"char": 17,
										"name": "opDispatch",
										"type": "@property (auto ref ARGS args)",
										"endchar": 218,
										"endline": 104
									}
								],
								"name": "opDispatch",
								"comment": "Enables accessing properties/fields of the stored value.\n"
							},
							{
								"constraint": "is(Unqual!T == TaggedAlgebraic) || hasOp!(TA, OpKind.binary, \"==\", T)",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									},
									{
										"kind": "this",
										"name": "TA"
									}
								],
								"line": 106,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "T",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "other"
											}
										],
										"line": 106,
										"kind": "function",
										"char": 7,
										"name": "opEquals",
										"type": "(auto ref T other)",
										"endchar": 2,
										"endline": 112
									}
								],
								"name": "opEquals",
								"comment": "Enables equality comparison with the stored value.\n"
							},
							{
								"constraint": "hasOp!(TA, OpKind.binary, \"<\", T)",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									},
									{
										"kind": "this",
										"name": "TA"
									}
								],
								"line": 114,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "T",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "other"
											}
										],
										"line": 114,
										"kind": "function",
										"char": 7,
										"name": "opCmp",
										"type": "(auto ref T other)",
										"endchar": 108,
										"endline": 114
									}
								],
								"name": "opCmp",
								"comment": "Enables relational comparisons with the stored value.\n"
							},
							{
								"constraint": "hasOp!(TA, OpKind.unary, op)",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "this",
										"name": "TA"
									}
								],
								"line": 116,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"line": 116,
										"kind": "function",
										"char": 7,
										"name": "opUnary",
										"type": "()",
										"endchar": 118,
										"endline": 116
									}
								],
								"name": "opUnary",
								"comment": "Enables the use of unary operators with the stored value.\n"
							},
							{
								"constraint": "hasOp!(TA, OpKind.binary, op, T)",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "T"
									},
									{
										"kind": "this",
										"name": "TA"
									}
								],
								"line": 118,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "T",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "other"
											}
										],
										"line": 118,
										"kind": "function",
										"char": 7,
										"name": "opBinary",
										"type": "(auto ref T other)",
										"endchar": 150,
										"endline": 118
									}
								],
								"name": "opBinary",
								"comment": "Enables the use of binary operators with the stored value.\n"
							},
							{
								"constraint": "hasOp!(TA, OpKind.binaryRight, op, T) && !isInstanceOf!(TaggedAlgebraic, T)",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "T"
									},
									{
										"kind": "this",
										"name": "TA"
									}
								],
								"line": 120,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "T",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "other"
											}
										],
										"line": 120,
										"kind": "function",
										"char": 7,
										"name": "opBinaryRight",
										"type": "(auto ref T other)",
										"endchar": 203,
										"endline": 120
									}
								],
								"name": "opBinaryRight",
								"comment": "Enables the use of binary operators with the stored value.\n"
							},
							{
								"constraint": "hasOp!(TA, OpKind.binaryRight, op, T) && isInstanceOf!(TaggedAlgebraic, T) && !hasOp!(T, OpKind.opBinary, op, TA)",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "T"
									},
									{
										"kind": "this",
										"name": "TA"
									}
								],
								"line": 122,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "T",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "other"
											}
										],
										"line": 122,
										"kind": "function",
										"char": 7,
										"name": "opBinaryRight",
										"type": "(auto ref T other)",
										"endchar": 241,
										"endline": 122
									}
								],
								"name": "opBinaryRight",
								"comment": "ditto\n"
							},
							{
								"constraint": "hasOp!(TA, OpKind.binary, op ~ \"=\", T)",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "T"
									},
									{
										"kind": "this",
										"name": "TA"
									}
								],
								"line": 124,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "T",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "other"
											}
										],
										"line": 124,
										"kind": "function",
										"char": 7,
										"name": "opOpAssign",
										"type": "(auto ref T other)",
										"endchar": 160,
										"endline": 124
									}
								],
								"name": "opOpAssign",
								"comment": "Enables operator assignments on the stored value.\n"
							},
							{
								"constraint": "hasOp!(TA, OpKind.index, null, ARGS)",
								"parameters": [
									{
										"kind": "this",
										"name": "TA"
									},
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"line": 126,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "ARGS",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "args"
											}
										],
										"line": 126,
										"kind": "function",
										"char": 7,
										"name": "opIndex",
										"type": "(auto ref ARGS args)",
										"endchar": 150,
										"endline": 126
									}
								],
								"name": "opIndex",
								"comment": "Enables indexing operations on the stored value.\n"
							},
							{
								"constraint": "hasOp!(TA, OpKind.indexAssign, null, ARGS)",
								"parameters": [
									{
										"kind": "this",
										"name": "TA"
									},
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"line": 128,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "ARGS",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "args"
											}
										],
										"line": 128,
										"kind": "function",
										"char": 7,
										"name": "opIndexAssign",
										"type": "(auto ref ARGS args)",
										"endchar": 168,
										"endline": 128
									}
								],
								"name": "opIndexAssign",
								"comment": "Enables index assignments on the stored value.\n"
							},
							{
								"constraint": "hasOp!(TA, OpKind.call, null, ARGS)",
								"parameters": [
									{
										"kind": "this",
										"name": "TA"
									},
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"line": 130,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "ARGS",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "args"
											}
										],
										"line": 130,
										"kind": "function",
										"char": 7,
										"name": "opCall",
										"type": "(auto ref ARGS args)",
										"endchar": 147,
										"endline": 130
									}
								],
								"name": "opCall",
								"comment": "Enables call syntax operations on the stored value.\n"
							}
						],
						"line": 46,
						"name": "TaggedAlgebraic"
					}
				],
				"name": "TaggedAlgebraic",
				"comment": " Implements a generic algebraic type using an enum to identify the stored type.\n\n\tThis struct takes a `union` or `struct` declaration as an input and builds\n\tan algebraic data type from its fields, using an automatically generated\n\t`Kind` enumeration to identify which field of the union is currently used.\n\tMultiple fields with the same value are supported.\n\n\tAll operators and methods are transparently forwarded to the contained\n\tvalue. The caller has to make sure that the contained value supports the\n\trequested operation. Failure to do so will result in an assertion failure.\n\n\tThe return value of forwarded operations is determined as follows:\n\t$(UL\n\t\t$(LI If the type can be uniquely determined, it is used as the return\n\t\t\tvalue)\n\t\t$(LI If there are multiple possible return values and all of them match\n\t\t\tthe unique types defined in the `TaggedAlgebraic`, a\n\t\t\t`TaggedAlgebraic` is returned.)\n\t\t$(LI If there are multiple return values and none of them is a\n\t\t\t`Variant`, an `Algebraic` of the set of possible return types is\n\t\t\treturned.)\n\t\t$(LI If any of the possible operations returns a `Variant`, this is used\n\t\t\tas the return value.)\n\t)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L134_C7)\n---\nimport taggedalgebraic;\n\nstruct Foo {\n\tstring name;\n\tvoid bar() @safe {}\n}\n\nunion Base {\n\tint i;\n\tstring str;\n\tFoo foo;\n}\n\nalias Tagged = TaggedAlgebraic!Base;\n\n// Instantiate\nTagged taggedInt = 5;\nTagged taggedString = \"Hello\";\nTagged taggedFoo = Foo();\nTagged taggedAny = taggedInt;\ntaggedAny = taggedString;\ntaggedAny = taggedFoo;\n\n// Check type: Tagged.Kind is an enum\nassert(taggedInt.kind == Tagged.Kind.i);\nassert(taggedString.kind == Tagged.Kind.str);\nassert(taggedFoo.kind == Tagged.Kind.foo);\nassert(taggedAny.kind == Tagged.Kind.foo);\n\n// In most cases, can simply use as-is\nauto num = 4 + taggedInt;\nauto msg = taggedString ~ \" World!\";\ntaggedFoo.bar();\nif (taggedAny.kind == Tagged.Kind.foo) // Make sure to check type first!\n\ttaggedAny.bar();\n//taggedString.bar(); // AssertError: Not a Foo!\n\n// Convert back by casting\nauto i   = cast(int)    taggedInt;\nauto str = cast(string) taggedString;\nauto foo = cast(Foo)    taggedFoo;\nif (taggedAny.kind == Tagged.Kind.foo) // Make sure to check type first!\n\tauto foo2 = cast(Foo) taggedAny;\n//cast(Foo) taggedString; // AssertError!\n\n// Kind is an enum, so final switch is supported:\nfinal switch (taggedAny.kind) {\n\tcase Tagged.Kind.i:\n\t\t// It's \"int i\"\n\t\tbreak;\n\n\tcase Tagged.Kind.str:\n\t\t// It's \"string str\"\n\t\tbreak;\n\n\tcase Tagged.Kind.foo:\n\t\t// It's \"Foo foo\"\n\t\tbreak;\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L134_C7)\nExample:\nOperators and methods of the contained type can be used transparently.$(DDOX_UNITTEST_HEADER __unittest_L199_C7)\n---\nstatic struct S {\n\tint v;\n\tint test() { return v / 2; }\n}\n\nstatic union Test {\n\ttypeof(null) null_;\n\tint integer;\n\tstring text;\n\tstring[string] dictionary;\n\tS custom;\n}\n\nalias TA = TaggedAlgebraic!Test;\n\nTA ta;\nassert(ta.kind == TA.Kind.null_);\n\nta = 12;\nassert(ta.kind == TA.Kind.integer);\nassert(ta == 12);\nassert(cast(int)ta == 12);\nassert(cast(long)ta == 12);\nassert(cast(short)ta == 12);\n\nta += 12;\nassert(ta == 24);\nassert(ta - 10 == 14);\n\nta = [\"foo\" : \"bar\"];\nassert(ta.kind == TA.Kind.dictionary);\nassert(ta[\"foo\"] == \"bar\");\n\nta[\"foo\"] = \"baz\";\nassert(ta[\"foo\"] == \"baz\");\n\nta = S(8);\nassert(ta.test() == 4);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L199_C7)\nExample:\nMultiple fields are allowed to have the same type, in which case the type\n\tID enum is used to disambiguate.$(DDOX_UNITTEST_HEADER __unittest_L267_C7)\n---\nstatic union Test {\n\ttypeof(null) null_;\n\tint count;\n\tint difference;\n}\n\nalias TA = TaggedAlgebraic!Test;\n\nTA ta = TA(12, TA.Kind.count);\nassert(ta.kind == TA.Kind.count);\nassert(ta == 12);\n\nta = null;\nassert(ta.kind == TA.Kind.null_);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L267_C7)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "U"
					}
				],
				"line": 613,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "TaggedAlgebraic!U",
								"storageClass": [
									"in",
									"ref"
								],
								"name": "ta"
							}
						],
						"line": 613,
						"kind": "function",
						"char": 6,
						"name": "hasType",
						"type": "bool(ref TaggedAlgebraic!U ta)",
						"endchar": 1,
						"endline": 625
					}
				],
				"name": "hasType",
				"comment": " Tests if the algebraic type stores a value of a certain data type.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L633_C1)\n---\nunion Fields {\n\tint number;\n\tstring text;\n}\n\nTaggedAlgebraic!Fields ta = \"test\";\n\nassert(ta.hasType!string);\nassert(!ta.hasType!int);\n\nta = 42;\nassert(ta.hasType!int);\nassert(!ta.hasType!string);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L633_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "U"
					}
				],
				"line": 627,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "TaggedAlgebraic!U",
								"storageClass": [
									"in"
								],
								"name": "ta"
							}
						],
						"line": 627,
						"kind": "function",
						"char": 6,
						"name": "hasType",
						"type": "bool(in TaggedAlgebraic!U ta)",
						"endchar": 1,
						"endline": 630
					}
				],
				"name": "hasType",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "U"
					}
				],
				"line": 675,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "inout(TaggedAlgebraic!U)",
								"storageClass": [
									"ref"
								],
								"name": "ta"
							}
						],
						"line": 675,
						"kind": "function",
						"char": 14,
						"name": "get",
						"type": "ref inout(T)(ref inout(TaggedAlgebraic!U) ta)",
						"endchar": 1,
						"endline": 678
					}
				],
				"name": "get",
				"comment": " Gets the value stored in an algebraic type based on its data type.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "U"
					}
				],
				"line": 680,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "inout(TaggedAlgebraic!U)",
								"name": "ta"
							}
						],
						"line": 680,
						"kind": "function",
						"char": 10,
						"name": "get",
						"type": "inout(T)(inout(TaggedAlgebraic!U) ta)",
						"endchar": 1,
						"endline": 683
					}
				],
				"name": "get",
				"comment": "ditto\n"
			},
			{
				"constraint": "isInstanceOf!(TaggedAlgebraic, TA)",
				"parameters": [
					{
						"kind": "alias",
						"name": "handler"
					},
					{
						"kind": "type",
						"name": "TA"
					}
				],
				"line": 710,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "TA",
								"name": "ta"
							}
						],
						"line": 710,
						"kind": "function",
						"char": 6,
						"name": "apply",
						"type": "(TA ta)",
						"endchar": 1,
						"endline": 720
					}
				],
				"name": "apply",
				"comment": " Calls a the given callback with the static type of the contained value.\n\n\tThe `handler` callback must be a lambda or a single-argument template\n\tfunction that accepts all possible types that the given `TaggedAlgebraic`\n\tcan hold.\n\n\tReturns:\n\t\tIf `handler` has a non-void return value, its return value gets\n\t\tforwarded to the caller.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L729_C1)\n---\nunion U {\n\tint i;\n\tstring s;\n}\nalias TA = TaggedAlgebraic!U;\n\nassert(TA(12).apply!((v) {\n\tstatic if (is(typeof(v) == int)) {\n\t\tassert(v == 12);\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}) == 1);\n\nassert(TA(\"foo\").apply!((v) {\n\tstatic if (is(typeof(v) == string)) {\n\t\tassert(v == \"foo\");\n\t\treturn 2;\n\t} else {\n\t\treturn 0;\n\t}\n}) == 2);\n\n\"baz\".apply!((v) {\n\tassert(v == \"baz\");\n});\n}\n\n/// User-defined attibute to disable `opIndex` forwarding for a particular tagged union member.\n@property auto disableIndex() { assert(__ctfe, \"disableIndex must only be used as an attribute.\"); return DisableOpAttribute(OpKind.index, null); \n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L729_C1)\n"
			},
			{
				"constraint": "!isInstanceOf!(TaggedAlgebraic, T)",
				"parameters": [
					{
						"kind": "alias",
						"name": "handler"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 722,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "T",
								"name": "value"
							}
						],
						"line": 722,
						"kind": "function",
						"char": 6,
						"name": "apply",
						"type": "(T value)",
						"endchar": 1,
						"endline": 726
					}
				],
				"name": "apply",
				"comment": "ditto\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"line": 760,
				"kind": "function",
				"originalType": "@property ()",
				"char": 16,
				"name": "disableIndex",
				"deco": "FNaNbNdNiNfZS15taggedalgebraicQr18DisableOpAttribute",
				"endchar": 147,
				"endline": 760,
				"comment": "User-defined attibute to disable `opIndex` forwarding for a particular tagged union member.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "U"
					}
				],
				"line": 1043,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"kind": "alias",
						"type": "UnionFieldEnum!U",
						"char": 12,
						"line": 1043,
						"name": "TypeEnum"
					}
				],
				"name": "TypeEnum"
			}
		],
		"comment": " Algebraic data type implementation based on a tagged union.\n\n Copyright: Copyright 2015-2019, Sönke Ludwig.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   Sönke Ludwig\n",
		"name": "taggedalgebraic.taggedalgebraic"
	},
	{
		"kind": "module",
		"file": "../../.dub/packages/taggedalgebraic-0.11.4/taggedalgebraic/source/taggedalgebraic/taggedunion.d",
		"members": [
			{
				"constraint": "is(U == union) || is(U == struct) || is(U == enum)",
				"parameters": [
					{
						"kind": "type",
						"name": "U"
					}
				],
				"line": 32,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 60,
						"members": [
							{
								"kind": "alias",
								"type": "U",
								"char": 2,
								"line": 39,
								"name": "FieldDefinitionType"
							},
							{
								"kind": "alias",
								"line": 42,
								"char": 2,
								"type": "UnionFieldEnum!U",
								"comment": "A type enum that identifies the type of value currently stored.\n",
								"name": "Kind"
							},
							{
								"kind": "alias",
								"type": "UnionKindTypes!Kind",
								"char": 2,
								"line": 44,
								"name": "FieldTypes"
							},
							{
								"kind": "alias",
								"type": "UnionKindNames!Kind",
								"char": 2,
								"line": 45,
								"name": "fieldNames"
							},
							{
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "name"
									}
								],
								"line": 50,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"kind": "alias",
										"type": "FieldTypes[__traits(getMember, Kind, name)]",
										"char": 10,
										"line": 50,
										"name": "FieldTypeByName"
									}
								],
								"name": "FieldTypeByName"
							},
							{
								"kind": "variable",
								"type": "void[Largest!FieldTypes.sizeof]",
								"char": 36,
								"line": 54,
								"name": "m_data"
							},
							{
								"kind": "variable",
								"type": "Kind",
								"char": 8,
								"line": 63,
								"name": "m_kind"
							},
							{
								"parameters": [
									{
										"type": "TaggedUnion",
										"name": "other"
									}
								],
								"line": 66,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(TaggedUnion other)",
								"endchar": 2,
								"endline": 69
							},
							{
								"parameters": [
									{
										"type": "TaggedUnion",
										"name": "other"
									}
								],
								"line": 71,
								"kind": "function",
								"char": 7,
								"name": "opAssign",
								"type": "void(TaggedUnion other)",
								"endchar": 2,
								"endline": 74
							},
							{
								"storageClass": [
									"@disable"
								],
								"line": 91,
								"kind": "constructor",
								"char": 12,
								"name": "this",
								"type": "()"
							},
							{
								"line": 117,
								"kind": "destructor",
								"char": 3,
								"name": "~this",
								"endchar": 3,
								"endline": 129
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 133,
								"kind": "template",
								"char": 4,
								"members": [
									{
										"line": 133,
										"kind": "function",
										"char": 4,
										"name": "opCast",
										"type": "T()",
										"endchar": 2,
										"endline": 151
									}
								],
								"name": "opCast",
								"comment": "Enables conversion or extraction of the stored value.\n"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 153,
								"kind": "template",
								"char": 4,
								"members": [
									{
										"line": 153,
										"kind": "function",
										"char": 4,
										"name": "opCast",
										"type": "const T()",
										"endchar": 2,
										"endline": 172
									}
								],
								"name": "opCast",
								"comment": "ditto\n"
							},
							{
								"parameters": [],
								"line": 175,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "inout(TaggedUnion)",
												"storageClass": [
													"auto",
													"ref"
												],
												"name": "other"
											}
										],
										"line": 175,
										"kind": "function",
										"char": 7,
										"name": "opEquals",
										"type": "inout bool(auto ref inout(TaggedUnion) other)",
										"endchar": 2,
										"endline": 185
									}
								],
								"name": "opEquals",
								"comment": "Enables equality comparison with the stored value.\n"
							},
							{
								"line": 188,
								"kind": "function",
								"char": 17,
								"name": "kind",
								"type": "const @property Kind()",
								"endchar": 47,
								"endline": 188,
								"comment": "The type ID of the currently stored value.\n"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 211,
								"kind": "template",
								"char": 17,
								"members": [
									{
										"line": 211,
										"kind": "function",
										"char": 17,
										"name": "hasType",
										"type": "const @property bool()",
										"endchar": 2,
										"endline": 221
									}
								],
								"name": "hasType",
								"comment": " Checks whether the currently stored value has a given type.\n"
							},
							{
								"parameters": [
									{
										"kind": "value",
										"type": "Kind",
										"name": "kind"
									}
								],
								"line": 231,
								"kind": "template",
								"char": 40,
								"members": [
									{
										"line": 231,
										"kind": "function",
										"char": 40,
										"name": "value",
										"type": "inout @property ref inout(FieldTypes[kind])()",
										"endchar": 2,
										"endline": 243
									}
								],
								"name": "value",
								"comment": " Accesses the contained value by reference.\n\n\t\tThe specified `kind` must equal the current value of the `this.kind`\n\t\tproperty. Setting a different type must be done with `set` or `opAssign`\n\t\tinstead.\n\n\t\tSee_Also: `set`, `opAssign`\n"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 253,
								"kind": "template",
								"char": 25,
								"members": [
									{
										"line": 253,
										"kind": "function",
										"char": 25,
										"name": "value",
										"type": "inout @property ref inout(T)()",
										"endchar": 2,
										"endline": 267
									}
								],
								"name": "value",
								"comment": " Accesses the contained value by reference.\n\n\t\tThe specified type `T` must equal the type of the currently set value.\n\t\tSetting a different type must be done with `set` or `opAssign` instead.\n\n\t\tSee_Also: `set`, `opAssign`\n"
							},
							{
								"constraint": "!isUnitType!(FieldTypes[kind])",
								"parameters": [
									{
										"kind": "value",
										"type": "Kind",
										"name": "kind"
									}
								],
								"line": 271,
								"kind": "template",
								"char": 23,
								"members": [
									{
										"parameters": [
											{
												"type": "FieldTypes[kind]",
												"name": "value"
											}
										],
										"line": 271,
										"kind": "function",
										"char": 23,
										"name": "set",
										"type": "ref FieldTypes[kind](FieldTypes[kind] value)",
										"endchar": 2,
										"endline": 283
									}
								],
								"name": "set",
								"comment": " Sets a new value of the specified `kind`.\n"
							},
							{
								"constraint": "isUnitType!(FieldTypes[kind])",
								"parameters": [
									{
										"kind": "value",
										"type": "Kind",
										"name": "kind"
									}
								],
								"line": 287,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"line": 287,
										"kind": "function",
										"char": 7,
										"name": "set",
										"type": "void()",
										"endchar": 2,
										"endline": 294
									}
								],
								"name": "set",
								"comment": " Sets a `void` value of the specified kind.\n"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 296,
								"kind": "template",
								"char": 42,
								"members": [
									{
										"line": 296,
										"kind": "function",
										"char": 42,
										"name": "trustedGet",
										"type": "inout @property ref @trusted inout(T)()",
										"endchar": 101,
										"endline": 296
									}
								],
								"name": "trustedGet"
							}
						],
						"line": 33,
						"name": "TaggedUnion"
					}
				],
				"name": "TaggedUnion",
				"comment": " Implements a generic tagged union type.\n\n\tThis struct takes a `union` or `struct` declaration as an input and builds\n\tan algebraic data type from its fields, using an automatically generated\n\t`Kind` enumeration to identify which field of the union is currently used.\n\tMultiple fields with the same value are supported.\n\n\tFor each field defined by `U` a number of convenience members are generated.\n\tFor a given field \"foo\", these fields are:\n\n\t$(UL\n\t\t$(LI `static foo(value)` - returns a new tagged union with the specified value)\n\t\t$(LI `isFoo` - equivalent to `kind == Kind.foo`)\n\t\t$(LI `setFoo(value)` - equivalent to `set!(Kind.foo)(value)`)\n\t\t$(LI `getFoo` - equivalent to `get!(Kind.foo)`)\n\t)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L301_C15)\n---\nunion Kinds {\n\tint count;\n\tstring text;\n}\nalias TU = TaggedUnion!Kinds;\n\n// default initialized to the first field defined\nTU tu;\nassert(tu.kind == TU.Kind.count);\nassert(tu.isCount); // qequivalent to the line above\nassert(!tu.isText);\nassert(tu.value!(TU.Kind.count) == int.init);\n\n// set to a specific count\ntu.setCount(42);\nassert(tu.isCount);\nassert(tu.countValue == 42);\nassert(tu.value!(TU.Kind.count) == 42);\nassert(tu.value!int == 42); // can also get by type\nassert(tu.countValue == 42);\n\n// assign a new tagged algebraic value\ntu = TU.count(43);\n\n// test equivalence with other tagged unions\nassert(tu == TU.count(43));\nassert(tu != TU.count(42));\nassert(tu != TU.text(\"hello\"));\n\n// modify by reference\ntu.countValue++;\nassert(tu.countValue == 44);\n\n// set the second field\ntu.setText(\"hello\");\nassert(!tu.isCount);\nassert(tu.isText);\nassert(tu.kind == TU.Kind.text);\nassert(tu.textValue == \"hello\");\n\n// unique types can also be directly constructed\ntu = TU(12);\nassert(tu.countValue == 12);\ntu = TU(\"foo\");\nassert(tu.textValue == \"foo\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L301_C15)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L350_C15)\n---\n// Enum annotations supported since DMD 2.082.0. The mixin below is\n// necessary to keep the parser happy on older versions.\nstatic if (__VERSION__ >= 2082) {\n\talias myint = int;\n\t// tagged unions can be defined in terms of an annotated enum\n\tmixin(q{enum E {\n\t\tnone,\n\t\t@string text\n\t}});\n\n\talias TU = TaggedUnion!E;\n\tstatic assert(is(TU.Kind == E));\n\n\tTU tu;\n\tassert(tu.isNone);\n\tassert(tu.kind == E.none);\n\n\ttu.setText(\"foo\");\n\tassert(tu.kind == E.text);\n\tassert(tu.textValue == \"foo\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L350_C15)\n"
			},
			{
				"constraint": "VISITORS.length > 0",
				"parameters": [
					{
						"kind": "tuple",
						"name": "VISITORS"
					}
				],
				"line": 454,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"constraint": "isInstanceOf!(TaggedUnion, TU)",
						"parameters": [
							{
								"kind": "type",
								"name": "TU"
							}
						],
						"line": 457,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "TU",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "tu"
									}
								],
								"line": 457,
								"kind": "function",
								"char": 7,
								"name": "visit",
								"type": "(auto ref TU tu)",
								"endchar": 2,
								"endline": 476
							}
						],
						"name": "visit"
					}
				],
				"name": "visit",
				"comment": " Dispatches the value contained on a `TaggedUnion` to a set of visitors.\n\n\tA visitor can have one of three forms:\n\n\t$(UL\n\t\t$(LI function or delegate taking a single typed parameter)\n\t\t$(LI function or delegate taking no parameters)\n\t\t$(LI function or delegate template taking any single parameter)\n\t)\n\n\t....\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L480_C1)\n---\nstatic if (__VERSION__ >= 2081) {\n\timport std.conv : to;\n\n\tunion U {\n\t\tint number;\n\t\tstring text;\n\t}\n\talias TU = TaggedUnion!U;\n\n\tauto tu = TU.number(42);\n\ttu.visit!(\n\t\t(int n) { assert(n == 42); },\n\t\t(string s) { assert(false); }\n\t);\n\n\tassert(tu.visit!((v) => to!int(v)) == 42);\n\n\ttu.setText(\"43\");\n\n\tassert(tu.visit!((v) => to!int(v)) == 43);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L480_C1)\n"
			},
			{
				"constraint": "VISITORS.length > 0",
				"parameters": [
					{
						"kind": "tuple",
						"name": "VISITORS"
					}
				],
				"line": 536,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"constraint": "isInstanceOf!(TaggedUnion, TU)",
						"parameters": [
							{
								"kind": "type",
								"name": "TU"
							}
						],
						"line": 539,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "TU",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "tu"
									}
								],
								"line": 539,
								"kind": "function",
								"char": 7,
								"name": "tryVisit",
								"type": "(auto ref TU tu)",
								"endchar": 2,
								"endline": 556
							}
						],
						"name": "tryVisit"
					}
				],
				"name": "tryVisit",
				"comment": " The same as `visit`, except that failure to handle types is checked at runtime.\n\n\tInstead of failing to compile, `tryVisit` will throw an `Exception` if none\n\tof the handlers is able to handle the value contained in `tu`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L560_C1)\n---\nimport std.exception : assertThrown;\n\nunion U {\n\tint number;\n\tstring text;\n}\nalias TU = TaggedUnion!U;\n\nauto tu = TU.number(42);\ntu.tryVisit!((int n) { assert(n == 42); });\nassertThrown(tu.tryVisit!((string s) { assert(false); }));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L560_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 574,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 574,
						"kind": "variable",
						"char": 6,
						"name": "isUnitType",
						"init": "is(T == Void) || is(T == void) || is(T == typeof(null))"
					}
				],
				"name": "isUnitType"
			},
			{
				"constraint": "is(typeof(kind) == enum)",
				"parameters": [
					{
						"kind": "alias",
						"name": "kind"
					}
				],
				"line": 663,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "TemplateArgsOf!(typeof(kind))",
						"char": 3,
						"line": 670,
						"name": "U"
					},
					{
						"kind": "alias",
						"type": "FieldTypeTuple!U[kind]",
						"char": 3,
						"line": 671,
						"name": "FT"
					},
					{
						"kind": "alias",
						"type": "ReplaceType!(This, U, FT)",
						"char": 3,
						"line": 689,
						"name": "TypeOf"
					}
				],
				"name": "TypeOf",
				"comment": " Maps a kind enumeration value to the corresponding field type.\n\n\t`kind` must be a value of the `TaggedAlgebraic!T.Kind` enumeration.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L694_C1)\n---\nstatic struct S {\n\tint a;\n\tstring b;\n\tstring c;\n}\nalias TU = TaggedUnion!S;\n\nstatic assert(is(TypeOf!(TU.Kind.a) == int));\nstatic assert(is(TypeOf!(TU.Kind.b) == string));\nstatic assert(is(TypeOf!(TU.Kind.c) == string));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L694_C1)\n"
			},
			{
				"kind": "struct",
				"line": 720,
				"char": 1,
				"members": [],
				"comment": "Convenience type that can be used for union fields that have no value (`void` is not allowed).\n",
				"name": "Void"
			},
			{
				"kind": "struct",
				"line": 728,
				"char": 1,
				"members": [
					{
						"line": 728,
						"kind": "variable",
						"char": 20,
						"name": "nothing",
						"deco": "S15taggedalgebraic11taggedunion4Void",
						"offset": 0
					}
				],
				"comment": " Special type used as a placeholder for `U` within the definition of `U` to\n\tenable self-referential types.\n\n\tNote that this is recognized only if used as the first argument to a\n\ttemplate type.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L731_C1)\n---\nunion U {\n\tTaggedUnion!This[] list;\n\tint number;\n\tstring text;\n}\nalias Node = TaggedUnion!U;\n\nauto n = Node([Node(12), Node(\"foo\")]);\nassert(n.isList);\nassert(n.listValue == [Node(12), Node(\"foo\")]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L731_C1)\n",
				"name": "This"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "U"
					}
				],
				"line": 754,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"kind": "alias",
						"type": "UnionFieldEnum!U",
						"char": 12,
						"line": 754,
						"name": "TypeEnum"
					}
				],
				"name": "TypeEnum"
			}
		],
		"comment": " Generic tagged union and algebraic data type implementations.\n\n Copyright: Copyright 2015-2019, Sönke Ludwig.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   Sönke Ludwig\n",
		"name": "taggedalgebraic.taggedunion"
	},
	{
		"kind": "module",
		"file": "data/vibe/data/bson.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 62,
				"name": "vibe.data.json"
			},
			{
				"kind": "alias",
				"deco": "Ayh",
				"char": 1,
				"line": 77,
				"name": "bdata_t"
			},
			{
				"kind": "struct",
				"line": 84,
				"char": 1,
				"members": [
					{
						"line": 88,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"line": 89,
								"char": 3,
								"value": "cast(ubyte)0u",
								"comment": "End marker - should never occur explicitly\n",
								"name": "end"
							},
							{
								"kind": "enum member",
								"line": 90,
								"char": 3,
								"value": "cast(ubyte)1u",
								"comment": "A 64-bit floating point value\n",
								"name": "double_"
							},
							{
								"kind": "enum member",
								"line": 91,
								"char": 3,
								"value": "cast(ubyte)2u",
								"comment": "A UTF-8 string\n",
								"name": "string"
							},
							{
								"kind": "enum member",
								"line": 92,
								"char": 3,
								"value": "cast(ubyte)3u",
								"comment": "An object aka. dictionary of string to Bson\n",
								"name": "object"
							},
							{
								"kind": "enum member",
								"line": 93,
								"char": 3,
								"value": "cast(ubyte)4u",
								"comment": "An array of BSON values\n",
								"name": "array"
							},
							{
								"kind": "enum member",
								"line": 94,
								"char": 3,
								"value": "cast(ubyte)5u",
								"comment": "Raw binary data (ubyte[])\n",
								"name": "binData"
							},
							{
								"kind": "enum member",
								"line": 95,
								"char": 3,
								"value": "cast(ubyte)6u",
								"comment": "Deprecated\n",
								"name": "undefined"
							},
							{
								"kind": "enum member",
								"line": 96,
								"char": 3,
								"value": "cast(ubyte)7u",
								"comment": "BSON Object ID (96-bit)\n",
								"name": "objectID"
							},
							{
								"kind": "enum member",
								"line": 97,
								"char": 3,
								"value": "cast(ubyte)8u",
								"comment": "Boolean value\n",
								"name": "bool_"
							},
							{
								"kind": "enum member",
								"line": 98,
								"char": 3,
								"value": "cast(ubyte)9u",
								"comment": "Date value (UTC)\n",
								"name": "date"
							},
							{
								"kind": "enum member",
								"line": 99,
								"char": 3,
								"value": "cast(ubyte)10u",
								"comment": "Null value\n",
								"name": "null_"
							},
							{
								"kind": "enum member",
								"line": 100,
								"char": 3,
								"value": "cast(ubyte)11u",
								"comment": "Regular expression\n",
								"name": "regex"
							},
							{
								"kind": "enum member",
								"line": 101,
								"char": 3,
								"value": "cast(ubyte)12u",
								"comment": "Deprecated\n",
								"name": "dbRef"
							},
							{
								"kind": "enum member",
								"line": 102,
								"char": 3,
								"value": "cast(ubyte)13u",
								"comment": "JaveScript code\n",
								"name": "code"
							},
							{
								"kind": "enum member",
								"line": 103,
								"char": 3,
								"value": "cast(ubyte)14u",
								"comment": "Symbol/variable name\n",
								"name": "symbol"
							},
							{
								"kind": "enum member",
								"line": 104,
								"char": 3,
								"value": "cast(ubyte)15u",
								"comment": "JavaScript code with scope\n",
								"name": "codeWScope"
							},
							{
								"kind": "enum member",
								"line": 105,
								"char": 3,
								"value": "cast(ubyte)16u",
								"comment": "32-bit integer\n",
								"name": "int_"
							},
							{
								"kind": "enum member",
								"line": 106,
								"char": 3,
								"value": "cast(ubyte)17u",
								"comment": "Timestamp value\n",
								"name": "timestamp"
							},
							{
								"kind": "enum member",
								"line": 107,
								"char": 3,
								"value": "cast(ubyte)18u",
								"comment": "64-bit integer\n",
								"name": "long_"
							},
							{
								"kind": "enum member",
								"line": 108,
								"char": 3,
								"value": "cast(ubyte)255u",
								"comment": "Internal value\n",
								"name": "minKey"
							},
							{
								"kind": "enum member",
								"line": 109,
								"char": 3,
								"value": "cast(ubyte)127u",
								"comment": "Internal value\n",
								"name": "maxKey"
							},
							{
								"kind": "enum member",
								"line": 111,
								"char": 3,
								"value": "cast(ubyte)0u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "End"
							},
							{
								"kind": "enum member",
								"line": 112,
								"char": 3,
								"value": "cast(ubyte)1u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Double"
							},
							{
								"kind": "enum member",
								"line": 113,
								"char": 3,
								"value": "cast(ubyte)2u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "String"
							},
							{
								"kind": "enum member",
								"line": 114,
								"char": 3,
								"value": "cast(ubyte)3u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Object"
							},
							{
								"kind": "enum member",
								"line": 115,
								"char": 3,
								"value": "cast(ubyte)4u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Array"
							},
							{
								"kind": "enum member",
								"line": 116,
								"char": 3,
								"value": "cast(ubyte)5u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "BinData"
							},
							{
								"kind": "enum member",
								"line": 117,
								"char": 3,
								"value": "cast(ubyte)6u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Undefined"
							},
							{
								"kind": "enum member",
								"line": 118,
								"char": 3,
								"value": "cast(ubyte)7u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "ObjectID"
							},
							{
								"kind": "enum member",
								"line": 119,
								"char": 3,
								"value": "cast(ubyte)8u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Bool"
							},
							{
								"kind": "enum member",
								"line": 120,
								"char": 3,
								"value": "cast(ubyte)9u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Date"
							},
							{
								"kind": "enum member",
								"line": 121,
								"char": 3,
								"value": "cast(ubyte)10u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Null"
							},
							{
								"kind": "enum member",
								"line": 122,
								"char": 3,
								"value": "cast(ubyte)11u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Regex"
							},
							{
								"kind": "enum member",
								"line": 123,
								"char": 3,
								"value": "cast(ubyte)12u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "DBRef"
							},
							{
								"kind": "enum member",
								"line": 124,
								"char": 3,
								"value": "cast(ubyte)13u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Code"
							},
							{
								"kind": "enum member",
								"line": 125,
								"char": 3,
								"value": "cast(ubyte)14u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Symbol"
							},
							{
								"kind": "enum member",
								"line": 126,
								"char": 3,
								"value": "cast(ubyte)15u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "CodeWScope"
							},
							{
								"kind": "enum member",
								"line": 127,
								"char": 3,
								"value": "cast(ubyte)16u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Int"
							},
							{
								"kind": "enum member",
								"line": 128,
								"char": 3,
								"value": "cast(ubyte)17u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Timestamp"
							},
							{
								"kind": "enum member",
								"line": 129,
								"char": 3,
								"value": "cast(ubyte)18u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "Long"
							},
							{
								"kind": "enum member",
								"line": 130,
								"char": 3,
								"value": "cast(ubyte)255u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "MinKey"
							},
							{
								"kind": "enum member",
								"line": 131,
								"char": 3,
								"value": "cast(ubyte)127u",
								"comment": "Compatibility alias - will be deprecated soon.\n",
								"name": "MaxKey"
							}
						],
						"name": "Type",
						"baseDeco": "h",
						"comment": "Represents the type of a BSON value\n"
					},
					{
						"storageClass": [
							"static"
						],
						"line": 135,
						"kind": "function",
						"char": 24,
						"name": "emptyObject",
						"deco": "FNdNfZS4vibe4data4bson4Bson",
						"endchar": 77,
						"endline": 135,
						"comment": "Returns a new, empty Bson value of type Object.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"line": 138,
						"kind": "function",
						"char": 24,
						"name": "emptyArray",
						"deco": "FNdNfZS4vibe4data4bson4Bson",
						"endchar": 70,
						"endline": 138,
						"comment": "Returns a new, empty Bson value of type Array.\n"
					},
					{
						"parameters": [
							{
								"deco": "E4vibe4data4bson4Bson4Type",
								"name": "type"
							},
							{
								"deco": "Ayh",
								"name": "data"
							}
						],
						"line": 151,
						"kind": "constructor",
						"originalType": "ref @safe (Type type, bdata_t data)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfE4vibe4data4bson4Bson4TypeAyhZSQBeQBcQBaQy",
						"endchar": 2,
						"endline": 183,
						"comment": "\t\tCreates a new BSON value using raw data.\n\n\t\tA slice of the first bytes of `data` is stored, containg the data related to the value. An\n\t\texception is thrown if `data` is too short.\n"
					},
					{
						"parameters": [
							{
								"deco": "d",
								"name": "value"
							}
						],
						"line": 188,
						"kind": "constructor",
						"originalType": "ref @safe (double value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfdZS4vibe4data4bson4Bson",
						"endchar": 40,
						"endline": 188,
						"comment": "\t\tInitializes a new BSON value from the given D type.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							},
							{
								"deco": "E4vibe4data4bson4Bson4Type",
								"default": "cast(Type)cast(ubyte)2u",
								"name": "type"
							}
						],
						"line": 190,
						"kind": "constructor",
						"originalType": "ref @safe (string value, Type type = Type.string)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfAyaE4vibe4data4bson4Bson4TypeZSQBbQzQwQt",
						"endchar": 2,
						"endline": 195,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xHAyaS4vibe4data4bson4Bson",
								"name": "value"
							}
						],
						"line": 197,
						"kind": "constructor",
						"originalType": "ref @safe (in Bson[string] value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxHAyaS4vibe4data4bson4BsonZSQwQtQqQn",
						"endchar": 49,
						"endline": 197,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xAS4vibe4data4bson4Bson",
								"name": "value"
							}
						],
						"line": 199,
						"kind": "constructor",
						"originalType": "ref @safe (in Bson[] value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxAS4vibe4data4bson4BsonZSQwQtQqQn",
						"endchar": 43,
						"endline": 199,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson11BsonBinData",
								"name": "value"
							}
						],
						"line": 201,
						"kind": "constructor",
						"originalType": "ref @safe (in BsonBinData value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxS4vibe4data4bson11BsonBinDataZSQBeQBcQBa4Bson",
						"endchar": 48,
						"endline": 201,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson12BsonObjectID",
								"name": "value"
							}
						],
						"line": 203,
						"kind": "constructor",
						"originalType": "ref @safe (in BsonObjectID value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxS4vibe4data4bson12BsonObjectIDZSQBfQBdQBb4Bson",
						"endchar": 49,
						"endline": 203,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "value"
							}
						],
						"line": 205,
						"kind": "constructor",
						"originalType": "ref @safe (bool value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfbZS4vibe4data4bson4Bson",
						"endchar": 38,
						"endline": 205,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson8BsonDate",
								"name": "value"
							}
						],
						"line": 207,
						"kind": "constructor",
						"originalType": "ref @safe (in BsonDate value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxS4vibe4data4bson8BsonDateZSQBaQyQv4Bson",
						"endchar": 45,
						"endline": 207,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "n",
								"name": "_param_0"
							}
						],
						"line": 209,
						"kind": "constructor",
						"originalType": "ref @safe (typeof(null))",
						"char": 2,
						"name": "this",
						"deco": "FNcNfnZS4vibe4data4bson4Bson",
						"endchar": 39,
						"endline": 209,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson9BsonRegex",
								"name": "value"
							}
						],
						"line": 211,
						"kind": "constructor",
						"originalType": "ref @safe (in BsonRegex value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxS4vibe4data4bson9BsonRegexZSQBbQzQw4Bson",
						"endchar": 46,
						"endline": 211,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "value"
							}
						],
						"line": 213,
						"kind": "constructor",
						"originalType": "ref @safe (int value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfiZS4vibe4data4bson4Bson",
						"endchar": 37,
						"endline": 213,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson13BsonTimestamp",
								"name": "value"
							}
						],
						"line": 215,
						"kind": "constructor",
						"originalType": "ref @safe (in BsonTimestamp value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxS4vibe4data4bson13BsonTimestampZSQBgQBeQBc4Bson",
						"endchar": 50,
						"endline": 215,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "l",
								"name": "value"
							}
						],
						"line": 217,
						"kind": "constructor",
						"originalType": "ref @safe (long value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNflZS4vibe4data4bson4Bson",
						"endchar": 38,
						"endline": 217,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"name": "value"
							}
						],
						"line": 219,
						"kind": "constructor",
						"originalType": "ref @safe (in Json value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxS4vibe4data4json4JsonZSQwQt4bson4Bson",
						"endchar": 41,
						"endline": 219,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS3std4uuid4UUID",
								"name": "value"
							}
						],
						"line": 221,
						"kind": "constructor",
						"originalType": "ref @safe (in UUID value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxS3std4uuid4UUIDZS4vibe4data4bson4Bson",
						"endchar": 41,
						"endline": 221,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson4Bson",
								"name": "other"
							}
						],
						"line": 226,
						"kind": "function",
						"originalType": "@safe void(in Bson other)",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfxS4vibe4data4bson4BsonZv",
						"endchar": 2,
						"endline": 230,
						"comment": "\t\tAssigns a D type to a BSON value.\n"
					},
					{
						"parameters": [
							{
								"deco": "d",
								"name": "value"
							}
						],
						"line": 232,
						"kind": "function",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfdZv",
						"endchar": 2,
						"endline": 236,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							}
						],
						"line": 238,
						"kind": "function",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfAyaZv",
						"endchar": 2,
						"endline": 248,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xHAyaS4vibe4data4bson4Bson",
								"name": "value"
							}
						],
						"line": 250,
						"kind": "function",
						"originalType": "@safe void(in Bson[string] value)",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfxHAyaS4vibe4data4bson4BsonZv",
						"endchar": 2,
						"endline": 265,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xAS4vibe4data4bson4Bson",
								"name": "value"
							}
						],
						"line": 267,
						"kind": "function",
						"originalType": "@safe void(in Bson[] value)",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfxAS4vibe4data4bson4BsonZv",
						"endchar": 2,
						"endline": 282,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson11BsonBinData",
								"name": "value"
							}
						],
						"line": 284,
						"kind": "function",
						"originalType": "@safe void(in BsonBinData value)",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfxS4vibe4data4bson11BsonBinDataZv",
						"endchar": 2,
						"endline": 293,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson12BsonObjectID",
								"name": "value"
							}
						],
						"line": 295,
						"kind": "function",
						"originalType": "@safe void(in BsonObjectID value)",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfxS4vibe4data4bson12BsonObjectIDZv",
						"endchar": 2,
						"endline": 299,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "value"
							}
						],
						"line": 301,
						"kind": "function",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfbZv",
						"endchar": 2,
						"endline": 305,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson8BsonDate",
								"name": "value"
							}
						],
						"line": 307,
						"kind": "function",
						"originalType": "@safe void(in BsonDate value)",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfxS4vibe4data4bson8BsonDateZv",
						"endchar": 2,
						"endline": 311,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "n",
								"name": "_param_0"
							}
						],
						"line": 313,
						"kind": "function",
						"originalType": "@safe void(typeof(null))",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfnZv",
						"endchar": 2,
						"endline": 317,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson9BsonRegex",
								"name": "value"
							}
						],
						"line": 319,
						"kind": "function",
						"originalType": "@safe void(in BsonRegex value)",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfxS4vibe4data4bson9BsonRegexZv",
						"endchar": 2,
						"endline": 326,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "value"
							}
						],
						"line": 328,
						"kind": "function",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfiZv",
						"endchar": 2,
						"endline": 332,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson13BsonTimestamp",
								"name": "value"
							}
						],
						"line": 334,
						"kind": "function",
						"originalType": "@safe void(in BsonTimestamp value)",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfxS4vibe4data4bson13BsonTimestampZv",
						"endchar": 2,
						"endline": 338,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "l",
								"name": "value"
							}
						],
						"line": 340,
						"kind": "function",
						"char": 7,
						"name": "opAssign",
						"deco": "FNflZv",
						"endchar": 2,
						"endline": 344,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"name": "value"
							}
						],
						"line": 346,
						"kind": "function",
						"originalType": "@trusted void(in Json value)",
						"char": 7,
						"name": "opAssign",
						"deco": "FNexS4vibe4data4json4JsonZv",
						"endchar": 2,
						"endline": 351,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS3std4uuid4UUID",
								"name": "value"
							}
						],
						"line": 353,
						"kind": "function",
						"originalType": "@safe void(in UUID value)",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfxS3std4uuid4UUIDZv",
						"endchar": 2,
						"endline": 356,
						"comment": "ditto\n"
					},
					{
						"line": 361,
						"kind": "function",
						"char": 17,
						"name": "type",
						"deco": "xFNdNfZE4vibe4data4bson4Bson4Type",
						"endchar": 47,
						"endline": 361,
						"comment": "\t\tReturns the BSON type of this value.\n"
					},
					{
						"line": 363,
						"kind": "function",
						"char": 7,
						"name": "isNull",
						"deco": "xFNfZb",
						"endchar": 53,
						"endline": 363
					},
					{
						"line": 368,
						"kind": "function",
						"originalType": "const @property @safe bdata_t()",
						"char": 20,
						"name": "data",
						"deco": "xFNdNfZAyh",
						"endchar": 50,
						"endline": 368,
						"comment": "\t\tReturns the raw data representing this BSON value (not including the field name and type).\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 377,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"line": 377,
								"kind": "function",
								"char": 4,
								"name": "opCast",
								"type": "const T()",
								"endchar": 40,
								"endline": 377
							}
						],
						"name": "opCast",
						"comment": "\t\tConverts the BSON value to a D value.\n\n\t\tIf the BSON type of the value does not match the D type, an exception is thrown.\n\n\t\tSee_Also: `deserializeBson`, `opt`\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 379,
						"kind": "template",
						"char": 14,
						"members": [
							{
								"line": 379,
								"kind": "function",
								"char": 14,
								"name": "get",
								"type": "const @property T()",
								"endchar": 2,
								"endline": 448
							}
						],
						"name": "get",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 455,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"default": "T.init",
										"name": "def"
									}
								],
								"line": 455,
								"kind": "function",
								"char": 4,
								"name": "opt",
								"type": "T(T def = T.init)",
								"endchar": 2,
								"endline": 460
							}
						],
						"name": "opt",
						"comment": " Returns the native type for this BSON if it matches the current runtime type.\n\n\t\tIf the runtime type does not match the given native type, the 'def' parameter is returned\n\t\tinstead.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 462,
						"kind": "template",
						"char": 11,
						"members": [
							{
								"parameters": [
									{
										"type": "const(T)",
										"default": "(const(T)).init",
										"name": "def"
									}
								],
								"line": 462,
								"kind": "function",
								"char": 11,
								"name": "opt",
								"type": "const const(T)(const(T) def = (const(T)).init)",
								"endchar": 2,
								"endline": 467
							}
						],
						"name": "opt",
						"comment": "ditto\n"
					},
					{
						"line": 471,
						"kind": "function",
						"originalType": "const @property @safe size_t()",
						"char": 19,
						"name": "length",
						"deco": "xFNdNfZm",
						"endchar": 2,
						"endline": 480,
						"comment": " Returns the length of a BSON value of type String, Array, Object or BinData.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"name": "value"
							}
						],
						"line": 484,
						"kind": "function",
						"originalType": "@trusted Bson(in Json value)",
						"char": 14,
						"name": "fromJson",
						"deco": "FNexS4vibe4data4json4JsonZSQwQt4bson4Bson",
						"endchar": 2,
						"endline": 489,
						"comment": " Converts a given JSON value to the corresponding BSON value.\n"
					},
					{
						"line": 496,
						"kind": "function",
						"char": 7,
						"name": "toJson",
						"deco": "xFNfZS4vibe4data4json4Json",
						"endchar": 2,
						"endline": 527,
						"comment": " Converts a BSON value to a JSON value.\n\n\t\tAll BSON types that cannot be exactly represented as JSON, will\n\t\tbe converted to a string.\n"
					},
					{
						"line": 531,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFNfZAya",
						"endchar": 2,
						"endline": 534,
						"comment": " Returns a string representation of this BSON value in JSON format.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 541,
						"kind": "function",
						"originalType": "const @safe Nullable!Bson(string key)",
						"char": 16,
						"name": "tryIndex",
						"deco": "xFNfAyaZS3std8typecons__T8NullableTS4vibe4data4bson4BsonZQBg",
						"endchar": 2,
						"endline": 547,
						"comment": "\t\tCheck whether the BSON object contains the given key.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "idx"
							}
						],
						"line": 553,
						"kind": "function",
						"char": 14,
						"name": "opIndex",
						"deco": "NgFNfAyaZNgS4vibe4data4bson4Bson",
						"endchar": 2,
						"endline": 558,
						"comment": " Allows accessing fields of a BSON object using `[]`.\n\n\t\tReturns a null value if the specified field does not exist.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L597_C2)\n---\nBson value = Bson.emptyObject;\nvalue[\"a\"] = 1;\nvalue[\"b\"] = true;\nvalue[\"c\"] = \"foo\";\nassert(value[\"a\"] == Bson(1));\nassert(value[\"b\"] == Bson(true));\nassert(value[\"c\"] == Bson(\"foo\"));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L597_C2)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L608_C2)\n---\nauto srcUuid = UUID(\"00010203-0405-0607-0809-0a0b0c0d0e0f\");\n\nBson b = srcUuid;\nauto u = b.get!UUID();\n\nassert(b.type == Bson.Type.binData);\nassert(b.get!BsonBinData().type == BsonBinData.Type.uuid);\nassert(u == srcUuid);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L608_C2)\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 560,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"in"
										],
										"name": "value"
									},
									{
										"type": "string",
										"name": "idx"
									}
								],
								"line": 560,
								"kind": "function",
								"char": 7,
								"name": "opIndexAssign",
								"type": "void(in T value, string idx)",
								"endchar": 2,
								"endline": 594
							}
						],
						"name": "opIndexAssign",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "idx"
							}
						],
						"line": 623,
						"kind": "function",
						"originalType": "inout @safe inout(Bson)(size_t idx)",
						"char": 14,
						"name": "opIndex",
						"deco": "NgFNfmZNgS4vibe4data4bson4Bson",
						"endchar": 2,
						"endline": 628,
						"comment": " Allows index based access of a BSON array value.\n\n\t\tReturns a null value if the index is out of bounds.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L631_C2)\n---\nBson[] entries;\nentries ~= Bson(1);\nentries ~= Bson(true);\nentries ~= Bson(\"foo\");\n\nBson value = Bson(entries);\nassert(value[0] == Bson(1));\nassert(value[1] == Bson(true));\nassert(value[2] == Bson(\"foo\"));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L631_C2)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 647,
						"kind": "function",
						"char": 7,
						"name": "remove",
						"deco": "FNfAyaZv",
						"endchar": 2,
						"endline": 665,
						"comment": " Removes an entry from a BSON obect.\n\n\t\tIf the key doesn't exit, this function will be a no-op.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFS4vibe4data4bson4BsonZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 690,
						"kind": "function",
						"char": 6,
						"name": "opApply",
						"deco": "xFMDFS4vibe4data4bson4BsonZiZi",
						"endchar": 2,
						"endline": 696,
						"comment": "\t\tAllows foreach iterating over BSON objects and arrays.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFmS4vibe4data4bson4BsonZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 698,
						"kind": "function",
						"originalType": "const @system int(scope int delegate(size_t idx, Bson obj) del)",
						"char": 6,
						"name": "opApply",
						"deco": "xFMDFmS4vibe4data4bson4BsonZiZi",
						"endchar": 2,
						"endline": 704,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFAyaS4vibe4data4bson4BsonZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 706,
						"kind": "function",
						"char": 6,
						"name": "opApply",
						"deco": "xFMDFAyaS4vibe4data4bson4BsonZiZi",
						"endchar": 2,
						"endline": 712,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 715,
						"kind": "function",
						"originalType": "const @safe ()",
						"char": 7,
						"name": "byValue",
						"deco": "xFNfZS3std9algorithm9iteration__T9MapResultS4vibe4data4bson4Bson7byValueMxFNfZ9__lambda1TSQBuQBsQBqQBo14byKeyValueImplMxFNfZ3RngZQDs",
						"endchar": 102,
						"endline": 715,
						"comment": "Iterates over all values of an object or array.\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 717,
						"kind": "function",
						"originalType": "const @safe ()",
						"char": 7,
						"name": "byIndexValue",
						"deco": "xFNfZS3std9algorithm9iteration__T9MapResultS4vibe4data4bson4Bson12byIndexValueMxFNfZ9__lambda1TSQCaQByQBwQBu14byKeyValueImplMxFNfZ3RngZQDy",
						"endchar": 148,
						"endline": 717,
						"comment": "Iterates over all index/value pairs of an array.\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 719,
						"kind": "function",
						"originalType": "const @safe ()",
						"char": 7,
						"name": "byKeyValue",
						"deco": "xFNfZS4vibe4data4bson4Bson14byKeyValueImplMxFNfZ3Rng",
						"endchar": 77,
						"endline": 719,
						"comment": "Iterates over all key/value pairs of an object.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson4Bson",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 755,
						"kind": "function",
						"originalType": "const @safe bool(ref const Bson other)",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfKxS4vibe4data4bson4BsonZb",
						"endchar": 2,
						"endline": 773,
						"comment": "\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson4Bson",
								"name": "other"
							}
						],
						"line": 775,
						"kind": "function",
						"originalType": "const @safe bool(const Bson other)",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfxS4vibe4data4bson4BsonZb",
						"endchar": 2,
						"endline": 779,
						"comment": "ditto\n"
					}
				],
				"comment": "\tRepresents a BSON value.\n\n\n",
				"name": "Bson"
			},
			{
				"kind": "struct",
				"line": 794,
				"char": 1,
				"members": [
					{
						"line": 797,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"char": 3,
								"value": "cast(ubyte)0u",
								"line": 798,
								"name": "generic"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "cast(ubyte)1u",
								"line": 799,
								"name": "function_"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "cast(ubyte)2u",
								"line": 800,
								"name": "binaryOld"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "cast(ubyte)3u",
								"line": 801,
								"name": "uuid"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "cast(ubyte)5u",
								"line": 802,
								"name": "md5"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "cast(ubyte)128u",
								"line": 803,
								"name": "userDefined"
							},
							{
								"kind": "enum member",
								"line": 805,
								"char": 3,
								"value": "cast(ubyte)0u",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "Generic"
							},
							{
								"kind": "enum member",
								"line": 806,
								"char": 3,
								"value": "cast(ubyte)1u",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "Function"
							},
							{
								"kind": "enum member",
								"line": 807,
								"char": 3,
								"value": "cast(ubyte)2u",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "BinaryOld"
							},
							{
								"kind": "enum member",
								"line": 808,
								"char": 3,
								"value": "cast(ubyte)3u",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "UUID"
							},
							{
								"kind": "enum member",
								"line": 809,
								"char": 3,
								"value": "cast(ubyte)5u",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "MD5"
							},
							{
								"kind": "enum member",
								"line": 810,
								"char": 3,
								"value": "cast(ubyte)128u",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "UserDefined"
							}
						],
						"name": "Type",
						"baseDeco": "h"
					},
					{
						"parameters": [
							{
								"deco": "E4vibe4data4bson11BsonBinData4Type",
								"name": "type"
							},
							{
								"deco": "Ayh",
								"name": "data"
							}
						],
						"line": 818,
						"kind": "constructor",
						"originalType": "ref @safe (Type type, immutable(ubyte)[] data)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfE4vibe4data4bson11BsonBinData4TypeAyhZSQBmQBkQBiQBg",
						"endchar": 2,
						"endline": 822
					},
					{
						"line": 824,
						"kind": "function",
						"char": 17,
						"name": "type",
						"deco": "xFNdNfZE4vibe4data4bson11BsonBinData4Type",
						"endchar": 47,
						"endline": 824
					},
					{
						"line": 825,
						"kind": "function",
						"originalType": "const @property @safe bdata_t()",
						"char": 20,
						"name": "rawData",
						"deco": "xFNdNfZAyh",
						"endchar": 53,
						"endline": 825
					}
				],
				"comment": "\tRepresents a BSON binary data value (Bson.Type.binData).\n",
				"name": "BsonBinData"
			},
			{
				"kind": "struct",
				"line": 832,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"line": 858,
						"kind": "constructor",
						"originalType": "ref @safe (in ubyte[] bytes)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxAhZS4vibe4data4bson12BsonObjectID",
						"endchar": 2,
						"endline": 862,
						"comment": " Constructs a new object ID from the given raw byte array.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							}
						],
						"line": 866,
						"kind": "function",
						"char": 22,
						"name": "fromString",
						"deco": "FNfAyaZS4vibe4data4bson12BsonObjectID",
						"endchar": 2,
						"endline": 890,
						"comment": " Creates an on object ID from a string in standard hexa-decimal form.\n"
					},
					{
						"kind": "alias",
						"line": 892,
						"char": 2,
						"comment": "ditto\n",
						"name": "fromHexString"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "xS3std8datetime7systime7SysTime",
								"default": "currTime(opCall())",
								"name": "time"
							}
						],
						"line": 900,
						"kind": "function",
						"originalType": "@safe BsonObjectID(in SysTime time = Clock.currTime(UTC()))",
						"char": 22,
						"name": "generate",
						"deco": "FNfxS3std8datetime7systime7SysTimeZS4vibe4data4bson12BsonObjectID",
						"endchar": 2,
						"endline": 910,
						"comment": " Generates a unique object ID.\n\n   By default it will use `Clock.currTime(UTC())` as the timestamp\n   which guarantees that `BsonObjectID`s are chronologically\n   sorted.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "xS3std8datetime7systime7SysTime",
								"name": "time"
							}
						],
						"line": 920,
						"kind": "function",
						"originalType": "@safe BsonObjectID(in SysTime time)",
						"char": 22,
						"name": "createDateID",
						"deco": "FNfxS3std8datetime7systime7SysTimeZS4vibe4data4bson12BsonObjectID",
						"endchar": 2,
						"endline": 925,
						"comment": " Creates a pseudo object ID that matches the given date.\n\n\t\tThis kind of ID can be useful to query a database for items in a certain\n\t\tdate interval using their ID. This works using the property of standard BSON\n\t\tobject IDs that they store their creation date as part of the ID. Note that\n\t\tthis date part is only 32-bit wide and is limited to the same timespan as a\n\t\t32-bit Unix timestamp.\n"
					},
					{
						"line": 929,
						"kind": "function",
						"char": 17,
						"name": "valid",
						"deco": "xFNdNfZb",
						"endchar": 2,
						"endline": 934,
						"comment": " Returns true for any non-zero ID.\n"
					},
					{
						"line": 941,
						"kind": "function",
						"char": 20,
						"name": "timeStamp",
						"deco": "xFNdNfZS3std8datetime7systime7SysTime",
						"endchar": 2,
						"endline": 945,
						"comment": " Extracts the time/date portion of the object ID.\n\n\t\tFor IDs created using the standard generation algorithm or using createDateID\n\t\tthis will return the associated time stamp.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson12BsonObjectID",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 949,
						"kind": "function",
						"originalType": "const @safe int(ref const BsonObjectID other)",
						"char": 6,
						"name": "opCmp",
						"deco": "xFNfKxS4vibe4data4bson12BsonObjectIDZi",
						"endchar": 2,
						"endline": 953,
						"comment": " Allows for relational comparison of different IDs.\n"
					},
					{
						"line": 957,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFNaNfZAya",
						"endchar": 2,
						"endline": 965,
						"comment": " Converts the ID to its standard hexa-decimal string representation.\n"
					},
					{
						"line": 967,
						"kind": "function",
						"char": 17,
						"name": "opCast",
						"deco": "NgFNfZANgh",
						"endchar": 50,
						"endline": 967
					}
				],
				"comment": "\tRepresents a BSON object id (Bson.Type.binData).\n",
				"name": "BsonObjectID"
			},
			{
				"kind": "struct",
				"line": 1007,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "xS3std8datetime4date4Date",
								"name": "date"
							},
							{
								"deco": "yC3std8datetime8timezone8TimeZone",
								"default": "null",
								"name": "tz"
							}
						],
						"line": 1017,
						"kind": "constructor",
						"originalType": "ref @safe (in Date date, immutable TimeZone tz = null)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxS3std8datetime4date4DateyCQzQx8timezone8TimeZoneZS4vibe4data4bson8BsonDate",
						"endchar": 78,
						"endline": 1017,
						"comment": " Constructs a BsonDate from the given date value.\n\n\t\tThe time-zone independent Date and DateTime types are assumed to be in\n\t\tthe local time zone and converted to UTC if tz is left to null.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS3std8datetime4date8DateTime",
								"name": "date"
							},
							{
								"deco": "yC3std8datetime8timezone8TimeZone",
								"default": "null",
								"name": "tz"
							}
						],
						"line": 1019,
						"kind": "constructor",
						"originalType": "ref @safe (in DateTime date, immutable TimeZone tz = null)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxS3std8datetime4date8DateTimeyCQBdQBc8timezone8TimeZoneZS4vibe4data4bson8BsonDate",
						"endchar": 82,
						"endline": 1019,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS3std8datetime7systime7SysTime",
								"name": "date"
							}
						],
						"line": 1021,
						"kind": "constructor",
						"originalType": "ref @safe (in SysTime date)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxS3std8datetime7systime7SysTimeZS4vibe4data4bson8BsonDate",
						"endchar": 68,
						"endline": 1021,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "l",
								"name": "unix_time"
							}
						],
						"line": 1028,
						"kind": "constructor",
						"originalType": "ref @safe (long unix_time)",
						"char": 2,
						"name": "this",
						"deco": "FNcNflZS4vibe4data4bson8BsonDate",
						"endchar": 2,
						"endline": 1031,
						"comment": " Constructs a BsonDate from the given UNIX time.\n\n\t\tunix_time needs to be given in milliseconds from 1970/01/01. This is\n\t\tthe native storage format for BsonDate.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "iso_ext_string"
							}
						],
						"line": 1035,
						"kind": "function",
						"char": 18,
						"name": "fromString",
						"deco": "FNfAyaZS4vibe4data4bson8BsonDate",
						"endchar": 113,
						"endline": 1035,
						"comment": " Constructs a BsonDate from the given date/time string in ISO extended format.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "l",
								"name": "std_time"
							}
						],
						"line": 1039,
						"kind": "function",
						"char": 18,
						"name": "fromStdTime",
						"deco": "FNflZS4vibe4data4bson8BsonDate",
						"endchar": 2,
						"endline": 1043,
						"comment": " Constructs a BsonDate from the given date/time in standard time as defined in `std.datetime`.\n"
					},
					{
						"line": 1049,
						"kind": "function",
						"char": 17,
						"name": "value",
						"deco": "xFNdNfZl",
						"endchar": 48,
						"endline": 1049,
						"comment": " The raw unix time value.\n\n\t\tThis is the native storage/transfer format of a BsonDate.\n"
					},
					{
						"parameters": [
							{
								"deco": "l",
								"name": "v"
							}
						],
						"line": 1051,
						"kind": "function",
						"char": 17,
						"name": "value",
						"deco": "FNdNflZv",
						"endchar": 45,
						"endline": 1051,
						"comment": "ditto\n"
					},
					{
						"line": 1055,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFNfZAya",
						"endchar": 65,
						"endline": 1055,
						"comment": " Returns the date formatted as ISO extended format.\n"
					},
					{
						"line": 1059,
						"kind": "function",
						"char": 10,
						"name": "toSysTime",
						"deco": "xFNfZS3std8datetime7systime7SysTime",
						"endchar": 2,
						"endline": 1061
					},
					{
						"parameters": [
							{
								"deco": "yC3std8datetime8timezone8TimeZone",
								"name": "tz"
							}
						],
						"line": 1065,
						"kind": "function",
						"originalType": "const @safe SysTime(immutable TimeZone tz)",
						"char": 10,
						"name": "toSysTime",
						"deco": "xFNfyC3std8datetime8timezone8TimeZoneZSQBhQBg7systime7SysTime",
						"endchar": 2,
						"endline": 1068
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson8BsonDate",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 1072,
						"kind": "function",
						"originalType": "const @safe bool(ref const BsonDate other)",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfKxS4vibe4data4bson8BsonDateZb",
						"endchar": 81,
						"endline": 1072,
						"comment": " Allows relational and equality comparisons.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4bson8BsonDate",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 1074,
						"kind": "function",
						"originalType": "const @safe int(ref const BsonDate other)",
						"char": 6,
						"name": "opCmp",
						"deco": "xFNfKxS4vibe4data4bson8BsonDateZi",
						"endchar": 2,
						"endline": 1078,
						"comment": "ditto\n"
					}
				],
				"comment": "\tRepresents a BSON date value (`Bson.Type.date`).\n\n\tBSON date values are stored in UNIX time format, counting the number of\n\tmilliseconds from 1970/01/01.\n",
				"name": "BsonDate"
			},
			{
				"kind": "struct",
				"line": 1085,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "l",
								"name": "time"
							}
						],
						"line": 1090,
						"kind": "constructor",
						"originalType": "ref @safe (long time)",
						"char": 2,
						"name": "this",
						"deco": "FNcNflZS4vibe4data4bson13BsonTimestamp",
						"endchar": 2,
						"endline": 1092
					}
				],
				"comment": "\tRepresents a BSON timestamp value `(Bson.Type.timestamp)`.\n",
				"name": "BsonTimestamp"
			},
			{
				"kind": "struct",
				"line": 1099,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "expr"
							},
							{
								"deco": "Aya",
								"name": "options"
							}
						],
						"line": 1107,
						"kind": "constructor",
						"originalType": "ref @safe (string expr, string options)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfAyaQdZS4vibe4data4bson9BsonRegex",
						"endchar": 2,
						"endline": 1111
					},
					{
						"line": 1113,
						"kind": "function",
						"char": 19,
						"name": "expression",
						"deco": "xFNdNfZAya",
						"endchar": 55,
						"endline": 1113
					},
					{
						"line": 1114,
						"kind": "function",
						"char": 19,
						"name": "options",
						"deco": "xFNdNfZAya",
						"endchar": 55,
						"endline": 1114
					}
				],
				"comment": "\tRepresents a BSON regular expression value `(Bson.Type.regex)`.\n",
				"name": "BsonRegex"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1168,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "value"
							},
							{
								"type": "ubyte[]",
								"default": "null",
								"name": "buffer"
							}
						],
						"line": 1168,
						"kind": "function",
						"char": 6,
						"name": "serializeToBson",
						"type": "Bson(auto ref T value, ubyte[] buffer = null)",
						"endchar": 1,
						"endline": 1171
					}
				],
				"name": "serializeToBson",
				"comment": "\tSerializes the given value to BSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT `Bson`)            $(DD Used as-is)\n\t\t$(DT `Json`)            $(DD Converted to BSON)\n\t\t$(DT `BsonBinData`)     $(DD Converted to `Bson.Type.binData`)\n\t\t$(DT `BsonObjectID`)    $(DD Converted to `Bson.Type.objectID`)\n\t\t$(DT `BsonDate`)        $(DD Converted to `Bson.Type.date`)\n\t\t$(DT `BsonTimestamp`)   $(DD Converted to `Bson.Type.timestamp`)\n\t\t$(DT `BsonRegex`)       $(DD Converted to `Bson.Type.regex`)\n\t\t$(DT `null`)            $(DD Converted to `Bson.Type.null_`)\n\t\t$(DT `bool`)            $(DD Converted to `Bson.Type.bool_`)\n\t\t$(DT `float`, `double`)   $(DD Converted to `Bson.Type.double_`)\n\t\t$(DT `short`, `ushort`, `int`, `uint`, `long`, `ulong`) $(DD Converted to `Bson.Type.long_`)\n\t\t$(DT `string`)          $(DD Converted to `Bson.Type.string`)\n\t\t$(DT `ubyte[]`)         $(DD Converted to `Bson.Type.binData`)\n\t\t$(DT `T[]`)             $(DD Converted to `Bson.Type.array`)\n\t\t$(DT `T[string]`)       $(DD Converted to `Bson.Type.object`)\n\t\t$(DT `struct`)          $(DD Converted to `Bson.Type.object`)\n\t\t$(DT `class`)           $(DD Converted to `Bson.Type.object` or `Bson.Type.null_`)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tBson toBson() const;\n\tstatic T fromBson(Bson src);\n\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. `toBson` overrides `toJson`).\n\n\tSee_Also: `deserializeBson`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1174,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "Bson",
								"name": "src"
							}
						],
						"line": 1183,
						"kind": "function",
						"char": 7,
						"name": "deserializeBson",
						"type": "void(ref T dst, Bson src)",
						"endchar": 2,
						"endline": 1186,
						"comment": "\t\tDeserializes a BSON value into the destination variable.\n\n\t\tThe same types as for `serializeToBson()` are supported and handled inversely.\n\n\t\tSee_Also: `serializeToBson`\n"
					},
					{
						"parameters": [
							{
								"type": "Bson",
								"name": "src"
							}
						],
						"line": 1188,
						"kind": "function",
						"char": 4,
						"name": "deserializeBson",
						"type": "T(Bson src)",
						"endchar": 2,
						"endline": 1191,
						"comment": "ditto\n"
					}
				],
				"name": "deserializeBson"
			},
			{
				"kind": "struct",
				"line": 1405,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "S4vibe4data4bson4Bson",
								"name": "input"
							}
						],
						"line": 1417,
						"kind": "constructor",
						"originalType": "ref @safe (Bson input)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfS4vibe4data4bson4BsonZSQwQtQq14BsonSerializer",
						"endchar": 2,
						"endline": 1420
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"name": "buffer"
							}
						],
						"line": 1422,
						"kind": "constructor",
						"originalType": "ref @safe (ubyte[] buffer)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfAhZS4vibe4data4bson14BsonSerializer",
						"endchar": 2,
						"endline": 1426
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1430,
						"kind": "template",
						"char": 2,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 1430,
								"kind": "variable",
								"char": 42,
								"name": "isSupportedValueType",
								"init": "is(typeof(getBsonTypeID(T.init)))"
							}
						],
						"name": "isSupportedValueType"
					},
					{
						"line": 1435,
						"kind": "function",
						"char": 7,
						"name": "getSerializedResult",
						"deco": "FNfZS4vibe4data4bson4Bson",
						"endchar": 2,
						"endline": 1441
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1443,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 1443,
								"kind": "function",
								"char": 7,
								"name": "beginWriteDictionary",
								"type": "void()",
								"endchar": 2,
								"endline": 1448
							}
						],
						"name": "beginWriteDictionary"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1449,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 1449,
								"kind": "function",
								"char": 7,
								"name": "endWriteDictionary",
								"type": "void()",
								"endchar": 2,
								"endline": 1455
							}
						],
						"name": "endWriteDictionary"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1456,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1456,
								"kind": "function",
								"char": 7,
								"name": "beginWriteDictionaryEntry",
								"type": "void(string name)",
								"endchar": 76,
								"endline": 1456
							}
						],
						"name": "beginWriteDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1457,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1457,
								"kind": "function",
								"char": 7,
								"name": "endWriteDictionaryEntry",
								"type": "void(string name)",
								"endchar": 53,
								"endline": 1457
							}
						],
						"name": "endWriteDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1459,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"line": 1459,
								"kind": "function",
								"char": 7,
								"name": "beginWriteArray",
								"type": "void(size_t)",
								"endchar": 2,
								"endline": 1464
							}
						],
						"name": "beginWriteArray"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1465,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 1465,
								"kind": "function",
								"char": 7,
								"name": "endWriteArray",
								"type": "void()",
								"endchar": 62,
								"endline": 1465
							}
						],
						"name": "endWriteArray"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1466,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "idx"
									}
								],
								"line": 1466,
								"kind": "function",
								"char": 7,
								"name": "beginWriteArrayEntry",
								"type": "void(size_t idx)",
								"endchar": 70,
								"endline": 1466
							}
						],
						"name": "beginWriteArrayEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1467,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "idx"
									}
								],
								"line": 1467,
								"kind": "function",
								"char": 7,
								"name": "endWriteArrayEntry",
								"type": "void(size_t idx)",
								"endchar": 47,
								"endline": 1467
							}
						],
						"name": "endWriteArrayEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1469,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "value"
									}
								],
								"line": 1469,
								"kind": "function",
								"char": 7,
								"name": "writeValue",
								"type": "void(auto ref T value)",
								"endchar": 79,
								"endline": 1469
							}
						],
						"name": "writeValue"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1532,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "void delegate(string) @safe",
										"storageClass": [
											"scope"
										],
										"name": "entry_callback"
									}
								],
								"line": 1532,
								"kind": "function",
								"char": 7,
								"name": "readDictionary",
								"type": "void(scope void delegate(string) @safe entry_callback)",
								"endchar": 2,
								"endline": 1541
							}
						],
						"name": "readDictionary"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1543,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1543,
								"kind": "function",
								"char": 7,
								"name": "beginReadDictionaryEntry",
								"type": "void(string name)",
								"endchar": 54,
								"endline": 1543
							}
						],
						"name": "beginReadDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1544,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1544,
								"kind": "function",
								"char": 7,
								"name": "endReadDictionaryEntry",
								"type": "void(string name)",
								"endchar": 52,
								"endline": 1544
							}
						],
						"name": "endReadDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1546,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "void delegate(size_t) @safe",
										"storageClass": [
											"scope"
										],
										"name": "size_callback"
									},
									{
										"type": "void delegate() @safe",
										"storageClass": [
											"scope"
										],
										"name": "entry_callback"
									}
								],
								"line": 1546,
								"kind": "function",
								"char": 7,
								"name": "readArray",
								"type": "void(scope void delegate(size_t) @safe size_callback, scope void delegate() @safe entry_callback)",
								"endchar": 2,
								"endline": 1555
							}
						],
						"name": "readArray"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1557,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 1557,
								"kind": "function",
								"char": 7,
								"name": "beginReadArrayEntry",
								"type": "void(size_t index)",
								"endchar": 50,
								"endline": 1557
							}
						],
						"name": "beginReadArrayEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1558,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 1558,
								"kind": "function",
								"char": 7,
								"name": "endReadArrayEntry",
								"type": "void(size_t index)",
								"endchar": 48,
								"endline": 1558
							}
						],
						"name": "endReadArrayEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1560,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"line": 1560,
								"kind": "function",
								"char": 4,
								"name": "readValue",
								"type": "T()",
								"endchar": 2,
								"endline": 1599
							}
						],
						"name": "readValue"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1601,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 1601,
								"kind": "function",
								"char": 7,
								"name": "tryReadNull",
								"type": "bool()",
								"endchar": 2,
								"endline": 1605
							}
						],
						"name": "tryReadNull"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4data4bson14BsonSerializer",
								"name": "p"
							}
						],
						"line": 1405,
						"kind": "generated function",
						"originalType": "ref @trusted BsonSerializer(BsonSerializer p) return",
						"char": 1,
						"name": "opAssign",
						"deco": "FNaNbNcNiNjNeS4vibe4data4bson14BsonSerializerZQBh"
					}
				],
				"comment": "\tSerializes to an in-memory BSON representation.\n\n\tSee_Also: `vibe.data.serialization.serialize`, `vibe.data.serialization.deserialize`, `serializeToBson`, `deserializeBson`\n",
				"name": "BsonSerializer"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1745,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "v"
							}
						],
						"line": 1745,
						"kind": "function",
						"char": 9,
						"name": "toBsonData",
						"type": "ubyte[](T v)",
						"endchar": 1,
						"endline": 1756
					}
				],
				"name": "toBsonData"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1758,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "ubyte[]",
								"storageClass": [
									"in"
								],
								"name": "v"
							}
						],
						"line": 1758,
						"kind": "function",
						"char": 3,
						"name": "fromBsonData",
						"type": "T(in ubyte[] v)",
						"endchar": 1,
						"endline": 1764
					}
				],
				"name": "fromBsonData"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1766,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "v"
							}
						],
						"line": 1766,
						"kind": "function",
						"char": 9,
						"name": "toBigEndianData",
						"type": "ubyte[](T v)",
						"endchar": 1,
						"endline": 1774
					}
				],
				"name": "toBigEndianData"
			}
		],
		"comment": "\tBSON serialization and value handling.\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L11_C1)\n---\nvoid manipulateBson(Bson b)\n{\n\timport std.stdio;\n\n\t// retrieving the values is done using get()\n\tassert(b[\"name\"].get!string == \"Example\");\n\tassert(b[\"id\"].get!int == 1);\n\n\t// semantic conversions can be done using to()\n\tassert(b[\"id\"].to!string == \"1\");\n\n\t// prints:\n\t// name: \"Example\"\n\t// id: 1\n\tforeach (string key, value; b)\n\t\twritefln(\"%s: %s\", key, value);\n\n\t// print out with JSON syntax: {\"name\": \"Example\", \"id\": 1}\n\twritefln(\"BSON: %s\", b.toString());\n\n\t// DEPRECATED: object members can be accessed using member syntax, just like in JavaScript\n\t//j = Bson.emptyObject;\n\t//j.name = \"Example\";\n\t//j.id = 1;\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L11_C1)\nExample:\nConstructing `Bson` objects$(DDOX_UNITTEST_HEADER __unittest_L40_C1)\n---\n// construct a BSON object {\"field1\": \"foo\", \"field2\": 42, \"field3\": true}\n\n// using the constructor\nBson b1 = Bson([\"field1\": Bson(\"foo\"), \"field2\": Bson(42), \"field3\": Bson(true)]);\n\n// using piecewise construction\nBson b2 = Bson.emptyObject;\nb2[\"field1\"] = \"foo\";\nb2[\"field2\"] = 42;\nb2[\"field3\"] = true;\n\n// using serialization\nstruct S {\n\tstring field1;\n\tint field2;\n\tbool field3;\n}\nBson b3 = S(\"foo\", 42, true).serializeToBson();\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L40_C1)\n",
		"name": "vibe.data.bson"
	},
	{
		"kind": "module",
		"file": "data/vibe/data/json.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 69,
				"name": "vibe.data.serialization"
			},
			{
				"kind": "import",
				"char": 15,
				"selective": [
					"JSONException"
				],
				"line": 71,
				"name": "std.json"
			},
			{
				"kind": "struct",
				"line": 120,
				"char": 1,
				"members": [
					{
						"kind": "variable",
						"type": "string",
						"char": 11,
						"line": 156,
						"name": "m_name"
					},
					{
						"line": 162,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"line": 163,
								"char": 3,
								"value": "0",
								"comment": "A non-existent value in a JSON object\n",
								"name": "undefined"
							},
							{
								"kind": "enum member",
								"line": 164,
								"char": 3,
								"value": "1",
								"comment": "Null value\n",
								"name": "null_"
							},
							{
								"kind": "enum member",
								"line": 165,
								"char": 3,
								"value": "2",
								"comment": "Boolean value\n",
								"name": "bool_"
							},
							{
								"kind": "enum member",
								"line": 166,
								"char": 3,
								"value": "3",
								"comment": "64-bit integer value\n",
								"name": "int_"
							},
							{
								"kind": "enum member",
								"line": 167,
								"char": 3,
								"value": "4",
								"comment": "BigInt values\n",
								"name": "bigInt"
							},
							{
								"kind": "enum member",
								"line": 168,
								"char": 3,
								"value": "5",
								"comment": "64-bit floating point value\n",
								"name": "float_"
							},
							{
								"kind": "enum member",
								"line": 169,
								"char": 3,
								"value": "6",
								"comment": "UTF-8 string\n",
								"name": "string"
							},
							{
								"kind": "enum member",
								"line": 170,
								"char": 3,
								"value": "7",
								"comment": "Array of JSON values\n",
								"name": "array"
							},
							{
								"kind": "enum member",
								"line": 171,
								"char": 3,
								"value": "8",
								"comment": "JSON object aka. dictionary from string to Json\n",
								"name": "object"
							},
							{
								"kind": "enum member",
								"line": 173,
								"char": 3,
								"value": "0",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "Undefined"
							},
							{
								"kind": "enum member",
								"line": 174,
								"char": 3,
								"value": "1",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "Null"
							},
							{
								"kind": "enum member",
								"line": 175,
								"char": 3,
								"value": "2",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "Bool"
							},
							{
								"kind": "enum member",
								"line": 176,
								"char": 3,
								"value": "3",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "Int"
							},
							{
								"kind": "enum member",
								"line": 177,
								"char": 3,
								"value": "5",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "Float"
							},
							{
								"kind": "enum member",
								"line": 178,
								"char": 3,
								"value": "6",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "String"
							},
							{
								"kind": "enum member",
								"line": 179,
								"char": 3,
								"value": "7",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "Array"
							},
							{
								"kind": "enum member",
								"line": 180,
								"char": 3,
								"value": "8",
								"comment": "Compatibility alias - will be deprecated soon\n",
								"name": "Object"
							}
						],
						"name": "Type",
						"baseDeco": "i",
						"comment": " Represents the run time type of a JSON value.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"line": 184,
						"kind": "function",
						"char": 24,
						"name": "undefined",
						"deco": "FNdNfZS4vibe4data4json4Json",
						"endchar": 53,
						"endline": 184,
						"comment": "New JSON value of Type.Undefined\n"
					},
					{
						"storageClass": [
							"static"
						],
						"line": 187,
						"kind": "function",
						"char": 24,
						"name": "emptyObject",
						"deco": "FNdNfZS4vibe4data4json4Json",
						"endchar": 77,
						"endline": 187,
						"comment": "New JSON value of Type.Object\n"
					},
					{
						"storageClass": [
							"static"
						],
						"line": 190,
						"kind": "function",
						"char": 24,
						"name": "emptyArray",
						"deco": "FNdNfZS4vibe4data4json4Json",
						"endchar": 70,
						"endline": 190,
						"comment": "New JSON value of Type.Array\n"
					},
					{
						"kind": "variable",
						"deco": "i",
						"char": 31,
						"line": 192,
						"name": "line"
					},
					{
						"parameters": [
							{
								"deco": "n",
								"name": "_param_0"
							}
						],
						"line": 197,
						"kind": "constructor",
						"originalType": "ref @trusted (typeof(null))",
						"char": 2,
						"name": "this",
						"deco": "FNcNenZS4vibe4data4json4Json",
						"endchar": 53,
						"endline": 197,
						"comment": "\t\tConstructor for a JSON object.\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "v"
							}
						],
						"line": 199,
						"kind": "constructor",
						"originalType": "ref @trusted (bool v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNebZS4vibe4data4json4Json",
						"endchar": 59,
						"endline": 199,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "g",
								"name": "v"
							}
						],
						"line": 201,
						"kind": "constructor",
						"originalType": "ref @safe (byte v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfgZS4vibe4data4json4Json",
						"endchar": 36,
						"endline": 201,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "h",
								"name": "v"
							}
						],
						"line": 203,
						"kind": "constructor",
						"originalType": "ref @safe (ubyte v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfhZS4vibe4data4json4Json",
						"endchar": 37,
						"endline": 203,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "s",
								"name": "v"
							}
						],
						"line": 205,
						"kind": "constructor",
						"originalType": "ref @safe (short v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfsZS4vibe4data4json4Json",
						"endchar": 37,
						"endline": 205,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "t",
								"name": "v"
							}
						],
						"line": 207,
						"kind": "constructor",
						"originalType": "ref @safe (ushort v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNftZS4vibe4data4json4Json",
						"endchar": 38,
						"endline": 207,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "v"
							}
						],
						"line": 209,
						"kind": "constructor",
						"originalType": "ref @safe (int v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfiZS4vibe4data4json4Json",
						"endchar": 35,
						"endline": 209,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "k",
								"name": "v"
							}
						],
						"line": 211,
						"kind": "constructor",
						"originalType": "ref @safe (uint v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfkZS4vibe4data4json4Json",
						"endchar": 36,
						"endline": 211,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "l",
								"name": "v"
							}
						],
						"line": 213,
						"kind": "constructor",
						"originalType": "ref @trusted (long v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNelZS4vibe4data4json4Json",
						"endchar": 57,
						"endline": 213,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S3std6bigint6BigInt",
								"name": "v"
							}
						],
						"line": 215,
						"kind": "constructor",
						"originalType": "ref @trusted (BigInt v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNeS3std6bigint6BigIntZS4vibe4data4json4Json",
						"endchar": 78,
						"endline": 215,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "d",
								"name": "v"
							}
						],
						"line": 217,
						"kind": "constructor",
						"originalType": "ref @trusted (double v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNedZS4vibe4data4json4Json",
						"endchar": 63,
						"endline": 217,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"line": 219,
						"kind": "constructor",
						"originalType": "ref @trusted (string v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNeAyaZS4vibe4data4json4Json",
						"endchar": 64,
						"endline": 219,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "AS4vibe4data4json4Json",
								"name": "v"
							}
						],
						"line": 221,
						"kind": "constructor",
						"originalType": "ref @trusted (Json[] v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNeAS4vibe4data4json4JsonZQw",
						"endchar": 62,
						"endline": 221,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "HAyaS4vibe4data4json4Json",
								"name": "v"
							}
						],
						"line": 223,
						"kind": "constructor",
						"originalType": "ref @trusted (Json[string] v)",
						"char": 2,
						"name": "this",
						"deco": "FNcNeHAyaS4vibe4data4json4JsonZQw",
						"endchar": 70,
						"endline": 223,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS3std4json9JSONValue",
								"name": "value"
							}
						],
						"line": 231,
						"kind": "constructor",
						"originalType": "ref @safe (in JSONValue value)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfxS3std4json9JSONValueZS4vibe4dataQBb4Json",
						"endchar": 2,
						"endline": 252,
						"comment": "\t\tConverts a std.json.JSONValue object to a vibe Json object.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4data4json4Json",
								"name": "v"
							}
						],
						"line": 258,
						"kind": "function",
						"char": 11,
						"name": "opAssign",
						"deco": "FNcNfS4vibe4data4json4JsonZQw",
						"endchar": 2,
						"endline": 280,
						"comment": "\t\tAllows assignment of D values to a JSON value.\n"
					},
					{
						"parameters": [
							{
								"deco": "n",
								"name": "_param_0"
							}
						],
						"line": 282,
						"kind": "function",
						"originalType": "@safe void(typeof(null))",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfnZv",
						"endchar": 88,
						"endline": 282,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "v"
							}
						],
						"line": 284,
						"kind": "function",
						"char": 7,
						"name": "opAssign",
						"deco": "FNfbZb",
						"endchar": 87,
						"endline": 284,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "v"
							}
						],
						"line": 286,
						"kind": "function",
						"char": 6,
						"name": "opAssign",
						"deco": "FNfiZi",
						"endchar": 83,
						"endline": 286,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "l",
								"name": "v"
							}
						],
						"line": 288,
						"kind": "function",
						"char": 7,
						"name": "opAssign",
						"deco": "FNflZl",
						"endchar": 85,
						"endline": 288,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S3std6bigint6BigInt",
								"name": "v"
							}
						],
						"line": 290,
						"kind": "function",
						"char": 9,
						"name": "opAssign",
						"deco": "FNfS3std6bigint6BigIntZQu",
						"endchar": 2,
						"endline": 297,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "d",
								"name": "v"
							}
						],
						"line": 299,
						"kind": "function",
						"char": 9,
						"name": "opAssign",
						"deco": "FNfdZd",
						"endchar": 93,
						"endline": 299,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"line": 301,
						"kind": "function",
						"char": 9,
						"name": "opAssign",
						"deco": "FNfAyaZQe",
						"endchar": 94,
						"endline": 301,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "AS4vibe4data4json4Json",
								"name": "v"
							}
						],
						"line": 303,
						"kind": "function",
						"char": 9,
						"name": "opAssign",
						"deco": "FNfAS4vibe4data4json4JsonZQx",
						"endchar": 2,
						"endline": 312,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "HAyaS4vibe4data4json4Json",
								"name": "v"
							}
						],
						"line": 314,
						"kind": "function",
						"char": 15,
						"name": "opAssign",
						"deco": "FNfHAyaS4vibe4data4json4JsonZQBa",
						"endchar": 2,
						"endline": 321,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "item"
							}
						],
						"line": 329,
						"kind": "function",
						"char": 7,
						"name": "remove",
						"deco": "FNfAyaZv",
						"endchar": 80,
						"endline": 329,
						"comment": "\t\tAllows removal of values from Type.Object Json objects.\n"
					},
					{
						"line": 334,
						"kind": "function",
						"char": 17,
						"name": "type",
						"deco": "xFNdNfZE4vibe4data4json4Json4Type",
						"endchar": 53,
						"endline": 334,
						"comment": "\t\tThe current type id of this JSON object.\n"
					},
					{
						"line": 339,
						"kind": "function",
						"char": 7,
						"name": "clone",
						"deco": "xFNfZS4vibe4data4json4Json",
						"endchar": 2,
						"endline": 359,
						"comment": "\t\tClones a JSON value recursively.\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "idx"
							}
						],
						"line": 364,
						"kind": "function",
						"originalType": "inout ref @safe inout(Json)(size_t idx)",
						"char": 18,
						"name": "opIndex",
						"deco": "NgFNcNfmZNgS4vibe4data4json4Json",
						"endchar": 89,
						"endline": 364,
						"comment": "\t\tAllows direct indexing of array typed JSON values.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L367_C2)\n---\nJson value = Json.emptyArray;\nvalue ~= 1;\nvalue ~= true;\nvalue ~= \"foo\";\nassert(value[0] == 1);\nassert(value[1] == true);\nassert(value[2] == \"foo\");\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L367_C2)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 384,
						"kind": "function",
						"char": 14,
						"name": "opIndex",
						"deco": "xFNfAyaZxS4vibe4data4json4Json",
						"endchar": 2,
						"endline": 392,
						"comment": "\t\tAllows direct indexing of object typed JSON values using a string as\n\t\tthe key.\n\n\t\tReturns an object of `Type.undefined` if the key was not found.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L415_C2)\n---\nJson value = Json.emptyObject;\nvalue[\"a\"] = 1;\nvalue[\"b\"] = true;\nvalue[\"c\"] = \"foo\";\nassert(value[\"a\"] == 1);\nassert(value[\"b\"] == true);\nassert(value[\"c\"] == \"foo\");\nassert(value[\"not-existing\"].type() == Type.undefined);\n}\n\n/**\nReturns a slice of a JSON array.\n*/\ninout(Json[]) opSlice() inout { checkType!(Json[])(); return m_array; \n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L415_C2)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 394,
						"kind": "function",
						"char": 11,
						"name": "opIndex",
						"deco": "FNcNfAyaZS4vibe4data4json4Json",
						"endchar": 2,
						"endline": 412,
						"comment": "ditto\n"
					},
					{
						"line": 429,
						"kind": "function",
						"char": 16,
						"name": "opSlice",
						"deco": "NgFNfZNgAS4vibe4data4json4Json",
						"endchar": 72,
						"endline": 429,
						"comment": "\t\tReturns a slice of a JSON array.\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "from"
							},
							{
								"deco": "m",
								"name": "to"
							}
						],
						"line": 431,
						"kind": "function",
						"originalType": "inout @safe inout(Json[])(size_t from, size_t to)",
						"char": 16,
						"name": "opSlice",
						"deco": "NgFNfmmZNgAS4vibe4data4json4Json",
						"endchar": 106,
						"endline": 431,
						"comment": "\n"
					},
					{
						"line": 436,
						"kind": "function",
						"originalType": "const @property @trusted size_t()",
						"char": 19,
						"name": "length",
						"deco": "xFNdNeZm",
						"endchar": 2,
						"endline": 445,
						"comment": "\t\tReturns the number of entries of string, array or object typed JSON values.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFKS4vibe4data4json4JsonZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 450,
						"kind": "function",
						"char": 6,
						"name": "opApply",
						"deco": "FMDFKS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"endline": 465,
						"comment": "\t\tAllows foreach iterating over JSON objects and arrays.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFKxS4vibe4data4json4JsonZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 467,
						"kind": "function",
						"originalType": "const @system int(scope int delegate(ref const Json obj) del)",
						"char": 6,
						"name": "opApply",
						"deco": "xFMDFKxS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"endline": 482,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFKmKS4vibe4data4json4JsonZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 484,
						"kind": "function",
						"originalType": "@system int(scope int delegate(ref size_t idx, ref Json obj) del)",
						"char": 6,
						"name": "opApply",
						"deco": "FMDFKmKS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"endline": 491,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFKmKxS4vibe4data4json4JsonZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 493,
						"kind": "function",
						"originalType": "const @system int(scope int delegate(ref size_t idx, ref const Json obj) del)",
						"char": 6,
						"name": "opApply",
						"deco": "xFMDFKmKxS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"endline": 500,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFKAyaKS4vibe4data4json4JsonZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 502,
						"kind": "function",
						"char": 6,
						"name": "opApply",
						"deco": "FMDFKAyaKS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"endline": 510,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFKAyaKxS4vibe4data4json4JsonZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 512,
						"kind": "function",
						"originalType": "const @system int(scope int delegate(ref string idx, ref const Json obj) del)",
						"char": 6,
						"name": "opApply",
						"deco": "xFMDFKAyaKxS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"endline": 520,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 525,
						"kind": "function",
						"originalType": "@property @trusted ()",
						"char": 17,
						"name": "byKeyValue",
						"deco": "FNdNeZS4vibe4data4json__T12trustedRangeTS3std9algorithm9iteration__T9MapResultSQCuQCsQCq4Json10byKeyValueMFNdNeZ9__lambda1TS6object__TQBpHTHAyaSQFhQFfQFdQCnTQrTQrZQCsFNaNbNiNfQBkZ6ResultZQEpZQGkFQFzZ3Rng",
						"endchar": 161,
						"endline": 525,
						"comment": "Iterates over all key/value pairs of an object.\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 527,
						"kind": "function",
						"originalType": "const @property @trusted ()",
						"char": 17,
						"name": "byKeyValue",
						"deco": "xFNdNeZS4vibe4data4json__T12trustedRangeTS3std9algorithm9iteration__T9MapResultSQCuQCsQCq4Json10byKeyValueMxFNdNeZ9__lambda1TS6object__TQBqHTxHAyaSQFjQFhQFfQCpTQrTxQsZQCvFNaNbNiNfxQBmZ6ResultZQEtZQGoFQGdZ3Rng",
						"endchar": 174,
						"endline": 527,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 529,
						"kind": "function",
						"originalType": "@property @safe ()",
						"char": 17,
						"name": "byIndexValue",
						"deco": "FNdNfZS3std5range__T11ZipShortestVEQBc8typecons__T4FlagVAyaa18_616c6c4b6e6f776e53616d654c656e677468ZQByi1TSQDwQDv__T4iotaTiTmZQkFimZ6ResultTAS4vibe4data4json4JsonZQFn",
						"endchar": 116,
						"endline": 529,
						"comment": "Iterates over all index/value pairs of an array.\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 531,
						"kind": "function",
						"originalType": "const @property @safe ()",
						"char": 17,
						"name": "byIndexValue",
						"deco": "xFNdNfZS3std5range__T11ZipShortestVEQBc8typecons__T4FlagVAyaa18_616c6c4b6e6f776e53616d654c656e677468ZQByi1TSQDwQDv__T4iotaTiTmZQkFimZ6ResultTAxS4vibe4data4json4JsonZQFo",
						"endchar": 122,
						"endline": 531,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 533,
						"kind": "function",
						"originalType": "@property @trusted ()",
						"char": 17,
						"name": "byValue",
						"deco": "FNdNeZS4vibe4data4json4Json7byValueMFNdNeZ3Rng",
						"endchar": 2,
						"endline": 549,
						"comment": "Iterates over all values of an object or array.\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 551,
						"kind": "function",
						"originalType": "const @property @trusted ()",
						"char": 17,
						"name": "byValue",
						"deco": "xFNdNeZS4vibe4data4json4Json7byValueMxFNdNeZ3Rng",
						"endchar": 2,
						"endline": 568,
						"comment": "ditto\n"
					},
					{
						"constraint": "is(T == JSONValue)",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 574,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"line": 574,
								"kind": "function",
								"char": 4,
								"name": "opCast",
								"type": "const @safe T()",
								"endchar": 2,
								"endline": 608
							}
						],
						"name": "opCast",
						"comment": "\t\tConverts this Json object to a std.json.JSONValue object\n"
					},
					{
						"constraint": "!is(T == JSONValue)",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 628,
						"kind": "template",
						"char": 11,
						"members": [
							{
								"line": 628,
								"kind": "function",
								"char": 11,
								"name": "opCast",
								"type": "inout inout(T)()",
								"endchar": 70,
								"endline": 628
							}
						],
						"name": "opCast",
						"comment": "\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\n\t\tAvailable_Types:\n\t\t\t$(UL\n\t\t\t\t$(LI `bool` (`Type.bool_`))\n\t\t\t\t$(LI `double` (`Type.float_`))\n\t\t\t\t$(LI `float` (Converted from `double`))\n\t\t\t\t$(LI `long` (`Type.int_`))\n\t\t\t\t$(LI `ulong`, `int`, `uint`, `short`, `ushort`, `byte`, `ubyte` (Converted from `long`))\n\t\t\t\t$(LI `string` (`Type.string`))\n\t\t\t\t$(LI `Json[]` (`Type.array`))\n\t\t\t\t$(LI `Json[string]` (`Type.object`))\n\t\t\t)\n\n\t\tSee_Also: `opt`, `to`, `deserializeJson`\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 630,
						"kind": "template",
						"char": 21,
						"members": [
							{
								"line": 630,
								"kind": "function",
								"char": 21,
								"name": "get",
								"type": "inout @property @trusted inout(T)()",
								"endchar": 2,
								"endline": 655
							}
						],
						"name": "get",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 665,
						"kind": "template",
						"char": 21,
						"members": [
							{
								"parameters": [
									{
										"type": "const(T)",
										"default": "T.init",
										"name": "def"
									}
								],
								"line": 665,
								"kind": "function",
								"char": 21,
								"name": "opt",
								"type": "const @property const(T)(const(T) def = T.init)",
								"endchar": 2,
								"endline": 669
							}
						],
						"name": "opt",
						"comment": "\t\tReturns the native type for this JSON if it matches the current runtime type.\n\n\t\tIf the runtime type does not match the given native type, the 'def' parameter is returned\n\t\tinstead.\n\n\t\tSee_Also: `get`\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 671,
						"kind": "template",
						"char": 14,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"default": "T.init",
										"name": "def"
									}
								],
								"line": 671,
								"kind": "function",
								"char": 14,
								"name": "opt",
								"type": "@property T(T def = T.init)",
								"endchar": 2,
								"endline": 675
							}
						],
						"name": "opt",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 686,
						"kind": "template",
						"char": 21,
						"members": [
							{
								"line": 686,
								"kind": "function",
								"char": 21,
								"name": "to",
								"type": "inout @property inout(T)()",
								"endchar": 2,
								"endline": 778
							}
						],
						"name": "to",
						"comment": "\t\tConverts the JSON value to the corresponding D type - types are converted as necessary.\n\n\t\tAutomatically performs conversions between strings and numbers. See\n\t\t`get` for the list of available types. For converting/deserializing\n\t\tJSON to complex data types see `deserializeJson`.\n\n\t\tSee_Also: `get`, `deserializeJson`\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 795,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 795,
								"kind": "function",
								"char": 7,
								"name": "opUnary",
								"type": "const Json()",
								"endchar": 2,
								"endline": 807
							}
						],
						"name": "opUnary",
						"comment": "\t\tPerforms unary operations on the JSON value.\n\n\t\tThe following operations are supported for each type:\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD ~)\n\t\t\t$(DT Int)    $(DD +, -, ++, --)\n\t\t\t$(DT Float)  $(DD +, -, ++, --)\n\t\t\t$(DT String) $(DD none)\n\t\t\t$(DT Array)  $(DD none)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 825,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "const(Json)",
										"storageClass": [
											"ref"
										],
										"name": "other"
									}
								],
								"line": 825,
								"kind": "function",
								"char": 7,
								"name": "opBinary",
								"type": "const Json(ref const(Json) other)",
								"endchar": 2,
								"endline": 870
							}
						],
						"name": "opBinary",
						"comment": "\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or a JSONException\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD in)\n\t\t)\n"
					},
					{
						"constraint": "op == \"~\"",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 872,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "Json",
										"name": "other"
									}
								],
								"line": 872,
								"kind": "function",
								"char": 7,
								"name": "opBinary",
								"type": "Json(Json other)",
								"endchar": 2,
								"endline": 881
							}
						],
						"name": "opBinary",
						"comment": "ditto\n"
					},
					{
						"constraint": "op == \"+\" || op == \"-\" || op == \"*\" || op == \"/\" || op == \"%\" || op == \"~\"",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 883,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "Json",
										"name": "other"
									}
								],
								"line": 883,
								"kind": "function",
								"char": 7,
								"name": "opOpAssign",
								"type": "void(Json other)",
								"endchar": 2,
								"endline": 920
							}
						],
						"name": "opOpAssign",
						"comment": "ditto\n"
					},
					{
						"constraint": "!is(T == Json) && is(typeof(Json(other)))",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 922,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "other"
									}
								],
								"line": 922,
								"kind": "function",
								"char": 7,
								"name": "opOpAssign",
								"type": "void(T other)",
								"endchar": 2,
								"endline": 926
							}
						],
						"name": "opOpAssign",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 928,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"deco": "b",
										"name": "other"
									}
								],
								"line": 928,
								"kind": "function",
								"char": 7,
								"name": "opBinary",
								"type": "const Json(bool other)",
								"endchar": 109,
								"endline": 928
							}
						],
						"name": "opBinary",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 930,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"deco": "l",
										"name": "other"
									}
								],
								"line": 930,
								"kind": "function",
								"char": 7,
								"name": "opBinary",
								"type": "const Json(long other)",
								"endchar": 2,
								"endline": 937
							}
						],
						"name": "opBinary",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 939,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "BigInt",
										"name": "other"
									}
								],
								"line": 939,
								"kind": "function",
								"char": 7,
								"name": "opBinary",
								"type": "const Json(BigInt other)",
								"endchar": 2,
								"endline": 946
							}
						],
						"name": "opBinary",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 948,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"deco": "d",
										"name": "other"
									}
								],
								"line": 948,
								"kind": "function",
								"char": 7,
								"name": "opBinary",
								"type": "const Json(double other)",
								"endchar": 114,
								"endline": 948
							}
						],
						"name": "opBinary",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 950,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "other"
									}
								],
								"line": 950,
								"kind": "function",
								"char": 7,
								"name": "opBinary",
								"type": "const Json(string other)",
								"endchar": 115,
								"endline": 950
							}
						],
						"name": "opBinary",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 952,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "Json[]",
										"name": "other"
									}
								],
								"line": 952,
								"kind": "function",
								"char": 7,
								"name": "opBinary",
								"type": "Json(Json[] other)",
								"endchar": 110,
								"endline": 952
							}
						],
						"name": "opBinary",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 954,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"deco": "b",
										"name": "other"
									}
								],
								"line": 954,
								"kind": "function",
								"char": 7,
								"name": "opBinaryRight",
								"type": "const Json(bool other)",
								"endchar": 114,
								"endline": 954
							}
						],
						"name": "opBinaryRight",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 956,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"deco": "l",
										"name": "other"
									}
								],
								"line": 956,
								"kind": "function",
								"char": 7,
								"name": "opBinaryRight",
								"type": "const Json(long other)",
								"endchar": 2,
								"endline": 963
							}
						],
						"name": "opBinaryRight",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 965,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "BigInt",
										"name": "other"
									}
								],
								"line": 965,
								"kind": "function",
								"char": 7,
								"name": "opBinaryRight",
								"type": "const Json(BigInt other)",
								"endchar": 2,
								"endline": 972
							}
						],
						"name": "opBinaryRight",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 974,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"deco": "d",
										"name": "other"
									}
								],
								"line": 974,
								"kind": "function",
								"char": 7,
								"name": "opBinaryRight",
								"type": "const Json(double other)",
								"endchar": 119,
								"endline": 974
							}
						],
						"name": "opBinaryRight",
						"comment": "ditto\n"
					},
					{
						"constraint": "op == \"~\"",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 976,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "other"
									}
								],
								"line": 976,
								"kind": "function",
								"char": 7,
								"name": "opBinaryRight",
								"type": "const Json(string other)",
								"endchar": 119,
								"endline": 976
							}
						],
						"name": "opBinaryRight",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 978,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "Json[]",
										"name": "other"
									}
								],
								"line": 978,
								"kind": "function",
								"char": 7,
								"name": "opBinaryRight",
								"type": "Json(Json[] other)",
								"endchar": 115,
								"endline": 978
							}
						],
						"name": "opBinaryRight",
						"comment": "ditto\n"
					},
					{
						"constraint": "op == \"in\"",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 986,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "other"
									}
								],
								"line": 986,
								"kind": "function",
								"char": 15,
								"name": "opBinaryRight",
								"type": "inout inout(Json)*(string other)",
								"endchar": 2,
								"endline": 994
							}
						],
						"name": "opBinaryRight",
						"comment": " Checks wheter a particular key is set and returns a pointer to it.\n\n\t\tFor field that don't exist or have a type of `Type.undefined`,\n\t\tthe `in` operator will return `null`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L997_C2)\n---\nauto j = Json.emptyObject;\nj[\"a\"] = \"foo\";\nj[\"b\"] = Json.undefined;\n\nassert(\"a\" in j);\nassert((\"a\" in j).get!string == \"foo\");\nassert(\"b\" !in j);\nassert(\"c\" !in j);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L997_C2)\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4data4json4Json",
								"name": "element"
							}
						],
						"line": 1012,
						"kind": "function",
						"char": 7,
						"name": "appendArrayElement",
						"deco": "FNfS4vibe4data4json4JsonZv",
						"endchar": 2,
						"endline": 1016,
						"comment": " The append operator will append arrays. This method always appends it's argument as an array element, so nested arrays can be created.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 1026,
						"kind": "function",
						"originalType": "const @safe bool(ref const Json other)",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfKxS4vibe4data4json4JsonZb",
						"endchar": 2,
						"endline": 1040,
						"comment": "\t\tCompares two JSON values for equality.\n\n\t\tIf the two values have different types, they are considered unequal.\n\t\tThis differs with ECMA script, which performs a type conversion before\n\t\tcomparing the values.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"name": "other"
							}
						],
						"line": 1042,
						"kind": "function",
						"originalType": "const @safe bool(const Json other)",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfxS4vibe4data4json4JsonZb",
						"endchar": 66,
						"endline": 1042,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "n",
								"name": "_param_0"
							}
						],
						"line": 1044,
						"kind": "function",
						"originalType": "const @safe bool(typeof(null))",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfnZb",
						"endchar": 67,
						"endline": 1044,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "v"
							}
						],
						"line": 1046,
						"kind": "function",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfbZb",
						"endchar": 76,
						"endline": 1046,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "v"
							}
						],
						"line": 1048,
						"kind": "function",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfiZb",
						"endchar": 119,
						"endline": 1048,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "l",
								"name": "v"
							}
						],
						"line": 1050,
						"kind": "function",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNflZb",
						"endchar": 120,
						"endline": 1050,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S3std6bigint6BigInt",
								"name": "v"
							}
						],
						"line": 1052,
						"kind": "function",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfS3std6bigint6BigIntZb",
						"endchar": 122,
						"endline": 1052,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "d",
								"name": "v"
							}
						],
						"line": 1054,
						"kind": "function",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfdZb",
						"endchar": 80,
						"endline": 1054,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"line": 1056,
						"kind": "function",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfAyaZb",
						"endchar": 81,
						"endline": 1056,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 1068,
						"kind": "function",
						"originalType": "const @safe int(ref const Json other)",
						"char": 6,
						"name": "opCmp",
						"deco": "xFNfKxS4vibe4data4json4JsonZi",
						"endchar": 2,
						"endline": 1084,
						"comment": "\t\tCompares two JSON values.\n\n\t\tIf the types of the two values differ, the value with the smaller type\n\t\tid is considered the smaller value. This differs from ECMA script, which\n\t\tperforms a type conversion before comparing the values.\n\n\t\tJSON values of type Object cannot be compared and will throw an\n\t\texception.\n"
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 1086,
						"name": "opDollar"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1091,
						"kind": "template",
						"char": 24,
						"members": [
							{
								"line": 1091,
								"kind": "function",
								"char": 24,
								"name": "typeId",
								"type": "@property Type()",
								"endchar": 2,
								"endline": 1103
							}
						],
						"name": "typeId",
						"comment": "\t\tReturns the type id corresponding to the given D type.\n"
					},
					{
						"line": 1113,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFNeZAya",
						"endchar": 2,
						"endline": 1120,
						"comment": "\t\tReturns the JSON object as a string.\n\n\t\tFor large JSON values use writeJsonString instead as this function will store the whole string\n\t\tin memory, whereas writeJsonString writes it out bit for bit.\n\n\t\tSee_Also: writeJsonString, toPrettyString\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfAxaZv",
								"storageClass": [
									"scope"
								],
								"name": "sink"
							},
							{
								"deco": "S3std6format__T10FormatSpecTaZQp",
								"name": "fmt"
							}
						],
						"line": 1122,
						"kind": "function",
						"char": 7,
						"name": "toString",
						"deco": "FNeMDFNfAxaZvS3std6format__T10FormatSpecTaZQpZv",
						"endchar": 2,
						"endline": 1133,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFAxaZv",
								"storageClass": [
									"scope"
								],
								"name": "sink"
							},
							{
								"deco": "S3std6format__T10FormatSpecTaZQp",
								"name": "fmt"
							}
						],
						"line": 1135,
						"kind": "function",
						"char": 7,
						"name": "toString",
						"deco": "FMDFAxaZvS3std6format__T10FormatSpecTaZQpZv",
						"endchar": 2,
						"endline": 1147,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"default": "0",
								"name": "level"
							}
						],
						"line": 1168,
						"kind": "function",
						"char": 9,
						"name": "toPrettyString",
						"deco": "xFNeiZAya",
						"endchar": 2,
						"endline": 1173,
						"comment": "\t\tReturns the JSON object as a \"pretty\" string.\n\n\t\t---\n\t\tauto json = Json([\"foo\": Json(\"bar\")]);\n\t\twriteln(json.toPrettyString());\n\n\t\t// output:\n\t\t// {\n\t\t//     \"foo\": \"bar\"\n\t\t// }\n\t\t---\n\n\t\tParams:\n\t\t\tlevel = Specifies the base amount of indentation for the output. Indentation  is always\n\t\t\t\tdone using tab characters.\n\n\t\tSee_Also: writePrettyJsonString, toString\n"
					}
				],
				"comment": "\n\n\n\n\tRepresents a single JSON value.\n\n\tJson values can have one of the types defined in the Json.Type enum. They\n\tbehave mostly like values in ECMA script in the way that you can\n\ttransparently perform operations on them. However, strict typechecking is\n\tdone, so that operations between differently typed JSON values will throw\n\ta JSONException. Additionally, an explicit cast or using get!() or to!() is\n\trequired to convert a JSON value to the corresponding static D type.\n",
				"name": "Json"
			},
			{
				"constraint": "is(R == string)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 1253,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "range"
							},
							{
								"type": "int*",
								"default": "null",
								"name": "line"
							},
							{
								"type": "string",
								"default": "null",
								"name": "filename"
							}
						],
						"line": 1253,
						"kind": "function",
						"char": 6,
						"name": "parseJson",
						"type": "Json(ref R range, int* line = null, string filename = null)",
						"endchar": 1,
						"endline": 1351
					}
				],
				"name": "parseJson",
				"comment": "\n\n\n\n\tParses the given range as a JSON string and returns the corresponding Json object.\n\n\tThe range is shrunk during parsing, leaving any remaining text that is not part of\n\tthe JSON contents.\n\n\tThrows a JSONException if any parsing error occured.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "filename"
					}
				],
				"line": 1358,
				"kind": "function",
				"char": 6,
				"name": "parseJsonString",
				"deco": "FNfAyaQdZS4vibe4data4json4Json",
				"endchar": 1,
				"endline": 1365,
				"comment": "\tParses the given JSON string and returns the corresponding Json object.\n\n\tThrows a JSONException if any parsing error occurs.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1455,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "value"
							}
						],
						"line": 1455,
						"kind": "function",
						"char": 6,
						"name": "serializeToJson",
						"type": "Json(auto ref T value)",
						"endchar": 1,
						"endline": 1458
					}
				],
				"name": "serializeToJson",
				"comment": "\tSerializes the given value to JSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT `Json`)            $(DD Used as-is)\n\t\t$(DT `null`)            $(DD Converted to `Json.Type.null_`)\n\t\t$(DT `bool`)            $(DD Converted to `Json.Type.bool_`)\n\t\t$(DT `float`, `double`)   $(DD Converted to `Json.Type.float_`)\n\t\t$(DT `short`, `ushort`, `int`, `uint`, `long`, `ulong`) $(DD Converted to `Json.Type.int_`)\n\t\t$(DT `BigInt`)          $(DD Converted to `Json.Type.bigInt`)\n\t\t$(DT `string`)          $(DD Converted to `Json.Type.string`)\n\t\t$(DT `T[]`)             $(DD Converted to `Json.Type.array`)\n\t\t$(DT `T[string]`)       $(DD Converted to `Json.Type.object`)\n\t\t$(DT `struct`)          $(DD Converted to `Json.Type.object`)\n\t\t$(DT `class`)           $(DD Converted to `Json.Type.object` or `Json.Type.null_`)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall public fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. `toJson` overrides `toString`).\n\n\tSee_Also: `deserializeJson`, `vibe.data.serialization`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1474_C7)\n---\nstruct Foo {\n\tint number;\n\tstring str;\n}\n\nFoo f;\n\nf.number = 12;\nf.str = \"hello\";\n\nstring json = serializeToJsonString(f);\nassert(json == `{\"number\":12,\"str\":\"hello\"}`);\nJson jsonval = serializeToJson(f);\nassert(jsonval.type == Json.Type.object);\nassert(jsonval[\"number\"] == Json(12));\nassert(jsonval[\"str\"] == Json(\"hello\"));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1474_C7)\n"
			},
			{
				"constraint": "isOutputRange!(R, char) || isOutputRange!(R, ubyte)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1460,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "destination"
							},
							{
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "value"
							}
						],
						"line": 1460,
						"kind": "function",
						"char": 6,
						"name": "serializeToJson",
						"type": "void(R destination, auto ref T value)",
						"endchar": 1,
						"endline": 1464
					}
				],
				"name": "serializeToJson",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1466,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "value"
							}
						],
						"line": 1466,
						"kind": "function",
						"char": 8,
						"name": "serializeToJsonString",
						"type": "string(auto ref T value)",
						"endchar": 1,
						"endline": 1471
					}
				],
				"name": "serializeToJsonString",
				"comment": "ditto\n"
			},
			{
				"constraint": "isOutputRange!(R, char) || isOutputRange!(R, ubyte)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1499,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "destination"
							},
							{
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "value"
							}
						],
						"line": 1499,
						"kind": "function",
						"char": 6,
						"name": "serializeToPrettyJson",
						"type": "void(R destination, auto ref T value)",
						"endchar": 1,
						"endline": 1503
					}
				],
				"name": "serializeToPrettyJson",
				"comment": "\tSerializes the given value to a pretty printed JSON string.\n\n\tSee_also: `serializeToJson`, `vibe.data.serialization`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1513_C7)\n---\nstruct Foo {\n\tint number;\n\tstring str;\n}\n\nFoo f;\nf.number = 12;\nf.str = \"hello\";\n\nstring json = serializeToPrettyJson(f);\nassert(json ==\n`{\n\"number\": 12,\n\"str\": \"hello\"\n}`);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1513_C7)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1505,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "value"
							}
						],
						"line": 1505,
						"kind": "function",
						"char": 8,
						"name": "serializeToPrettyJson",
						"type": "string(auto ref T value)",
						"endchar": 1,
						"endline": 1510
					}
				],
				"name": "serializeToPrettyJson",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1539,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "Json",
								"name": "src"
							}
						],
						"line": 1539,
						"kind": "function",
						"char": 6,
						"name": "deserializeJson",
						"type": "void(ref T dst, Json src)",
						"endchar": 1,
						"endline": 1542
					}
				],
				"name": "deserializeJson",
				"comment": "\tDeserializes a JSON value into the destination variable.\n\n\tThe same types as for `serializeToJson()` are supported and handled inversely.\n\n\tSee_Also: `serializeToJson`, `serializeToJsonString`, `vibe.data.serialization`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1556_C7)\n---\nstruct Foo {\n\tint number;\n\tstring str;\n}\nFoo f = deserializeJson!Foo(`{\"number\": 12, \"str\": \"hello\"}`);\nassert(f.number == 12);\nassert(f.str == \"hello\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1556_C7)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1544,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "Json",
								"name": "src"
							}
						],
						"line": 1544,
						"kind": "function",
						"char": 3,
						"name": "deserializeJson",
						"type": "T(Json src)",
						"endchar": 1,
						"endline": 1547
					}
				],
				"name": "deserializeJson",
				"comment": "ditto\n"
			},
			{
				"constraint": "!is(R == Json) && isInputRange!R",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 1549,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "input"
							}
						],
						"line": 1549,
						"kind": "function",
						"char": 3,
						"name": "deserializeJson",
						"type": "T(R input)",
						"endchar": 1,
						"endline": 1553
					}
				],
				"name": "deserializeJson",
				"comment": "ditto\n"
			},
			{
				"kind": "struct",
				"line": 1773,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1774,
						"kind": "template",
						"char": 2,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 1774,
								"kind": "variable",
								"char": 37,
								"name": "isJsonBasicType",
								"init": "std.traits.isNumeric!T || isBoolean!T || isSomeString!T || is(T == typeof(null)) || is(Unqual!T == UUID) || isJsonSerializable!T"
							}
						],
						"name": "isJsonBasicType"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1776,
						"kind": "template",
						"char": 2,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 1776,
								"kind": "variable",
								"char": 42,
								"name": "isSupportedValueType",
								"init": "isJsonBasicType!T || is(Unqual!T == Json) || is(Unqual!T == JSONValue)"
							}
						],
						"name": "isSupportedValueType"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4data4json4Json",
								"name": "data"
							}
						],
						"line": 1783,
						"kind": "constructor",
						"originalType": "ref @safe (Json data)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfS4vibe4data4json4JsonZSQwQtQq14JsonSerializer",
						"endchar": 44,
						"endline": 1783
					},
					{
						"line": 1790,
						"kind": "function",
						"char": 7,
						"name": "getSerializedResult",
						"deco": "FNfZS4vibe4data4json4Json",
						"endchar": 55,
						"endline": 1790
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1791,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 1791,
								"kind": "function",
								"char": 7,
								"name": "beginWriteDictionary",
								"type": "void()",
								"endchar": 78,
								"endline": 1791
							}
						],
						"name": "beginWriteDictionary"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1792,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 1792,
								"kind": "function",
								"char": 7,
								"name": "endWriteDictionary",
								"type": "void()",
								"endchar": 100,
								"endline": 1792
							}
						],
						"name": "endWriteDictionary"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1793,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1793,
								"kind": "function",
								"char": 7,
								"name": "beginWriteDictionaryEntry",
								"type": "void(string name)",
								"endchar": 55,
								"endline": 1793
							}
						],
						"name": "beginWriteDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1794,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1794,
								"kind": "function",
								"char": 7,
								"name": "endWriteDictionaryEntry",
								"type": "void(string name)",
								"endchar": 95,
								"endline": 1794
							}
						],
						"name": "endWriteDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1796,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"line": 1796,
								"kind": "function",
								"char": 7,
								"name": "beginWriteArray",
								"type": "void(size_t)",
								"endchar": 78,
								"endline": 1796
							}
						],
						"name": "beginWriteArray"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1797,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 1797,
								"kind": "function",
								"char": 7,
								"name": "endWriteArray",
								"type": "void()",
								"endchar": 95,
								"endline": 1797
							}
						],
						"name": "endWriteArray"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1798,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"line": 1798,
								"kind": "function",
								"char": 7,
								"name": "beginWriteArrayEntry",
								"type": "void(size_t)",
								"endchar": 45,
								"endline": 1798
							}
						],
						"name": "beginWriteArrayEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1799,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"line": 1799,
								"kind": "function",
								"char": 7,
								"name": "endWriteArrayEntry",
								"type": "void(size_t)",
								"endchar": 97,
								"endline": 1799
							}
						],
						"name": "endWriteArrayEntry"
					},
					{
						"constraint": "!is(Unqual!T == Json)",
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1801,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "value"
									}
								],
								"line": 1801,
								"kind": "function",
								"char": 7,
								"name": "writeValue",
								"type": "void(auto ref T value)",
								"endchar": 2,
								"endline": 1814
							}
						],
						"name": "writeValue"
					},
					{
						"constraint": "is(T == Json)",
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1816,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "value"
									}
								],
								"line": 1816,
								"kind": "function",
								"char": 7,
								"name": "writeValue",
								"type": "void(auto ref T value)",
								"endchar": 87,
								"endline": 1816
							}
						],
						"name": "writeValue"
					},
					{
						"constraint": "!is(T == Json) && is(T : const(Json))",
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1817,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"auto",
											"ref"
										],
										"name": "value"
									}
								],
								"line": 1817,
								"kind": "function",
								"char": 7,
								"name": "writeValue",
								"type": "void(auto ref T value)",
								"endchar": 117,
								"endline": 1817
							}
						],
						"name": "writeValue"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1822,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "void delegate(string) @safe",
										"storageClass": [
											"scope"
										],
										"name": "field_handler"
									}
								],
								"line": 1822,
								"kind": "function",
								"char": 7,
								"name": "readDictionary",
								"type": "void(scope void delegate(string) @safe field_handler)",
								"endchar": 2,
								"endline": 1835
							}
						],
						"name": "readDictionary"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1837,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1837,
								"kind": "function",
								"char": 7,
								"name": "beginReadDictionaryEntry",
								"type": "void(string name)",
								"endchar": 54,
								"endline": 1837
							}
						],
						"name": "beginReadDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1838,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1838,
								"kind": "function",
								"char": 7,
								"name": "endReadDictionaryEntry",
								"type": "void(string name)",
								"endchar": 52,
								"endline": 1838
							}
						],
						"name": "endReadDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1840,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "void delegate(size_t) @safe",
										"storageClass": [
											"scope"
										],
										"name": "size_callback"
									},
									{
										"type": "void delegate() @safe",
										"storageClass": [
											"scope"
										],
										"name": "entry_callback"
									}
								],
								"line": 1840,
								"kind": "function",
								"char": 7,
								"name": "readArray",
								"type": "void(scope void delegate(size_t) @safe size_callback, scope void delegate() @safe entry_callback)",
								"endchar": 2,
								"endline": 1850
							}
						],
						"name": "readArray"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1852,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 1852,
								"kind": "function",
								"char": 7,
								"name": "beginReadArrayEntry",
								"type": "void(size_t index)",
								"endchar": 50,
								"endline": 1852
							}
						],
						"name": "beginReadArrayEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1853,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 1853,
								"kind": "function",
								"char": 7,
								"name": "endReadArrayEntry",
								"type": "void(size_t index)",
								"endchar": 48,
								"endline": 1853
							}
						],
						"name": "endReadArrayEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1855,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"line": 1855,
								"kind": "function",
								"char": 4,
								"name": "readValue",
								"type": "@safe T()",
								"endchar": 2,
								"endline": 1885
							}
						],
						"name": "readValue"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1887,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 1887,
								"kind": "function",
								"char": 7,
								"name": "tryReadNull",
								"type": "bool()",
								"endchar": 73,
								"endline": 1887
							}
						],
						"name": "tryReadNull"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4data4json14JsonSerializer",
								"name": "p"
							}
						],
						"line": 1773,
						"kind": "generated function",
						"originalType": "ref @trusted JsonSerializer(JsonSerializer p) return",
						"char": 1,
						"name": "opAssign",
						"deco": "FNaNbNcNiNjNeS4vibe4data4json14JsonSerializerZQBh"
					}
				],
				"comment": "\tSerializer for a plain Json representation.\n\n\tSee_Also: vibe.data.serialization.serialize, vibe.data.serialization.deserialize, serializeToJson, deserializeJson\n",
				"name": "JsonSerializer"
			},
			{
				"constraint": "isInputRange!R || isOutputRange!(R, char)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "value",
						"deco": "b",
						"defaultValue": "false",
						"name": "pretty"
					}
				],
				"line": 1911,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "R",
								"char": 5,
								"line": 1915,
								"name": "m_range"
							},
							{
								"line": 1916,
								"kind": "variable",
								"char": 10,
								"name": "m_level",
								"init": "0",
								"type": "size_t"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 1919,
								"kind": "template",
								"char": 2,
								"members": [
									{
										"storageClass": [
											"enum"
										],
										"line": 1919,
										"kind": "variable",
										"char": 37,
										"name": "isJsonBasicType",
										"init": "std.traits.isNumeric!T || isBoolean!T || isSomeString!T || is(T == typeof(null)) || is(Unqual!T == UUID) || isJsonSerializable!T"
									}
								],
								"name": "isJsonBasicType"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 1921,
								"kind": "template",
								"char": 2,
								"members": [
									{
										"storageClass": [
											"enum"
										],
										"line": 1921,
										"kind": "variable",
										"char": 42,
										"name": "isSupportedValueType",
										"init": "isJsonBasicType!(Unqual!T) || is(Unqual!T == Json) || is(Unqual!T == JSONValue)"
									}
								],
								"name": "isSupportedValueType"
							},
							{
								"parameters": [
									{
										"type": "R",
										"name": "range"
									}
								],
								"line": 1923,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(R range)",
								"endchar": 2,
								"endline": 1926
							},
							{
								"kind": "variable",
								"deco": "b",
								"char": 9,
								"line": 1935,
								"name": "m_firstInComposite"
							},
							{
								"line": 1938,
								"kind": "function",
								"char": 8,
								"name": "getSerializedResult",
								"type": "void()",
								"endchar": 31,
								"endline": 1938
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 1940,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"line": 1940,
										"kind": "function",
										"char": 8,
										"name": "beginWriteDictionary",
										"type": "void()",
										"endchar": 77,
										"endline": 1940
									}
								],
								"name": "beginWriteDictionary"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 1941,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"line": 1941,
										"kind": "function",
										"char": 8,
										"name": "endWriteDictionary",
										"type": "void()",
										"endchar": 73,
										"endline": 1941
									}
								],
								"name": "endWriteDictionary"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 1942,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "string",
												"name": "name"
											}
										],
										"line": 1942,
										"kind": "function",
										"char": 8,
										"name": "beginWriteDictionaryEntry",
										"type": "void(string name)",
										"endchar": 3,
										"endline": 1949
									}
								],
								"name": "beginWriteDictionaryEntry"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 1950,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "string",
												"name": "name"
											}
										],
										"line": 1950,
										"kind": "function",
										"char": 8,
										"name": "endWriteDictionaryEntry",
										"type": "void(string name)",
										"endchar": 54,
										"endline": 1950
									}
								],
								"name": "endWriteDictionaryEntry"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 1952,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "size_t"
											}
										],
										"line": 1952,
										"kind": "function",
										"char": 8,
										"name": "beginWriteArray",
										"type": "void(size_t)",
										"endchar": 78,
										"endline": 1952
									}
								],
								"name": "beginWriteArray"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 1953,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"line": 1953,
										"kind": "function",
										"char": 8,
										"name": "endWriteArray",
										"type": "void()",
										"endchar": 68,
										"endline": 1953
									}
								],
								"name": "endWriteArray"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 1954,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "size_t"
											}
										],
										"line": 1954,
										"kind": "function",
										"char": 8,
										"name": "beginWriteArrayEntry",
										"type": "void(size_t)",
										"endchar": 70,
										"endline": 1954
									}
								],
								"name": "beginWriteArrayEntry"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 1955,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "size_t"
											}
										],
										"line": 1955,
										"kind": "function",
										"char": 8,
										"name": "endWriteArrayEntry",
										"type": "void(size_t)",
										"endchar": 44,
										"endline": 1955
									}
								],
								"name": "endWriteArrayEntry"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									},
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 1957,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"storageClass": [
													"in"
												],
												"name": "value"
											}
										],
										"line": 1957,
										"kind": "function",
										"char": 8,
										"name": "writeValue",
										"type": "void(in T value)",
										"endchar": 3,
										"endline": 1978
									}
								],
								"name": "writeValue"
							},
							{
								"line": 1980,
								"kind": "function",
								"char": 16,
								"name": "startComposite",
								"type": "void()",
								"endchar": 3,
								"endline": 1984
							},
							{
								"line": 1986,
								"kind": "function",
								"char": 16,
								"name": "startCompositeEntry",
								"type": "void()",
								"endchar": 3,
								"endline": 1994
							},
							{
								"line": 1996,
								"kind": "function",
								"char": 16,
								"name": "endComposite",
								"type": "void()",
								"endchar": 3,
								"endline": 2003
							},
							{
								"line": 2005,
								"kind": "function",
								"char": 16,
								"name": "indent",
								"type": "void()",
								"endchar": 3,
								"endline": 2009
							},
							{
								"line": 2017,
								"kind": "variable",
								"char": 8,
								"name": "m_line",
								"deco": "i",
								"init": "0"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 2020,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "void delegate(string) @safe",
												"storageClass": [
													"scope"
												],
												"name": "entry_callback"
											}
										],
										"line": 2020,
										"kind": "function",
										"char": 8,
										"name": "readDictionary",
										"type": "void(scope void delegate(string) @safe entry_callback)",
										"endchar": 3,
										"endline": 2046
									}
								],
								"name": "readDictionary"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 2048,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "string",
												"name": "name"
											}
										],
										"line": 2048,
										"kind": "function",
										"char": 8,
										"name": "beginReadDictionaryEntry",
										"type": "void(string name)",
										"endchar": 55,
										"endline": 2048
									}
								],
								"name": "beginReadDictionaryEntry"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 2049,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "string",
												"name": "name"
											}
										],
										"line": 2049,
										"kind": "function",
										"char": 8,
										"name": "endReadDictionaryEntry",
										"type": "void(string name)",
										"endchar": 53,
										"endline": 2049
									}
								],
								"name": "endReadDictionaryEntry"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 2051,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "void delegate(size_t) @safe",
												"storageClass": [
													"scope"
												],
												"name": "size_callback"
											},
											{
												"type": "void delegate() @safe",
												"storageClass": [
													"scope"
												],
												"name": "entry_callback"
											}
										],
										"line": 2051,
										"kind": "function",
										"char": 8,
										"name": "readArray",
										"type": "void(scope void delegate(size_t) @safe size_callback, scope void delegate() @safe entry_callback)",
										"endchar": 3,
										"endline": 2070
									}
								],
								"name": "readArray"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 2072,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "size_t",
												"name": "index"
											}
										],
										"line": 2072,
										"kind": "function",
										"char": 8,
										"name": "beginReadArrayEntry",
										"type": "void(size_t index)",
										"endchar": 51,
										"endline": 2072
									}
								],
								"name": "beginReadArrayEntry"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 2073,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"parameters": [
											{
												"type": "size_t",
												"name": "index"
											}
										],
										"line": 2073,
										"kind": "function",
										"char": 8,
										"name": "endReadArrayEntry",
										"type": "void(size_t index)",
										"endchar": 49,
										"endline": 2073
									}
								],
								"name": "endReadArrayEntry"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									},
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 2075,
								"kind": "template",
								"char": 5,
								"members": [
									{
										"line": 2075,
										"kind": "function",
										"char": 5,
										"name": "readValue",
										"type": "T()",
										"endchar": 3,
										"endline": 2126
									}
								],
								"name": "readValue"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Traits"
									}
								],
								"line": 2128,
								"kind": "template",
								"char": 8,
								"members": [
									{
										"line": 2128,
										"kind": "function",
										"char": 8,
										"name": "tryReadNull",
										"type": "bool()",
										"endchar": 3,
										"endline": 2138
									}
								],
								"name": "tryReadNull"
							}
						],
						"line": 1911,
						"name": "JsonStringSerializer"
					}
				],
				"name": "JsonStringSerializer",
				"comment": "\tSerializer for a range based plain JSON string representation.\n\n\tSee_Also: vibe.data.serialization.serialize, vibe.data.serialization.deserialize, serializeToJson, deserializeJson\nExample:\nCloning JSON arrays$(DDOX_UNITTEST_HEADER __unittest_L2143_C1)\n---\nJson value = Json([ Json([ Json.emptyArray ]), Json.emptyArray ]).clone;\n\nassert(value.length == 2);\nassert(value[0].length == 1);\nassert(value[0][0].length == 0);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2143_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "value",
						"deco": "b",
						"defaultValue": "false",
						"name": "pretty"
					}
				],
				"line": 2178,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "Json",
								"storageClass": [
									"in"
								],
								"name": "json"
							},
							{
								"type": "size_t",
								"default": "0",
								"name": "level"
							}
						],
						"line": 2178,
						"kind": "function",
						"char": 6,
						"name": "writeJsonString",
						"type": "@safe void(ref R dst, in Json json, size_t level = 0)",
						"endchar": 1,
						"endline": 2245
					}
				],
				"name": "writeJsonString",
				"comment": "\tWrites the given JSON object as a JSON string into the destination range.\n\n\tThis function will convert the given JSON value to a string without adding\n\tany white space between tokens (no newlines, no indentation and no padding).\n\tThe output size is thus minimized, at the cost of bad human readability.\n\n\tParams:\n\t\tdst   = References the string output range to which the result is written.\n\t\tjson  = Specifies the JSON value that is to be stringified.\n\t\tlevel = Specifies the base amount of indentation for the output. Indentation is always\n\t\t\t\tdone using tab characters.\n\n\tSee_Also: Json.toString, writePrettyJsonString\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 2328,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "Json",
								"storageClass": [
									"in"
								],
								"name": "json"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "level"
							}
						],
						"line": 2328,
						"kind": "function",
						"char": 6,
						"name": "writePrettyJsonString",
						"type": "void(ref R dst, in Json json, int level = 0)",
						"endchar": 1,
						"endline": 2332
					}
				],
				"name": "writePrettyJsonString",
				"comment": "\tWrites the given JSON object as a prettified JSON string into the destination range.\n\n\tThe output will contain newlines and indents to make the output human readable.\n\n\tParams:\n\t\tdst   = References the string output range to which the result is written.\n\t\tjson  = Specifies the JSON value that is to be stringified.\n\t\tlevel = Specifies the base amount of indentation for the output. Indentation  is always\n\t\t\t\tdone using tab characters.\n\n\tSee_Also: Json.toPrettyString, writeJsonString\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "json"
					}
				],
				"line": 2338,
				"kind": "function",
				"char": 8,
				"name": "convertJsonToASCII",
				"deco": "FAyaZQe",
				"endchar": 1,
				"endline": 2343,
				"comment": "\tHelper function that escapes all Unicode characters in a JSON string.\n"
			}
		],
		"comment": "\tJSON serialization and value handling.\n\n\tThis module provides the Json struct for reading, writing and manipulating\n\tJSON values. De(serialization) of arbitrary D types is also supported and\n\tis recommended for handling JSON in performance sensitive applications.\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L15_C7)\n---\nvoid manipulateJson(Json j)\n{\n\timport std.stdio;\n\n\t// retrieving the values is done using get()\n\tassert(j[\"name\"].get!string == \"Example\");\n\tassert(j[\"id\"].get!int == 1);\n\n\t// semantic conversions can be done using to()\n\tassert(j[\"id\"].to!string == \"1\");\n\n\t// prints:\n\t// name: \"Example\"\n\t// id: 1\n\tforeach (key, value; j.byKeyValue)\n\t\twritefln(\"%s: %s\", key, value);\n\n\t// print out as JSON: {\"name\": \"Example\", \"id\": 1}\n\twritefln(\"JSON: %s\", j.toString());\n\n\t// DEPRECATED: object members can be accessed using member syntax, just like in JavaScript\n\t//j = Json.emptyObject;\n\t//j.name = \"Example\";\n\t//j.id = 1;\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L15_C7)\nExample:\nConstructing `Json` objects$(DDOX_UNITTEST_HEADER __unittest_L44_C7)\n---\n// construct a JSON object {\"field1\": \"foo\", \"field2\": 42, \"field3\": true}\n\n// using the constructor\nJson j1 = Json([\"field1\": Json(\"foo\"), \"field2\": Json(42), \"field3\": Json(true)]);\n\n// using piecewise construction\nJson j2 = Json.emptyObject;\nj2[\"field1\"] = \"foo\";\nj2[\"field2\"] = 42.0;\nj2[\"field3\"] = true;\n\n// using serialization\nstruct S {\n\tstring field1;\n\tdouble field2;\n\tbool field3;\n}\nJson j3 = S(\"foo\", 42, true).serializeToJson();\n\n// using serialization, converting directly to a JSON string\nstring j4 = S(\"foo\", 32, true).serializeToJsonString();\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L44_C7)\n",
		"name": "vibe.data.json"
	},
	{
		"kind": "module",
		"file": "data/vibe/data/serialization.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 143,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "value"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 143,
						"kind": "function",
						"char": 6,
						"name": "serialize",
						"type": "(auto ref T value, ARGS args)",
						"endchar": 1,
						"endline": 148
					}
				],
				"name": "serialize",
				"comment": "\tSerializes a value with the given serializer.\n\n\tThe serializer must have a value result for the first form\n\tto work. Otherwise, use the range based form.\n\n\tSee_Also: `vibe.data.json.JsonSerializer`, `vibe.data.json.JsonStringSerializer`, `vibe.data.bson.BsonSerializer`\nExample:\nNote that there is a convenience function `vibe.data.json.serializeToJson`\n\tthat can be used instead of manually invoking `serialize`.$(DDOX_UNITTEST_HEADER __unittest_L158_C1)\n---\nimport vibe.data.json;\n\nstruct Test {\n\tint value;\n\tstring text;\n}\n\nTest test;\ntest.value = 12;\ntest.text = \"Hello\";\n\nJson serialized = serialize!JsonSerializer(test);\nassert(serialized[\"value\"].get!int == 12);\nassert(serialized[\"text\"].get!string == \"Hello\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L158_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 150,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "Serializer",
								"storageClass": [
									"ref"
								],
								"name": "serializer"
							},
							{
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "value"
							}
						],
						"line": 150,
						"kind": "function",
						"char": 6,
						"name": "serialize",
						"type": "void(ref Serializer serializer, auto ref T value)",
						"endchar": 1,
						"endline": 153
					}
				],
				"name": "serialize",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "alias",
						"name": "Policy"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 194,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "value"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 194,
						"kind": "function",
						"char": 6,
						"name": "serializeWithPolicy",
						"type": "(auto ref T value, ARGS args)",
						"endchar": 1,
						"endline": 199
					}
				],
				"name": "serializeWithPolicy",
				"comment": "\tSerializes a value with the given serializer, representing values according to `Policy` when possible.\n\n\tThe serializer must have a value result for the first form\n\tto work. Otherwise, use the range based form.\n\n\tSee_Also: `vibe.data.json.JsonSerializer`, `vibe.data.json.JsonStringSerializer`, `vibe.data.bson.BsonSerializer`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L215_C1)\n---\nimport vibe.data.json;\n\ntemplate SizePol(T)\n\tif (__traits(allMembers, T) == TypeTuple!(\"x\", \"y\"))\n{\n\timport std.conv;\n\timport std.array;\n\n\tstatic string toRepresentation(T value) @safe {\n\t\treturn to!string(value.x) ~ \"x\" ~ to!string(value.y);\n\t}\n\n\tstatic T fromRepresentation(string value) {\n\t\tstring[] fields = value.split('x');\n\t\talias fieldT = typeof(T.x);\n\t\tauto x = to!fieldT(fields[0]);\n\t\tauto y = to!fieldT(fields[1]);\n\t\treturn T(x, y);\n\t}\n}\n\nstatic struct SizeI {\n\tint x;\n\tint y;\n}\nSizeI sizeI = SizeI(1,2);\nJson serializedI = serializeWithPolicy!(JsonSerializer, SizePol)(sizeI);\nassert(serializedI.get!string == \"1x2\");\n\nstatic struct SizeF {\n\tfloat x;\n\tfloat y;\n}\nSizeF sizeF = SizeF(0.1f,0.2f);\nJson serializedF = serializeWithPolicy!(JsonSerializer, SizePol)(sizeF);\nassert(serializedF.get!string == \"0.1x0.2\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L215_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "alias",
						"name": "Policy"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 201,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "Serializer",
								"storageClass": [
									"ref"
								],
								"name": "serializer"
							},
							{
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "value"
							}
						],
						"line": 201,
						"kind": "function",
						"char": 6,
						"name": "serializeWithPolicy",
						"type": "void(ref Serializer serializer, auto ref T value)",
						"endchar": 1,
						"endline": 208
					}
				],
				"name": "serializeWithPolicy",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 263,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 263,
						"kind": "function",
						"char": 3,
						"name": "deserialize",
						"type": "T(ARGS args)",
						"endchar": 1,
						"endline": 266
					}
				],
				"name": "deserialize",
				"comment": "\tDeserializes and returns a serialized value.\n\n\tserialized_data can be either an input range or a value containing\n\tthe serialized data, depending on the type of serializer used.\n\n\tSee_Also: `vibe.data.json.JsonSerializer`, `vibe.data.json.JsonStringSerializer`, `vibe.data.bson.BsonSerializer`\nExample:\nNote that there is a convenience function `vibe.data.json.deserializeJson`\n\tthat can be used instead of manually invoking `deserialize`.$(DDOX_UNITTEST_HEADER __unittest_L271_C1)\n---\nimport vibe.data.json;\n\nstruct Test {\n\tint value;\n\tstring text;\n}\n\nJson serialized = Json.emptyObject;\nserialized[\"value\"] = 12;\nserialized[\"text\"] = \"Hello\";\n\nTest test = deserialize!(JsonSerializer, Test)(serialized);\nassert(test.value == 12);\nassert(test.text == \"Hello\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L271_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "alias",
						"name": "Policy"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 296,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 296,
						"kind": "function",
						"char": 3,
						"name": "deserializeWithPolicy",
						"type": "T(ARGS args)",
						"endchar": 1,
						"endline": 300
					}
				],
				"name": "deserializeWithPolicy",
				"comment": "\tDeserializes and returns a serialized value, interpreting values according to `Policy` when possible.\n\n\tserialized_data can be either an input range or a value containing\n\tthe serialized data, depending on the type of serializer used.\n\n\tSee_Also: `vibe.data.json.JsonSerializer`, `vibe.data.json.JsonStringSerializer`, `vibe.data.bson.BsonSerializer`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L303_C1)\n---\nimport vibe.data.json;\n\ntemplate SizePol(T)\n\tif (__traits(allMembers, T) == TypeTuple!(\"x\", \"y\"))\n{\n\timport std.conv;\n\timport std.array;\n\n\tstatic string toRepresentation(T value)\n\t@safe {\n\t\treturn to!string(value.x) ~ \"x\" ~ to!string(value.y);\n\t}\n\n\tstatic T fromRepresentation(string value)\n\t@safe {\n\t\tstring[] fields = value.split('x');\n\t\talias fieldT = typeof(T.x);\n\t\tauto x = to!fieldT(fields[0]);\n\t\tauto y = to!fieldT(fields[1]);\n\t\treturn T(x, y);\n\t}\n}\n\nstatic struct SizeI {\n\tint x;\n\tint y;\n}\n\nJson serializedI = \"1x2\";\nSizeI sizeI = deserializeWithPolicy!(JsonSerializer, SizePol, SizeI)(serializedI);\nassert(sizeI.x == 1);\nassert(sizeI.y == 2);\n\nstatic struct SizeF {\n\tfloat x;\n\tfloat y;\n}\nJson serializedF = \"0.1x0.2\";\nSizeF sizeF = deserializeWithPolicy!(JsonSerializer, SizePol, SizeF)(serializedF);\nassert(sizeF.x == 0.1f);\nassert(sizeF.y == 0.2f);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L303_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "DefaultPolicy",
						"name": "Policy"
					}
				],
				"line": 829,
				"kind": "template",
				"char": 22,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "name"
							}
						],
						"line": 829,
						"kind": "function",
						"char": 22,
						"name": "name",
						"type": "NameAttribute!Policy(string name)",
						"endchar": 1,
						"endline": 832
					}
				],
				"name": "name",
				"comment": "\tAttribute for overriding the field name during (de-)serialization.\n\n\tNote that without the `@name` attribute there is a shorter alternative\n\tfor using names that collide with a D keyword. A single trailing\n\tunderscore will automatically be stripped when determining a field\n\tname.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L834_C1)\n---\nstruct CustomPolicy {}\n\nstruct Test {\n\t// serialized as \"screen-size\":\n\t@name(\"screen-size\") int screenSize;\n\n\t// serialized as \"print-size\" by default,\n\t// but as \"PRINTSIZE\" if CustomPolicy is used for serialization.\n\t@name(\"print-size\")\n\t@name!CustomPolicy(\"PRINTSIZE\")\n\tint printSize;\n\n\t// serialized as \"version\"\n\tint version_;\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L834_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "DefaultPolicy",
						"name": "Policy"
					}
				],
				"line": 856,
				"kind": "template",
				"char": 36,
				"members": [
					{
						"line": 856,
						"kind": "function",
						"char": 36,
						"name": "optional",
						"type": "@property OptionalAttribute!Policy()",
						"endchar": 1,
						"endline": 859
					}
				],
				"name": "optional",
				"comment": "\tAttribute marking a field as optional during deserialization.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L861_C1)\n---\nstruct Test {\n\t// does not need to be present during deserialization\n\t@optional int screenSize = 100;\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L861_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "DefaultPolicy",
						"name": "Policy"
					}
				],
				"line": 872,
				"kind": "template",
				"char": 34,
				"members": [
					{
						"line": 872,
						"kind": "function",
						"char": 34,
						"name": "ignore",
						"type": "@property IgnoreAttribute!Policy()",
						"endchar": 1,
						"endline": 875
					}
				],
				"name": "ignore",
				"comment": "\tAttribute for marking non-serialized fields.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L877_C1)\n---\nstruct Test {\n\t// is neither serialized not deserialized\n\t@ignore int screenSize;\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L877_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L884_C1)\n---\ntemplate CustomPolicy(T) {\n\t// ...\n}\n\nstruct Test {\n\t// not (de)serialized for serializeWithPolicy!(Test, CustomPolicy)\n\t// but for other policies or when serialized without a policy\n\t@ignore!CustomPolicy int screenSize;\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L884_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "DefaultPolicy",
						"name": "Policy"
					}
				],
				"line": 900,
				"kind": "template",
				"char": 34,
				"members": [
					{
						"line": 900,
						"kind": "function",
						"char": 34,
						"name": "byName",
						"type": "@property ByNameAttribute!Policy()",
						"endchar": 1,
						"endline": 903
					}
				],
				"name": "byName",
				"comment": "\tAttribute for forcing serialization of enum fields by name instead of by value.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L905_C1)\n---\nenum Color {\n\tred,\n\tgreen,\n\tblue\n}\n\nstruct Test {\n\t// serialized as an int (e.g. 1 for Color.green)\n\tColor color;\n\t// serialized as a string (e.g. \"green\" for Color.green)\n\t@byName Color namedColor;\n\t// serialized as array of ints\n\tColor[] colorArray;\n\t// serialized as array of strings\n\t@byName Color[] namedColorArray;\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L905_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "DefaultPolicy",
						"name": "Policy"
					}
				],
				"line": 933,
				"kind": "template",
				"char": 35,
				"members": [
					{
						"line": 933,
						"kind": "function",
						"char": 35,
						"name": "asArray",
						"type": "@property AsArrayAttribute!Policy()",
						"endchar": 1,
						"endline": 936
					}
				],
				"name": "asArray",
				"comment": "\tAttribute for representing a struct/class as an array instead of an object.\n\n\tUsually structs and class objects are serialized as dictionaries mapping\n\tfrom field name to value. Using this attribute, they will be serialized\n\tas a flat array instead. Note that changing the layout will make any\n\talready serialized data mismatch when this attribute is used.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L938_C1)\n---\nstruct Fields {\n\tint f1;\n\tstring f2;\n\tdouble f3;\n}\n\nstruct Test {\n\t// serialized as name:value pairs [\"f1\": int, \"f2\": string, \"f3\": double]\n\tFields object;\n\t// serialized as a sequential list of values [int, string, double]\n\t@asArray Fields array;\n}\n\nimport vibe.data.json;\nstatic assert(is(typeof(serializeToJson(Test()))));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L938_C1)\n"
			},
			{
				"line": 958,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 960,
						"name": "missing"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 961,
						"name": "exists"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 962,
						"name": "defer"
					}
				],
				"name": "FieldExistence",
				"baseDeco": "i",
				"comment": "\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "POLICY"
					}
				],
				"line": 966,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "POLICY",
								"char": 38,
								"line": 966,
								"name": "Policy"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 68,
								"line": 966,
								"name": "name"
							}
						],
						"line": 966,
						"name": "NameAttribute"
					}
				],
				"name": "NameAttribute",
				"comment": "User defined attribute (not intended for direct use)\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "POLICY"
					}
				],
				"line": 968,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "POLICY",
								"char": 42,
								"line": 968,
								"name": "Policy"
							}
						],
						"line": 968,
						"name": "OptionalAttribute"
					}
				],
				"name": "OptionalAttribute",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "POLICY"
					}
				],
				"line": 970,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "POLICY",
								"char": 40,
								"line": 970,
								"name": "Policy"
							}
						],
						"line": 970,
						"name": "IgnoreAttribute"
					}
				],
				"name": "IgnoreAttribute",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "POLICY"
					}
				],
				"line": 972,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "POLICY",
								"char": 40,
								"line": 972,
								"name": "Policy"
							}
						],
						"line": 972,
						"name": "ByNameAttribute"
					}
				],
				"name": "ByNameAttribute",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "POLICY"
					}
				],
				"line": 974,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "POLICY",
								"char": 41,
								"line": 974,
								"name": "Policy"
							}
						],
						"line": 974,
						"name": "AsArrayAttribute"
					}
				],
				"name": "AsArrayAttribute",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 987,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 989,
						"kind": "variable",
						"char": 12,
						"name": "isCustomSerializable",
						"deco": "b",
						"init": "is(typeof(T.init.toRepresentation())) && is(typeof(T.fromRepresentation(T.init.toRepresentation())) == T)"
					}
				],
				"name": "isCustomSerializable",
				"comment": "\tChecks if a given type has a custom serialization representation.\n\n\tA class or struct type is custom serializable if it defines a pair of\n\t`toRepresentation`/`fromRepresentation` methods. Any class or\n\tstruct type that has this trait will be serialized by using the return\n\tvalue of it's `toRepresentation` method instead of the original value.\n\n\tThis trait has precedence over `isISOExtStringSerializable` and\n\t`isStringSerializable`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L992_C1)\n---\n// represented as a single uint when serialized\nstatic struct S {\n\tushort x, y;\n\n\tuint toRepresentation() const { return x + (y << 16); }\n\tstatic S fromRepresentation(uint i) { return S(i & 0xFFFF, i >> 16); }\n}\n\nstatic assert(isCustomSerializable!S);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L992_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1018,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 1020,
						"kind": "variable",
						"char": 12,
						"name": "isISOExtStringSerializable",
						"deco": "b",
						"init": "is(typeof(T.init.toISOExtString()) : string) && is(typeof(T.fromISOExtString(\"\")) : T)"
					}
				],
				"name": "isISOExtStringSerializable",
				"comment": "\tChecks if a given type has an ISO extended string serialization representation.\n\n\tA class or struct type is ISO extended string serializable if it defines a\n\tpair of `toISOExtString`/`fromISOExtString` methods. Any class or\n\tstruct type that has this trait will be serialized by using the return\n\tvalue of it's `toISOExtString` method instead of the original value.\n\n\tThis is mainly useful for supporting serialization of the the date/time\n\ttypes in `std.datetime`.\n\n\tThis trait has precedence over `isStringSerializable`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1023_C1)\n---\nimport std.datetime;\n\nstatic assert(isISOExtStringSerializable!DateTime);\nstatic assert(isISOExtStringSerializable!SysTime);\n\n// represented as an ISO extended string when serialized\nstatic struct S {\n\t// dummy example implementations\n\tstring toISOExtString() const { return \"\"; }\n\tstatic S fromISOExtString(string s) { return S.init; }\n}\n\nstatic assert(isISOExtStringSerializable!S);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1023_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1048,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 1050,
						"kind": "variable",
						"char": 12,
						"name": "isStringSerializable",
						"deco": "b",
						"init": "is(typeof(T.init.toString()) : string) && is(typeof(T.fromString(\"\")) : T)"
					}
				],
				"name": "isStringSerializable",
				"comment": "\tChecks if a given type has a string serialization representation.\n\n\tA class or struct type is string serializable if it defines a pair of\n\t`toString`/`fromString` methods. Any class or struct type that\n\thas this trait will be serialized by using the return value of it's\n\t`toString` method instead of the original value.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1053_C1)\n---\nimport std.conv;\n\n// represented as a string when serialized\nstatic struct S {\n\tint value;\n\n\t// dummy example implementations\n\tstring toString() const { return value.to!string(); }\n\tstatic S fromString(string s) { return S(s.to!int()); }\n}\n\nstatic assert(isStringSerializable!S);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1053_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1071,
				"kind": "template",
				"char": 1,
				"members": [],
				"name": "DefaultPolicy",
				"comment": " Default policy (performs no customization).\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "Policy"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1089,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 1091,
						"kind": "variable",
						"char": 12,
						"name": "isPolicySerializable",
						"deco": "b",
						"init": "is(typeof(Policy!T.toRepresentation(T.init))) && is(typeof(Policy!T.fromRepresentation(Policy!T.toRepresentation(T.init))) : T)"
					}
				],
				"name": "isPolicySerializable",
				"comment": "\tChecks if a given policy supports custom serialization for a given type.\n\n\tA class or struct type is custom serializable according to a policy if\n\tthe policy defines a pair of `toRepresentation`/`fromRepresentation`\n\tfunctions. Any class or struct type that has this trait for the policy supplied to\n\t`serializeWithPolicy` will be serialized by using the return value of the\n\tpolicy `toRepresentation` function instead of the original value.\n\n\tThis trait has precedence over `isCustomSerializable`,\n\t`isISOExtStringSerializable` and `isStringSerializable`.\n\n\tSee_Also: `vibe.data.serialization.serializeWithPolicy`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1095_C1)\n---\nimport std.conv;\n\n// represented as the boxed value when serialized\nstatic struct Box(T) {\n\tT value;\n}\n\ntemplate BoxPol(S)\n{\n\tauto toRepresentation(S s) {\n\t\treturn s.value;\n\t}\n\n\tS fromRepresentation(typeof(S.init.value) v) {\n\t\treturn S(v);\n\t}\n}\nstatic assert(isPolicySerializable!(BoxPol, Box!int));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1095_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "Primary"
					},
					{
						"kind": "tuple",
						"name": "Fallbacks"
					}
				],
				"line": 1127,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "Primary",
						"char": 3,
						"line": 1130,
						"name": "ChainedPolicy"
					}
				],
				"name": "ChainedPolicy",
				"comment": "\tChains serialization policy.\n\n\tConstructs a serialization policy that given a type `T` will apply the\n\tfirst compatible policy `toRepresentation` and `fromRepresentation`\n\tfunctions. Policies are evaluated left-to-right according to\n\t`isPolicySerializable`.\n\n\tSee_Also: `vibe.data.serialization.serializeWithPolicy`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1136_C1)\n---\nimport std.conv;\n\n// To be represented as the boxed value when serialized\nstatic struct Box(T) {\n\tT value;\n}\n// Also to berepresented as the boxed value when serialized, but has\n// a different way to access the value.\nstatic struct Box2(T) {\n\tprivate T v;\n\tref T get() {\n\t\treturn v;\n\t}\n}\ntemplate BoxPol(S)\n{\n\tauto toRepresentation(S s) {\n\t\treturn s.value;\n\t}\n\n\tS fromRepresentation(typeof(toRepresentation(S.init)) v) {\n\t\treturn S(v);\n\t}\n}\ntemplate Box2Pol(S)\n{\n\tauto toRepresentation(S s) {\n\t\treturn s.get();\n\t}\n\n\tS fromRepresentation(typeof(toRepresentation(S.init)) v) {\n\t\tS s;\n\t\ts.get() = v;\n\t\treturn s;\n\t}\n}\nalias ChainPol = ChainedPolicy!(BoxPol, Box2Pol);\nstatic assert(!isPolicySerializable!(BoxPol, Box2!int));\nstatic assert(!isPolicySerializable!(Box2Pol, Box!int));\nstatic assert(isPolicySerializable!(ChainPol, Box!int));\nstatic assert(isPolicySerializable!(ChainPol, Box2!int));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1136_C1)\n"
			},
			{
				"kind": "struct",
				"line": 1359,
				"char": 10,
				"members": [
					{
						"kind": "variable",
						"type": "string",
						"char": 10,
						"line": 1362,
						"name": "result"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1364,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 1364,
								"kind": "variable",
								"char": 8,
								"name": "isSupportedValueType",
								"init": "is(T == string) || is(T == typeof(null)) || is(T == float) || is(T == int)"
							}
						],
						"name": "isSupportedValueType"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "Specs"
							}
						],
						"line": 1366,
						"kind": "template",
						"char": 3,
						"members": [
							{
								"kind": "alias",
								"type": "AliasSeq!()",
								"char": 34,
								"line": 1368,
								"name": "unqualSeq"
							}
						],
						"name": "unqualSeq"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1373,
						"kind": "template",
						"char": 3,
						"members": [
							{
								"kind": "alias",
								"type": "Unqual!(ValueType!T)[Unqual!(KeyType!T)]",
								"char": 37,
								"line": 1374,
								"name": "unqualType"
							}
						],
						"name": "unqualType"
					},
					{
						"line": 1380,
						"kind": "function",
						"char": 10,
						"name": "getSerializedResult",
						"type": "@safe string()",
						"endchar": 55,
						"endline": 1380
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1381,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"line": 1381,
								"kind": "function",
								"char": 8,
								"name": "beginWriteDictionary",
								"type": "void()",
								"endchar": 96,
								"endline": 1381
							}
						],
						"name": "beginWriteDictionary"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1382,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"line": 1382,
								"kind": "function",
								"char": 8,
								"name": "endWriteDictionary",
								"type": "void()",
								"endchar": 94,
								"endline": 1382
							}
						],
						"name": "endWriteDictionary"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1383,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1383,
								"kind": "function",
								"char": 8,
								"name": "beginWriteDictionaryEntry",
								"type": "void(string name)",
								"endchar": 122,
								"endline": 1383
							}
						],
						"name": "beginWriteDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1384,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1384,
								"kind": "function",
								"char": 8,
								"name": "endWriteDictionaryEntry",
								"type": "void(string name)",
								"endchar": 120,
								"endline": 1384
							}
						],
						"name": "endWriteDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1385,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "length"
									}
								],
								"line": 1385,
								"kind": "function",
								"char": 8,
								"name": "beginWriteArray",
								"type": "void(size_t length)",
								"endchar": 126,
								"endline": 1385
							}
						],
						"name": "beginWriteArray"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1386,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"line": 1386,
								"kind": "function",
								"char": 8,
								"name": "endWriteArray",
								"type": "void()",
								"endchar": 89,
								"endline": 1386
							}
						],
						"name": "endWriteArray"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1387,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "i"
									}
								],
								"line": 1387,
								"kind": "function",
								"char": 8,
								"name": "beginWriteArrayEntry",
								"type": "void(size_t i)",
								"endchar": 121,
								"endline": 1387
							}
						],
						"name": "beginWriteArrayEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1388,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "i"
									}
								],
								"line": 1388,
								"kind": "function",
								"char": 8,
								"name": "endWriteArrayEntry",
								"type": "void(size_t i)",
								"endchar": 119,
								"endline": 1388
							}
						],
						"name": "endWriteArrayEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1389,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 1389,
								"kind": "function",
								"char": 8,
								"name": "writeValue",
								"type": "void(T value)",
								"endchar": 3,
								"endline": 1395
							}
						],
						"name": "writeValue"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1398,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "void delegate(string) @safe",
										"storageClass": [
											"scope"
										],
										"name": "entry_callback"
									}
								],
								"line": 1398,
								"kind": "function",
								"char": 8,
								"name": "readDictionary",
								"type": "void(scope void delegate(string) @safe entry_callback)",
								"endchar": 3,
								"endline": 1413
							}
						],
						"name": "readDictionary"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1415,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1415,
								"kind": "function",
								"char": 8,
								"name": "beginReadDictionaryEntry",
								"type": "void(string name)",
								"endchar": 55,
								"endline": 1415
							}
						],
						"name": "beginReadDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1416,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1416,
								"kind": "function",
								"char": 8,
								"name": "endReadDictionaryEntry",
								"type": "void(string name)",
								"endchar": 53,
								"endline": 1416
							}
						],
						"name": "endReadDictionaryEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1418,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "void delegate(size_t) @safe",
										"storageClass": [
											"scope"
										],
										"name": "size_callback"
									},
									{
										"type": "void delegate() @safe",
										"storageClass": [
											"scope"
										],
										"name": "entry_callback"
									}
								],
								"line": 1418,
								"kind": "function",
								"char": 8,
								"name": "readArray",
								"type": "void(scope void delegate(size_t) @safe size_callback, scope void delegate() @safe entry_callback)",
								"endchar": 3,
								"endline": 1443
							}
						],
						"name": "readArray"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1445,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 1445,
								"kind": "function",
								"char": 8,
								"name": "beginReadArrayEntry",
								"type": "void(size_t index)",
								"endchar": 51,
								"endline": 1445
							}
						],
						"name": "beginReadArrayEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1446,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 1446,
								"kind": "function",
								"char": 8,
								"name": "endReadArrayEntry",
								"type": "void(size_t index)",
								"endchar": 49,
								"endline": 1446
							}
						],
						"name": "endReadArrayEntry"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1448,
						"kind": "template",
						"char": 5,
						"members": [
							{
								"line": 1448,
								"kind": "function",
								"char": 5,
								"name": "readValue",
								"type": "T()",
								"endchar": 3,
								"endline": 1456
							}
						],
						"name": "readValue"
					},
					{
						"parameters": [
							{
								"type": "string",
								"name": "prefix"
							}
						],
						"line": 1458,
						"kind": "function",
						"char": 8,
						"name": "skip",
						"type": "@safe void(string prefix)",
						"endchar": 3,
						"endline": 1462
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Traits"
							}
						],
						"line": 1464,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"line": 1464,
								"kind": "function",
								"char": 8,
								"name": "tryReadNull",
								"type": "bool()",
								"endchar": 3,
								"endline": 1470
							}
						],
						"name": "tryReadNull"
					}
				],
				"comment": "\n\n\n",
				"name": "TestSerializer"
			}
		],
		"comment": "\tGeneric serialization framework.\n\n\tThis module provides general means for implementing (de-)serialization with\n\ta standardized behavior.\n\n\tSupported_types:\n\t\tThe following rules are applied in order when serializing or\n\t\tdeserializing a certain type:\n\n\t\t$(OL\n\t\t\t$(LI An `enum` type is serialized as its raw value, except if\n\t\t\t\t`@byName` is used, in which case the name of the enum value\n\t\t\t\tis serialized.)\n\t\t\t$(LI Any type that is specifically supported by the serializer\n\t\t\t\tis directly serialized. For example, the BSON serializer\n\t\t\t\tsupports `BsonObjectID` directly.)\n\t\t\t$(LI Arrays and tuples (`std.typecons.Tuple`) are serialized\n\t\t\t\tusing the array serialization functions where each element is\n\t\t\t\tserialized again according to these rules.)\n\t\t\t$(LI Associative arrays are serialized similar to arrays. The key\n\t\t\t\ttype of the AA must satisfy the `isStringSerializable` trait\n\t\t\t\tand will always be serialized as a string.)\n\t\t\t$(LI Any `Nullable!T` will be serialized as either `null`, or\n\t\t\t\tas the contained value (subject to these rules again).)\n\t\t\t$(LI Any `Typedef!T` will be serialized as if it were just `T`.)\n\t\t\t$(LI Any `BitFlags!T` value will be serialized as `T[]`)\n\t\t\t$(LI Types satisfying the `isPolicySerializable` trait for the\n\t\t\t\tsupplied `Policy` will be serialized as the value returned\n\t\t\t\tby the policy `toRepresentation` function (again subject to\n\t\t\t\tthese rules).)\n\t\t\t$(LI Types satisfying the `isCustomSerializable` trait will be\n\t\t\t\tserialized as the value returned by their `toRepresentation`\n\t\t\t\tmethod (again subject to these rules).)\n\t\t\t$(LI Types satisfying the `isISOExtStringSerializable` trait will be\n\t\t\t\tserialized as a string, as returned by their `toISOExtString`\n\t\t\t\tmethod. This causes types such as `SysTime` to be serialized\n\t\t\t\tas strings.)\n\t\t\t$(LI Types satisfying the `isStringSerializable` trait will be\n\t\t\t\tserialized as a string, as returned by their `toString`\n\t\t\t\tmethod.)\n\t\t\t$(LI Struct and class types by default will be serialized as\n\t\t\t\tassociative arrays, where the key is the name of the\n\t\t\t\tcorresponding field (can be overridden using the `@name`\n\t\t\t\tattribute). If the struct/class is annotated with `@asArray`,\n\t\t\t\tit will instead be serialized as a flat array of values in the\n\t\t\t\torder of declaration. Null class references will be serialized\n\t\t\t\tas `null`.)\n\t\t\t$(LI Pointer types will be serialized as either `null`, or as\n\t\t\t\tthe value they point to.)\n\t\t\t$(LI Built-in integers and floating point values, as well as\n\t\t\t\tboolean values will be converted to strings, if the serializer\n\t\t\t\tdoesn't support them directly.)\n\t\t)\n\n\t\tNote that no aliasing detection is performed, so that pointers, class\n\t\treferences and arrays referencing the same memory will be serialized\n\t\tas multiple copies. When in turn deserializing the data, they will also\n\t\tend up as separate copies in memory.\n\n\tField_names:\n\t\tBy default, the field name of the serialized D type (for `struct` and\n\t\t`class` aggregates) is represented as-is in the serialized result. To\n\t\tcircumvent name clashes with D's keywords, a single trailing underscore of\n\t\tany field name is stipped, so that a field name of `version_` results in\n\t\tjust `\"version\"` as the serialized value. Names can also be freely\n\t\tcustomized using the `@name` annotation.\n\n\t\tAssociative array keys are always represented using their direct string\n\t\trepresentation.\n\n\tSerializer_implementation:\n\t\tSerializers are implemented in terms of a struct with template methods that\n\t\tget called by the serialization framework:\n\n\t\t---\n\t\tstruct ExampleSerializer {\n\t\t\tenum isSupportedValueType(T) = is(T == string) || is(T == typeof(null));\n\n\t\t\t// serialization\n\t\t\tauto getSerializedResult();\n\t\t\tvoid beginWriteDocument(TypeTraits)();\n\t\t\tvoid endWriteDocument(TypeTraits)();\n\t\t\tvoid beginWriteDictionary(TypeTraits)();\n\t\t\tvoid endWriteDictionary(TypeTraits)();\n\t\t\tvoid beginWriteDictionaryEntry(ElementTypeTraits)(string name);\n\t\t\tvoid endWriteDictionaryEntry(ElementTypeTraits)(string name);\n\t\t\tvoid beginWriteArray(TypeTraits)(size_t length);\n\t\t\tvoid endWriteArray(TypeTraits)();\n\t\t\tvoid beginWriteArrayEntry(ElementTypeTraits)(size_t index);\n\t\t\tvoid endWriteArrayEntry(ElementTypeTraits)(size_t index);\n\t\t\tvoid writeValue(TypeTraits, T)(T value);\n\n\t\t\t// deserialization\n\t\t\tvoid readDictionary(TypeTraits)(scope void delegate(string) entry_callback);\n\t\t\tvoid beginReadDictionaryEntry(ElementTypeTraits)(string);\n\t\t\tvoid endReadDictionaryEntry(ElementTypeTraits)(string);\n\t\t\tvoid readArray(TypeTraits)(scope void delegate(size_t) size_callback, scope void delegate() entry_callback);\n\t\t\tvoid beginReadArrayEntry(ElementTypeTraits)(size_t index);\n\t\t\tvoid endReadArrayEntry(ElementTypeTraits)(size_t index);\n\t\t\tT readValue(TypeTraits, T)();\n\t\t\tbool tryReadNull(TypeTraits)();\n\t\t}\n\t\t---\n\n\t\tThe `TypeTraits` type passed to the individual methods has the following members:\n\t\t$(UL\n\t\t\t$(LI `Type`: The original type of the field to serialize)\n\t\t\t$(LI `Attributes`: User defined attributes attached to the field)\n\t\t\t$(LI `Policy`: An alias to the policy used for the serialization process)\n\t\t)\n\n\t\t`ElementTypeTraits` have the following additional members:\n\t\t$(UL\n\t\t\t$(LI `ContainerType`: The original type of the enclosing container type)\n\t\t\t$(LI `ContainerAttributes`: User defined attributes attached to the enclosing container)\n\t\t)\n\n\tCopyright: © 2013-2016 rejectedsoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.data.serialization"
	},
	{
		"kind": "module",
		"file": "utils/vibe/utils/array.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 19,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T[]",
								"storageClass": [
									"ref"
								],
								"name": "array"
							},
							{
								"type": "T",
								"name": "item"
							}
						],
						"line": 19,
						"kind": "function",
						"char": 6,
						"name": "removeFromArray",
						"type": "void(ref T[] array, T item)",
						"endchar": 1,
						"endline": 26
					}
				],
				"name": "removeFromArray"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 29,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T[]",
								"storageClass": [
									"ref"
								],
								"name": "array"
							},
							{
								"type": "size_t",
								"name": "idx"
							}
						],
						"line": 29,
						"kind": "function",
						"char": 6,
						"name": "removeFromArrayIdx",
						"type": "void(ref T[] array, size_t idx)",
						"endchar": 1,
						"endline": 34
					}
				],
				"name": "removeFromArrayIdx"
			},
			{
				"line": 36,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 37,
						"name": "keepData"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 38,
						"name": "freeData"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 39,
						"name": "reuseData"
					}
				],
				"name": "AppenderResetMode",
				"baseDeco": "i"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"type": "E[]",
						"name": "ArrayType"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"line": 42,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "Unqual!E",
								"char": 2,
								"line": 43,
								"name": "ElemType"
							},
							{
								"kind": "variable",
								"type": "ElemType[]",
								"char": 14,
								"line": 48,
								"name": "m_data"
							},
							{
								"kind": "variable",
								"type": "ElemType[]",
								"char": 14,
								"line": 49,
								"name": "m_remaining"
							},
							{
								"kind": "variable",
								"type": "IAllocator",
								"char": 14,
								"line": 50,
								"name": "m_alloc"
							},
							{
								"line": 51,
								"kind": "variable",
								"char": 8,
								"name": "m_allocatedBuffer",
								"deco": "b",
								"init": "false"
							},
							{
								"parameters": [
									{
										"type": "IAllocator",
										"name": "alloc"
									},
									{
										"type": "ElemType[]",
										"default": "null",
										"name": "initial_buffer"
									}
								],
								"line": 54,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(IAllocator alloc, ElemType[] initial_buffer = null)",
								"endchar": 2,
								"endline": 59
							},
							{
								"line": 63,
								"kind": "function",
								"char": 22,
								"name": "data",
								"type": "@property ArrayType()",
								"endchar": 102,
								"endline": 63
							},
							{
								"parameters": [
									{
										"type": "AppenderResetMode",
										"default": "AppenderResetMode.keepData",
										"name": "reset_mode"
									}
								],
								"line": 65,
								"kind": "function",
								"char": 7,
								"name": "reset",
								"type": "void(AppenderResetMode reset_mode = AppenderResetMode.keepData)",
								"endchar": 2,
								"endline": 70
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "amount"
									}
								],
								"line": 79,
								"kind": "function",
								"char": 7,
								"name": "reserve",
								"type": "@trusted void(size_t amount)",
								"endchar": 2,
								"endline": 105,
								"comment": " Grows the capacity of the internal buffer so that it can hold a minumum amount of elements.\n\n\t\tParams:\n\t\t\tamount = The minimum amount of elements that shall be appendable without\n\t\t\t\ttriggering a re-allocation.\n\n"
							},
							{
								"parameters": [
									{
										"type": "E",
										"name": "el"
									}
								],
								"line": 107,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "@safe void(E el)",
								"endchar": 2,
								"endline": 112
							},
							{
								"parameters": [
									{
										"type": "ArrayType",
										"name": "arr"
									}
								],
								"line": 114,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "@safe void(ArrayType arr)",
								"endchar": 2,
								"endline": 119
							},
							{
								"parameters": [
									{
										"type": "ElemType[]",
										"storageClass": [
											"in"
										],
										"name": "arr"
									}
								],
								"line": 122,
								"kind": "function",
								"char": 8,
								"name": "put",
								"type": "@trusted void(in ElemType[] arr)",
								"endchar": 3,
								"endline": 126
							},
							{
								"parameters": [
									{
										"deco": "w",
										"name": "el"
									}
								],
								"line": 130,
								"kind": "function",
								"char": 8,
								"name": "put",
								"type": "@safe void(dchar el)",
								"endchar": 3,
								"endline": 139
							},
							{
								"parameters": [
									{
										"deco": "w",
										"name": "el"
									}
								],
								"line": 143,
								"kind": "function",
								"char": 8,
								"name": "put",
								"type": "@safe void(dchar el)",
								"endchar": 3,
								"endline": 152
							},
							{
								"parameters": [
									{
										"type": "size_t delegate(scope ElemType[] dst) @safe",
										"storageClass": [
											"scope"
										],
										"name": "del"
									}
								],
								"line": 164,
								"kind": "function",
								"char": 8,
								"name": "append",
								"type": "void(scope size_t delegate(scope ElemType[] dst) @safe del)",
								"endchar": 3,
								"endline": 169,
								"comment": " Appends a number of bytes in-place.\n\n\t\t\tThe delegate will get the memory slice of the memory that follows\n\t\t\tthe already written data. Use `reserve` to ensure that this slice\n\t\t\thas enough room. The delegate should overwrite as much of the\n\t\t\tslice as desired and then has to return the number of elements\n\t\t\tthat should be appended (counting from the start of the slice).\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "min_free"
									}
								],
								"line": 172,
								"kind": "function",
								"char": 7,
								"name": "grow",
								"type": "void(size_t min_free)",
								"endchar": 2,
								"endline": 181
							}
						],
						"line": 42,
						"name": "AllocAppender"
					}
				],
				"name": "AllocAppender"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"type": "E[]",
						"name": "ArrayType"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "NELEM"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"line": 242,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "Unqual!E",
								"char": 2,
								"line": 243,
								"name": "ElemType"
							},
							{
								"kind": "variable",
								"type": "ElemType[NELEM]",
								"char": 19,
								"line": 245,
								"name": "m_data"
							},
							{
								"kind": "variable",
								"type": "size_t",
								"char": 10,
								"line": 246,
								"name": "m_fill"
							},
							{
								"line": 249,
								"kind": "function",
								"char": 7,
								"name": "clear",
								"type": "void()",
								"endchar": 2,
								"endline": 252
							},
							{
								"parameters": [
									{
										"type": "E",
										"name": "el"
									}
								],
								"line": 254,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "void(E el)",
								"endchar": 2,
								"endline": 257
							},
							{
								"parameters": [
									{
										"deco": "w",
										"name": "el"
									}
								],
								"line": 260,
								"kind": "function",
								"char": 8,
								"name": "put",
								"type": "void(dchar el)",
								"endchar": 3,
								"endline": 268
							},
							{
								"parameters": [
									{
										"deco": "w",
										"name": "el"
									}
								],
								"line": 272,
								"kind": "function",
								"char": 8,
								"name": "put",
								"type": "void(dchar el)",
								"endchar": 3,
								"endline": 280
							},
							{
								"parameters": [
									{
										"type": "ArrayType",
										"name": "arr"
									}
								],
								"line": 283,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "void(ArrayType arr)",
								"endchar": 2,
								"endline": 287
							},
							{
								"line": 289,
								"kind": "function",
								"char": 22,
								"name": "data",
								"type": "@property ArrayType()",
								"endchar": 74,
								"endline": 289
							},
							{
								"line": 292,
								"kind": "function",
								"char": 8,
								"name": "reset",
								"type": "void()",
								"endchar": 30,
								"endline": 292
							}
						],
						"line": 242,
						"name": "FixedAppender"
					}
				],
				"name": "FixedAppender"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "0",
						"name": "N"
					},
					{
						"kind": "value",
						"deco": "b",
						"defaultValue": "true",
						"name": "INITIALIZE"
					}
				],
				"line": 300,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "T[N]",
								"char": 32,
								"line": 303,
								"name": "m_buffer"
							},
							{
								"line": 306,
								"kind": "variable",
								"char": 10,
								"name": "m_start",
								"init": "0",
								"type": "size_t"
							},
							{
								"line": 307,
								"kind": "variable",
								"char": 10,
								"name": "m_fill",
								"init": "0",
								"type": "size_t"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "capacity"
									}
								],
								"line": 311,
								"kind": "constructor",
								"char": 3,
								"name": "this",
								"type": "(size_t capacity)",
								"endchar": 55,
								"endline": 311
							},
							{
								"line": 314,
								"kind": "function",
								"char": 17,
								"name": "empty",
								"type": "const @property bool()",
								"endchar": 53,
								"endline": 314
							},
							{
								"line": 316,
								"kind": "function",
								"char": 17,
								"name": "full",
								"type": "const @property bool()",
								"endchar": 66,
								"endline": 316
							},
							{
								"line": 318,
								"kind": "function",
								"char": 19,
								"name": "length",
								"type": "const @property size_t()",
								"endchar": 51,
								"endline": 318
							},
							{
								"line": 320,
								"kind": "function",
								"char": 19,
								"name": "freeSpace",
								"type": "const @property size_t()",
								"endchar": 72,
								"endline": 320
							},
							{
								"line": 322,
								"kind": "function",
								"char": 19,
								"name": "capacity",
								"type": "const @property size_t()",
								"endchar": 62,
								"endline": 322
							},
							{
								"line": 326,
								"kind": "function",
								"char": 8,
								"name": "dispose",
								"type": "void()",
								"endchar": 3,
								"endline": 334,
								"comment": "Resets the capacity to zero and explicitly frees the memory for the buffer.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "new_size"
									}
								],
								"line": 336,
								"kind": "function",
								"char": 18,
								"name": "capacity",
								"type": "@property void(size_t new_size)",
								"endchar": 3,
								"endline": 349
							},
							{
								"line": 352,
								"kind": "function",
								"char": 25,
								"name": "front",
								"type": "inout @property ref inout(T)()",
								"endchar": 83,
								"endline": 352
							},
							{
								"line": 354,
								"kind": "function",
								"char": 25,
								"name": "back",
								"type": "inout @property ref inout(T)()",
								"endchar": 96,
								"endline": 354
							},
							{
								"line": 356,
								"kind": "function",
								"char": 7,
								"name": "clear",
								"type": "void()",
								"endchar": 2,
								"endline": 361
							},
							{
								"parameters": [],
								"line": 363,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"name": "itm"
											}
										],
										"line": 363,
										"kind": "function",
										"char": 7,
										"name": "putBack",
										"type": "void(T itm)",
										"endchar": 101,
										"endline": 363
									}
								],
								"name": "putBack"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"type": "T",
										"name": "TC"
									}
								],
								"line": 364,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "TC[]",
												"name": "itms"
											}
										],
										"line": 364,
										"kind": "function",
										"char": 7,
										"name": "putBack",
										"type": "void(TC[] itms)",
										"endchar": 2,
										"endline": 377
									}
								],
								"name": "putBack"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "n"
									}
								],
								"line": 378,
								"kind": "function",
								"char": 7,
								"name": "putBackN",
								"type": "void(size_t n)",
								"endchar": 78,
								"endline": 378
							},
							{
								"kind": "alias",
								"type": "putBack",
								"char": 2,
								"line": 380,
								"name": "put"
							},
							{
								"kind": "alias",
								"type": "putBackN",
								"char": 2,
								"line": 381,
								"name": "putN"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "itm"
									}
								],
								"line": 383,
								"kind": "function",
								"char": 7,
								"name": "putFront",
								"type": "void(T itm)",
								"endchar": 2,
								"endline": 389
							},
							{
								"line": 391,
								"kind": "function",
								"char": 7,
								"name": "popFront",
								"type": "void()",
								"endchar": 72,
								"endline": 391
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "n"
									}
								],
								"line": 392,
								"kind": "function",
								"char": 7,
								"name": "popFrontN",
								"type": "void(size_t n)",
								"endchar": 91,
								"endline": 392
							},
							{
								"line": 394,
								"kind": "function",
								"char": 7,
								"name": "popBack",
								"type": "void()",
								"endchar": 45,
								"endline": 394
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "n"
									}
								],
								"line": 395,
								"kind": "function",
								"char": 7,
								"name": "popBackN",
								"type": "void(size_t n)",
								"endchar": 62,
								"endline": 395
							},
							{
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"line": 397,
								"kind": "function",
								"char": 7,
								"name": "removeAt",
								"type": "void(Range r)",
								"endchar": 2,
								"endline": 420
							},
							{
								"line": 422,
								"kind": "function",
								"char": 13,
								"name": "peek",
								"type": "inout inout(T)[]()",
								"endchar": 94,
								"endline": 422
							},
							{
								"line": 423,
								"kind": "function",
								"char": 6,
								"name": "peekDst",
								"type": "T[]()",
								"endchar": 2,
								"endline": 426
							},
							{
								"parameters": [
									{
										"type": "T[]",
										"name": "dst"
									}
								],
								"line": 428,
								"kind": "function",
								"char": 7,
								"name": "read",
								"type": "void(T[] dst)",
								"endchar": 2,
								"endline": 441
							},
							{
								"parameters": [
									{
										"type": "int delegate(ref T itm) @safe",
										"storageClass": [
											"scope"
										],
										"name": "del"
									}
								],
								"line": 443,
								"kind": "function",
								"char": 6,
								"name": "opApply",
								"type": "int(scope int delegate(ref T itm) @safe del)",
								"endchar": 2,
								"endline": 458
							},
							{
								"parameters": [
									{
										"type": "int delegate(size_t i, ref T itm) @safe",
										"storageClass": [
											"scope"
										],
										"name": "del"
									}
								],
								"line": 461,
								"kind": "function",
								"char": 6,
								"name": "opApply",
								"type": "int(scope int delegate(size_t i, ref T itm) @safe del)",
								"endchar": 2,
								"endline": 476,
								"comment": "iterate through elements with index\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "idx"
									}
								],
								"line": 478,
								"kind": "function",
								"char": 15,
								"name": "opIndex",
								"type": "inout ref inout(T)(size_t idx)",
								"endchar": 100,
								"endline": 478
							},
							{
								"line": 480,
								"kind": "function",
								"char": 8,
								"name": "opSlice",
								"type": "Range()",
								"endchar": 61,
								"endline": 480
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "from"
									},
									{
										"type": "size_t",
										"name": "to"
									}
								],
								"line": 482,
								"kind": "function",
								"char": 8,
								"name": "opSlice",
								"type": "Range(size_t from, size_t to)",
								"endchar": 2,
								"endline": 487
							},
							{
								"constraint": "dim == 0",
								"parameters": [
									{
										"kind": "value",
										"type": "size_t",
										"name": "dim"
									}
								],
								"line": 489,
								"kind": "template",
								"char": 9,
								"members": [
									{
										"line": 489,
										"kind": "function",
										"char": 9,
										"name": "opDollar",
										"type": "const size_t()",
										"endchar": 68,
										"endline": 489
									}
								],
								"name": "opDollar"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "n"
									}
								],
								"line": 491,
								"kind": "function",
								"char": 17,
								"name": "mod",
								"type": "const size_t(size_t n)",
								"endchar": 2,
								"endline": 502
							},
							{
								"kind": "struct",
								"char": 9,
								"members": [
									{
										"kind": "variable",
										"type": "T[]",
										"char": 8,
										"line": 506,
										"name": "m_buffer"
									},
									{
										"kind": "variable",
										"type": "size_t",
										"char": 11,
										"line": 507,
										"name": "m_start"
									},
									{
										"kind": "variable",
										"type": "size_t",
										"char": 11,
										"line": 508,
										"name": "m_length"
									},
									{
										"parameters": [
											{
												"type": "T[]",
												"name": "buffer"
											},
											{
												"type": "size_t",
												"name": "start"
											},
											{
												"type": "size_t",
												"name": "length"
											}
										],
										"line": 511,
										"kind": "constructor",
										"char": 11,
										"name": "this",
										"type": "(T[] buffer, size_t start, size_t length)",
										"endchar": 3,
										"endline": 516
									},
									{
										"line": 518,
										"kind": "function",
										"char": 18,
										"name": "empty",
										"type": "const @property bool()",
										"endchar": 56,
										"endline": 518
									},
									{
										"line": 520,
										"kind": "function",
										"char": 26,
										"name": "front",
										"type": "inout @property ref inout(T)()",
										"endchar": 84,
										"endline": 520
									},
									{
										"line": 522,
										"kind": "function",
										"char": 8,
										"name": "popFront",
										"type": "void()",
										"endchar": 3,
										"endline": 529
									}
								],
								"line": 504,
								"name": "Range"
							}
						],
						"line": 300,
						"name": "FixedRingBuffer"
					}
				],
				"name": "FixedRingBuffer",
				"comment": "\tTODO: clear ring buffer fields upon removal (to run struct destructors, if T is a struct)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Key"
					}
				],
				"line": 599,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"parameters": [
									{
										"type": "IAllocator",
										"name": "a"
									}
								],
								"line": 605,
								"kind": "function",
								"char": 14,
								"name": "AW",
								"type": "IAllocator(IAllocator a)",
								"endchar": 43,
								"endline": 605
							},
							{
								"kind": "alias",
								"type": "AffixAllocator!(IAllocator, int)",
								"char": 3,
								"line": 606,
								"name": "AllocatorType"
							},
							{
								"kind": "variable",
								"type": "Key[4]",
								"char": 10,
								"line": 607,
								"name": "m_staticEntries"
							},
							{
								"kind": "variable",
								"type": "Key[]",
								"char": 9,
								"line": 608,
								"name": "m_entries"
							},
							{
								"kind": "variable",
								"type": "AllocatorType",
								"char": 17,
								"line": 609,
								"name": "m_allocator"
							},
							{
								"storageClass": [
									"@trusted"
								],
								"line": 612,
								"kind": "destructor",
								"char": 2,
								"name": "~this",
								"endchar": 2,
								"endline": 620
							},
							{
								"line": 629,
								"kind": "function",
								"char": 21,
								"name": "dup",
								"type": "@property ArraySet()",
								"endchar": 2,
								"endline": 649
							},
							{
								"parameters": [
									{
										"type": "IAllocator",
										"name": "allocator"
									}
								],
								"line": 651,
								"kind": "function",
								"char": 7,
								"name": "setAllocator",
								"type": "void(IAllocator allocator)",
								"endchar": 2,
								"endline": 655
							},
							{
								"constraint": "op == \"in\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 657,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "Key",
												"name": "key"
											}
										],
										"line": 657,
										"kind": "function",
										"char": 7,
										"name": "opBinaryRight",
										"type": "bool(Key key)",
										"endchar": 81,
										"endline": 657
									}
								],
								"name": "opBinaryRight"
							},
							{
								"parameters": [
									{
										"type": "int delegate(ref Key) @safe",
										"name": "del"
									}
								],
								"line": 659,
								"kind": "function",
								"char": 6,
								"name": "opApply",
								"type": "int(int delegate(ref Key) @safe del)",
								"endchar": 2,
								"endline": 670
							},
							{
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"line": 672,
								"kind": "function",
								"char": 7,
								"name": "contains",
								"type": "const bool(Key key)",
								"endchar": 2,
								"endline": 677
							},
							{
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"line": 679,
								"kind": "function",
								"char": 7,
								"name": "insert",
								"type": "void(Key key)",
								"endchar": 2,
								"endline": 713
							},
							{
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"line": 715,
								"kind": "function",
								"char": 7,
								"name": "remove",
								"type": "void(Key key)",
								"endchar": 2,
								"endline": 719
							},
							{
								"line": 721,
								"kind": "function",
								"char": 6,
								"name": "allocator",
								"type": "nothrow ref @trusted ()",
								"endchar": 2,
								"endline": 731
							}
						],
						"line": 599,
						"name": "ArraySet"
					}
				],
				"name": "ArraySet"
			}
		],
		"comment": "\tUtility functions for array processing\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.utils.array"
	},
	{
		"kind": "module",
		"file": "utils/vibe/utils/dictionarylist.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "VALUE"
					},
					{
						"kind": "value",
						"deco": "b",
						"defaultValue": "true",
						"name": "case_sensitive"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "32",
						"name": "NUM_STATIC_FIELDS"
					},
					{
						"kind": "value",
						"deco": "b",
						"defaultValue": "false",
						"name": "USE_HASHSUM"
					}
				],
				"line": 29,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "Tuple!(string, \"key\", ValueType, \"value\")",
								"char": 3,
								"line": 33,
								"name": "KeyValue"
							},
							{
								"kind": "struct",
								"char": 10,
								"members": [
									{
										"kind": "variable",
										"deco": "k",
										"char": 33,
										"line": 36,
										"name": "keyCheckSum"
									},
									{
										"kind": "variable",
										"type": "KeyValue",
										"char": 13,
										"line": 41,
										"name": "tuple"
									},
									{
										"line": 42,
										"kind": "function",
										"char": 32,
										"name": "key",
										"type": "inout @property ref inout(string)()",
										"endchar": 64,
										"endline": 42
									},
									{
										"line": 43,
										"kind": "function",
										"char": 31,
										"name": "value",
										"type": "inout @property ref inout(VALUE)()",
										"endchar": 67,
										"endline": 43
									}
								],
								"line": 35,
								"name": "Field"
							},
							{
								"kind": "variable",
								"type": "Field[NUM_STATIC_FIELDS]",
								"char": 28,
								"line": 45,
								"name": "m_fields"
							},
							{
								"line": 46,
								"kind": "variable",
								"char": 10,
								"name": "m_fieldCount",
								"init": "0",
								"type": "size_t"
							},
							{
								"kind": "variable",
								"type": "Field[]",
								"char": 11,
								"line": 47,
								"name": "m_extendedFields"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 49,
								"kind": "variable",
								"char": 13,
								"name": "safeValueCopy",
								"deco": "b",
								"init": "__traits(compiles, (VALUE v)\n{\nVALUE vc;\nvc = v;\n}\n)"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 50,
								"kind": "template",
								"char": 3,
								"members": [
									{
										"storageClass": [
											"enum"
										],
										"line": 51,
										"kind": "variable",
										"char": 9,
										"name": "typedGet",
										"init": "__traits(compiles, (VALUE v)\n{\nreturn v.get!T;\n}\n)"
									}
								],
								"name": "typedGet"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 53,
								"kind": "template",
								"char": 3,
								"members": [
									{
										"storageClass": [
											"enum"
										],
										"line": 54,
										"kind": "variable",
										"char": 9,
										"name": "canAssign",
										"init": "__traits(compiles, (T t)\n{\nVALUE v = t;\n}\n)"
									}
								],
								"name": "canAssign"
							},
							{
								"kind": "alias",
								"type": "VALUE",
								"char": 2,
								"line": 58,
								"name": "ValueType"
							},
							{
								"kind": "struct",
								"char": 2,
								"members": [
									{
										"kind": "variable",
										"type": "string",
										"char": 29,
										"line": 60,
										"name": "key"
									},
									{
										"kind": "variable",
										"type": "ValueType",
										"char": 44,
										"line": 60,
										"name": "value"
									}
								],
								"line": 60,
								"name": "FieldTuple"
							},
							{
								"line": 64,
								"kind": "function",
								"char": 19,
								"name": "length",
								"type": "const @property size_t()",
								"endchar": 83,
								"endline": 64,
								"comment": " The number of fields present in the map.\n"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "FieldTuple[]",
										"name": "array"
									}
								],
								"line": 67,
								"kind": "function",
								"char": 24,
								"name": "fromRepresentation",
								"type": "DictionaryList(FieldTuple[] array)",
								"endchar": 2,
								"endline": 72,
								"comment": "Supports serialization using vibe.data.serialization.\n"
							},
							{
								"line": 74,
								"kind": "function",
								"char": 15,
								"name": "toRepresentation",
								"type": "const FieldTuple[]()",
								"endchar": 2,
								"endline": 78,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "void delegate(const(char)[] str) @safe",
										"storageClass": [
											"scope"
										],
										"name": "sink"
									}
								],
								"line": 82,
								"kind": "function",
								"char": 7,
								"name": "toString",
								"type": "const void(scope void delegate(const(char)[] str) @safe sink)",
								"endchar": 2,
								"endline": 98,
								"comment": " Generates an associative-array equivalent string representation of the dictionary.\n"
							},
							{
								"parameters": [
									{
										"type": "void delegate(const(char)[] str) @system",
										"storageClass": [
											"scope"
										],
										"name": "sink"
									}
								],
								"line": 100,
								"kind": "function",
								"char": 7,
								"name": "toString",
								"type": "const void(scope void delegate(const(char)[] str) @system sink)",
								"endchar": 2,
								"endline": 103,
								"comment": "ditto\n"
							},
							{
								"line": 105,
								"kind": "function",
								"char": 9,
								"name": "toString",
								"type": "const string()",
								"endchar": 2,
								"endline": 111,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 115,
								"kind": "function",
								"char": 7,
								"name": "remove",
								"type": "void(string key)",
								"endchar": 2,
								"endline": 129,
								"comment": " Removes the first field that matches the given key.\n"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 133,
								"kind": "function",
								"char": 7,
								"name": "removeAll",
								"type": "void(string key)",
								"endchar": 2,
								"endline": 150,
								"comment": " Removes all fields that matches the given key.\n"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "Field[]",
										"storageClass": [
											"ref"
										],
										"name": "array"
									},
									{
										"type": "size_t",
										"name": "idx"
									}
								],
								"line": 153,
								"kind": "function",
								"char": 22,
								"name": "removeFromArrayIdx",
								"type": "void(ref Field[] array, size_t idx)",
								"endchar": 2,
								"endline": 158,
								"comment": "Used by `remove` and `removeAll`\n"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ValueType",
										"name": "value"
									}
								],
								"line": 166,
								"kind": "function",
								"char": 7,
								"name": "addField",
								"type": "void(string key, ValueType value)",
								"endchar": 2,
								"endline": 173,
								"comment": " Adds a new field to the map.\n\n\t\tThe new field will be added regardless of any existing fields that\n\t\thave the same key, possibly resulting in duplicates. Use opIndexAssign\n\t\tif you want to avoid duplicates.\n"
							},
							{
								"constraint": "canAssign!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 175,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "string",
												"name": "key"
											},
											{
												"type": "T",
												"name": "value"
											}
										],
										"line": 175,
										"kind": "function",
										"char": 7,
										"name": "addField",
										"type": "void(string key, T value)",
										"endchar": 2,
										"endline": 180
									}
								],
								"name": "addField"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "inout(ValueType)",
										"storageClass": [
											"lazy"
										],
										"default": "ValueType.init",
										"name": "def_val"
									}
								],
								"line": 186,
								"kind": "function",
								"char": 19,
								"name": "get",
								"type": "inout inout(ValueType)(string key, lazy inout(ValueType) def_val = ValueType.init)",
								"endchar": 2,
								"endline": 190,
								"comment": " Returns the first field that matches the given key.\n\n\t\tIf no field is found, def_val is returned.\n"
							},
							{
								"constraint": "typedGet!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 196,
								"kind": "template",
								"char": 11,
								"members": [
									{
										"parameters": [
											{
												"type": "string",
												"name": "key"
											},
											{
												"type": "inout(T)",
												"storageClass": [
													"lazy"
												],
												"name": "def_val"
											}
										],
										"line": 196,
										"kind": "function",
										"char": 11,
										"name": "get",
										"type": "inout inout(T)(string key, lazy inout(T) def_val)",
										"endchar": 2,
										"endline": 200
									}
								],
								"name": "get",
								"comment": "ditto\n"
							},
							{
								"constraint": "typedGet!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 203,
								"kind": "template",
								"char": 11,
								"members": [
									{
										"parameters": [
											{
												"type": "string",
												"name": "key"
											}
										],
										"line": 203,
										"kind": "function",
										"char": 11,
										"name": "get",
										"type": "inout inout(T)(string key)",
										"endchar": 2,
										"endline": 206
									}
								],
								"name": "get",
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 212,
								"kind": "function",
								"char": 21,
								"name": "getAll",
								"type": "const @trusted const(ValueType)[](string key)",
								"endchar": 2,
								"endline": 218,
								"comment": " Returns all values matching the given key.\n\n\t\tNote that the version returning an array will allocate for each call.\n"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "void delegate(const(ValueType)) @safe",
										"storageClass": [
											"scope"
										],
										"name": "del"
									}
								],
								"line": 220,
								"kind": "function",
								"char": 7,
								"name": "getAll",
								"type": "const void(string key, scope void delegate(const(ValueType)) @safe del)",
								"endchar": 2,
								"endline": 234,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 238,
								"kind": "function",
								"char": 19,
								"name": "opIndex",
								"type": "inout inout(ValueType)(string key)",
								"endchar": 2,
								"endline": 243,
								"comment": " Returns the first value matching the given key.\n"
							},
							{
								"parameters": [
									{
										"type": "ValueType",
										"name": "val"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 247,
								"kind": "function",
								"char": 12,
								"name": "opIndexAssign",
								"type": "ValueType(ValueType val, string key)",
								"endchar": 2,
								"endline": 256,
								"comment": " Adds or replaces the given field with a new value.\n"
							},
							{
								"constraint": "canAssign!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 259,
								"kind": "template",
								"char": 12,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"name": "val"
											},
											{
												"type": "string",
												"name": "key"
											}
										],
										"line": 259,
										"kind": "function",
										"char": 12,
										"name": "opIndexAssign",
										"type": "ValueType(T val, string key)",
										"endchar": 2,
										"endline": 264
									}
								],
								"name": "opIndexAssign",
								"comment": "ditto\n"
							},
							{
								"constraint": "op == \"in\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 268,
								"kind": "template",
								"char": 20,
								"members": [
									{
										"parameters": [
											{
												"type": "string",
												"name": "key"
											}
										],
										"line": 268,
										"kind": "function",
										"char": 20,
										"name": "opBinaryRight",
										"type": "inout inout(ValueType)*(string key)",
										"endchar": 2,
										"endline": 277
									}
								],
								"name": "opBinaryRight",
								"comment": " Returns a pointer to the first field that matches the given key.\n"
							},
							{
								"constraint": "op == \"!in\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 279,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "string",
												"name": "key"
											}
										],
										"line": 279,
										"kind": "function",
										"char": 7,
										"name": "opBinaryRight",
										"type": "inout bool(string key)",
										"endchar": 2,
										"endline": 281
									}
								],
								"name": "opBinaryRight",
								"comment": "ditto\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 285,
								"kind": "function",
								"char": 7,
								"name": "byKeyValue",
								"type": "()",
								"endchar": 49,
								"endline": 285,
								"comment": " Iterates over all fields, including duplicates.\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 287,
								"kind": "function",
								"char": 7,
								"name": "byKeyValue",
								"type": "const ()",
								"endchar": 55,
								"endline": 287,
								"comment": "ditto\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 289,
								"kind": "function",
								"char": 7,
								"name": "byKey",
								"type": "inout ()",
								"endchar": 98,
								"endline": 289,
								"comment": "ditto\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 291,
								"kind": "function",
								"char": 7,
								"name": "byValue",
								"type": "inout ()",
								"endchar": 100,
								"endline": 291,
								"comment": "ditto\n"
							},
							{
								"line": 300,
								"kind": "function",
								"char": 28,
								"name": "dup",
								"type": "const @property DictionaryList()",
								"endchar": 3,
								"endline": 307,
								"comment": " Duplicates the header map.\n"
							},
							{
								"parameters": [
									{
										"type": "Field[]",
										"storageClass": [
											"in"
										],
										"name": "map"
									},
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "k",
										"name": "keysum"
									}
								],
								"line": 310,
								"kind": "function",
								"char": 20,
								"name": "getIndex",
								"type": "const ptrdiff_t(in Field[] map, string key, uint keysum)",
								"endchar": 2,
								"endline": 317
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "string",
										"name": "a"
									},
									{
										"type": "string",
										"name": "b"
									}
								],
								"line": 319,
								"kind": "function",
								"char": 22,
								"name": "matches",
								"type": "bool(string a, string b)",
								"endchar": 2,
								"endline": 323
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "string",
										"name": "s"
									}
								],
								"line": 327,
								"kind": "function",
								"char": 46,
								"name": "computeCheckSumI",
								"type": "@trusted uint(string s)",
								"endchar": 2,
								"endline": 337
							},
							{
								"parameters": [
									{
										"kind": "value",
										"deco": "b",
										"name": "CONST"
									}
								],
								"line": 339,
								"kind": "template",
								"char": 17,
								"members": [
									{
										"kind": "struct",
										"char": 17,
										"members": [
											{
												"kind": "alias",
												"type": "const(KeyValue)",
												"char": 4,
												"line": 342,
												"name": "KVT"
											},
											{
												"kind": "variable",
												"type": "const(DictionaryList)*",
												"char": 27,
												"line": 343,
												"name": "list"
											},
											{
												"kind": "variable",
												"type": "size_t",
												"char": 10,
												"line": 348,
												"name": "idx"
											},
											{
												"line": 350,
												"kind": "function",
												"char": 18,
												"name": "empty",
												"type": "const @property bool()",
												"endchar": 61,
												"endline": 350
											},
											{
												"line": 351,
												"kind": "function",
												"char": 21,
												"name": "front",
												"type": "@property ref KVT()",
												"endchar": 3,
												"endline": 355
											},
											{
												"line": 356,
												"kind": "function",
												"char": 8,
												"name": "popFront",
												"type": "void()",
												"endchar": 28,
												"endline": 356
											}
										],
										"line": 339,
										"name": "Rng"
									}
								],
								"name": "Rng"
							}
						],
						"line": 29,
						"name": "DictionaryList"
					}
				],
				"name": "DictionaryList",
				"comment": "\tBehaves similar to $(D VALUE[string]) but the insertion order is not changed\n\tand multiple values per key are supported.\n\n\tThis kind of map is used for MIME headers (e.g. for HTTP, see\n\tvibe.inet.message.InetHeaderMap), or for form data\n\t(vibe.inet.webform.FormFields). Note that the map can contain fields with\n\tthe same key multiple times if addField is used for insertion. Insertion\n\torder is preserved.\n\n\tNote that despite case not being relevant for matching keyse, iterating\n\tover the map will yield\tthe original case of the key that was put in.\n\n\tInsertion and lookup has O(n) complexity.\n"
			}
		],
		"comment": "\tDefines a string based multi-map with conserved insertion order.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.utils.dictionarylist"
	},
	{
		"kind": "module",
		"file": "utils/vibe/utils/hashmap.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Key"
					}
				],
				"line": 16,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 17,
								"kind": "variable",
								"char": 7,
								"name": "clearValue",
								"init": "Key.init"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "Key",
										"storageClass": [
											"in"
										],
										"name": "a"
									},
									{
										"type": "Key",
										"storageClass": [
											"in"
										],
										"name": "b"
									}
								],
								"line": 18,
								"kind": "function",
								"char": 14,
								"name": "equals",
								"type": "bool(in Key a, in Key b)",
								"endchar": 2,
								"endline": 26
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "Key",
										"storageClass": [
											"in",
											"ref"
										],
										"name": "k"
									}
								],
								"line": 27,
								"kind": "function",
								"char": 16,
								"name": "hashOf",
								"type": "@safe size_t(ref Key k)",
								"endchar": 2,
								"endline": 49
							}
						],
						"line": 16,
						"name": "DefaultHashMapTraits"
					}
				],
				"name": "DefaultHashMapTraits"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "TKey"
					},
					{
						"kind": "type",
						"name": "TValue"
					},
					{
						"kind": "type",
						"default": "DefaultHashMapTraits!TKey",
						"name": "Traits"
					},
					{
						"kind": "type",
						"default": "IAllocator",
						"name": "Allocator"
					}
				],
				"line": 77,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "TKey",
								"char": 2,
								"line": 83,
								"name": "Key"
							},
							{
								"kind": "alias",
								"type": "TValue",
								"char": 2,
								"line": 84,
								"name": "Value"
							},
							{
								"parameters": [
									{
										"type": "Allocator",
										"name": "a"
									}
								],
								"line": 86,
								"kind": "function",
								"char": 12,
								"name": "AW",
								"type": "Allocator(Allocator a)",
								"endchar": 40,
								"endline": 86
							},
							{
								"kind": "alias",
								"type": "AffixAllocator!(Allocator, int)",
								"char": 2,
								"line": 87,
								"name": "AllocatorType"
							},
							{
								"kind": "alias",
								"type": "typeof(AllocatorType.instance)",
								"char": 3,
								"line": 89,
								"name": "AllocatorInstanceType"
							},
							{
								"kind": "struct",
								"char": 2,
								"members": [
									{
										"line": 93,
										"kind": "variable",
										"char": 15,
										"name": "key",
										"init": "Traits.clearValue",
										"type": "UnConst!Key"
									},
									{
										"kind": "variable",
										"type": "Value",
										"char": 9,
										"line": 94,
										"name": "value"
									},
									{
										"parameters": [
											{
												"type": "Key",
												"storageClass": [
													"ref"
												],
												"name": "key"
											},
											{
												"type": "Value",
												"storageClass": [
													"ref"
												],
												"name": "value"
											}
										],
										"line": 96,
										"kind": "constructor",
										"char": 3,
										"name": "this",
										"type": "(ref Key key, ref Value value)",
										"endchar": 3,
										"endline": 101
									}
								],
								"line": 92,
								"name": "TableEntry"
							},
							{
								"kind": "variable",
								"type": "TableEntry[]",
								"char": 16,
								"line": 104,
								"name": "m_table"
							},
							{
								"kind": "variable",
								"type": "size_t",
								"char": 10,
								"line": 105,
								"name": "m_length"
							},
							{
								"kind": "variable",
								"type": "AllocatorInstanceType",
								"char": 26,
								"line": 107,
								"name": "m_allocator"
							},
							{
								"kind": "variable",
								"deco": "b",
								"char": 8,
								"line": 108,
								"name": "m_resizing"
							},
							{
								"parameters": [
									{
										"type": "Allocator",
										"name": "allocator"
									}
								],
								"line": 112,
								"kind": "constructor",
								"char": 3,
								"name": "this",
								"type": "(Allocator allocator)",
								"endchar": 3,
								"endline": 115
							},
							{
								"line": 118,
								"kind": "destructor",
								"char": 2,
								"name": "~this",
								"endchar": 2,
								"endline": 132
							},
							{
								"line": 142,
								"kind": "function",
								"char": 19,
								"name": "length",
								"type": "const @property size_t()",
								"endchar": 53,
								"endline": 142
							},
							{
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"line": 144,
								"kind": "function",
								"char": 7,
								"name": "remove",
								"type": "void(Key key)",
								"endchar": 2,
								"endline": 166
							},
							{
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									},
									{
										"type": "Value",
										"storageClass": [
											"lazy"
										],
										"default": "Value.init",
										"name": "default_value"
									}
								],
								"line": 168,
								"kind": "function",
								"char": 8,
								"name": "get",
								"type": "Value(Key key, lazy Value default_value = Value.init)",
								"endchar": 2,
								"endline": 173
							},
							{
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									},
									{
										"type": "Value",
										"default": "Value.init",
										"name": "default_value"
									}
								],
								"line": 176,
								"kind": "function",
								"char": 22,
								"name": "getNothrow",
								"type": "Value(Key key, Value default_value = Value.init)",
								"endchar": 2,
								"endline": 181,
								"comment": "Workaround #12647\n"
							},
							{
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									},
									{
										"type": "const(Value)",
										"storageClass": [
											"lazy"
										],
										"default": "Value.init",
										"name": "default_value"
									}
								],
								"line": 184,
								"kind": "function",
								"char": 16,
								"name": "get",
								"type": "const(Value)(Key key, lazy const(Value) default_value = Value.init)",
								"endchar": 3,
								"endline": 189
							},
							{
								"line": 192,
								"kind": "function",
								"char": 7,
								"name": "clear",
								"type": "void()",
								"endchar": 2,
								"endline": 200
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 202,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"name": "value"
											},
											{
												"type": "Key",
												"name": "key"
											}
										],
										"line": 202,
										"kind": "function",
										"char": 7,
										"name": "opIndexAssign",
										"type": "void(T value, Key key)",
										"endchar": 2,
										"endline": 212
									}
								],
								"name": "opIndexAssign"
							},
							{
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"line": 214,
								"kind": "function",
								"char": 19,
								"name": "opIndex",
								"type": "inout ref inout(Value)(Key key)",
								"endchar": 2,
								"endline": 219
							},
							{
								"constraint": "op == \"in\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 221,
								"kind": "template",
								"char": 16,
								"members": [
									{
										"parameters": [
											{
												"type": "Key",
												"name": "key"
											}
										],
										"line": 221,
										"kind": "function",
										"char": 16,
										"name": "opBinaryRight",
										"type": "inout inout(Value)*(Key key)",
										"endchar": 2,
										"endline": 226
									}
								],
								"name": "opBinaryRight"
							},
							{
								"constraint": "isOpApplyDg!(DG, Key, Value)",
								"parameters": [
									{
										"kind": "type",
										"name": "DG"
									}
								],
								"line": 228,
								"kind": "template",
								"char": 6,
								"members": [
									{
										"parameters": [
											{
												"type": "DG",
												"storageClass": [
													"scope"
												],
												"name": "del"
											}
										],
										"line": 228,
										"kind": "function",
										"char": 6,
										"name": "opApply",
										"type": "int(scope DG del)",
										"endchar": 2,
										"endline": 243
									}
								],
								"name": "opApply"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 245,
								"kind": "function",
								"char": 7,
								"name": "byKey",
								"type": "()",
								"endchar": 49,
								"endline": 245
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 246,
								"kind": "function",
								"char": 7,
								"name": "byKey",
								"type": "const ()",
								"endchar": 55,
								"endline": 246
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 247,
								"kind": "function",
								"char": 7,
								"name": "byValue",
								"type": "()",
								"endchar": 53,
								"endline": 247
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 248,
								"kind": "function",
								"char": 7,
								"name": "byValue",
								"type": "const ()",
								"endchar": 59,
								"endline": 248
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 249,
								"kind": "function",
								"char": 7,
								"name": "byKeyValue",
								"type": "()",
								"endchar": 128,
								"endline": 249
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 250,
								"kind": "function",
								"char": 7,
								"name": "byKeyValue",
								"type": "const ()",
								"endchar": 148,
								"endline": 250
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 252,
								"kind": "function",
								"char": 15,
								"name": "bySlot",
								"type": "()",
								"endchar": 99,
								"endline": 252
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 253,
								"kind": "function",
								"char": 15,
								"name": "bySlot",
								"type": "const ()",
								"endchar": 105,
								"endline": 253
							},
							{
								"line": 255,
								"kind": "function",
								"char": 42,
								"name": "allocator",
								"type": "@property AllocatorInstanceType()",
								"endchar": 2,
								"endline": 268
							},
							{
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"line": 270,
								"kind": "function",
								"char": 17,
								"name": "findIndex",
								"type": "const size_t(Key key)",
								"endchar": 2,
								"endline": 281
							},
							{
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"line": 283,
								"kind": "function",
								"char": 17,
								"name": "findInsertIndex",
								"type": "const size_t(Key key)",
								"endchar": 2,
								"endline": 293
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "amount"
									}
								],
								"line": 295,
								"kind": "function",
								"char": 15,
								"name": "grow",
								"type": "@trusted void(size_t amount)",
								"endchar": 2,
								"endline": 320
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "new_size"
									}
								],
								"line": 322,
								"kind": "function",
								"char": 15,
								"name": "resize",
								"type": "@trusted void(size_t new_size)",
								"endchar": 2,
								"endline": 359
							}
						],
						"line": 77,
						"name": "HashMap"
					}
				],
				"name": "HashMap"
			}
		],
		"comment": "\tInternal hash map implementation.\n\n\tCopyright: © 2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.utils.hashmap"
	},
	{
		"kind": "module",
		"file": "utils/vibe/utils/memory.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 14,
				"name": "vibe.internal.memory_legacy"
			}
		],
		"comment": "\tUtility functions for memory management\n\n\tNote that this module currently is a big sand box for testing allocation related stuff.\n\tNothing here, including the interfaces, is final but rather a lot of experimentation.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.utils.memory"
	},
	{
		"kind": "module",
		"file": "utils/vibe/utils/string.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "std.string"
			},
			{
				"parameters": [
					{
						"deco": "xAh",
						"name": "str"
					}
				],
				"line": 28,
				"kind": "function",
				"originalType": "pure @safe string(in ubyte[] str)",
				"char": 8,
				"name": "sanitizeUTF8",
				"deco": "FNaNfxAhZAya",
				"endchar": 1,
				"endline": 46,
				"comment": "\tTakes a string with possibly invalid UTF8 sequences and outputs a valid UTF8 string as near to\n\tthe original as possible.\n"
			},
			{
				"parameters": [
					{
						"deco": "ANga",
						"name": "str"
					}
				],
				"line": 52,
				"kind": "function",
				"char": 15,
				"name": "stripUTF8Bom",
				"deco": "FNaNbNfANgaZQf",
				"endchar": 1,
				"endline": 57,
				"comment": "\tStrips the byte order mark of an UTF8 encoded string.\n\tThis is useful when the string is coming from a file.\n"
			},
			{
				"parameters": [
					{
						"deco": "Axa",
						"name": "str"
					},
					{
						"deco": "Axa",
						"name": "chars"
					}
				],
				"line": 63,
				"kind": "function",
				"char": 6,
				"name": "allOf",
				"deco": "FNaNfAxaQdZb",
				"endchar": 1,
				"endline": 69,
				"comment": "\tChecks if all characters in 'str' are contained in 'chars'.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"line": 72,
				"kind": "template",
				"char": 11,
				"members": [
					{
						"parameters": [
							{
								"type": "Char[]",
								"storageClass": [
									"in"
								],
								"name": "s"
							},
							{
								"deco": "w",
								"name": "c"
							},
							{
								"type": "CaseSensitive",
								"default": "CaseSensitive.yes",
								"name": "cs"
							}
						],
						"line": 72,
						"kind": "function",
						"char": 11,
						"name": "indexOfCT",
						"type": "pure @safe ptrdiff_t(in Char[] s, dchar c, CaseSensitive cs = CaseSensitive.yes)",
						"endchar": 1,
						"endline": 87
					}
				],
				"name": "indexOfCT"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"line": 90,
				"kind": "template",
				"char": 11,
				"members": [
					{
						"parameters": [
							{
								"type": "Char[]",
								"storageClass": [
									"in"
								],
								"name": "s"
							},
							{
								"type": "Char[]",
								"storageClass": [
									"in"
								],
								"name": "needle"
							}
						],
						"line": 90,
						"kind": "function",
						"char": 11,
						"name": "indexOfCT",
						"type": "ptrdiff_t(in Char[] s, in Char[] needle)",
						"endchar": 1,
						"endline": 99
					}
				],
				"name": "indexOfCT"
			},
			{
				"parameters": [
					{
						"deco": "Axa",
						"name": "str"
					},
					{
						"deco": "Axa",
						"name": "chars"
					}
				],
				"line": 104,
				"kind": "function",
				"char": 6,
				"name": "anyOf",
				"deco": "FNaNfAxaQdZb",
				"endchar": 1,
				"endline": 110,
				"comment": "\tChecks if any character in 'str' is contained in 'chars'.\n"
			},
			{
				"parameters": [
					{
						"deco": "ANga",
						"name": "s"
					}
				],
				"line": 114,
				"kind": "function",
				"char": 15,
				"name": "stripLeftA",
				"deco": "FNaNbNfANgaZQf",
				"endchar": 1,
				"endline": 119,
				"comment": "ASCII whitespace trimming (space and tab)\n"
			},
			{
				"parameters": [
					{
						"deco": "ANga",
						"name": "s"
					}
				],
				"line": 122,
				"kind": "function",
				"char": 15,
				"name": "stripRightA",
				"deco": "FNaNbNfANgaZQf",
				"endchar": 1,
				"endline": 127,
				"comment": "ASCII whitespace trimming (space and tab)\n"
			},
			{
				"parameters": [
					{
						"deco": "ANga",
						"name": "s"
					}
				],
				"line": 130,
				"kind": "function",
				"char": 15,
				"name": "stripA",
				"deco": "FNaNbNfANgaZQf",
				"endchar": 1,
				"endline": 133,
				"comment": "ASCII whitespace trimming (space and tab)\n"
			},
			{
				"parameters": [
					{
						"deco": "Axa",
						"name": "str"
					},
					{
						"deco": "Axa",
						"name": "chars"
					}
				],
				"line": 136,
				"kind": "function",
				"originalType": "pure @safe sizediff_t(const(char)[] str, const(char)[] chars)",
				"char": 12,
				"name": "indexOfAny",
				"deco": "FNaNfAxaQdZl",
				"endchar": 1,
				"endline": 142,
				"comment": "Finds the first occurence of any of the characters in `chars`\n"
			},
			{
				"kind": "alias",
				"char": 1,
				"line": 143,
				"name": "countUntilAny"
			},
			{
				"parameters": [
					{
						"deco": "Axa",
						"name": "str"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "nested"
					}
				],
				"line": 155,
				"kind": "function",
				"originalType": "pure nothrow @safe sizediff_t(const(char)[] str, bool nested = true)",
				"char": 12,
				"name": "matchBracket",
				"deco": "FNaNbNfAxabZl",
				"endchar": 1,
				"endline": 175,
				"comment": "\tFinds the closing bracket (works with any of '[', '$(LPAREN)', '<', '{').\n\n\tParams:\n\t\tstr = input string\n\t\tnested = whether to skip nested brackets\n\tReturns:\n\t\tThe index of the closing bracket or -1 for unbalanced strings\n\t\tand strings that don't start with a bracket.\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"line": 192,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "IAllocator",
								"name": "alloc"
							},
							{
								"type": "string",
								"name": "fmt"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"line": 192,
						"kind": "function",
						"char": 8,
						"name": "formatAlloc",
						"type": "string(IAllocator alloc, string fmt, ARGS args)",
						"endchar": 1,
						"endline": 197
					}
				],
				"name": "formatAlloc",
				"comment": "Same as std.string.format, just using an allocator.\n"
			},
			{
				"parameters": [
					{
						"deco": "Axa",
						"name": "a"
					},
					{
						"deco": "Axa",
						"name": "b"
					}
				],
				"line": 200,
				"kind": "function",
				"char": 5,
				"name": "icmp2",
				"deco": "FNaNfAxaQdZi",
				"endchar": 1,
				"endline": 238,
				"comment": "Special version of icmp() with optimization for ASCII characters\n"
			}
		],
		"comment": "\tUtility functions for string processing\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.utils.string"
	},
	{
		"kind": "module",
		"file": "utils/vibe/utils/validation.d",
		"members": [
			{
				"parameters": [],
				"line": 36,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "size_t",
								"default": "64",
								"name": "max_length"
							}
						],
						"line": 36,
						"kind": "function",
						"char": 8,
						"name": "validateEmail",
						"type": "string(string str, size_t max_length = 64)",
						"endchar": 1,
						"endline": 41
					}
				],
				"name": "validateEmail",
				"comment": " Provides a simple email address validation.\n\n\tNote that the validation could be stricter in some cases than required. The user name\n\tis forced to be ASCII, which is not strictly required as of RFC 6531. It also does not\n\tallow quotiations for the user name part (RFC 5321).\n\n\tInvalid email adresses will cause an exception with the error description to be thrown.\n"
			},
			{
				"constraint": "isOutputRange!(R, char)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 43,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "error_sink"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "size_t",
								"default": "64",
								"name": "max_length"
							}
						],
						"line": 43,
						"kind": "function",
						"char": 6,
						"name": "validateEmail",
						"type": "bool(ref R error_sink, string str, size_t max_length = 64)",
						"endchar": 1,
						"endline": 76
					}
				],
				"name": "validateEmail",
				"comment": "ditto\n"
			},
			{
				"parameters": [],
				"line": 91,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"deco": "i",
								"default": "3",
								"name": "min_length"
							},
							{
								"deco": "i",
								"default": "32",
								"name": "max_length"
							},
							{
								"type": "string",
								"default": "\"-_\"",
								"name": "additional_chars"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "no_number_start"
							}
						],
						"line": 91,
						"kind": "function",
						"char": 8,
						"name": "validateUserName",
						"type": "string(string str, int min_length = 3, int max_length = 32, string additional_chars = \"-_\", bool no_number_start = true)",
						"endchar": 1,
						"endline": 96
					}
				],
				"name": "validateUserName",
				"comment": " Validates a user name string.\n\n\tUser names may only contain ASCII letters and digits or any of the specified additional\n\tletters.\n\n\tInvalid user names will cause an exception with the error description to be thrown.\n"
			},
			{
				"constraint": "isOutputRange!(R, char)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 98,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "error_sink"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"deco": "i",
								"default": "3",
								"name": "min_length"
							},
							{
								"deco": "i",
								"default": "32",
								"name": "max_length"
							},
							{
								"type": "string",
								"default": "\"-_\"",
								"name": "additional_chars"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "no_number_start"
							}
						],
						"line": 98,
						"kind": "function",
						"char": 6,
						"name": "validateUserName",
						"type": "bool(ref R error_sink, string str, int min_length = 3, int max_length = 32, string additional_chars = \"-_\", bool no_number_start = true)",
						"endchar": 1,
						"endline": 116
					}
				],
				"name": "validateUserName",
				"comment": "ditto\n"
			},
			{
				"parameters": [],
				"line": 125,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "string",
								"default": "\"_\"",
								"name": "additional_chars"
							},
							{
								"type": "string",
								"default": "\"An identifier\"",
								"name": "entity_name"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "no_number_start"
							}
						],
						"line": 125,
						"kind": "function",
						"char": 8,
						"name": "validateIdent",
						"type": "string(string str, string additional_chars = \"_\", string entity_name = \"An identifier\", bool no_number_start = true)",
						"endchar": 1,
						"endline": 130
					}
				],
				"name": "validateIdent",
				"comment": " Validates an identifier string as used in most programming languages.\n\n\tThe identifier must begin with a letter or with any of the additional_chars and may\n\tcontain only ASCII letters and digits and any of the additional_chars.\n\n\tInvalid identifiers will cause an exception with the error description to be thrown.\n"
			},
			{
				"constraint": "isOutputRange!(R, char)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 132,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "error_sink"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "string",
								"default": "\"_\"",
								"name": "additional_chars"
							},
							{
								"type": "string",
								"default": "\"An identifier\"",
								"name": "entity_name"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "no_number_start"
							}
						],
						"line": 132,
						"kind": "function",
						"char": 6,
						"name": "validateIdent",
						"type": "bool(ref R error_sink, string str, string additional_chars = \"_\", string entity_name = \"An identifier\", bool no_number_start = true)",
						"endchar": 1,
						"endline": 152
					}
				],
				"name": "validateIdent",
				"comment": "ditto\n"
			},
			{
				"parameters": [],
				"line": 156,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "string",
								"name": "str_confirm"
							},
							{
								"type": "size_t",
								"default": "8",
								"name": "min_length"
							},
							{
								"type": "size_t",
								"default": "64",
								"name": "max_length"
							}
						],
						"line": 156,
						"kind": "function",
						"char": 8,
						"name": "validatePassword",
						"type": "string(string str, string str_confirm, size_t min_length = 8, size_t max_length = 64)",
						"endchar": 1,
						"endline": 161
					}
				],
				"name": "validatePassword",
				"comment": " Checks a password for minimum complexity requirements\n"
			},
			{
				"constraint": "isOutputRange!(R, char)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 163,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "error_sink"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "string",
								"name": "str_confirm"
							},
							{
								"type": "size_t",
								"default": "8",
								"name": "min_length"
							},
							{
								"type": "size_t",
								"default": "64",
								"name": "max_length"
							}
						],
						"line": 163,
						"kind": "function",
						"char": 6,
						"name": "validatePassword",
						"type": "bool(ref R error_sink, string str, string str_confirm, size_t min_length = 8, size_t max_length = 64)",
						"endchar": 1,
						"endline": 183
					}
				],
				"name": "validatePassword",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "m",
						"default": "0LU",
						"name": "min_length"
					},
					{
						"deco": "m",
						"default": "0LU",
						"name": "max_length"
					},
					{
						"deco": "Aya",
						"default": "\"String\"",
						"name": "entity_name"
					}
				],
				"line": 187,
				"kind": "function",
				"originalType": "@safe string(string str, size_t min_length = 0, size_t max_length = 0, string entity_name = \"String\")",
				"char": 8,
				"name": "validateString",
				"deco": "FNfAyammQfZQi",
				"endchar": 1,
				"endline": 192,
				"comment": " Checks if a string falls within the specified length range.\n"
			},
			{
				"constraint": "isOutputRange!(R, char)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 194,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "error_sink"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "size_t",
								"default": "0",
								"name": "min_length"
							},
							{
								"type": "size_t",
								"default": "0",
								"name": "max_length"
							},
							{
								"type": "string",
								"default": "\"String\"",
								"name": "entity_name"
							}
						],
						"line": 194,
						"kind": "function",
						"char": 6,
						"name": "validateString",
						"type": "bool(ref R error_sink, string str, size_t min_length = 0, size_t max_length = 0, string entity_name = \"String\")",
						"endchar": 1,
						"endline": 215
					}
				],
				"name": "validateString",
				"comment": "ditto\n"
			}
		],
		"comment": "\tString input validation routines\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.utils.validation"
	},
	{
		"kind": "module",
		"file": "crypto/vibe/crypto/cryptorand.d",
		"members": [
			{
				"line": 21,
				"kind": "function",
				"char": 20,
				"name": "secureRNG",
				"deco": "FNfZC4vibe6crypto10cryptorand18RandomNumberStream",
				"endchar": 1,
				"endline": 26,
				"comment": " Creates a cryptographically secure random number generator.\n\n\tNote that the returned RNG will operate in a non-blocking mode, which means\n\tthat if no sufficient entropy has been generated, new random numbers will be\n\tgenerated from previous state.\n"
			},
			{
				"line": 32,
				"kind": "interface",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract",
							"override"
						],
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 45,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 18,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"comment": "\t\tFills the buffer new random numbers.\n\n\t\tParams:\n\t\t\tdst = The buffer that will be filled with random numbers.\n\t\t\t\tIt will contain buffer.length random ubytes.\n\t\t\t\tSupportes both heap-based and stack-based arrays.\n\t\t\tmode = The desired waiting mode for IO operations.\n\n\t\tThrows:\n\t\t\tCryptoException on error.\n"
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 47,
						"name": "read"
					}
				],
				"name": "RandomNumberStream",
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"comment": "\tBase interface for all cryptographically secure RNGs.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 51,
				"kind": "variable",
				"char": 12,
				"name": "LinuxMaybeHasGetrandom",
				"deco": "b",
				"init": "true"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 51,
				"kind": "variable",
				"char": 12,
				"name": "LinuxMaybeHasGetrandom",
				"deco": "b",
				"init": "true"
			},
			{
				"parameters": [
					{
						"type": "void*",
						"storageClass": [
							"scope"
						],
						"name": "buf"
					},
					{
						"type": "size_t",
						"name": "nbytes"
					}
				],
				"line": 105,
				"kind": "function",
				"char": 7,
				"name": "arc4random_buf",
				"type": "extern (C) void(scope void* buf, size_t nbytes)"
			},
			{
				"line": 125,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"kind": "variable",
						"type": "HCRYPTPROV",
						"char": 22,
						"line": 132,
						"name": "hCryptProv"
					},
					{
						"line": 154,
						"kind": "constructor",
						"originalType": "@trusted ()",
						"char": 2,
						"name": "this",
						"deco": "FNeZC4vibe6crypto10cryptorand9SystemRNG",
						"endchar": 2,
						"endline": 190,
						"comment": "\t\tCreates new system random generator\n"
					},
					{
						"line": 192,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNeZv",
						"endchar": 2,
						"endline": 210
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 212,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 41,
						"endline": 212
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 213,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 50,
						"endline": 213
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 214,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 55,
						"endline": 214
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 215,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 39,
						"endline": 215
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "buffer"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.crypto.cryptorand.RandomNumberStream.read"
						],
						"line": 217,
						"kind": "function",
						"originalType": "@trusted size_t(scope ubyte[] buffer, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNeMAhE9eventcore6driver6IOModeZm",
						"in": {
							"parameters": [
								{
									"type": "ubyte[]",
									"storageClass": [
										"scope",
										"ref"
									],
									"name": "buffer"
								},
								{
									"type": "IOMode",
									"storageClass": [
										"ref"
									],
									"name": "mode"
								}
							],
							"line": 219,
							"kind": "function",
							"char": 2,
							"name": "__require",
							"type": "@trusted void(ref scope ubyte[] buffer, ref IOMode mode)",
							"endchar": 2,
							"endline": 219
						},
						"endchar": 2,
						"endline": 273
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 275,
						"name": "read"
					}
				],
				"name": "SystemRNG",
				"interfaces": [
					"vibe.crypto.cryptorand.RandomNumberStream"
				],
				"comment": "\tOperating system specific cryptography secure random number generator.\n\n\tIt uses the \"CryptGenRandom\" function for Windows; the \"arc4random_buf\"\n\tfunction (not based on RC4 but on a modern and cryptographically secure\n\tcipher) for macOS/OpenBSD/NetBSD; the \"getrandom\" syscall for Linux 3.17\n\tand later; and \"/dev/urandom\" for other Posix platforms.\n\tIt's recommended to combine the output use additional processing generated random numbers\n\tvia provided functions for systems where security matters.\n\n\tRemarks:\n\t\tWindows \"CryptGenRandom\" RNG has known security vulnerabilities on\n\t\tWindows 2000 and Windows XP (assuming the attacker has control of the\n\t\tmachine). Fixed for Windows XP Service Pack 3 and Windows Vista.\n\n\tSee_Also: $(LINK http://en.wikipedia.org/wiki/CryptGenRandom)\n"
			},
			{
				"constraint": "isDigest!Hash",
				"parameters": [
					{
						"kind": "type",
						"name": "Hash"
					},
					{
						"kind": "value",
						"deco": "k",
						"name": "factor"
					}
				],
				"line": 378,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"kind": "class",
						"char": 7,
						"members": [
							{
								"kind": "variable",
								"type": "SystemRNG",
								"char": 12,
								"line": 384,
								"name": "rng"
							},
							{
								"line": 389,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "()",
								"endchar": 2,
								"endline": 393,
								"comment": "\t\tCreates new hash-based mixer random generator.\n"
							},
							{
								"line": 395,
								"kind": "function",
								"char": 17,
								"name": "empty",
								"type": "@property bool()",
								"endchar": 41,
								"endline": 395
							},
							{
								"line": 396,
								"kind": "function",
								"char": 18,
								"name": "leastSize",
								"type": "@property ulong()",
								"endchar": 50,
								"endline": 396
							},
							{
								"line": 397,
								"kind": "function",
								"char": 17,
								"name": "dataAvailableForRead",
								"type": "@property bool()",
								"endchar": 55,
								"endline": 397
							},
							{
								"line": 398,
								"kind": "function",
								"char": 17,
								"name": "peek",
								"type": "const(ubyte)[]()",
								"endchar": 39,
								"endline": 398
							},
							{
								"parameters": [
									{
										"type": "ubyte[]",
										"storageClass": [
											"scope"
										],
										"name": "buffer"
									},
									{
										"type": "IOMode",
										"name": "mode"
									}
								],
								"line": 400,
								"kind": "function",
								"char": 9,
								"name": "read",
								"type": "size_t(scope ubyte[] buffer, IOMode mode)",
								"endchar": 2,
								"endline": 439
							},
							{
								"kind": "alias",
								"type": "RandomNumberStream.read",
								"char": 2,
								"line": 441,
								"name": "read"
							}
						],
						"line": 378,
						"name": "HashMixerRNG"
					}
				],
				"name": "HashMixerRNG",
				"comment": "\tHash-based cryptographically secure random number mixer.\n\n\tThis RNG uses a hash function to mix a specific amount of random bytes from the input RNG.\n\tUse only cryptographically secure hash functions like SHA-512, Whirlpool or SHA-256, but not MD5.\n\n\tParams:\n\t\tHash: The hash function used, for example SHA1\n\t\tfactor: Determines how many times the hash digest length of input data\n\t\t\tis used as input to the hash function. Increase factor value if you\n\t\t\tneed more security because it increases entropy level or decrease\n\t\t\tthe factor value if you need more speed.\n\n"
			},
			{
				"kind": "alias",
				"line": 445,
				"char": 1,
				"deco": "C4vibe6crypto10cryptorand__T12HashMixerRNGTS3std6digest3sha__T3SHAVki512Vki160ZQrVki5ZQCg",
				"comment": "A SHA-1 based mixing RNG. Alias for HashMixerRNG!(SHA1, 5).\n",
				"name": "SHA1HashMixerRNG"
			},
			{
				"line": 590,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 592,
						"kind": "constructor",
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 2,
						"name": "this",
						"deco": "FNaNbNfAyaQdmC6object9ThrowableZC4vibe6crypto10cryptorand15CryptoException",
						"endchar": 2,
						"endline": 595
					}
				],
				"name": "CryptoException",
				"comment": "\tThrown when an error occurs during random number generation.\n"
			},
			{
				"kind": "alias",
				"type": "size_t",
				"char": 3,
				"line": 605,
				"name": "HCRYPTPROV"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 607,
				"kind": "variable",
				"char": 16,
				"name": "NULL",
				"init": "cast(LPCTSTR)0",
				"type": "LPCTSTR"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 608,
				"kind": "variable",
				"char": 14,
				"name": "PROV_RSA_FULL",
				"init": "1",
				"type": "DWORD"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 609,
				"kind": "variable",
				"char": 14,
				"name": "CRYPT_VERIFYCONTEXT",
				"init": "4026531840u",
				"type": "DWORD"
			},
			{
				"parameters": [
					{
						"type": "HCRYPTPROV*",
						"name": "phProv"
					},
					{
						"type": "LPCTSTR",
						"name": "pszContainer"
					},
					{
						"type": "LPCTSTR",
						"name": "pszProvider"
					},
					{
						"type": "DWORD",
						"name": "dwProvType"
					},
					{
						"type": "DWORD",
						"name": "dwFlags"
					}
				],
				"line": 611,
				"kind": "function",
				"char": 8,
				"name": "CryptAcquireContextA",
				"type": "extern (Windows) BOOL(HCRYPTPROV* phProv, LPCTSTR pszContainer, LPCTSTR pszProvider, DWORD dwProvType, DWORD dwFlags)"
			},
			{
				"kind": "alias",
				"type": "CryptAcquireContextA",
				"char": 3,
				"line": 612,
				"name": "CryptAcquireContext"
			},
			{
				"parameters": [
					{
						"type": "HCRYPTPROV",
						"name": "hProv"
					},
					{
						"type": "DWORD",
						"name": "dwFlags"
					}
				],
				"line": 614,
				"kind": "function",
				"char": 8,
				"name": "CryptReleaseContext",
				"type": "extern (Windows) BOOL(HCRYPTPROV hProv, DWORD dwFlags)"
			},
			{
				"parameters": [
					{
						"type": "HCRYPTPROV",
						"name": "hProv"
					},
					{
						"type": "DWORD",
						"name": "dwLen"
					},
					{
						"type": "BYTE*",
						"name": "pbBuffer"
					}
				],
				"line": 616,
				"kind": "function",
				"char": 8,
				"name": "CryptGenRandom",
				"type": "extern (Windows) BOOL(HCRYPTPROV hProv, DWORD dwLen, BYTE* pbBuffer)"
			}
		],
		"comment": "\tImplements cryptographically secure random number generators.\n\n\tCopyright: © 2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Ilya Shipunov\n",
		"name": "vibe.crypto.cryptorand"
	},
	{
		"kind": "module",
		"file": "crypto/vibe/crypto/passwordhash.d",
		"members": [
			{
				"storageClass": [
					"deprecated"
				],
				"parameters": [
					{
						"deco": "Aya",
						"name": "password"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "additional_salt"
					}
				],
				"line": 38,
				"kind": "function",
				"char": 8,
				"name": "generateSimplePasswordHash",
				"deco": "FAyaQdZQg",
				"endchar": 1,
				"endline": 44,
				"comment": "\tGenerates a password hash using MD5 together with a 32-bit salt.\n\n\tParams:\n\t\tpassword = The password for which a one-way hash is to be computed\n\t\tadditional_salt = An optional string that is used to compute the final\n\t\t\thash. The same string must be given to testSimplePassword to\n\t\t\tverify a password later. If this string is kept secret, it can\n\t\t\tenhance the security of this function.\n\n\tReturns:\n\t\tA base64 encoded string containing the salt and the hash value is returned.\n\n\tRemarks:\n\t\tMD5 is not considered safe and is computationally cheap. Although the\n\t\tuse of salt helps a bit, using this function is discouraged for systems\n\t\twhere security matters.\n\n\tSee_Also:\n\t\ttestSimplePasswordHash, vibe.crypto.md5\n"
			},
			{
				"storageClass": [
					"deprecated"
				],
				"parameters": [
					{
						"deco": "Aya",
						"name": "hashstring"
					},
					{
						"deco": "Aya",
						"name": "password"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "additional_salt"
					}
				],
				"line": 63,
				"kind": "function",
				"char": 6,
				"name": "testSimplePasswordHash",
				"deco": "FAyaQdQfZb",
				"endchar": 1,
				"endline": 72,
				"comment": "\tTests a password hash generated using generateSimplePasswordHash.\n\n\tParams:\n\t\thashstring = The string that was returned by a call to\n\t\t\tgenerateSimplePasswordHash\n\t\tpassword = Password string to test against the hash\n\t\tadditional_salt = The same optional salt that was given to the original\n\t\t\tcall to generateSimplePasswordHash\n\n\tReturns:\n\t\tReturns true if the password matches the specified hash.\n\n\tSee_Also:\n\t\tgenerateSimplePasswordHash, vibe.crypto.md5\n"
			}
		],
		"comment": "\tPassword hashing routines\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.crypto.passwordhash"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/auth/basic_auth.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "realm"
					},
					{
						"deco": "DFNfAyaQdZb",
						"name": "pwcheck"
					}
				],
				"line": 23,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegateS(string realm, PasswordVerifyCallback pwcheck)",
				"char": 28,
				"name": "performBasicAuth",
				"deco": "FNfAyaDFNfQhQjZbZDFNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 35,
				"comment": "\tReturns a request handler that enforces request to be authenticated using HTTP Basic Auth.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "realm"
					},
					{
						"deco": "DFAyaQdZb",
						"name": "pwcheck"
					}
				],
				"line": 37,
				"kind": "function",
				"originalType": "@system HTTPServerRequestDelegateS(string realm, bool delegate(string, string) @system pwcheck)",
				"char": 28,
				"name": "performBasicAuth",
				"deco": "FAyaDFQfQhZbZDFNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 40,
				"comment": "Scheduled for deprecation - use a `@safe` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					},
					{
						"deco": "Aya",
						"name": "realm"
					},
					{
						"deco": "DFNfAyaQdZb",
						"storageClass": [
							"scope"
						],
						"name": "pwcheck"
					}
				],
				"line": 56,
				"kind": "function",
				"originalType": "@safe string(scope HTTPServerRequest req, scope HTTPServerResponse res, string realm, scope PasswordVerifyCallback pwcheck)",
				"char": 8,
				"name": "performBasicAuth",
				"deco": "FNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseAyaMDFNfQiQkZbZQp",
				"endchar": 1,
				"endline": 63,
				"comment": "\tEnforces HTTP Basic Auth authentication on the given req/res pair.\n\n\tParams:\n\t\treq = Request object that is to be checked\n\t\tres = Response object that will be used for authentication errors\n\t\trealm = HTTP Basic Auth realm reported to the client\n\t\tpwcheck = A delegate queried for validating user/password pairs\n\n\tReturns: Returns the name of the authenticated user.\n\n\tThrows: Throws a HTTPStatusExeption in case of an authentication failure.\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					},
					{
						"deco": "Aya",
						"name": "realm"
					},
					{
						"deco": "DFAyaQdZb",
						"storageClass": [
							"scope"
						],
						"name": "pwcheck"
					}
				],
				"line": 65,
				"kind": "function",
				"char": 8,
				"name": "performBasicAuth",
				"deco": "FMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseAyaMDFQgQiZbZQn",
				"endchar": 1,
				"endline": 68,
				"comment": "Scheduled for deprecation - use a `@safe` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "DFNfAyaQdZb",
						"storageClass": [
							"scope"
						],
						"name": "pwcheck"
					}
				],
				"line": 88,
				"kind": "function",
				"originalType": "@safe bool(scope HTTPServerRequest req, scope PasswordVerifyCallback pwcheck)",
				"char": 6,
				"name": "checkBasicAuth",
				"deco": "FNfMC4vibe4http6server17HTTPServerRequestMDFNfAyaQdZbZb",
				"endchar": 1,
				"endline": 106,
				"comment": "\tChecks for valid HTTP Basic Auth authentication on the given request.\n\n\tUpon successful authorization, the name of the authorized user will\n\tbe stored in `req.username`.\n\n\tParams:\n\t\treq = Request object that is to be checked\n\t\tpwcheck = A delegate queried for validating user/password pairs\n\n\tReturns: Returns `true` $(I iff) a valid Basic Auth header is present\n\t\tand the credentials were verified successfully by the validation\n\t\tcallback.\n\n\tThrows: Throws a `HTTPStatusExeption` with `HTTPStatusCode.badRequest`\n\t\tif the \"Authorization\" header is malformed.\n"
			},
			{
				"kind": "alias",
				"char": 1,
				"line": 110,
				"name": "addBasicAuth"
			},
			{
				"kind": "alias",
				"deco": "DFNfAyaQdZb",
				"char": 1,
				"line": 112,
				"name": "PasswordVerifyCallback"
			}
		],
		"comment": "\tImplements HTTP Basic Auth.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.http.auth.basic_auth"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/auth/digest_auth.d",
		"members": [
			{
				"line": 25,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 19,
						"value": "0",
						"line": 25,
						"name": "Valid"
					},
					{
						"kind": "enum member",
						"char": 26,
						"value": "1",
						"line": 25,
						"name": "Expired"
					},
					{
						"kind": "enum member",
						"char": 35,
						"value": "2",
						"line": 25,
						"name": "Invalid"
					}
				],
				"name": "NonceState",
				"baseDeco": "i"
			},
			{
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 31,
						"kind": "variable",
						"char": 9,
						"name": "realm",
						"deco": "Aya",
						"offset": 16
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 32,
						"kind": "variable",
						"char": 10,
						"name": "secret",
						"deco": "Ah",
						"offset": 32
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 33,
						"kind": "variable",
						"char": 8,
						"name": "timeout",
						"deco": "m",
						"offset": 48
					},
					{
						"line": 35,
						"kind": "constructor",
						"originalType": "@safe ()",
						"char": 2,
						"name": "this",
						"deco": "FNfZC4vibe4http4auth11digest_auth14DigestAuthInfo",
						"endchar": 2,
						"endline": 39
					},
					{
						"parameters": [
							{
								"deco": "xC4vibe4http6server17HTTPServerRequest",
								"name": "req"
							}
						],
						"line": 41,
						"kind": "function",
						"originalType": "@safe string(in HTTPServerRequest req)",
						"char": 9,
						"name": "createNonce",
						"deco": "FNfxC4vibe4http6server17HTTPServerRequestZAya",
						"endchar": 2,
						"endline": 50
					},
					{
						"parameters": [
							{
								"deco": "xAya",
								"name": "nonce"
							},
							{
								"deco": "xC4vibe4http6server17HTTPServerRequest",
								"name": "req"
							}
						],
						"line": 52,
						"kind": "function",
						"originalType": "@safe NonceState(in string nonce, in HTTPServerRequest req)",
						"char": 13,
						"name": "checkNonce",
						"deco": "FNfxAyaxC4vibe4http6server17HTTPServerRequestZEQBmQBk4auth11digest_auth10NonceState",
						"endchar": 2,
						"endline": 66
					}
				],
				"line": 27,
				"name": "DigestAuthInfo"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http4auth11digest_auth14DigestAuthInfo",
						"name": "info"
					},
					{
						"deco": "DFNfAyaQdZQg",
						"storageClass": [
							"scope"
						],
						"name": "pwhash"
					}
				],
				"line": 113,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegate(DigestAuthInfo info, scope DigestHashCallback pwhash)",
				"char": 27,
				"name": "performDigestAuth",
				"deco": "FNfC4vibe4http4auth11digest_auth14DigestAuthInfoMDFNfAyaQdZQgZDFNfCQClQCj6server17HTTPServerRequestCQDsQDqQBh18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 131,
				"comment": "\tReturns a request handler that enforces request to be authenticated using HTTP Digest Auth.\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http4auth11digest_auth14DigestAuthInfo",
						"name": "info"
					},
					{
						"deco": "DFAyaQdZQg",
						"storageClass": [
							"scope"
						],
						"name": "pwhash"
					}
				],
				"line": 133,
				"kind": "function",
				"originalType": "@system HTTPServerRequestDelegate(DigestAuthInfo info, scope string delegate(string, string) @system pwhash)",
				"char": 27,
				"name": "performDigestAuth",
				"deco": "FC4vibe4http4auth11digest_auth14DigestAuthInfoMDFAyaQdZQgZDFNfCQCjQCh6server17HTTPServerRequestCQDqQDoQBh18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 136,
				"comment": "Scheduled for deprecation - use a `@safe` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					},
					{
						"deco": "C4vibe4http4auth11digest_auth14DigestAuthInfo",
						"name": "info"
					},
					{
						"deco": "DFNfAyaQdZQg",
						"storageClass": [
							"scope"
						],
						"name": "pwhash"
					}
				],
				"line": 151,
				"kind": "function",
				"originalType": "@safe string(scope HTTPServerRequest req, scope HTTPServerResponse res, DigestAuthInfo info, scope DigestHashCallback pwhash)",
				"char": 8,
				"name": "performDigestAuth",
				"deco": "FNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseCQCqQCo4auth11digest_auth14DigestAuthInfoMDFNfAyaQdZQgZQj",
				"endchar": 1,
				"endline": 160,
				"comment": "\tEnforces HTTP Digest Auth authentication on the given req/res pair.\n\n\tParams:\n\t\treq = Request object that is to be checked\n\t\tres = Response object that will be used for authentication errors\n\t\tinfo = Digest authentication info object\n\t\tpwhash = A delegate queried for returning the digest password\n\n\tReturns: Returns the name of the authenticated user.\n\n\tThrows: Throws a HTTPStatusExeption in case of an authentication failure.\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					},
					{
						"deco": "C4vibe4http4auth11digest_auth14DigestAuthInfo",
						"name": "info"
					},
					{
						"deco": "DFAyaQdZQg",
						"storageClass": [
							"scope"
						],
						"name": "pwhash"
					}
				],
				"line": 162,
				"kind": "function",
				"char": 8,
				"name": "performDigestAuth",
				"deco": "FMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseCQCqQCo4auth11digest_auth14DigestAuthInfoMDFAyaQdZQgZQj",
				"endchar": 1,
				"endline": 165,
				"comment": "Scheduled for deprecation - use a `@safe` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "realm"
					},
					{
						"deco": "Aya",
						"name": "user"
					},
					{
						"deco": "Aya",
						"name": "password"
					}
				],
				"line": 177,
				"kind": "function",
				"char": 8,
				"name": "createDigestPassword",
				"deco": "FNfAyaQdQfZQi",
				"endchar": 1,
				"endline": 180,
				"comment": "\tCreates the digest password from the user name, realm and password.\n\n\tParams:\n\t\trealm = The realm\n\t\tuser = The user name\n\t\tpassword = The plain text password\n\n\tReturns: Returns the digest password\n"
			},
			{
				"kind": "alias",
				"deco": "DFNfAyaQdZQg",
				"char": 1,
				"line": 182,
				"name": "DigestHashCallback"
			},
			{
				"kind": "struct",
				"line": 185,
				"char": 1,
				"members": [
					{
						"line": 186,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"char": 13,
								"value": "0",
								"line": 186,
								"name": "none"
							},
							{
								"kind": "enum member",
								"char": 23,
								"value": "1",
								"line": 186,
								"name": "auth"
							},
							{
								"kind": "enum member",
								"char": 33,
								"value": "2",
								"line": 186,
								"name": "auth_int"
							}
						],
						"name": "Qop",
						"baseDeco": "i"
					},
					{
						"line": 187,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"char": 19,
								"value": "0",
								"line": 187,
								"name": "none"
							},
							{
								"kind": "enum member",
								"char": 29,
								"value": "1",
								"line": 187,
								"name": "md5"
							},
							{
								"kind": "enum member",
								"char": 38,
								"value": "2",
								"line": 187,
								"name": "md5_sess"
							}
						],
						"name": "Algorithm",
						"baseDeco": "i"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 189,
						"kind": "variable",
						"char": 9,
						"name": "realm",
						"deco": "Aya",
						"offset": 0
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 189,
						"kind": "variable",
						"char": 16,
						"name": "domain",
						"deco": "Aya",
						"offset": 16
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 189,
						"kind": "variable",
						"char": 24,
						"name": "nonce",
						"deco": "Aya",
						"offset": 32
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 189,
						"kind": "variable",
						"char": 31,
						"name": "opaque",
						"deco": "Aya",
						"offset": 48
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 190,
						"kind": "variable",
						"char": 12,
						"name": "algorithm",
						"deco": "E4vibe4http4auth11digest_auth16DigestAuthParams9Algorithm",
						"init": "cast(Algorithm)1",
						"offset": 64
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 191,
						"kind": "variable",
						"char": 7,
						"name": "stale",
						"deco": "b",
						"offset": 68
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 192,
						"kind": "variable",
						"char": 6,
						"name": "qop",
						"deco": "E4vibe4http4auth11digest_auth16DigestAuthParams3Qop",
						"offset": 72
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "auth"
							}
						],
						"line": 195,
						"kind": "constructor",
						"originalType": "ref @safe (string auth)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfAyaZS4vibe4http4auth11digest_auth16DigestAuthParams",
						"endchar": 2,
						"endline": 234,
						"comment": "Parses WWW-Authenticate header value with the digest parameters\n"
					}
				],
				"comment": "Structure which describes requirements of the digest authentication - see https://tools.ietf.org/html/rfc2617\n",
				"name": "DigestAuthParams"
			},
			{
				"constraint": "is(U == string) || is(U == URL)",
				"parameters": [
					{
						"kind": "type",
						"name": "U"
					}
				],
				"line": 250,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "HTTPMethod",
								"name": "method"
							},
							{
								"type": "U",
								"name": "url"
							},
							{
								"type": "string",
								"name": "username"
							},
							{
								"type": "string",
								"name": "password"
							},
							{
								"type": "DigestAuthParams",
								"name": "auth"
							},
							{
								"type": "string",
								"default": "null",
								"name": "cnonce"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "nc"
							},
							{
								"type": "ubyte[]",
								"storageClass": [
									"in"
								],
								"default": "null",
								"name": "entityBody"
							}
						],
						"line": 250,
						"kind": "function",
						"char": 6,
						"name": "createDigestAuthHeader",
						"type": "(HTTPMethod method, U url, string username, string password, DigestAuthParams auth, string cnonce = null, int nc = 0, in ubyte[] entityBody = null)",
						"endchar": 1,
						"endline": 312
					}
				],
				"name": "createDigestAuthHeader",
				"comment": "\tCreates the digest authorization request header.\n\n\tParams:\n\t\tmethod = HTTP method (required only when some qop is requested)\n\t\tusername = user name\n\t\tpassword = user password\n\t\turl = requested url\n\t\tauth = value from the WWW-Authenticate response header\n\t\tcnonce = client generated unique data string (required only when some qop is requested)\n\t\tnc = the count of requests sent by the client (required only when some qop is requested)\n\t\tentityBody = request entity body required only if qop==auth-int\n"
			}
		],
		"comment": "\tImplements HTTP Digest Authentication.\n\n\tThis is a minimal implementation based on RFC 2069.\n\n\tCopyright: © 2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Kai Nacke\n",
		"name": "vibe.http.auth.digest_auth"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/client.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.core.net"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 11,
				"name": "vibe.http.common"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 12,
				"name": "vibe.inet.url"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "url"
					},
					{
						"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
						"storageClass": [
							"scope"
						],
						"default": "cast(void delegate(scope HTTPClientRequest req))null",
						"name": "requester"
					},
					{
						"deco": "xC4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings()",
						"name": "settings"
					}
				],
				"line": 73,
				"kind": "function",
				"originalType": "@safe HTTPClientResponse(string url, scope void delegate(scope HTTPClientRequest req) requester = null, const(HTTPClientSettings) settings = defaultSettings)",
				"char": 20,
				"name": "requestHTTP",
				"deco": "FNfAyaMDFMC4vibe4http6client17HTTPClientRequestZvxCQBoQBmQBk18HTTPClientSettingsZCQCtQCrQCp18HTTPClientResponse",
				"endchar": 1,
				"endline": 76,
				"comment": "\tPerforms a synchronous HTTP request on the specified URL.\n\n\tThe requester parameter allows to customize the request and to specify the request body for\n\tnon-GET requests before it is sent. A response object is then returned or passed to the\n\tresponder callback synchronously.\n\n\tThis function is a low-level HTTP client facility. It will not perform automatic redirect,\n\tcaching or similar tasks. For a high-level download facility (similar to cURL), see the\n\t`vibe.inet.urltransfer` module.\n\n\tNote that it is highly recommended to use one of the overloads that take a responder callback,\n\tas they can avoid some memory allocations and are safe against accidentally leaving stale\n\tresponse objects (objects whose response body wasn't fully read). For the returning overloads\n\tof the function it is recommended to put a `scope(exit)` right after the call in which\n\t`HTTPClientResponse.dropBody` is called to avoid this.\n\n\tSee_also: `vibe.inet.urltransfer.download`\n\n\n\n\nExample:\nPosts a simple JSON request. Note that the server www.example.org does not\n\texists, so there will be no meaningful result.$(DDOX_UNITTEST_HEADER __unittest_L168_C1)\n---\nimport vibe.core.log;\nimport vibe.http.client;\nimport vibe.stream.operations;\n\nvoid test()\n{\n\trequestHTTP(\"http://www.example.org/\",\n\t\t(scope req) {\n\t\t\treq.method = HTTPMethod.POST;\n\t\t\t//req.writeJsonBody([\"name\": \"My Name\"]);\n\t\t},\n\t\t(scope res) {\n\t\t\tlogInfo(\"Response: %s\", res.bodyReader.readAllUTF8());\n\t\t}\n\t);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L168_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
						"storageClass": [
							"scope"
						],
						"default": "cast(void delegate(scope HTTPClientRequest req))null",
						"name": "requester"
					},
					{
						"deco": "xC4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings()",
						"name": "settings"
					}
				],
				"line": 78,
				"kind": "function",
				"originalType": "@safe HTTPClientResponse(URL url, scope void delegate(scope HTTPClientRequest req) requester = null, const(HTTPClientSettings) settings = defaultSettings)",
				"char": 20,
				"name": "requestHTTP",
				"deco": "FNfS4vibe4inet3url3URLMDFMCQx4http6client17HTTPClientRequestZvxCQCiQBmQBk18HTTPClientSettingsZCQDnQCrQCp18HTTPClientResponse",
				"endchar": 1,
				"endline": 94,
				"comment": "ditto\n\n\n\n\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "url"
					},
					{
						"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
						"storageClass": [
							"scope"
						],
						"name": "requester"
					},
					{
						"deco": "DFMC4vibe4http6client18HTTPClientResponseZv",
						"storageClass": [
							"scope"
						],
						"name": "responder"
					},
					{
						"deco": "xC4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings()",
						"name": "settings"
					}
				],
				"line": 96,
				"kind": "function",
				"originalType": "@safe void(string url, scope void delegate(scope HTTPClientRequest req) requester, scope void delegate(scope HTTPClientResponse req) responder, const(HTTPClientSettings) settings = defaultSettings)",
				"char": 6,
				"name": "requestHTTP",
				"deco": "FNfAyaMDFMC4vibe4http6client17HTTPClientRequestZvMDFMCQBrQBpQBn18HTTPClientResponseZvxCQCyQCwQCu18HTTPClientSettingsZv",
				"endchar": 1,
				"endline": 99,
				"comment": "ditto\n\n\n\n\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
						"storageClass": [
							"scope"
						],
						"name": "requester"
					},
					{
						"deco": "DFMC4vibe4http6client18HTTPClientResponseZv",
						"storageClass": [
							"scope"
						],
						"name": "responder"
					},
					{
						"deco": "xC4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings()",
						"name": "settings"
					}
				],
				"line": 101,
				"kind": "function",
				"originalType": "@safe void(URL url, scope void delegate(scope HTTPClientRequest req) requester, scope void delegate(scope HTTPClientResponse req) responder, const(HTTPClientSettings) settings = defaultSettings)",
				"char": 6,
				"name": "requestHTTP",
				"deco": "FNfS4vibe4inet3url3URLMDFMCQx4http6client17HTTPClientRequestZvMDFMCQClQBpQBn18HTTPClientResponseZvxCQDsQCwQCu18HTTPClientSettingsZv",
				"endchar": 1,
				"endline": 112,
				"comment": "ditto\n\n\n\n\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"default": "cast(ushort)0u",
						"name": "port"
					},
					{
						"deco": "b",
						"default": "false",
						"name": "use_tls"
					},
					{
						"deco": "xC4vibe4http6client18HTTPClientSettings",
						"default": "null",
						"name": "settings"
					}
				],
				"line": 195,
				"kind": "function",
				"originalType": "@safe (string host, ushort port = 0, bool use_tls = false, const(HTTPClientSettings) settings = null)",
				"char": 6,
				"name": "connectHTTP",
				"deco": "FNfAyatbxC4vibe4http6client18HTTPClientSettingsZSQBn4core14connectionpool__T16LockedConnectionTCQDiQDgQDe10HTTPClientZQBq",
				"endchar": 1,
				"endline": 221,
				"comment": "\tReturns a HTTPClient proxy object that is connected to the specified host.\n\n\tInternally, a connection pool is used to reuse already existing connections. Note that\n\tusually requestHTTP should be used for making requests instead of manually using a\n\tHTTPClient to do so.\n\n\n\n\n"
			},
			{
				"kind": "class",
				"line": 243,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 244,
						"kind": "variable",
						"char": 6,
						"name": "proxyURL",
						"deco": "S4vibe4inet3url3URL",
						"offset": 16
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 245,
						"kind": "variable",
						"char": 11,
						"name": "defaultKeepAliveTimeout",
						"deco": "S4core4time8Duration",
						"init": "Duration(100000000L)",
						"offset": 136
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 254,
						"kind": "variable",
						"char": 11,
						"name": "connectTimeout",
						"deco": "S4core4time8Duration",
						"init": "Duration(9223372036854775807L)",
						"offset": 144,
						"comment": " Timeout for establishing a connection to the server\n\n\t\tNote that this setting is only supported when using the vibe-core\n\t\tmodule. If using one of the legacy drivers, any value other than\n\t\t`Duration.max` will emit a runtime warning and connects without a\n\t\tspecific timeout.\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 257,
						"kind": "variable",
						"char": 11,
						"name": "readTimeout",
						"deco": "S4core4time8Duration",
						"init": "Duration(9223372036854775807L)",
						"offset": 152,
						"comment": "Timeout during read operations on the underyling transport\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 260,
						"kind": "variable",
						"char": 17,
						"name": "networkInterface",
						"deco": "S4vibe4core3net14NetworkAddress",
						"init": "NetworkAddress(sockaddr(cast(ushort)0u, [cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0]), , , )",
						"offset": 160,
						"comment": "Forces a specific network interface to use for outgoing connections.\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 263,
						"kind": "variable",
						"char": 16,
						"name": "dnsAddressFamily",
						"deco": "E3std6socket13AddressFamily",
						"init": "cast(AddressFamily)0",
						"offset": 272,
						"comment": "Can be used to force looking up IPv4/IPv6 addresses for host names.\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 269,
						"kind": "variable",
						"char": 46,
						"name": "tlsContextSetup",
						"deco": "DFNbNfC4vibe6stream3tls10TLSContextZv",
						"offset": 280,
						"comment": " Allows to customize the TLS context before connecting to a server.\n\n\t\tNote that this overrides a callback set with `HTTPClient.setTLSContextSetup`.\n"
					},
					{
						"line": 271,
						"kind": "function",
						"char": 31,
						"name": "dup",
						"deco": "xFNdNfZC4vibe4http6client18HTTPClientSettings",
						"endchar": 2,
						"endline": 281
					}
				],
				"comment": "\n\n\n\n\tDefines an HTTP/HTTPS proxy request or a connection timeout for an HTTPClient.\n\n\n\n\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L285_C1)\n---\nvoid test() {\n\n\tHTTPClientSettings settings = new HTTPClientSettings;\n\tsettings.proxyURL = URL.parse(\"http://proxyuser:proxypass@192.168.2.50:3128\");\n\tsettings.defaultKeepAliveTimeout = 0.seconds; // closes connection immediately after receiving the data.\n\trequestHTTP(\"http://www.example.org\",\n\t\t\t\t(scope req){\n\t\treq.method = HTTPMethod.GET;\n\t},\n\t(scope res){\n\t\tlogInfo(\"Headers:\");\n\t\tforeach(key, ref value; res.headers) {\n\t\t\tlogInfo(\"%s: %s\", key, value);\n\t\t}\n\t\tlogInfo(\"Response: %s\", res.bodyReader.readAllUTF8());\n\t}, settings);\n\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L285_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L307_C1)\n---\n // test connect timeout\nimport std.conv : to;\nimport vibe.core.stream : pipe, nullSink;\n\nHTTPClientSettings settings = new HTTPClientSettings;\nsettings.connectTimeout = 50.msecs;\n\n// Use an IP address that is guaranteed to be unassigned globally to force\n// a timeout (see RFC 3330)\nauto cli = connectHTTP(\"192.0.2.0\", 80, false, settings);\nauto timer = setTimer(500.msecs, { assert(false, \"Connect timeout occurred too late\"); });\nscope (exit) timer.stop();\n\ntry {\n\tcli.request(\n\t\t(scope req) { assert(false, \"Expected no connection\"); },\n\t\t(scope res) { assert(false, \"Expected no response\"); }\n\t);\n\tassert(false, \"Response read expected to fail due to timeout\");\n} catch(Exception e) {}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L307_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L307_C1)\n---\n // test connect timeout\nimport std.conv : to;\nimport vibe.core.stream : pipe, nullSink;\n\nHTTPClientSettings settings = new HTTPClientSettings;\nsettings.connectTimeout = 50.msecs;\n\n// Use an IP address that is guaranteed to be unassigned globally to force\n// a timeout (see RFC 3330)\nauto cli = connectHTTP(\"192.0.2.0\", 80, false, settings);\nauto timer = setTimer(500.msecs, { assert(false, \"Connect timeout occurred too late\"); });\nscope (exit) timer.stop();\n\ntry {\n\tcli.request(\n\t\t(scope req) { assert(false, \"Expected no connection\"); },\n\t\t(scope res) { assert(false, \"Expected no response\"); }\n\t);\n\tassert(false, \"Response read expected to fail due to timeout\");\n} catch(Exception e) {}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L307_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L329_C1)\n---\n // test read timeout\nimport std.conv : to;\nimport vibe.core.stream : pipe, nullSink;\n\nversion (VibeLibasyncDriver) {\n\tlogInfo(\"Skipping HTTP client read timeout test due to buggy libasync driver.\");\n} else {\n\tHTTPClientSettings settings = new HTTPClientSettings;\n\tsettings.readTimeout = 50.msecs;\n\n\tauto l = listenTCP(0, (conn) {\n\t\ttry conn.pipe(nullSink);\n\t\tcatch (Exception e) assert(false, e.msg);\n\t\tconn.close();\n\t}, \"127.0.0.1\");\n\n\tauto cli = connectHTTP(\"127.0.0.1\", l.bindAddress.port, false, settings);\n\tauto timer = setTimer(500.msecs, { assert(false, \"Read timeout occurred too late\"); });\n\tscope (exit) {\n\t\ttimer.stop();\n\t\tl.stopListening();\n\t\tcli.disconnect();\n\t\tsleep(10.msecs); // allow the read connection end to fully close\n\t}\n\n\ttry {\n\t\tcli.request(\n\t\t\t(scope req) { req.method = HTTPMethod.GET; },\n\t\t\t(scope res) { assert(false, \"Expected no response\"); }\n\t\t);\n\t\tassert(false, \"Response read expected to fail due to timeout\");\n\t} catch(Exception e) {}\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L329_C1)\n",
				"name": "HTTPClientSettings"
			},
			{
				"kind": "class",
				"line": 372,
				"char": 7,
				"members": [
					{
						"storageClass": [
							"enum",
							"@safe"
						],
						"line": 375,
						"kind": "variable",
						"char": 7,
						"name": "maxHeaderLineLength",
						"deco": "i",
						"init": "4096"
					},
					{
						"line": 394,
						"kind": "function",
						"char": 38,
						"name": "settings",
						"deco": "xFNdNfZxC4vibe4http6client18HTTPClientSettings",
						"endchar": 2,
						"endline": 396,
						"comment": " Get the current settings for the HTTP client.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							}
						],
						"line": 401,
						"kind": "function",
						"char": 14,
						"name": "setUserAgentString",
						"deco": "FNeAyaZv",
						"endchar": 75,
						"endline": 401,
						"comment": "\t\tSets the default user agent string for new HTTP requests.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "PFNfC4vibe6stream3tls10TLSContextZv",
								"name": "func"
							}
						],
						"line": 409,
						"kind": "function",
						"char": 14,
						"name": "setTLSSetupCallback",
						"deco": "FNePFNfC4vibe6stream3tls10TLSContextZvZv",
						"endchar": 103,
						"endline": 409,
						"comment": "\t\tSets a callback that will be called for every TLS context that is created.\n\n\t\tSetting such a callback is useful for adjusting the validation parameters\n\t\tof the TLS context.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "server"
							},
							{
								"deco": "t",
								"default": "cast(ushort)80u",
								"name": "port"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "use_tls"
							},
							{
								"deco": "xC4vibe4http6client18HTTPClientSettings",
								"default": "defaultSettings()",
								"name": "settings"
							}
						],
						"line": 416,
						"kind": "function",
						"originalType": "@safe void(string server, ushort port = 80, bool use_tls = false, const(HTTPClientSettings) settings = defaultSettings)",
						"char": 7,
						"name": "connect",
						"deco": "FNfAyatbxC4vibe4http6client18HTTPClientSettingsZv",
						"endchar": 2,
						"endline": 435,
						"comment": "\t\tConnects to a specific server.\n\n\t\tThis method may only be called if any previous connection has been closed.\n"
					},
					{
						"line": 442,
						"kind": "function",
						"char": 7,
						"name": "disconnect",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 459,
						"comment": "\t\tForcefully closes the TCP connection.\n\n\t\tBefore calling this method, be sure that no request is currently being processed.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
								"storageClass": [
									"scope"
								],
								"name": "requester"
							},
							{
								"deco": "DFMC4vibe4http6client18HTTPClientResponseZv",
								"storageClass": [
									"scope"
								],
								"name": "responder"
							}
						],
						"line": 534,
						"kind": "function",
						"char": 7,
						"name": "request",
						"deco": "FNeMDFMC4vibe4http6client17HTTPClientRequestZvMDFMCQBrQBpQBn18HTTPClientResponseZvZv",
						"endchar": 2,
						"endline": 575,
						"comment": "\t\tPerforms a HTTP request.\n\n\t\t`requester` is called first to populate the request with headers and the desired\n\t\tHTTP method and version. After a response has been received it is then passed\n\t\tto the caller which can in turn read the reponse body. Any part of the body\n\t\tthat has not been processed will automatically be consumed and dropped.\n\n\t\tNote that the `requester` callback might be invoked multiple times in the event\n\t\tthat a request has to be resent due to a connection failure.\n\n\t\tAlso note that the second form of this method (returning a `HTTPClientResponse`) is\n\t\tnot recommended to use as it may accidentially block a HTTP connection when\n\t\tonly part of the response body was read and also requires a heap allocation\n\t\tfor the response object. The callback based version on the other hand uses\n\t\ta stack allocation and guarantees that the request has been fully processed\n\t\tonce it has returned.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFC4vibe4http6client17HTTPClientRequestZv",
								"storageClass": [
									"scope"
								],
								"name": "requester"
							}
						],
						"line": 578,
						"kind": "function",
						"char": 21,
						"name": "request",
						"deco": "FNfMDFC4vibe4http6client17HTTPClientRequestZvZCQBoQBmQBk18HTTPClientResponse",
						"endchar": 2,
						"endline": 592,
						"comment": "ditto\n"
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 7,
						"line": 372,
						"name": "~this"
					}
				],
				"comment": "\tImplementation of a HTTP 1.0/1.1 client with keep-alive support.\n\n\tNote that it is usually recommended to use requestHTTP for making requests as that will use a\n\tpool of HTTPClient instances to keep the number of connection establishments low while not\n\tblocking requests from different tasks.\n\n\n\n\n",
				"name": "HTTPClient"
			},
			{
				"line": 771,
				"kind": "class",
				"char": 7,
				"base": "vibe.http.common.HTTPRequest",
				"members": [
					{
						"line": 789,
						"kind": "function",
						"char": 27,
						"name": "localAddress",
						"deco": "xFNdNfZS4vibe4core3net14NetworkAddress",
						"endchar": 81,
						"endline": 789
					},
					{
						"line": 790,
						"kind": "function",
						"char": 27,
						"name": "remoteAddress",
						"deco": "xFNdNfZS4vibe4core3net14NetworkAddress",
						"endchar": 83,
						"endline": 790
					},
					{
						"line": 792,
						"kind": "function",
						"char": 49,
						"name": "peerCertificate",
						"deco": "NgFNcNdNfZNgS4vibe6stream3tls25TLSCertificateInformation",
						"endchar": 101,
						"endline": 792
					},
					{
						"line": 799,
						"kind": "function",
						"char": 17,
						"name": "contentLength",
						"deco": "xFNdNfZl",
						"endchar": 95,
						"endline": 799,
						"comment": "\t\tAccesses the Content-Length header of the request.\n\n\t\tNegative values correspond to an unset Content-Length header.\n"
					},
					{
						"parameters": [
							{
								"deco": "l",
								"name": "value"
							}
						],
						"line": 801,
						"kind": "function",
						"char": 17,
						"name": "contentLength",
						"deco": "FNdNflZv",
						"endchar": 2,
						"endline": 805,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream18RandomAccessStream",
								"name": "data"
							}
						],
						"line": 810,
						"kind": "function",
						"char": 7,
						"name": "writeBody",
						"deco": "FNfC4vibe4core6stream18RandomAccessStreamZv",
						"endchar": 2,
						"endline": 813,
						"comment": "\t\tWrites the whole request body at once using raw bytes.\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "data"
							}
						],
						"line": 815,
						"kind": "function",
						"char": 7,
						"name": "writeBody",
						"deco": "FNfC4vibe4core6stream11InputStreamZv",
						"endchar": 2,
						"endline": 819,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "data"
							},
							{
								"deco": "m",
								"name": "length"
							}
						],
						"line": 821,
						"kind": "function",
						"char": 7,
						"name": "writeBody",
						"deco": "FNfC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"endline": 826,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "data"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "content_type"
							}
						],
						"line": 828,
						"kind": "function",
						"originalType": "@safe void(in ubyte[] data, string content_type = null)",
						"char": 7,
						"name": "writeBody",
						"deco": "FNfxAhAyaZv",
						"endchar": 2,
						"endline": 834,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 839,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "data"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "allow_chunked"
									}
								],
								"line": 839,
								"kind": "function",
								"char": 7,
								"name": "writeJsonBody",
								"type": "void(T data, bool allow_chunked = false)",
								"endchar": 2,
								"endline": 858
							}
						],
						"name": "writeJsonBody",
						"comment": "\t\tWrites the request body as JSON data.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 862,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "key_value_map"
									}
								],
								"line": 862,
								"kind": "function",
								"char": 7,
								"name": "writeFormBody",
								"type": "void(T key_value_map)",
								"endchar": 2,
								"endline": 875
							}
						],
						"name": "writeFormBody",
						"comment": " Writes the request body as form data.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L878_C2)\n---\nvoid test(HTTPClientRequest req) {\n\treq.writeFormBody([\"foo\": \"bar\"]);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L878_C2)\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4http6common9MultiPart",
								"name": "part"
							}
						],
						"line": 884,
						"kind": "function",
						"char": 7,
						"name": "writePart",
						"deco": "FNfC4vibe4http6common9MultiPartZv",
						"endchar": 2,
						"endline": 887
					},
					{
						"line": 895,
						"kind": "function",
						"originalType": "@property @safe InterfaceProxy!OutputStream()",
						"char": 40,
						"name": "bodyWriter",
						"deco": "FNdNfZS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream12OutputStreamZQBw",
						"endchar": 2,
						"endline": 917,
						"comment": "\t\tAn output stream suitable for writing the request body.\n\n\t\tThe first retrieval will cause the request header to be written, make sure\n\t\tthat all headers are set up in advance.s\n"
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 7,
						"line": 771,
						"name": "~this"
					}
				],
				"name": "HTTPClientRequest",
				"comment": "\tRepresents a HTTP client request (as sent to the server).\n\n\n\n\n"
			},
			{
				"line": 972,
				"kind": "class",
				"char": 7,
				"base": "vibe.http.common.HTTPResponse",
				"members": [
					{
						"line": 989,
						"kind": "function",
						"char": 16,
						"name": "maxRequests",
						"deco": "xFNdNfZi",
						"endchar": 2,
						"endline": 991,
						"comment": "Contains the keep-alive 'max' parameter, indicates how many requests a client can\nmake before the server closes the connection.\n"
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.http.common.HTTPResponse.cookies"
						],
						"line": 995,
						"kind": "function",
						"originalType": "@property ref @safe DictionaryList!Cookie()",
						"char": 47,
						"name": "cookies",
						"deco": "FNcNdNfZS4vibe5utils14dictionarylist__T14DictionaryListTCQBw4http6common6CookieVbi1Vmi32Vbi0ZQCc",
						"endchar": 2,
						"endline": 1004,
						"comment": "All cookies that shall be set on the client for this request\n"
					},
					{
						"line": 1066,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 1069
					},
					{
						"line": 1074,
						"kind": "function",
						"originalType": "@property @safe InterfaceProxy!InputStream()",
						"char": 39,
						"name": "bodyReader",
						"deco": "FNdNfZS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream11InputStreamZQBv",
						"endchar": 2,
						"endline": 1111,
						"comment": "\t\tAn input stream suitable for reading the response body.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfMS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream11InputStreamZQBvZv",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 1123,
						"kind": "function",
						"originalType": "@safe void(scope void delegate(scope InterfaceProxy!InputStream stream) @safe del)",
						"char": 7,
						"name": "readRawBody",
						"deco": "FNfMDFNfMS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream11InputStreamZQBvZvZv",
						"endchar": 2,
						"endline": 1128,
						"comment": "\t\tProvides unsafe means to read raw data from the connection.\n\n\t\tNo transfer decoding and no content decoding is done on the data.\n\n\t\tNot that the provided delegate must read the whole stream,\n\t\tas the state of the response is unknown after raw bytes have been\n\t\ttaken. Failure to read the right amount of data will lead to\n\t\tprotocol corruption in later requests.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfMC4vibe4core6stream11InputStreamZv",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 1131,
						"kind": "function",
						"char": 7,
						"name": "readRawBody",
						"deco": "FNfMDFNfMC4vibe4core6stream11InputStreamZvZv",
						"endchar": 2,
						"endline": 1138,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfMC4vibe4core6stream11InputStreamZv",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 1131,
						"kind": "function",
						"char": 7,
						"name": "readRawBody",
						"deco": "FNfMDFNfMC4vibe4core6stream11InputStreamZvZv",
						"endchar": 2,
						"endline": 1138,
						"comment": "ditto\n"
					},
					{
						"line": 1143,
						"kind": "function",
						"char": 7,
						"name": "readJson",
						"deco": "FNfZS4vibe4data4json4Json",
						"endchar": 2,
						"endline": 1146,
						"comment": "\t\tReads the whole response body and tries to parse it as JSON.\n"
					},
					{
						"line": 1151,
						"kind": "function",
						"char": 7,
						"name": "dropBody",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 1161,
						"comment": "\t\tReads and discards the response body.\n"
					},
					{
						"line": 1172,
						"kind": "function",
						"char": 7,
						"name": "disconnect",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 1175,
						"comment": "\t\tForcefully terminates the connection regardless of the current state.\n\n\t\tNote that this will only actually disconnect if the request has not yet\n\t\tbeen fully processed. If the whole body was already read, the\n\t\tconnection is not owned by the current request operation anymore and\n\t\tcannot be accessed. Use a \"Connection: close\" header instead in this\n\t\tcase to let the server close the connection.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "new_protocol"
							}
						],
						"line": 1194,
						"kind": "function",
						"char": 19,
						"name": "switchProtocol",
						"deco": "FNfAyaZC4vibe4core6stream16ConnectionStream",
						"endchar": 2,
						"endline": 1204,
						"comment": "\t\tSwitches the connection to a new protocol and returns the resulting ConnectionStream.\n\n\t\tThe caller caller gets ownership of the ConnectionStream and is responsible\n\t\tfor closing it.\n\n\t\tNotice:\n\t\t\tWhen using the overload that returns a `ConnectionStream`, the caller\n\t\t\tmust make sure that the stream is not used after the\n\t\t\t`HTTPClientRequest` has been destroyed.\n\n\t\tParams:\n\t\t\tnew_protocol = The protocol to which the connection is expected to\n\t\t\t\tupgrade. Should match the Upgrade header of the request. If an\n\t\t\t\tempty string is passed, the \"Upgrade\" header will be ignored and\n\t\t\t\tshould be checked by other means.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "new_protocol"
							},
							{
								"deco": "DFNfC4vibe4core6stream16ConnectionStreamZv",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 1206,
						"kind": "function",
						"char": 7,
						"name": "switchProtocol",
						"deco": "FNfAyaMDFNfC4vibe4core6stream16ConnectionStreamZvZv",
						"endchar": 2,
						"endline": 1217,
						"comment": "ditto\n"
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 2,
						"line": 1066,
						"name": "~this"
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 2,
						"line": 1066,
						"name": "~this"
					}
				],
				"name": "HTTPClientResponse",
				"comment": "\tRepresents a HTTP client response (as received from the server).\n\n\n\n\n"
			}
		],
		"comment": "\tA simple HTTP/1.1 client implementation.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
		"name": "vibe.http.client"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/common.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.http.status"
			},
			{
				"line": 36,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 37,
						"name": "HTTP_1_0"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 38,
						"name": "HTTP_1_1"
					}
				],
				"name": "HTTPVersion",
				"baseDeco": "i"
			},
			{
				"line": 42,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 44,
						"name": "GET"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 45,
						"name": "HEAD"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 46,
						"name": "PUT"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "3",
						"line": 47,
						"name": "POST"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "4",
						"line": 48,
						"name": "PATCH"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "5",
						"line": 49,
						"name": "DELETE"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "6",
						"line": 50,
						"name": "OPTIONS"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "7",
						"line": 51,
						"name": "TRACE"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "8",
						"line": 52,
						"name": "CONNECT"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "9",
						"line": 55,
						"name": "PROPFIND"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "10",
						"line": 56,
						"name": "PROPPATCH"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "11",
						"line": 57,
						"name": "MKCOL"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "12",
						"line": 58,
						"name": "COPY"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "13",
						"line": 59,
						"name": "MOVE"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "14",
						"line": 60,
						"name": "LOCK"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "15",
						"line": 61,
						"name": "UNLOCK"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "16",
						"line": 64,
						"name": "VERSIONCONTROL"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "17",
						"line": 65,
						"name": "REPORT"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "18",
						"line": 66,
						"name": "CHECKOUT"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "19",
						"line": 67,
						"name": "CHECKIN"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "20",
						"line": 68,
						"name": "UNCHECKOUT"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "21",
						"line": 69,
						"name": "MKWORKSPACE"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "22",
						"line": 70,
						"name": "UPDATE"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "23",
						"line": 71,
						"name": "LABEL"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "24",
						"line": 72,
						"name": "MERGE"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "25",
						"line": 73,
						"name": "BASELINECONTROL"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "26",
						"line": 74,
						"name": "MKACTIVITY"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "27",
						"line": 77,
						"name": "ORDERPATCH"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "28",
						"line": 80,
						"name": "ACL"
					}
				],
				"name": "HTTPMethod",
				"baseDeco": "i"
			},
			{
				"parameters": [
					{
						"deco": "E4vibe4http6common10HTTPMethod",
						"name": "m"
					}
				],
				"line": 87,
				"kind": "function",
				"char": 8,
				"name": "httpMethodString",
				"deco": "FNbNfE4vibe4http6common10HTTPMethodZAya",
				"endchar": 1,
				"endline": 96,
				"comment": "\tReturns the string representation of the given HttpMethod.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					}
				],
				"line": 101,
				"kind": "function",
				"char": 12,
				"name": "httpMethodFromString",
				"deco": "FNfAyaZE4vibe4http6common10HTTPMethod",
				"endchar": 1,
				"endline": 144,
				"comment": "\tReturns the HttpMethod value matching the given HTTP method string.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 161,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "condition"
							},
							{
								"type": "HTTPStatus",
								"name": "statusCode"
							},
							{
								"type": "string",
								"storageClass": [
									"lazy"
								],
								"default": "null",
								"name": "message"
							},
							{
								"type": "string",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"type": "typeof(161)",
								"default": "__LINE__",
								"name": "line"
							}
						],
						"line": 161,
						"kind": "function",
						"char": 3,
						"name": "enforceHTTP",
						"type": "T(T condition, HTTPStatus statusCode, lazy string message = null, string file = __FILE__, typeof(161) line = __LINE__)",
						"endchar": 1,
						"endline": 164
					}
				],
				"name": "enforceHTTP",
				"comment": "\tUtility function that throws a HTTPStatusException if the _condition is not met.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 169,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "condition"
							},
							{
								"type": "string",
								"storageClass": [
									"lazy"
								],
								"default": "null",
								"name": "message"
							},
							{
								"type": "string",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"type": "typeof(169)",
								"default": "__LINE__",
								"name": "line"
							}
						],
						"line": 169,
						"kind": "function",
						"char": 3,
						"name": "enforceBadRequest",
						"type": "T(T condition, lazy string message = null, string file = __FILE__, typeof(169) line = __LINE__)",
						"endchar": 1,
						"endline": 172
					}
				],
				"name": "enforceBadRequest",
				"comment": "\tUtility function that throws a HTTPStatusException with status code \"400 Bad Request\" if the _condition is not met.\n"
			},
			{
				"kind": "class",
				"line": 178,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 182,
						"kind": "variable",
						"originalType": "InterfaceProxy!Stream",
						"char": 25,
						"name": "m_conn",
						"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
						"protection": "protected",
						"offset": 16
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 187,
						"kind": "variable",
						"char": 15,
						"name": "httpVersion",
						"deco": "E4vibe4http6common11HTTPVersion",
						"init": "cast(HTTPVersion)1",
						"offset": 56,
						"comment": "The HTTP protocol version used for the request\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 190,
						"kind": "variable",
						"char": 14,
						"name": "method",
						"deco": "E4vibe4http6common10HTTPMethod",
						"init": "cast(HTTPMethod)0",
						"offset": 60,
						"comment": "The HTTP _method of the request\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 198,
						"kind": "variable",
						"char": 10,
						"name": "requestURI",
						"deco": "Aya",
						"init": "\"/\"",
						"offset": 64,
						"comment": " The request URI\n\n\t\t\tNote that the request URI usually does not include the global\n\t\t\t'http://server' part, but only the local path and a query string.\n\t\t\tA possible exception is a proxy server, which will get full URLs.\n"
					},
					{
						"kind": "alias",
						"line": 201,
						"char": 3,
						"comment": "Compatibility alias - scheduled for deprecation\n",
						"name": "requestURL"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 204,
						"kind": "variable",
						"originalType": "InetHeaderMap",
						"char": 17,
						"name": "headers",
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi0Vmi12Vbi0ZQBi",
						"offset": 80,
						"comment": "All request _headers\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
								"name": "conn"
							}
						],
						"line": 207,
						"kind": "constructor",
						"originalType": "@safe (InterfaceProxy!Stream conn)",
						"char": 12,
						"name": "this",
						"deco": "FNfS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBpZCQDb4http6common11HTTPRequest",
						"protection": "protected",
						"endchar": 2,
						"endline": 210
					},
					{
						"line": 212,
						"kind": "constructor",
						"originalType": "@safe ()",
						"char": 12,
						"name": "this",
						"deco": "FNfZC4vibe4http6common11HTTPRequest",
						"protection": "protected",
						"endchar": 2,
						"endline": 214
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"object.Object.toString"
						],
						"line": 216,
						"kind": "function",
						"char": 25,
						"name": "toString",
						"deco": "FNfZAya",
						"endchar": 2,
						"endline": 219
					},
					{
						"line": 223,
						"kind": "function",
						"char": 19,
						"name": "host",
						"deco": "xFNdNfZAya",
						"endchar": 87,
						"endline": 223,
						"comment": " Shortcut to the 'Host' header (always present for HTTP 1.1)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"line": 225,
						"kind": "function",
						"char": 17,
						"name": "host",
						"deco": "FNdNfAyaZv",
						"endchar": 55,
						"endline": 225,
						"comment": "ditto\n"
					},
					{
						"line": 234,
						"kind": "function",
						"char": 19,
						"name": "contentType",
						"deco": "xFNdNfZAya",
						"endchar": 2,
						"endline": 240,
						"comment": " Returns the mime type part of the 'Content-Type' header.\n\n\t\tThis function gets the pure mime type (e.g. \"text/plain\")\n\t\twithout any supplimentary parameters such as \"charset=...\".\n\t\tUse contentTypeParameters to get any parameter string or\n\t\theaders[\"Content-Type\"] to get the raw value.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "ct"
							}
						],
						"line": 242,
						"kind": "function",
						"char": 17,
						"name": "contentType",
						"deco": "FNdNfAyaZv",
						"endchar": 72,
						"endline": 242,
						"comment": "ditto\n"
					},
					{
						"line": 249,
						"kind": "function",
						"char": 19,
						"name": "contentTypeParameters",
						"deco": "xFNdNfZAya",
						"endchar": 2,
						"endline": 255,
						"comment": " Returns any supplementary parameters of the 'Content-Type' header.\n\n\t\tThis is a semicolon separated ist of key/value pairs. Usually, if set,\n\t\tthis contains the character set used for text based content types.\n"
					},
					{
						"line": 259,
						"kind": "function",
						"char": 17,
						"name": "persistent",
						"deco": "xFNdNfZb",
						"endchar": 2,
						"endline": 272,
						"comment": " Determines if the connection persists across requests.\n"
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 1,
						"line": 178,
						"name": "~this"
					}
				],
				"comment": "\tRepresents an HTTP request made to a server.\n",
				"name": "HTTPRequest"
			},
			{
				"kind": "class",
				"line": 279,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 282,
						"kind": "variable",
						"originalType": "DictionaryList!Cookie",
						"char": 34,
						"name": "m_cookies",
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTCQBw4http6common6CookieVbi1Vmi32Vbi0ZQCc",
						"protection": "protected",
						"offset": 16
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 286,
						"kind": "variable",
						"char": 15,
						"name": "httpVersion",
						"deco": "E4vibe4http6common11HTTPVersion",
						"init": "cast(HTTPVersion)1",
						"offset": 808,
						"comment": "The protocol version of the response - should not be changed\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 289,
						"kind": "variable",
						"char": 7,
						"name": "statusCode",
						"deco": "i",
						"init": "200",
						"offset": 812,
						"comment": "The status code of the response, 200 by default\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 295,
						"kind": "variable",
						"char": 10,
						"name": "statusPhrase",
						"deco": "Aya",
						"offset": 816,
						"comment": " The status phrase of the response\n\n\t\t\tIf no phrase is set, a default one corresponding to the status code will be used.\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 298,
						"kind": "variable",
						"originalType": "InetHeaderMap",
						"char": 17,
						"name": "headers",
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi0Vmi12Vbi0ZQBi",
						"offset": 832,
						"comment": "The response header fields\n"
					},
					{
						"line": 301,
						"kind": "function",
						"originalType": "@property ref @safe DictionaryList!Cookie()",
						"char": 39,
						"name": "cookies",
						"deco": "FNcNdNfZS4vibe5utils14dictionarylist__T14DictionaryListTCQBw4http6common6CookieVbi1Vmi32Vbi0ZQCc",
						"endchar": 69,
						"endline": 301,
						"comment": "All cookies that shall be set on the client for this request\n"
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"object.Object.toString"
						],
						"line": 304,
						"kind": "function",
						"char": 25,
						"name": "toString",
						"deco": "FNfZAya",
						"endchar": 2,
						"endline": 309
					},
					{
						"line": 313,
						"kind": "function",
						"char": 19,
						"name": "contentType",
						"deco": "xFNdNfZAya",
						"endchar": 127,
						"endline": 313,
						"comment": " Shortcut to the \"Content-Type\" header\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "ct"
							}
						],
						"line": 315,
						"kind": "function",
						"char": 17,
						"name": "contentType",
						"deco": "FNdNfAyaZv",
						"endchar": 72,
						"endline": 315,
						"comment": "ditto\n"
					}
				],
				"comment": "\tRepresents the HTTP response from the server back to the client.\n",
				"name": "HTTPResponse"
			},
			{
				"line": 324,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "i",
								"name": "status"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "message"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 331,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (int status, string message = null, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 2,
						"name": "this",
						"deco": "FNaNbNiNfiAyaQdmC6object9ThrowableZC4vibe4http6common19HTTPStatusException",
						"endchar": 2,
						"endline": 335
					},
					{
						"line": 338,
						"kind": "function",
						"char": 16,
						"name": "status",
						"deco": "xFNaNbNdNiNfZi",
						"endchar": 50,
						"endline": 338,
						"comment": "The HTTP status code\n"
					},
					{
						"storageClass": [
							"nothrow",
							"pure",
							"@nogc",
							"@safe"
						],
						"line": 340,
						"kind": "variable",
						"char": 9,
						"name": "debugMessage",
						"deco": "Aya",
						"offset": 80
					}
				],
				"name": "HTTPStatusException",
				"comment": "\tRespresents a HTTP response status.\n\n\tThrowing this exception from within a request handler will produce a matching error page.\n"
			},
			{
				"kind": "class",
				"char": 7,
				"members": [
					{
						"line": 345,
						"kind": "variable",
						"char": 9,
						"name": "contentType",
						"deco": "Aya",
						"offset": 16
					},
					{
						"line": 347,
						"kind": "variable",
						"originalType": "InputStream",
						"char": 14,
						"name": "stream",
						"deco": "C4vibe4core6stream11InputStream",
						"offset": 32
					},
					{
						"line": 349,
						"kind": "variable",
						"char": 17,
						"name": "form",
						"deco": "HAyaQd",
						"offset": 40
					}
				],
				"line": 344,
				"name": "MultiPart"
			},
			{
				"parameters": [
					{
						"deco": "E4vibe4http6common11HTTPVersion",
						"name": "ver"
					}
				],
				"line": 357,
				"kind": "function",
				"char": 8,
				"name": "getHTTPVersionString",
				"deco": "FNaNbNiNfE4vibe4http6common11HTTPVersionZAya",
				"endchar": 1,
				"endline": 363,
				"comment": " Returns:\n     The version string corresponding to the `ver`,\n     suitable for usage in the start line of the request.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"storageClass": [
							"ref"
						],
						"name": "str"
					}
				],
				"line": 366,
				"kind": "function",
				"char": 13,
				"name": "parseHTTPVersion",
				"deco": "FNfKAyaZE4vibe4http6common11HTTPVersion",
				"endchar": 1,
				"endline": 377
			},
			{
				"line": 383,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							}
						],
						"line": 393,
						"kind": "constructor",
						"originalType": "@safe (InputStream stream)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream11InputStreamZCQBg4http6common18ChunkedInputStream",
						"endchar": 2,
						"endline": 396
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 406,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "xFNdNfZb",
						"endchar": 68,
						"endline": 406
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 408,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "xFNdNfZm",
						"endchar": 68,
						"endline": 408
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 410,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 105,
						"endline": 410
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 412,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 2,
						"endline": 416
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 418,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 445
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 447,
						"name": "read"
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 7,
						"line": 383,
						"name": "~this"
					}
				],
				"name": "ChunkedInputStream",
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"comment": "\tTakes an input stream that contains data in HTTP chunked format and outputs the raw data.\n"
			},
			{
				"constraint": "isInputStream!IS",
				"parameters": [
					{
						"kind": "type",
						"name": "IS"
					}
				],
				"line": 469,
				"kind": "template",
				"char": 20,
				"members": [
					{
						"parameters": [
							{
								"type": "IS",
								"name": "source_stream"
							}
						],
						"line": 469,
						"kind": "function",
						"char": 20,
						"name": "chunkedInputStream",
						"type": "ChunkedInputStream(IS source_stream)",
						"endchar": 1,
						"endline": 472
					}
				],
				"name": "chunkedInputStream",
				"comment": "Creates a new `ChunkedInputStream` instance.\n"
			},
			{
				"constraint": "isInputStream!IS",
				"parameters": [
					{
						"kind": "type",
						"name": "IS"
					}
				],
				"line": 475,
				"kind": "template",
				"char": 32,
				"members": [
					{
						"parameters": [
							{
								"type": "IS",
								"name": "source_stream"
							}
						],
						"line": 475,
						"kind": "function",
						"char": 32,
						"name": "createChunkedInputStreamFL",
						"type": "FreeListRef!ChunkedInputStream(IS source_stream)",
						"endchar": 1,
						"endline": 478
					}
				],
				"name": "createChunkedInputStreamFL",
				"comment": "Creates a new `ChunkedInputStream` instance.\n"
			},
			{
				"line": 484,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"kind": "alias",
						"deco": "DFNfxAhZAya",
						"char": 2,
						"line": 487,
						"name": "ChunkExtensionCallback"
					},
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "stream"
							},
							{
								"deco": "C4stdx9allocator10IAllocator",
								"default": "vibeThreadAllocator()",
								"name": "alloc"
							}
						],
						"line": 497,
						"kind": "constructor",
						"originalType": "@safe (OutputStream stream, IAllocator alloc = vibeThreadAllocator())",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream12OutputStreamC4stdx9allocator10IAllocatorZCQCj4http6common19ChunkedOutputStream",
						"endchar": 2,
						"endline": 500
					},
					{
						"line": 514,
						"kind": "function",
						"originalType": "const @property @safe size_t()",
						"char": 19,
						"name": "maxBufferSize",
						"deco": "xFNdNfZm",
						"endchar": 67,
						"endline": 514,
						"comment": " Maximum buffer size used to buffer individual chunks.\n\n\t\tA size of zero means unlimited buffer size. Explicit flush is required\n\t\tin this case to empty the buffer.\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "bytes"
							}
						],
						"line": 516,
						"kind": "function",
						"originalType": "@property @safe void(size_t bytes)",
						"char": 17,
						"name": "maxBufferSize",
						"deco": "FNdNfmZv",
						"endchar": 126,
						"endline": 516,
						"comment": "ditto\n"
					},
					{
						"line": 531,
						"kind": "function",
						"originalType": "const @property @safe ChunkExtensionCallback()",
						"char": 35,
						"name": "chunkExtensionCallback",
						"deco": "xFNdNfZDFNfxAhZAya",
						"endchar": 101,
						"endline": 531,
						"comment": " A delegate used to specify the extensions for each chunk written to the underlying stream.\n\n\t \tThe delegate has to be of type `string delegate(in const(ubyte)[] data)` and gets handed the\n\t \tdata of each chunk before it is written to the underlying stream. If it's return value is non-empty,\n\t \tit will be added to the chunk's header line.\n\n\t \tThe returned chunk extension string should be of the format `key1=value1;key2=value2;[...];keyN=valueN`\n\t \tand **not contain any carriage return or newline characters**.\n\n\t \tAlso note that the delegate should accept the passed data through a scoped argument. Thus, **no references\n\t \tto the provided data should be stored in the delegate**. If the data has to be stored for later use,\n\t \tit needs to be copied first.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfxAhZAya",
								"name": "cb"
							}
						],
						"line": 533,
						"kind": "function",
						"originalType": "@property @safe void(ChunkExtensionCallback cb)",
						"char": 17,
						"name": "chunkExtensionCallback",
						"deco": "FNdNfDFNfxAhZAyaZv",
						"endchar": 100,
						"endline": 533,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes_"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 555,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes_, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 573
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 575,
						"name": "write"
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 577,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 586
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 588,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 596
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 7,
						"line": 484,
						"name": "~this"
					}
				],
				"name": "ChunkedOutputStream",
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"comment": "\tOutputs data to an output stream in HTTP chunked format.\n"
			},
			{
				"constraint": "isOutputStream!OS",
				"parameters": [
					{
						"kind": "type",
						"name": "OS"
					}
				],
				"line": 619,
				"kind": "template",
				"char": 21,
				"members": [
					{
						"parameters": [
							{
								"type": "OS",
								"name": "destination_stream"
							},
							{
								"type": "IAllocator",
								"default": "theAllocator()",
								"name": "allocator"
							}
						],
						"line": 619,
						"kind": "function",
						"char": 21,
						"name": "createChunkedOutputStream",
						"type": "ChunkedOutputStream(OS destination_stream, IAllocator allocator = theAllocator())",
						"endchar": 1,
						"endline": 622
					}
				],
				"name": "createChunkedOutputStream",
				"comment": "Creates a new `ChunkedInputStream` instance.\n"
			},
			{
				"constraint": "isOutputStream!OS",
				"parameters": [
					{
						"kind": "type",
						"name": "OS"
					}
				],
				"line": 625,
				"kind": "template",
				"char": 33,
				"members": [
					{
						"parameters": [
							{
								"type": "OS",
								"name": "destination_stream"
							},
							{
								"type": "IAllocator",
								"default": "theAllocator()",
								"name": "allocator"
							}
						],
						"line": 625,
						"kind": "function",
						"char": 33,
						"name": "createChunkedOutputStreamFL",
						"type": "FreeListRef!ChunkedOutputStream(OS destination_stream, IAllocator allocator = theAllocator())",
						"endchar": 1,
						"endline": 628
					}
				],
				"name": "createChunkedOutputStreamFL",
				"comment": "Creates a new `ChunkedOutputStream` instance.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "header_string"
					},
					{
						"deco": "C4vibe4http6common6Cookie",
						"storageClass": [
							"scope"
						],
						"name": "dst"
					}
				],
				"line": 633,
				"kind": "function",
				"char": 8,
				"name": "parseHTTPCookie",
				"deco": "FNfAyaMC4vibe4http6common6CookieZQBe",
				"endchar": 1,
				"endline": 697,
				"comment": "Parses the cookie from a header field, returning the name of the cookie.\nImplements an algorithm equivalent to https://tools.ietf.org/html/rfc6265#section-5.2\nReturns: the cookie name as return value, populates the dst argument or allocates on the GC for the tuple overload.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "header_string"
					}
				],
				"line": 700,
				"kind": "function",
				"char": 24,
				"name": "parseHTTPCookie",
				"deco": "FNfAyaZS3std8typecons__T5TupleTQBcTC4vibe4http6common6CookieZQBl",
				"endchar": 1,
				"endline": 705,
				"comment": "ditto\n"
			},
			{
				"kind": "class",
				"char": 7,
				"members": [
					{
						"line": 721,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"char": 3,
								"value": "0",
								"line": 722,
								"name": "url"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "1",
								"line": 723,
								"name": "raw"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "1",
								"line": 724,
								"name": "none"
							}
						],
						"name": "Encoding",
						"baseDeco": "i"
					},
					{
						"line": 727,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"char": 3,
								"value": "0",
								"line": 728,
								"name": "default_"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "1",
								"line": 729,
								"name": "lax"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "2",
								"line": 730,
								"name": "strict"
							}
						],
						"name": "SameSite",
						"baseDeco": "i"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							}
						],
						"line": 734,
						"kind": "function",
						"char": 17,
						"name": "value",
						"deco": "FNdNfAyaZv",
						"endchar": 67,
						"endline": 734,
						"comment": "Cookie payload\n"
					},
					{
						"line": 736,
						"kind": "function",
						"char": 19,
						"name": "value",
						"deco": "xFNdNfZAya",
						"endchar": 62,
						"endline": 736,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							}
						],
						"line": 739,
						"kind": "function",
						"char": 17,
						"name": "rawValue",
						"deco": "FNdNfAyaZv",
						"endchar": 59,
						"endline": 739,
						"comment": "Undecoded cookie payload\n"
					},
					{
						"line": 741,
						"kind": "function",
						"char": 19,
						"name": "rawValue",
						"deco": "xFNdNfZAya",
						"endchar": 54,
						"endline": 741,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							}
						],
						"line": 744,
						"kind": "function",
						"char": 17,
						"name": "domain",
						"deco": "FNdNfAyaZv",
						"endchar": 58,
						"endline": 744,
						"comment": "The domain for which the cookie is valid\n"
					},
					{
						"line": 746,
						"kind": "function",
						"char": 19,
						"name": "domain",
						"deco": "xFNdNfZAya",
						"endchar": 53,
						"endline": 746,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							}
						],
						"line": 749,
						"kind": "function",
						"char": 17,
						"name": "path",
						"deco": "FNdNfAyaZv",
						"endchar": 54,
						"endline": 749,
						"comment": "The path/local URI for which the cookie is valid\n"
					},
					{
						"line": 751,
						"kind": "function",
						"char": 19,
						"name": "path",
						"deco": "xFNdNfZAya",
						"endchar": 49,
						"endline": 751,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							}
						],
						"line": 754,
						"kind": "function",
						"char": 17,
						"name": "expires",
						"deco": "FNdNfAyaZv",
						"endchar": 60,
						"endline": 754,
						"comment": "Expiration date of the cookie\n"
					},
					{
						"parameters": [
							{
								"deco": "S3std8datetime7systime7SysTime",
								"name": "value"
							}
						],
						"line": 756,
						"kind": "function",
						"char": 17,
						"name": "expires",
						"deco": "FNdNfS3std8datetime7systime7SysTimeZv",
						"endchar": 86,
						"endline": 756,
						"comment": "ditto\n"
					},
					{
						"line": 758,
						"kind": "function",
						"char": 19,
						"name": "expires",
						"deco": "xFNdNfZAya",
						"endchar": 55,
						"endline": 758,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "l",
								"name": "value"
							}
						],
						"line": 765,
						"kind": "function",
						"char": 17,
						"name": "maxAge",
						"deco": "FNdNflZv",
						"endchar": 56,
						"endline": 765,
						"comment": " Maximum life time of the cookie\n\n\t\tThis is the modern variant of `expires`. For backwards compatibility it\n\t\tis recommended to set both properties, or to use the `expire` method.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "value"
							}
						],
						"line": 767,
						"kind": "function",
						"char": 17,
						"name": "maxAge",
						"deco": "FNdNfS4core4time8DurationZv",
						"endchar": 76,
						"endline": 767,
						"comment": "ditto\n"
					},
					{
						"line": 769,
						"kind": "function",
						"char": 17,
						"name": "maxAge",
						"deco": "xFNdNfZl",
						"endchar": 51,
						"endline": 769,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "value"
							}
						],
						"line": 773,
						"kind": "function",
						"char": 17,
						"name": "secure",
						"deco": "FNdNfbZv",
						"endchar": 56,
						"endline": 773,
						"comment": " Require a secure connection for transmission of this cookie\n"
					},
					{
						"line": 775,
						"kind": "function",
						"char": 17,
						"name": "secure",
						"deco": "xFNdNfZb",
						"endchar": 51,
						"endline": 775,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "value"
							}
						],
						"line": 779,
						"kind": "function",
						"char": 17,
						"name": "httpOnly",
						"deco": "FNdNfbZv",
						"endchar": 60,
						"endline": 779,
						"comment": " Prevents access to the cookie from scripts.\n"
					},
					{
						"line": 781,
						"kind": "function",
						"char": 17,
						"name": "httpOnly",
						"deco": "xFNdNfZb",
						"endchar": 55,
						"endline": 781,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "E4vibe4http6common6Cookie8SameSite",
								"name": "value"
							}
						],
						"line": 785,
						"kind": "function",
						"originalType": "@property @safe void(Cookie.SameSite value)",
						"char": 17,
						"name": "sameSite",
						"deco": "FNdNfE4vibe4http6common6Cookie8SameSiteZv",
						"endchar": 71,
						"endline": 785,
						"comment": " Prevent cross-site request forgery.\n"
					},
					{
						"line": 787,
						"kind": "function",
						"originalType": "const @property @safe Cookie.SameSite()",
						"char": 28,
						"name": "sameSite",
						"deco": "xFNdNfZE4vibe4http6common6Cookie8SameSite",
						"endchar": 66,
						"endline": 787,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "max_age"
							}
						],
						"line": 792,
						"kind": "function",
						"char": 7,
						"name": "expire",
						"deco": "FNfS4core4time8DurationZv",
						"endchar": 2,
						"endline": 796,
						"comment": " Sets the \"expires\" and \"max-age\" attributes to limit the life time of\n\t\tthe cookie.\n"
					},
					{
						"parameters": [
							{
								"deco": "S3std8datetime7systime7SysTime",
								"name": "expire_time"
							}
						],
						"line": 798,
						"kind": "function",
						"char": 7,
						"name": "expire",
						"deco": "FNfS3std8datetime7systime7SysTimeZv",
						"endchar": 2,
						"endline": 802,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							},
							{
								"deco": "E4vibe4http6common6Cookie8Encoding",
								"name": "encoding"
							}
						],
						"line": 805,
						"kind": "function",
						"char": 7,
						"name": "setValue",
						"deco": "FNfAyaE4vibe4http6common6Cookie8EncodingZv",
						"endchar": 2,
						"endline": 811,
						"comment": "Sets the cookie value encoded with the specified encoding.\n"
					},
					{
						"constraint": "isOutputRange!(R, char)",
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 814,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "R",
										"name": "dst"
									},
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 814,
								"kind": "function",
								"char": 7,
								"name": "writeString",
								"type": "void(R dst, string name)",
								"endchar": 2,
								"endline": 843
							}
						],
						"name": "writeString",
						"comment": "Writes out the full cookie in HTTP compatible format.\n"
					}
				],
				"line": 707,
				"name": "Cookie"
			},
			{
				"kind": "struct",
				"line": 914,
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 2,
						"members": [
							{
								"storageClass": [
									"@safe"
								],
								"line": 919,
								"kind": "variable",
								"char": 10,
								"name": "name",
								"deco": "Aya",
								"offset": 0,
								"comment": "Name of the cookie\n"
							},
							{
								"storageClass": [
									"@safe"
								],
								"line": 922,
								"kind": "variable",
								"char": 10,
								"name": "rawValue",
								"deco": "Aya",
								"offset": 16,
								"comment": "The raw cookie value as transferred over the wire\n"
							},
							{
								"parameters": [
									{
										"deco": "Aya",
										"name": "name"
									},
									{
										"deco": "Aya",
										"name": "value"
									},
									{
										"deco": "E4vibe4http6common6Cookie8Encoding",
										"default": "cast(Encoding)0",
										"name": "encoding"
									}
								],
								"line": 924,
								"kind": "constructor",
								"originalType": "ref @safe (string name, string value, .Cookie.Encoding encoding = .Cookie.Encoding.url)",
								"char": 3,
								"name": "this",
								"deco": "FNcNfAyaQdE4vibe4http6common6Cookie8EncodingZSQBjQBhQBf14CookieValueMapQBr",
								"endchar": 3,
								"endline": 928
							},
							{
								"line": 931,
								"kind": "function",
								"char": 10,
								"name": "value",
								"deco": "xFNfZAya",
								"endchar": 54,
								"endline": 931,
								"comment": "Treats the value as URL encoded\n"
							},
							{
								"parameters": [
									{
										"deco": "Aya",
										"name": "val"
									}
								],
								"line": 933,
								"kind": "function",
								"char": 8,
								"name": "value",
								"deco": "FNfAyaZv",
								"endchar": 55,
								"endline": 933,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"deco": "Aya",
										"name": "value"
									},
									{
										"deco": "E4vibe4http6common6Cookie8Encoding",
										"default": "cast(Encoding)0",
										"name": "encoding"
									}
								],
								"line": 936,
								"kind": "function",
								"originalType": "@safe void(string value, .Cookie.Encoding encoding = .Cookie.Encoding.url)",
								"char": 8,
								"name": "setValue",
								"deco": "FNfAyaE4vibe4http6common6Cookie8EncodingZv",
								"endchar": 3,
								"endline": 942,
								"comment": "Sets the cookie value, applying the specified encoding.\n"
							}
						],
						"line": 917,
						"name": "Cookie"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 949,
						"kind": "function",
						"originalType": "@safe ()",
						"char": 7,
						"name": "length",
						"deco": "FNaNbNiNfZm",
						"endchar": 2,
						"endline": 951
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "def_value"
							}
						],
						"line": 953,
						"kind": "function",
						"char": 9,
						"name": "get",
						"deco": "xFNfAyaQdZQg",
						"endchar": 2,
						"endline": 959
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 961,
						"kind": "function",
						"char": 11,
						"name": "getAll",
						"deco": "xFNfAyaZAQf",
						"endchar": 2,
						"endline": 968
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "Aya",
								"name": "value"
							},
							{
								"deco": "E4vibe4http6common6Cookie8Encoding",
								"default": "cast(Encoding)0",
								"name": "encoding"
							}
						],
						"line": 970,
						"kind": "function",
						"originalType": "@safe void(string name, string value, .Cookie.Encoding encoding = .Cookie.Encoding.url)",
						"char": 7,
						"name": "add",
						"deco": "FNfAyaQdE4vibe4http6common6Cookie8EncodingZv",
						"endchar": 2,
						"endline": 972
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							},
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 974,
						"kind": "function",
						"char": 7,
						"name": "opIndexAssign",
						"deco": "FNfAyaQdZv",
						"endchar": 2,
						"endline": 977
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 979,
						"kind": "function",
						"char": 9,
						"name": "opIndex",
						"deco": "xFNfAyaZQe",
						"endchar": 2,
						"endline": 986
					},
					{
						"parameters": [
							{
								"deco": "DFNfKS4vibe4http6common14CookieValueMap6CookieZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 988,
						"kind": "function",
						"char": 6,
						"name": "opApply",
						"deco": "FNfMDFNfKS4vibe4http6common14CookieValueMap6CookieZiZi",
						"endchar": 2,
						"endline": 994
					},
					{
						"parameters": [
							{
								"deco": "DFNfKS4vibe4http6common14CookieValueMap6CookieZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 996,
						"kind": "function",
						"char": 6,
						"name": "opApply",
						"deco": "xFNfMDFNfKS4vibe4http6common14CookieValueMap6CookieZiZi",
						"endchar": 2,
						"endline": 1002
					},
					{
						"parameters": [
							{
								"deco": "DFNfAyaQdZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 1004,
						"kind": "function",
						"char": 6,
						"name": "opApply",
						"deco": "FNfMDFNfAyaQdZiZi",
						"endchar": 2,
						"endline": 1010
					},
					{
						"parameters": [
							{
								"deco": "DFNfAyaQdZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 1012,
						"kind": "function",
						"char": 6,
						"name": "opApply",
						"deco": "xFNfMDFNfAyaQdZiZi",
						"endchar": 2,
						"endline": 1018
					},
					{
						"constraint": "op == \"in\"",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 1020,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1020,
								"kind": "function",
								"char": 7,
								"name": "opBinaryRight",
								"type": "(string name)",
								"endchar": 2,
								"endline": 1023
							}
						],
						"name": "opBinaryRight"
					},
					{
						"constraint": "op == \"in\"",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 1025,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 1025,
								"kind": "function",
								"char": 7,
								"name": "opBinaryRight",
								"type": "const (string name)",
								"endchar": 2,
								"endline": 1028
							}
						],
						"name": "opBinaryRight"
					}
				],
				"comment": "\n",
				"name": "CookieValueMap"
			}
		],
		"comment": "\tCommon classes for HTTP clients and servers.\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
		"name": "vibe.http.common"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/dist.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server18HTTPServerSettings",
						"name": "settings"
					},
					{
						"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
						"name": "handler"
					},
					{
						"deco": "Aya",
						"name": "balancer_address"
					},
					{
						"deco": "t",
						"default": "cast(ushort)11000u",
						"name": "balancer_port"
					}
				],
				"line": 26,
				"kind": "function",
				"originalType": "@safe HTTPListener(HTTPServerSettings settings, HTTPServerRequestDelegate handler, string balancer_address, ushort balancer_port = 11000)",
				"char": 14,
				"name": "listenHTTPDist",
				"deco": "FNfC4vibe4http6server18HTTPServerSettingsDFNfCQBqQBoQBm17HTTPServerRequestCQCtQCrQCp18HTTPServerResponseZvAyatZSQEeQEcQEa12HTTPListener",
				"endchar": 1,
				"endline": 52,
				"comment": "\tListens for HTTP connections on the specified load balancer using the given HTTP server settings.\n\n\tThis function is usable as direct replacement of listenHTTP\n"
			}
		],
		"comment": "\tInterface for the VibeDist load balancer\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
		"name": "vibe.http.dist"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/fileserver.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "local_path"
					},
					{
						"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
						"default": "null",
						"name": "settings"
					}
				],
				"line": 48,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegateS(NativePath local_path, HTTPFileServerSettings settings = null)",
				"char": 28,
				"name": "serveStaticFiles",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqCQCm4http10fileserver22HTTPFileServerSettingsZDFNfMCQElQBz6server17HTTPServerRequestMCQFtQDhQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 82,
				"comment": "\tReturns a request handler that serves files from the specified directory.\n\n\tSee `sendFile` for more information.\n\n\tParams:\n\t\tlocal_path = Path to the folder to serve files from.\n\t\tsettings = Optional settings object enabling customization of how\n\t\t\tthe files get served.\n\n\tReturns:\n\t\tA request delegate is returned, which is suitable for registering in\n\t\ta `URLRouter` or for passing to `listenHTTP`.\n\n\tSee_Also: `serveStaticFile`, `sendFile`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L90_C1)\n---\nimport vibe.http.fileserver;\nimport vibe.http.router;\nimport vibe.http.server;\n\nvoid setupServer()\n{\n\tauto router = new URLRouter;\n\t// add other routes here\n\trouter.get(\"*\", serveStaticFiles(\"public/\"));\n\n\tauto settings = new HTTPServerSettings;\n\tlistenHTTP(settings, router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L90_C1)\nExample:\nThis example serves all files in the \"public\" sub directory\n\twith an added prefix \"static/\" so that they don't interfere\n\twith other registered routes.$(DDOX_UNITTEST_HEADER __unittest_L110_C1)\n---\nimport vibe.http.fileserver;\nimport vibe.http.router;\nimport vibe.http.server;\n\nvoid setupRoutes()\n{\n \tauto router = new URLRouter;\n\t// add other routes here\n\n\tauto fsettings = new HTTPFileServerSettings;\n\tfsettings.serverPathPrefix = \"/static\";\n\trouter.get(\"static/*\", serveStaticFiles(\"public/\", fsettings));\n\n\tauto settings = new HTTPServerSettings;\n\tlistenHTTP(settings, router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L110_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "local_path"
					},
					{
						"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
						"default": "null",
						"name": "settings"
					}
				],
				"line": 84,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegateS(string local_path, HTTPFileServerSettings settings = null)",
				"char": 28,
				"name": "serveStaticFiles",
				"deco": "FNfAyaC4vibe4http10fileserver22HTTPFileServerSettingsZDFNfMCQCbQBz6server17HTTPServerRequestMCQDjQDhQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 87,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "local_path"
					},
					{
						"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
						"default": "null",
						"name": "settings"
					}
				],
				"line": 146,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegateS(NativePath local_path, HTTPFileServerSettings settings = null)",
				"char": 28,
				"name": "serveStaticFile",
				"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqCQCm4http10fileserver22HTTPFileServerSettingsZDFNfMCQElQBz6server17HTTPServerRequestMCQFtQDhQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 157,
				"comment": "\tReturns a request handler that serves a specific file on disk.\n\n\tSee `sendFile` for more information.\n\n\tParams:\n\t\tlocal_path = Path to the file to serve.\n\t\tsettings = Optional settings object enabling customization of how\n\t\t\tthe file gets served.\n\n\tReturns:\n\t\tA request delegate is returned, which is suitable for registering in\n\t\ta `URLRouter` or for passing to `listenHTTP`.\n\n\tSee_Also: `serveStaticFiles`, `sendFile`\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "local_path"
					},
					{
						"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
						"default": "null",
						"name": "settings"
					}
				],
				"line": 159,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegateS(string local_path, HTTPFileServerSettings settings = null)",
				"char": 28,
				"name": "serveStaticFile",
				"deco": "FNfAyaC4vibe4http10fileserver22HTTPFileServerSettingsZDFNfMCQCbQBz6server17HTTPServerRequestMCQDjQDhQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 162,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "path"
					},
					{
						"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
						"default": "null",
						"name": "settings"
					}
				],
				"line": 189,
				"kind": "function",
				"originalType": "@safe void(scope HTTPServerRequest req, scope HTTPServerResponse res, NativePath path, HTTPFileServerSettings settings = null)",
				"char": 6,
				"name": "sendFile",
				"deco": "FNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseSQCq4core4path__T11GenericPathTSQDvQBfQBd15PosixPathFormatZQBqCQFaQEy10fileserver22HTTPFileServerSettingsZv",
				"endchar": 1,
				"endline": 198,
				"comment": "\tSends a file to the given HTTP server response object.\n\n\tWhen serving a file, certain request headers are supported to avoid sending\n\tthe file if the client has it already cached. These headers are\n\t`\"If-Modified-Since\"` and `\"If-None-Match\"`. The client will be delivered\n\twith the necessary `\"Etag\"` (generated from size and last modification time\n\tof the file) and `\"Last-Modified\"` headers.\n\n\tThe cache control directives `\"Expires\"` and/or `\"Cache-Control\"` will also be\n\temitted if the `HTTPFileServerSettings.maxAge` field is set to a positive\n\tduration and/or `HTTPFileServerSettings.cacheControl` has been set.\n\n\tFinally, HEAD requests will automatically be handled without reading the\n\tactual file contents. Am empty response body is written instead.\n\n\tParams:\n\t\treq = The incoming HTTP request - cache and modification headers of the\n\t\t\trequest can influence the generated response.\n\t\tres = The response object to write to.\n\t\tpath = Path to the file to be sent.\n\t\tsettings = Optional settings object enabling customization of how the\n\t\t\tfile gets served.\n"
			},
			{
				"kind": "class",
				"line": 204,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 206,
						"kind": "variable",
						"char": 9,
						"name": "serverPathPrefix",
						"deco": "Aya",
						"init": "\"/\"",
						"offset": 16,
						"comment": "Prefix of the request path to strip before looking up files\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 209,
						"kind": "variable",
						"char": 11,
						"name": "maxAge",
						"deco": "S4core4time8Duration",
						"init": "Duration(0L)",
						"offset": 32,
						"comment": "Maximum cache age to report to the client (zero by default)\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 223,
						"kind": "variable",
						"char": 9,
						"name": "cacheControl",
						"deco": "Aya",
						"init": "null",
						"offset": 40,
						"comment": " Cache control to control where cache can be saved, if at all, such as\n\t\tproxies, the storage, etc.\n\n\t\tLeave null or empty to not emit any cache control directives other than\n\t\tmax-age if maxAge is set.\n\n\t\tCommon values include: public for making a shared resource cachable across\n\t\tmultiple users or private for a response that should only be cached for a\n\t\tsingle user.\n\n\t\tSee https://developer.mozilla.org/de/docs/Web/HTTP/Headers/Cache-Control\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 226,
						"kind": "variable",
						"char": 23,
						"name": "options",
						"deco": "E4vibe4http10fileserver20HTTPFileServerOption",
						"init": "cast(HTTPFileServerOption)2",
						"offset": 56,
						"comment": "General options\n\nadditional options\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 240,
						"kind": "variable",
						"char": 17,
						"name": "encodingFileExtension",
						"deco": "HAyaQd",
						"offset": 64,
						"comment": " Maps from encoding scheme (e.g. \"gzip\") to file extension.\n\n\t\tIf a request accepts a supported encoding scheme, then the file server\n\t\twill look for a file with the extension as a suffix and, if that exists,\n\t\tsends it as the encoded representation instead of sending the original\n\t\tfile.\n\n\t\tExample:\n\t\t\t---\n\t\t\tsettings.encodingFileExtension[\"gzip\"] = \".gz\";\n\t\t\t---\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 250,
						"kind": "variable",
						"originalType": "void delegate(scope HTTPServerRequest req, scope HTTPServerResponse res, ref string physicalPath)",
						"char": 100,
						"name": "preWriteCallback",
						"deco": "DFNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseKAyaZv",
						"init": "null",
						"offset": 72,
						"comment": "\t\tCalled just before headers and data are sent.\n\t\tAllows headers to be customized, or other custom processing to be performed.\n\n\t\tNote: Any changes you make to the response, physicalPath, or anything\n\t\telse during this function will NOT be verified by Vibe.d for correctness.\n\t\tMake sure any alterations you make are complete and correct according to HTTP spec.\n"
					},
					{
						"line": 252,
						"kind": "constructor",
						"originalType": "@safe ()",
						"char": 2,
						"name": "this",
						"deco": "FNfZC4vibe4http10fileserver22HTTPFileServerSettings",
						"endchar": 2,
						"endline": 254
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "path_prefix"
							}
						],
						"line": 256,
						"kind": "constructor",
						"originalType": "@safe (string path_prefix)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyaZC4vibe4http10fileserver22HTTPFileServerSettings",
						"endchar": 2,
						"endline": 260
					}
				],
				"comment": "\tConfiguration options for the static file server.\n",
				"name": "HTTPFileServerSettings"
			},
			{
				"line": 267,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 268,
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 270,
						"char": 2,
						"value": "1",
						"comment": "respond with 404 if a file was not found\n",
						"name": "failIfNotFound"
					},
					{
						"kind": "enum member",
						"line": 272,
						"char": 2,
						"value": "2",
						"comment": "serve index.html for directories\n",
						"name": "serveIndexHTML"
					},
					{
						"kind": "enum member",
						"line": 274,
						"char": 2,
						"value": "2",
						"comment": "default options are serveIndexHTML\n",
						"name": "defaults"
					}
				],
				"name": "HTTPFileServerOption",
				"baseDeco": "i",
				"comment": "   Additional options for the static file server.\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					},
					{
						"deco": "Aya",
						"name": "file"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "cache_control"
					},
					{
						"deco": "S4core4time8Duration",
						"default": "zero()",
						"name": "max_age"
					}
				],
				"line": 433,
				"kind": "function",
				"originalType": "@safe bool(scope HTTPServerRequest req, scope HTTPServerResponse res, string file, string cache_control = null, Duration max_age = Duration.zero)",
				"char": 6,
				"name": "handleCacheFile",
				"deco": "FNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseAyaQdS4core4time8DurationZb",
				"endchar": 1,
				"endline": 437,
				"comment": "\tCalls $(D handleCache) with prefilled etag and lastModified value based on a file.\n\n\tSee_Also: handleCache\n\n\tReturns: $(D true) if the cache was already handled and no further response must be sent or $(D false) if a response must be sent.\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					},
					{
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"name": "file"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "cache_control"
					},
					{
						"deco": "S4core4time8Duration",
						"default": "zero()",
						"name": "max_age"
					}
				],
				"line": 440,
				"kind": "function",
				"originalType": "@safe bool(scope HTTPServerRequest req, scope HTTPServerResponse res, NativePath file, string cache_control = null, Duration max_age = Duration.zero)",
				"char": 6,
				"name": "handleCacheFile",
				"deco": "FNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseSQCq4core4path__T11GenericPathTSQDvQBfQBd15PosixPathFormatZQBqAyaSQCk4time8DurationZb",
				"endchar": 1,
				"endline": 456,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					},
					{
						"deco": "S4vibe4core4file8FileInfo",
						"name": "dirent"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "cache_control"
					},
					{
						"deco": "S4core4time8Duration",
						"default": "zero()",
						"name": "max_age"
					}
				],
				"line": 459,
				"kind": "function",
				"originalType": "@safe bool(scope HTTPServerRequest req, scope HTTPServerResponse res, FileInfo dirent, string cache_control = null, Duration max_age = Duration.zero)",
				"char": 6,
				"name": "handleCacheFile",
				"deco": "FNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseSQCq4core4file8FileInfoAyaSQx4time8DurationZb",
				"endchar": 1,
				"endline": 470,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					},
					{
						"deco": "S4vibe4http10fileserver4ETag",
						"name": "etag"
					},
					{
						"deco": "S3std8datetime7systime7SysTime",
						"name": "last_modified"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "cache_control"
					},
					{
						"deco": "S4core4time8Duration",
						"default": "zero()",
						"name": "max_age"
					}
				],
				"line": 485,
				"kind": "function",
				"originalType": "@safe bool(scope HTTPServerRequest req, scope HTTPServerResponse res, ETag etag, SysTime last_modified, string cache_control = null, Duration max_age = Duration.zero)",
				"char": 6,
				"name": "handleCache",
				"deco": "FNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseSQCqQCo10fileserver4ETagS3std8datetime7systime7SysTimeAyaS4core4time8DurationZb",
				"endchar": 1,
				"endline": 568,
				"comment": "\tProcesses header tags in a request and writes responses given on requested cache status.\n\n\tParams:\n\t\treq = the client request used to determine cache control flow.\n\t\tres = the response to write cache headers to.\n\t\tetag = if set to anything except .init, adds a Etag header to the response and enables handling of If-Match and If-None-Match cache control request headers.\n\t\tlast_modified = if set to anything except .init, adds a Last-Modified header to the response and enables handling of If-Modified-Since and If-Unmodified-Since cache control request headers.\n\t\tcache_control = if set, adds or modifies the Cache-Control header in the response to this string. Might get an additional max-age value appended if max_age is set.\n\t\tmax_age = optional duration to set the Expires header and Cache-Control max-age part to. (if no existing `max-age=` part is given in the cache_control parameter)\n\n\tReturns: $(D true) if the cache was already handled and no further response must be sent or $(D false) if a response must be sent.\n"
			},
			{
				"kind": "struct",
				"line": 575,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 577,
						"kind": "variable",
						"char": 7,
						"name": "weak",
						"deco": "b",
						"offset": 0
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 578,
						"kind": "variable",
						"char": 9,
						"name": "tag",
						"deco": "Aya",
						"offset": 8
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "s"
							}
						],
						"line": 580,
						"kind": "function",
						"char": 14,
						"name": "parse",
						"deco": "FNfAyaZS4vibe4http10fileserver4ETag",
						"endchar": 2,
						"endline": 594
					},
					{
						"line": 596,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFNdNfZAya",
						"endchar": 2,
						"endline": 599
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Axh",
								"storageClass": [
									"scope"
								],
								"name": "bytes"
							},
							{
								"deco": "E3std8typecons__T4FlagVAyaa4_7765616bZQv",
								"default": "cast(Flag)false",
								"name": "weak"
							}
						],
						"line": 604,
						"kind": "function",
						"originalType": "@safe ETag(scope const(ubyte)[] bytes, Flag!\"weak\" weak = No.weak)",
						"char": 14,
						"name": "fromBytesBase64URLNoPadding",
						"deco": "FNfMAxhE3std8typecons__T4FlagVAyaa4_7765616bZQvZS4vibe4http10fileserver4ETag",
						"endchar": 2,
						"endline": 609,
						"comment": "\t\tEncodes the bytes with URL Base64 to a human readable string and returns an ETag struct wrapping it.\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"line": 614,
						"kind": "template",
						"char": 14,
						"members": [
							{
								"parameters": [
									{
										"type": "Flag!\"weak\"",
										"name": "weak"
									},
									{
										"type": "T",
										"name": "data"
									}
								],
								"line": 614,
								"kind": "function",
								"char": 14,
								"name": "md5",
								"type": "ETag(Flag!\"weak\" weak, T data)",
								"endchar": 2,
								"endline": 619
							}
						],
						"name": "md5",
						"comment": "\t\tHashes the input bytes with md5 and returns an URL Base64 encoded representation as ETag.\n"
					}
				],
				"comment": "\tRepresents an Entity-Tag value for use inside HTTP Cache headers.\n\n\tStandards: https://tools.ietf.org/html/rfc7232#section-2.3\n",
				"name": "ETag"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "match"
					},
					{
						"deco": "S4vibe4http10fileserver4ETag",
						"name": "etag"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa9_616c6c6f775765616bZQBf",
						"name": "allow_weak"
					}
				],
				"line": 627,
				"kind": "function",
				"originalType": "@safe bool(string match, ETag etag, Flag!\"allowWeak\" allow_weak)",
				"char": 6,
				"name": "cacheMatch",
				"deco": "FNfAyaS4vibe4http10fileserver4ETagE3std8typecons__T4FlagVQCca9_616c6c6f775765616bZQBfZb",
				"endchar": 1,
				"endline": 668,
				"comment": "\tMatches a given match expression with a specific ETag. Can allow or disallow weak ETags and supports multiple tags.\n\n\tStandards: https://tools.ietf.org/html/rfc7232#section-2.3.2\n"
			}
		],
		"comment": "\tA static HTTP file server.\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.http.fileserver"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/form.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.inet.webform"
			},
			{
				"constraint": "isOutputRange!(R, char)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 25,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "dst"
							},
							{
								"type": "string[string]",
								"storageClass": [
									"in"
								],
								"name": "data"
							}
						],
						"line": 25,
						"kind": "function",
						"char": 6,
						"name": "writeFormData",
						"type": "void(R dst, in string[string] data)",
						"endchar": 1,
						"endline": 38
					}
				],
				"name": "writeFormData",
				"comment": "\tEncodes the given dictionary as URL encoded form data.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L41_C1)\n---\nimport std.array;\nimport vibe.core.log;\nimport vibe.http.form;\n\nvoid test()\n{\n\tauto dst = appender!string();\n\tdst.writeFormData([\"field1\": \"value1\", \"field2\": \"value2\"]);\n\tlogInfo(\"Form data: %s\", dst.data);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L41_C1)\n"
			},
			{
				"constraint": "isOutputRange!(R, char) && isTuple!(ElementType!PairRange) && (ElementType!PairRange.length == 2)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "PairRange"
					}
				],
				"line": 57,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "dst"
							},
							{
								"type": "PairRange",
								"name": "pr"
							}
						],
						"line": 57,
						"kind": "function",
						"char": 6,
						"name": "writeFormData",
						"type": "void(R dst, PairRange pr)",
						"endchar": 1,
						"endline": 77
					}
				],
				"name": "writeFormData",
				"comment": "\tEncodes the given ranges of `Tuple!(string, string)` as URL encoded form data\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6client17HTTPClientRequest",
						"name": "req"
					},
					{
						"deco": "xHAyaAya",
						"name": "form"
					}
				],
				"line": 82,
				"kind": "function",
				"originalType": "void(HTTPClientRequest req, in string[string] form)",
				"char": 6,
				"name": "writeFormBody",
				"deco": "FC4vibe4http6client17HTTPClientRequestxHAyaAyaZv",
				"endchar": 1,
				"endline": 93,
				"comment": "\tWrites a `vibe.http.client.HTTPClientRequest` body as URL encoded form data.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L96_C1)\n---\nimport vibe.core.log;\nimport vibe.http.client;\nimport vibe.http.form;\nimport vibe.stream.operations;\n\nvoid sendForm()\n{\n\trequestHTTP(\"http://example.com/form\",\n\t\t(scope req) {\n\t\t\treq.method = HTTPMethod.POST;\n\t\t\treq.writeFormBody([\"field1\": \"value1\", \"field2\": \"value2\"]);\n\t\t},\n\t\t(scope res) {\n\t\t\tlogInfo(\"Response: %s\", res.bodyReader.readAllUTF8());\n\t\t});\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L96_C1)\n"
			},
			{
				"constraint": "isTuple!(ElementType!PairRange) && (ElementType!PairRange.length == 2)",
				"parameters": [
					{
						"kind": "type",
						"name": "PairRange"
					}
				],
				"line": 124,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "HTTPClientRequest",
								"name": "req"
							},
							{
								"type": "PairRange",
								"name": "form"
							}
						],
						"line": 124,
						"kind": "function",
						"char": 6,
						"name": "writeFormBody",
						"type": "void(HTTPClientRequest req, PairRange form)",
						"endchar": 1,
						"endline": 136
					}
				],
				"name": "writeFormBody",
				"comment": "\tWrites a `vibe.http.client.HTTPClientRequest` body as URL encoded form data.\n\n\tParams:\n\t  req  = Request object to write to.\n\t  form = range of `t = Tuple!(string, string)`,\n\t\t\t where `t[0]` is the name and `t[1]` the\n\t\t\t value of a form entry.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L139_C1)\n---\nimport vibe.core.log;\nimport vibe.http.client;\nimport vibe.http.form;\nimport vibe.stream.operations;\nimport std.range;\n\nvoid sendForm()\n{\n\tstring[] names = [\"foo\", \"bar\", \"baz\"];\n\tstring[] values = [\"1\", \"2\", \"3\"];\n\tauto form = zip(names, values);\n\trequestHTTP(\"http://example.com/form\",\n\t\t(scope req) {\n\t\t\treq.method = HTTPMethod.POST;\n\t\t\treq.writeFormBody(form);\n\t\t},\n\t\t(scope res) {\n\t\t\tlogInfo(\"Response: %s\", res.bodyReader.readAllUTF8());\n\t\t});\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L139_C1)\n"
			}
		],
		"comment": "\tConvenience functions for working with web forms.\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
		"name": "vibe.http.form"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/internal/basic_auth_client.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "C4vibe4http6common11HTTPRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "Aya",
						"name": "user"
					},
					{
						"deco": "Aya",
						"name": "password"
					}
				],
				"line": 16,
				"kind": "function",
				"char": 6,
				"name": "addBasicAuth",
				"deco": "FNfMC4vibe4http6common11HTTPRequestAyaQdZv",
				"endchar": 1,
				"endline": 21,
				"comment": "\tAugments the given HTTP request with an HTTP Basic Auth header.\n"
			}
		],
		"comment": "\tImplements HTTP Basic Auth for client.\n\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
		"name": "vibe.http.internal.basic_auth_client"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/log.d",
		"members": [
			{
				"kind": "class",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "xC4vibe4http6server18HTTPServerSettings",
								"name": "settings"
							},
							{
								"deco": "Aya",
								"name": "format"
							}
						],
						"line": 32,
						"kind": "constructor",
						"originalType": "@safe (in HTTPServerSettings settings, string format)",
						"char": 2,
						"name": "this",
						"deco": "FNfxC4vibe4http6server18HTTPServerSettingsAyaZCQBqQBo3log10HTTPLogger",
						"endchar": 2,
						"endline": 38
					},
					{
						"line": 40,
						"kind": "function",
						"char": 7,
						"name": "close",
						"deco": "FNfZv",
						"endchar": 16,
						"endline": 40
					},
					{
						"storageClass": [
							"final"
						],
						"parameters": [
							{
								"deco": "C4vibe4http6server17HTTPServerRequest",
								"storageClass": [
									"scope"
								],
								"name": "req"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerResponse",
								"storageClass": [
									"scope"
								],
								"name": "res"
							}
						],
						"line": 42,
						"kind": "function",
						"char": 13,
						"name": "log",
						"deco": "FNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseZv",
						"endchar": 2,
						"endline": 49
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Axa",
								"name": "ln"
							}
						],
						"line": 51,
						"kind": "function",
						"char": 26,
						"name": "writeLine",
						"deco": "FNfAxaZv",
						"protection": "protected"
					}
				],
				"line": 22,
				"name": "HTTPLogger"
			},
			{
				"line": 55,
				"kind": "class",
				"char": 7,
				"base": "vibe.http.log.HTTPLogger",
				"members": [
					{
						"parameters": [
							{
								"deco": "C4vibe4http6server18HTTPServerSettings",
								"name": "settings"
							},
							{
								"deco": "Aya",
								"name": "format"
							}
						],
						"line": 58,
						"kind": "constructor",
						"originalType": "@safe (HTTPServerSettings settings, string format)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4http6server18HTTPServerSettingsAyaZCQBqQBo3log17HTTPConsoleLogger",
						"endchar": 2,
						"endline": 61
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "Axa",
								"name": "ln"
							}
						],
						"overrides": [
							"vibe.http.log.HTTPLogger.writeLine"
						],
						"line": 63,
						"kind": "function",
						"char": 26,
						"name": "writeLine",
						"deco": "FNfAxaZv",
						"protection": "protected",
						"endchar": 2,
						"endline": 66
					}
				],
				"name": "HTTPConsoleLogger"
			},
			{
				"line": 70,
				"kind": "class",
				"char": 7,
				"base": "vibe.http.log.HTTPLogger",
				"members": [
					{
						"parameters": [
							{
								"deco": "C4vibe4http6server18HTTPServerSettings",
								"name": "settings"
							},
							{
								"deco": "Aya",
								"name": "format"
							},
							{
								"deco": "Aya",
								"name": "filename"
							}
						],
						"line": 77,
						"kind": "constructor",
						"originalType": "@safe (HTTPServerSettings settings, string format, string filename)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4http6server18HTTPServerSettingsAyaQdZCQBsQBq3log14HTTPFileLogger",
						"endchar": 2,
						"endline": 81
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.http.log.HTTPLogger.close"
						],
						"line": 83,
						"kind": "function",
						"char": 16,
						"name": "close",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 87
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "Axa",
								"name": "ln"
							}
						],
						"overrides": [
							"vibe.http.log.HTTPLogger.writeLine"
						],
						"line": 89,
						"kind": "function",
						"char": 26,
						"name": "writeLine",
						"deco": "FNfAxaZv",
						"protection": "protected",
						"endchar": 2,
						"endline": 95
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 7,
						"line": 70,
						"name": "~this"
					}
				],
				"name": "HTTPFileLogger"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 98,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "ln"
							},
							{
								"type": "string",
								"name": "format"
							},
							{
								"type": "HTTPServerRequest",
								"storageClass": [
									"scope"
								],
								"name": "req"
							},
							{
								"type": "HTTPServerResponse",
								"storageClass": [
									"scope"
								],
								"name": "res"
							},
							{
								"type": "HTTPServerSettings",
								"storageClass": [
									"in"
								],
								"name": "settings"
							}
						],
						"line": 98,
						"kind": "function",
						"char": 6,
						"name": "formatApacheLog",
						"type": "@safe void(ref R ln, string format, scope HTTPServerRequest req, scope HTTPServerResponse res, in HTTPServerSettings settings)",
						"endchar": 1,
						"endline": 259
					}
				],
				"name": "formatApacheLog"
			}
		],
		"comment": "\tA HTTP 1.1/1.0 server implementation.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
		"name": "vibe.http.log"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/proxy.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server18HTTPServerSettings",
						"name": "settings"
					},
					{
						"deco": "C4vibe4http5proxy17HTTPProxySettings",
						"name": "proxy_settings"
					}
				],
				"line": 33,
				"kind": "function",
				"char": 6,
				"name": "listenHTTPProxy",
				"deco": "FC4vibe4http6server18HTTPServerSettingsCQBmQBk5proxy17HTTPProxySettingsZv",
				"endchar": 1,
				"endline": 38,
				"comment": "\tTransparently forwards all requests to the proxy to another host.\n\n\tThe configurations set in 'settings' and 'proxy_settings' determines the exact\n\tbehavior.\n"
			},
			{
				"kind": "alias",
				"char": 1,
				"line": 40,
				"name": "listenHTTPReverseProxy"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server18HTTPServerSettings",
						"name": "settings"
					},
					{
						"deco": "Aya",
						"name": "destination_host"
					},
					{
						"deco": "t",
						"name": "destination_port"
					}
				],
				"line": 48,
				"kind": "function",
				"char": 6,
				"name": "listenHTTPReverseProxy",
				"deco": "FC4vibe4http6server18HTTPServerSettingsAyatZv",
				"endchar": 1,
				"endline": 57,
				"comment": "\tTransparently forwards all requests to the proxy to a destination_host.\n\n\tYou can use the hostName field in the 'settings' to combine multiple internal HTTP servers\n\tinto one public web server with multiple virtual hosts.\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http6server18HTTPServerSettings",
						"name": "settings"
					}
				],
				"line": 62,
				"kind": "function",
				"char": 6,
				"name": "listenHTTPForwardProxy",
				"deco": "FC4vibe4http6server18HTTPServerSettingsZv",
				"endchar": 1,
				"endline": 66,
				"comment": "\tTransparently forwards all requests to the proxy to the requestURL of the request.\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4http5proxy17HTTPProxySettings",
						"name": "settings"
					}
				],
				"line": 71,
				"kind": "function",
				"originalType": "HTTPServerRequestDelegateS(HTTPProxySettings settings)",
				"char": 28,
				"name": "proxyRequest",
				"deco": "FC4vibe4http5proxy17HTTPProxySettingsZDFNfMCQBqQBo6server17HTTPServerRequestMCQCyQCwQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 221,
				"comment": "\tReturns a HTTP request handler that forwards any request to the specified or requested host/port.\n"
			},
			{
				"kind": "alias",
				"line": 223,
				"char": 1,
				"comment": "Compatibility alias - will be deprecated soon\n",
				"name": "reverseProxyRequest"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "destination_host"
					},
					{
						"deco": "t",
						"name": "destination_port"
					}
				],
				"line": 228,
				"kind": "function",
				"originalType": "HTTPServerRequestDelegateS(string destination_host, ushort destination_port)",
				"char": 28,
				"name": "reverseProxyRequest",
				"deco": "FAyatZDFNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 237,
				"comment": "\tReturns a HTTP request handler that forwards any request to the specified host/port.\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "destination"
					}
				],
				"line": 240,
				"kind": "function",
				"originalType": "HTTPServerRequestDelegateS(URL destination)",
				"char": 28,
				"name": "reverseProxyRequest",
				"deco": "FS4vibe4inet3url3URLZDFNfMCQz4http6server17HTTPServerRequestMCQCiQBkQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 245,
				"comment": "ditto\n"
			},
			{
				"line": 250,
				"kind": "function",
				"originalType": "HTTPServerRequestDelegateS()",
				"char": 28,
				"name": "forwardProxyRequest",
				"deco": "FZDFNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 252,
				"comment": "\tReturns a HTTP request handler that forwards any request to the requested host/port.\n"
			},
			{
				"line": 257,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 17,
						"value": "0",
						"line": 257,
						"name": "forward"
					},
					{
						"kind": "enum member",
						"char": 26,
						"value": "1",
						"line": 257,
						"name": "reverse"
					}
				],
				"name": "ProxyMode",
				"baseDeco": "i",
				"comment": "\tEnum to represent the two modes a proxy can operate as.\n"
			},
			{
				"kind": "class",
				"line": 262,
				"char": 7,
				"members": [
					{
						"line": 264,
						"kind": "function",
						"char": 19,
						"name": "destinationHost",
						"deco": "xFNdZAya",
						"endchar": 70,
						"endline": 264,
						"comment": "Scheduled for deprecation - use `destination.host` instead.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "host"
							}
						],
						"line": 266,
						"kind": "function",
						"char": 17,
						"name": "destinationHost",
						"deco": "FNdAyaZv",
						"endchar": 73,
						"endline": 266,
						"comment": "ditto\n"
					},
					{
						"line": 268,
						"kind": "function",
						"char": 19,
						"name": "destinationPort",
						"deco": "xFNdZt",
						"endchar": 70,
						"endline": 268,
						"comment": "Scheduled for deprecation - use `destination.port` instead.\n"
					},
					{
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							}
						],
						"line": 270,
						"kind": "function",
						"char": 17,
						"name": "destinationPort",
						"deco": "FNdtZv",
						"endchar": 73,
						"endline": 270,
						"comment": "ditto\n"
					},
					{
						"line": 273,
						"kind": "variable",
						"char": 6,
						"name": "destination",
						"deco": "S4vibe4inet3url3URL",
						"init": "URL(\"http\", \"\", null, cast(ushort)0u, null, null, null, null)",
						"offset": 16,
						"comment": "The destination URL to forward requests to\n"
					},
					{
						"line": 275,
						"kind": "variable",
						"char": 12,
						"name": "proxyMode",
						"deco": "E4vibe4http5proxy9ProxyMode",
						"offset": 136,
						"comment": "The mode of the proxy i.e forward, reverse\n"
					},
					{
						"line": 277,
						"kind": "variable",
						"char": 7,
						"name": "avoidCompressedRequests",
						"deco": "b",
						"offset": 140,
						"comment": "Avoids compressed transfers between proxy and destination hosts\n"
					},
					{
						"line": 279,
						"kind": "variable",
						"char": 7,
						"name": "handleConnectRequests",
						"deco": "b",
						"offset": 141,
						"comment": "Handle CONNECT requests for creating a tunnel to the destination host\n"
					},
					{
						"line": 282,
						"kind": "constructor",
						"originalType": "()",
						"char": 2,
						"name": "this",
						"deco": "FZC4vibe4http5proxy17HTTPProxySettings",
						"endchar": 42,
						"endline": 282,
						"comment": "Empty default constructor for backwards compatibility - will be deprecated soon.\n"
					},
					{
						"parameters": [
							{
								"deco": "E4vibe4http5proxy9ProxyMode",
								"name": "mode"
							}
						],
						"line": 284,
						"kind": "constructor",
						"originalType": "(ProxyMode mode)",
						"char": 2,
						"name": "this",
						"deco": "FE4vibe4http5proxy9ProxyModeZCQBcQBaQy17HTTPProxySettings",
						"endchar": 43,
						"endline": 284,
						"comment": "Explicitly sets the proxy mode.\n"
					}
				],
				"comment": "\tProvides advanced configuration facilities for reverse proxy servers.\n",
				"name": "HTTPProxySettings"
			},
			{
				"kind": "alias",
				"line": 287,
				"char": 1,
				"deco": "C4vibe4http5proxy17HTTPProxySettings",
				"comment": "Compatibility alias - will be deprecated soon.\n",
				"name": "HTTPReverseProxySettings"
			}
		],
		"comment": "\tHTTP (reverse) proxy implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.http.proxy"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/router.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 12,
				"name": "vibe.http.server"
			},
			{
				"line": 60,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "prefix"
							}
						],
						"line": 69,
						"kind": "constructor",
						"originalType": "@safe (string prefix = null)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyaZC4vibe4http6router9URLRouter",
						"endchar": 2,
						"endline": 72
					},
					{
						"line": 79,
						"kind": "function",
						"char": 19,
						"name": "prefix",
						"deco": "xFNdNfZAya",
						"endchar": 53,
						"endline": 79,
						"comment": " Sets a common prefix for all registered routes.\n\n\t\tAll routes will implicitly have this prefix prepended before being\n\t\tmatched against incoming requests.\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "enable"
							}
						],
						"line": 90,
						"kind": "function",
						"char": 17,
						"name": "enableRootDir",
						"deco": "FNdNfbZv",
						"endchar": 74,
						"endline": 90,
						"comment": " Controls the computation of the \"routerRootDir\" parameter.\n\n\t\tThis parameter is available as `req.params[\"routerRootDir\"]` and\n\t\tcontains the relative path to the base path of the router. The base\n\t\tpath is determined by the `prefix` property.\n\n\t\tNote that this feature currently is requires dynamic memory allocations\n\t\tand is opt-in for this reason.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 93,
						"kind": "function",
						"char": 11,
						"name": "route",
						"deco": "FNfAyaZS4vibe4http6router8URLRoute",
						"in": {
							"parameters": [
								{
									"deco": "Aya",
									"storageClass": [
										"ref"
									],
									"name": "path"
								}
							],
							"line": 94,
							"kind": "function",
							"originalType": "@safe void(ref string path)",
							"char": 5,
							"name": "__require",
							"deco": "FNaNbNiNfKAyaZv",
							"endchar": 5,
							"endline": 94
						},
						"endchar": 38,
						"endline": 95,
						"comment": "Returns a single route handle to conveniently register multiple methods.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L98_C2)\n---\nvoid getFoo(scope HTTPServerRequest req, scope HTTPServerResponse res) { /* ... */ }\nvoid postFoo(scope HTTPServerRequest req, scope HTTPServerResponse res) { /* ... */ }\nvoid deleteFoo(scope HTTPServerRequest req, scope HTTPServerResponse res) { /* ... */ }\n\nauto r = new URLRouter;\n\n// using 'with' statement\nwith (r.route(\"/foo\")) {\n\tget(&getFoo);\n\tpost(&postFoo);\n\tdelete_(&deleteFoo);\n}\n\n// using method chaining\nr.route(\"/foo\")\n\t.get(&getFoo)\n\t.post(&postFoo)\n\t.delete_(&deleteFoo);\n\n// without using route()\nr.get(\"/foo\", &getFoo);\nr.post(\"/foo\", &postFoo);\nr.delete_(\"/foo\", &deleteFoo);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L98_C2)\n"
					},
					{
						"constraint": "isValidHandler!Handler",
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 125,
						"kind": "template",
						"char": 12,
						"members": [
							{
								"parameters": [
									{
										"type": "HTTPMethod",
										"name": "method"
									},
									{
										"type": "string",
										"name": "path"
									},
									{
										"type": "Handler",
										"name": "handler"
									}
								],
								"line": 125,
								"kind": "function",
								"char": 12,
								"name": "match",
								"type": "URLRouter(HTTPMethod method, string path, Handler handler)",
								"endchar": 2,
								"endline": 134
							}
						],
						"name": "match",
						"comment": "Adds a new route for requests matching the specified HTTP method and pattern.\n"
					},
					{
						"parameters": [
							{
								"deco": "E4vibe4http6common10HTTPMethod",
								"name": "method"
							},
							{
								"deco": "Aya",
								"name": "path"
							},
							{
								"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
								"name": "handler"
							}
						],
						"line": 137,
						"kind": "function",
						"originalType": "@safe URLRouter(HTTPMethod method, string path, HTTPServerRequestDelegate handler)",
						"char": 12,
						"name": "match",
						"deco": "FNfE4vibe4http6common10HTTPMethodAyaDFNfCQBlQBj6server17HTTPServerRequestCQCsQCqQBh18HTTPServerResponseZvZCQDzQDx6router9URLRouter",
						"endchar": 2,
						"endline": 140,
						"comment": "ditto\n"
					},
					{
						"constraint": "isValidHandler!Handler",
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 143,
						"kind": "template",
						"char": 12,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "url_match"
									},
									{
										"type": "Handler",
										"name": "handler"
									}
								],
								"line": 143,
								"kind": "function",
								"char": 12,
								"name": "get",
								"type": "URLRouter(string url_match, Handler handler)",
								"endchar": 140,
								"endline": 143
							}
						],
						"name": "get",
						"comment": "Adds a new route for GET requests matching the specified pattern.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
								"name": "handler"
							}
						],
						"line": 145,
						"kind": "function",
						"originalType": "@safe URLRouter(string url_match, HTTPServerRequestDelegate handler)",
						"char": 12,
						"name": "get",
						"deco": "FNfAyaDFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZvZCQCsQCq6router9URLRouter",
						"endchar": 121,
						"endline": 145,
						"comment": "ditto\n"
					},
					{
						"constraint": "isValidHandler!Handler",
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 148,
						"kind": "template",
						"char": 12,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "url_match"
									},
									{
										"type": "Handler",
										"name": "handler"
									}
								],
								"line": 148,
								"kind": "function",
								"char": 12,
								"name": "post",
								"type": "URLRouter(string url_match, Handler handler)",
								"endchar": 142,
								"endline": 148
							}
						],
						"name": "post",
						"comment": "Adds a new route for POST requests matching the specified pattern.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
								"name": "handler"
							}
						],
						"line": 150,
						"kind": "function",
						"originalType": "@safe URLRouter(string url_match, HTTPServerRequestDelegate handler)",
						"char": 12,
						"name": "post",
						"deco": "FNfAyaDFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZvZCQCsQCq6router9URLRouter",
						"endchar": 123,
						"endline": 150,
						"comment": "ditto\n"
					},
					{
						"constraint": "isValidHandler!Handler",
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 153,
						"kind": "template",
						"char": 12,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "url_match"
									},
									{
										"type": "Handler",
										"name": "handler"
									}
								],
								"line": 153,
								"kind": "function",
								"char": 12,
								"name": "put",
								"type": "URLRouter(string url_match, Handler handler)",
								"endchar": 140,
								"endline": 153
							}
						],
						"name": "put",
						"comment": "Adds a new route for PUT requests matching the specified pattern.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
								"name": "handler"
							}
						],
						"line": 155,
						"kind": "function",
						"originalType": "@safe URLRouter(string url_match, HTTPServerRequestDelegate handler)",
						"char": 12,
						"name": "put",
						"deco": "FNfAyaDFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZvZCQCsQCq6router9URLRouter",
						"endchar": 121,
						"endline": 155,
						"comment": "ditto\n"
					},
					{
						"constraint": "isValidHandler!Handler",
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 158,
						"kind": "template",
						"char": 12,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "url_match"
									},
									{
										"type": "Handler",
										"name": "handler"
									}
								],
								"line": 158,
								"kind": "function",
								"char": 12,
								"name": "delete_",
								"type": "URLRouter(string url_match, Handler handler)",
								"endchar": 147,
								"endline": 158
							}
						],
						"name": "delete_",
						"comment": "Adds a new route for DELETE requests matching the specified pattern.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
								"name": "handler"
							}
						],
						"line": 160,
						"kind": "function",
						"originalType": "@safe URLRouter(string url_match, HTTPServerRequestDelegate handler)",
						"char": 12,
						"name": "delete_",
						"deco": "FNfAyaDFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZvZCQCsQCq6router9URLRouter",
						"endchar": 128,
						"endline": 160,
						"comment": "ditto\n"
					},
					{
						"constraint": "isValidHandler!Handler",
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 163,
						"kind": "template",
						"char": 12,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "url_match"
									},
									{
										"type": "Handler",
										"name": "handler"
									}
								],
								"line": 163,
								"kind": "function",
								"char": 12,
								"name": "patch",
								"type": "URLRouter(string url_match, Handler handler)",
								"endchar": 144,
								"endline": 163
							}
						],
						"name": "patch",
						"comment": "Adds a new route for PATCH requests matching the specified pattern.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
								"name": "handler"
							}
						],
						"line": 165,
						"kind": "function",
						"originalType": "@safe URLRouter(string url_match, HTTPServerRequestDelegate handler)",
						"char": 12,
						"name": "patch",
						"deco": "FNfAyaDFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZvZCQCsQCq6router9URLRouter",
						"endchar": 125,
						"endline": 165,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 168,
						"kind": "template",
						"char": 12,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "url_match"
									},
									{
										"type": "Handler",
										"name": "handler"
									}
								],
								"line": 168,
								"kind": "function",
								"char": 12,
								"name": "any",
								"type": "URLRouter(string url_match, Handler handler)",
								"endchar": 2,
								"endline": 176
							}
						],
						"name": "any",
						"comment": "Adds a new route for requests matching the specified pattern, regardless of their HTTP verb.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
								"name": "handler"
							}
						],
						"line": 178,
						"kind": "function",
						"originalType": "@safe URLRouter(string url_match, HTTPServerRequestDelegate handler)",
						"char": 12,
						"name": "any",
						"deco": "FNfAyaDFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZvZCQCsQCq6router9URLRouter",
						"endchar": 129,
						"endline": 178,
						"comment": "ditto\n"
					},
					{
						"line": 188,
						"kind": "function",
						"char": 7,
						"name": "rebuild",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 191,
						"comment": " Rebuilds the internal matching structures to account for newly added routes.\n\n\t\tThis should be used after a lot of routes have been added to the router, to\n\t\tforce eager computation of the match structures. The alternative is to\n\t\tlet the router lazily compute the structures when the first request happens,\n\t\twhich can delay this request.\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4http6server17HTTPServerRequest",
								"name": "req"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerResponse",
								"name": "res"
							}
						],
						"overrides": [
							"vibe.http.server.HTTPServerRequestHandler.handleRequest"
						],
						"line": 194,
						"kind": "function",
						"char": 7,
						"name": "handleRequest",
						"deco": "FNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
						"endchar": 2,
						"endline": 228,
						"comment": "Handles a HTTP request by dispatching it to the registered route handlers.\n"
					},
					{
						"line": 231,
						"kind": "function",
						"char": 17,
						"name": "getAllRoutes",
						"deco": "FNfZAxS4vibe4http6router5Route",
						"endchar": 2,
						"endline": 237,
						"comment": "Returns all registered routes as const AA\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 239,
						"kind": "template",
						"char": 2,
						"members": [
							{
								"kind": "alias",
								"type": "void delegate(HTTPServerRequest, HTTPServerResponse) @system",
								"char": 4,
								"line": 241,
								"name": "USDel"
							},
							{
								"kind": "alias",
								"type": "void function(HTTPServerRequest, HTTPServerResponse) @system",
								"char": 4,
								"line": 242,
								"name": "USFun"
							},
							{
								"kind": "alias",
								"type": "void delegate(scope HTTPServerRequest, scope HTTPServerResponse) @system",
								"char": 4,
								"line": 243,
								"name": "USDelS"
							},
							{
								"kind": "alias",
								"type": "void function(scope HTTPServerRequest, scope HTTPServerResponse) @system",
								"char": 4,
								"line": 244,
								"name": "USFunS"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 256,
								"kind": "variable",
								"char": 9,
								"name": "isValidHandler",
								"init": "true"
							}
						],
						"name": "isValidHandler"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 268,
						"kind": "template",
						"char": 68,
						"members": [
							{
								"parameters": [
									{
										"type": "Handler",
										"name": "handler"
									}
								],
								"line": 268,
								"kind": "function",
								"char": 68,
								"name": "handlerDelegate",
								"type": "void delegate(HTTPServerRequest, HTTPServerResponse) @safe(Handler handler)",
								"endchar": 2,
								"endline": 275
							}
						],
						"name": "handlerDelegate"
					}
				],
				"name": "URLRouter",
				"interfaces": [
					"vibe.http.server.HTTPServerRequestHandler"
				],
				"comment": "\tRoutes HTTP requests based on the request method and URL.\n\n\tRoutes are matched using a special URL match string that supports two forms\n\tof placeholders. See the sections below for more details.\n\n\tRegistered routes are matched according to the same sequence as initially\n\tspecified using `match`, `get`, `post` etc. Matching ends as soon as a route\n\thandler writes a response using `res.writeBody()` or similar means. If no\n\troute matches or if no route handler writes a response, the router will\n\tsimply not handle the request and the HTTP server will automatically\n\tgenerate a 404 error.\n\n\tMatch_patterns:\n\t\tMatch patterns are character sequences that can optionally contain\n\t\tplaceholders or raw wildcards (\"*\"). Raw wild cards match any character\n\t\tsequence, while placeholders match only sequences containing no slash\n\t\t(\"/\") characters.\n\n\t\tPlaceholders are started using a colon (\":\") and are directly followed\n\t\tby their name. The first \"/\" character (or the end of the match string)\n\t\tdenotes the end of the placeholder name. The part of the string that\n\t\tmatches a placeholder will be stored in the `HTTPServerRequest.params`\n\t\tmap using the placeholder name as the key.\n\n\t\tMatch strings are subject to the following rules:\n\t\t$(UL\n\t\t\t$(LI A raw wildcard (\"*\") may only occur at the end of the match string)\n\t\t\t$(LI At least one character must be placed between any two placeholders or wildcards)\n\t\t\t$(LI The maximum allowed number of placeholders in a single match string is 64)\n\t\t)\n\n\tMatch_String_Examples:\n\t\t$(UL\n\t\t\t$(LI `\"/foo/bar\"` matches only `\"/foo/bar\"` itself)\n\t\t\t$(LI `\"/foo/*\"` matches `\"/foo/\"`, `\"/foo/bar\"`, `\"/foo/bar/baz\"` or _any other string beginning with `\"/foo/\"`)\n\t\t\t$(LI `\"/:x/\"` matches `\"/foo/\"`, `\"/bar/\"` and similar strings (and stores `\"foo\"`/`\"bar\"` in `req.params[\"x\"]`), but not `\"/foo/bar/\"`)\n\t\t\t$(LI Matching partial path entries with wildcards is possible: `\"/foo:x\"` matches `\"/foo\"`, `\"/foobar\"`, but not `\"/foo/bar\"`)\n\t\t\t$(LI Multiple placeholders and raw wildcards can be combined: `\"/:x/:y/*\"`)\n\t\t)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L299_C7)\n---\nimport vibe.http.fileserver;\n\nvoid addGroup(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// Route variables are accessible via the params map\n\tlogInfo(\"Getting group %s for user %s.\", req.params[\"groupname\"], req.params[\"username\"]);\n}\n\nvoid deleteUser(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// ...\n}\n\nvoid auth(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// TODO: check req.session to see if a user is logged in and\n\t//       write an error page or throw an exception instead.\n}\n\nvoid setup()\n{\n\tauto router = new URLRouter;\n\t// Matches all GET requests for /users/*/groups/* and places\n\t// the place holders in req.params as 'username' and 'groupname'.\n\trouter.get(\"/users/:username/groups/:groupname\", &addGroup);\n\n\t// Matches all requests. This can be useful for authorization and\n\t// similar tasks. The auth method will only write a response if the\n\t// user is _not_ authorized. Otherwise, the router will fall through\n\t// and continue with the following routes.\n\trouter.any(\"*\", &auth);\n\n\t// Matches a POST request\n\trouter.post(\"/users/:username/delete\", &deleteUser);\n\n\t// Matches all GET requests in /static/ such as /static/img.png or\n\t// /static/styles/sty.css\n\trouter.get(\"/static/*\", serveStaticFiles(\"public/\"));\n\n\t// Setup a HTTP server...\n\tauto settings = new HTTPServerSettings;\n\t// ...\n\n\t// The router can be directly passed to the listenHTTP function as\n\t// the main request handler.\n\tlistenHTTP(settings, router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L299_C7)\nExample:\nUsing nested routers to map components to different sub paths. A component\n\tcould for example be an embedded blog engine.$(DDOX_UNITTEST_HEADER __unittest_L352_C7)\n---\n// some embedded component:\n\nvoid showComponentHome(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// ...\n}\n\nvoid showComponentUser(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// ...\n}\n\nvoid registerComponent(URLRouter router)\n{\n\trouter.get(\"/\", &showComponentHome);\n\trouter.get(\"/users/:user\", &showComponentUser);\n}\n\n// main application:\n\nvoid showHome(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// ...\n}\n\nvoid setup()\n{\n\tauto c1router = new URLRouter(\"/component1\");\n\tregisterComponent(c1router);\n\n\tauto mainrouter = new URLRouter;\n\tmainrouter.get(\"/\", &showHome);\n\t// forward all unprocessed requests to the component router\n\tmainrouter.any(\"*\", c1router);\n\n\t// now the following routes will be matched:\n\t// / -> showHome\n\t// /component1/ -> showComponentHome\n\t// /component1/users/:user -> showComponentUser\n\n\t// Start the HTTP server\n\tauto settings = new HTTPServerSettings;\n\t// ...\n\tlistenHTTP(settings, mainrouter);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L352_C7)\n"
			},
			{
				"kind": "struct",
				"line": 519,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 522,
						"kind": "variable",
						"originalType": "URLRouter",
						"char": 12,
						"name": "router",
						"deco": "C4vibe4http6router9URLRouter",
						"offset": 0
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 523,
						"kind": "variable",
						"char": 9,
						"name": "path",
						"deco": "Aya",
						"offset": 8
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 525,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "Handler",
										"name": "h"
									}
								],
								"line": 525,
								"kind": "function",
								"char": 15,
								"name": "get",
								"type": "ref URLRoute(Handler h)",
								"endchar": 75,
								"endline": 525
							}
						],
						"name": "get"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 526,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "Handler",
										"name": "h"
									}
								],
								"line": 526,
								"kind": "function",
								"char": 15,
								"name": "post",
								"type": "ref URLRoute(Handler h)",
								"endchar": 77,
								"endline": 526
							}
						],
						"name": "post"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 527,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "Handler",
										"name": "h"
									}
								],
								"line": 527,
								"kind": "function",
								"char": 15,
								"name": "put",
								"type": "ref URLRoute(Handler h)",
								"endchar": 75,
								"endline": 527
							}
						],
						"name": "put"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 528,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "Handler",
										"name": "h"
									}
								],
								"line": 528,
								"kind": "function",
								"char": 15,
								"name": "delete_",
								"type": "ref URLRoute(Handler h)",
								"endchar": 83,
								"endline": 528
							}
						],
						"name": "delete_"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 529,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "Handler",
										"name": "h"
									}
								],
								"line": 529,
								"kind": "function",
								"char": 15,
								"name": "patch",
								"type": "ref URLRoute(Handler h)",
								"endchar": 79,
								"endline": 529
							}
						],
						"name": "patch"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 530,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "Handler",
										"name": "h"
									}
								],
								"line": 530,
								"kind": "function",
								"char": 15,
								"name": "any",
								"type": "ref URLRoute(Handler h)",
								"endchar": 75,
								"endline": 530
							}
						],
						"name": "any"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "Handler"
							}
						],
						"line": 531,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "HTTPMethod",
										"name": "method"
									},
									{
										"type": "Handler",
										"name": "h"
									}
								],
								"line": 531,
								"kind": "function",
								"char": 15,
								"name": "match",
								"type": "ref URLRoute(HTTPMethod method, Handler h)",
								"endchar": 106,
								"endline": 531
							}
						],
						"name": "match"
					}
				],
				"comment": "\tConvenience abstraction for a single `URLRouter` route.\n\n\tSee `URLRouter.route` for a usage example.\n",
				"name": "URLRoute"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1112,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "struct",
								"char": 9,
								"members": [
									{
										"line": 1117,
										"kind": "variable",
										"char": 8,
										"name": "index",
										"deco": "k",
										"init": "(uint).max"
									},
									{
										"line": 1118,
										"kind": "function",
										"char": 18,
										"name": "empty",
										"type": "const @property bool()",
										"endchar": 60,
										"endline": 1118
									}
								],
								"line": 1116,
								"name": "Handle"
							},
							{
								"kind": "struct",
								"char": 10,
								"members": [
									{
										"kind": "variable",
										"deco": "k",
										"char": 9,
										"line": 1123,
										"name": "next"
									},
									{
										"kind": "variable",
										"type": "T",
										"char": 6,
										"line": 1124,
										"name": "value"
									}
								],
								"line": 1122,
								"name": "Entry"
							},
							{
								"kind": "variable",
								"type": "Array!Entry",
								"char": 15,
								"line": 1127,
								"name": "m_storage"
							},
							{
								"kind": "struct",
								"char": 10,
								"members": [
									{
										"kind": "variable",
										"type": "Array!Entry*",
										"char": 18,
										"line": 1131,
										"name": "backing"
									},
									{
										"kind": "variable",
										"deco": "k",
										"char": 10,
										"line": 1132,
										"name": "index"
									},
									{
										"line": 1135,
										"kind": "function",
										"char": 19,
										"name": "empty",
										"type": "const @property bool()",
										"endchar": 61,
										"endline": 1135
									},
									{
										"line": 1136,
										"kind": "function",
										"char": 27,
										"name": "front",
										"type": "const @property ref const(T)()",
										"endchar": 75,
										"endline": 1136
									},
									{
										"line": 1138,
										"kind": "function",
										"char": 9,
										"name": "popFront",
										"type": "void()",
										"endchar": 4,
										"endline": 1141
									}
								],
								"line": 1129,
								"name": "Range"
							},
							{
								"line": 1145,
								"kind": "function",
								"char": 19,
								"name": "emptySet",
								"type": "@property Handle()",
								"endchar": 52,
								"endline": 1145
							},
							{
								"parameters": [
									{
										"type": "T[]",
										"storageClass": [
											"scope"
										],
										"name": "items"
									}
								],
								"line": 1147,
								"kind": "function",
								"char": 9,
								"name": "create",
								"type": "Handle(scope T[] items...)",
								"endchar": 2,
								"endline": 1153
							},
							{
								"parameters": [
									{
										"type": "Handle*",
										"name": "h"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 1155,
								"kind": "function",
								"char": 7,
								"name": "insert",
								"type": "void(Handle* h, T value)",
								"endchar": 2,
								"endline": 1161
							},
							{
								"constraint": "isInputRange!R",
								"parameters": [
									{
										"kind": "type",
										"name": "R"
									}
								],
								"line": 1163,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "Handle*",
												"name": "h"
											},
											{
												"type": "R",
												"name": "items"
											}
										],
										"line": 1163,
										"kind": "function",
										"char": 7,
										"name": "insert",
										"type": "void(Handle* h, R items)",
										"endchar": 2,
										"endline": 1168
									}
								],
								"name": "insert"
							},
							{
								"parameters": [
									{
										"type": "Handle",
										"name": "sh"
									}
								],
								"line": 1170,
								"kind": "function",
								"char": 9,
								"name": "getHash",
								"type": "const size_t(Handle sh)",
								"endchar": 2,
								"endline": 1180
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "Handle",
										"name": "sh"
									}
								],
								"line": 1182,
								"kind": "function",
								"char": 7,
								"name": "getItems",
								"type": "(Handle sh)",
								"endchar": 65,
								"endline": 1182
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "Handle",
										"name": "sh"
									}
								],
								"line": 1183,
								"kind": "function",
								"char": 7,
								"name": "getItems",
								"type": "const (Handle sh)",
								"endchar": 84,
								"endline": 1183
							},
							{
								"parameters": [
									{
										"type": "Handle",
										"name": "sh"
									},
									{
										"type": "size_t",
										"name": "l"
									}
								],
								"line": 1185,
								"kind": "function",
								"char": 7,
								"name": "hasMaxLength",
								"type": "const bool(Handle sh, size_t l)",
								"endchar": 2,
								"endline": 1193
							},
							{
								"parameters": [
									{
										"type": "Handle",
										"name": "sh"
									},
									{
										"type": "size_t",
										"name": "l"
									}
								],
								"line": 1195,
								"kind": "function",
								"char": 7,
								"name": "hasLength",
								"type": "const bool(Handle sh, size_t l)",
								"endchar": 2,
								"endline": 1203
							},
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"ref"
										],
										"name": "val"
									},
									{
										"deco": "k",
										"name": "next"
									}
								],
								"line": 1205,
								"kind": "function",
								"char": 15,
								"name": "createNode",
								"type": "uint(ref T val, uint next)",
								"endchar": 2,
								"endline": 1210
							}
						],
						"line": 1112,
						"name": "LinkedSetBacking"
					}
				],
				"name": "LinkedSetBacking"
			}
		],
		"comment": "\tPattern based URL router for HTTP request.\n\n\tSee `URLRouter` for more details.\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.http.router"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/server.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.core.net"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 11,
				"name": "vibe.http.common"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 12,
				"name": "vibe.http.session"
			},
			{
				"constraint": "is(Settings == string) || is(Settings == HTTPServerSettings)",
				"parameters": [
					{
						"kind": "type",
						"name": "Settings"
					}
				],
				"line": 87,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Settings",
								"name": "_settings"
							},
							{
								"type": "HTTPServerRequestDelegate",
								"name": "request_handler"
							}
						],
						"line": 87,
						"kind": "function",
						"char": 14,
						"name": "listenHTTP",
						"type": "@safe HTTPListener(Settings _settings, HTTPServerRequestDelegate request_handler)",
						"endchar": 1,
						"endline": 105
					}
				],
				"name": "listenHTTP",
				"comment": "\n\n\n\n\tStarts a HTTP server listening on the specified port.\n\n\trequest_handler will be called for each HTTP request that is made. The\n\tres parameter of the callback then has to be filled with the response\n\tdata.\n\n\trequest_handler can be either HTTPServerRequestDelegate/HTTPServerRequestFunction\n\tor a class/struct with a member function 'handleRequest' that has the same\n\tsignature.\n\n\tNote that if the application has been started with the --disthost command line\n\tswitch, listenHTTP() will automatically listen on the specified VibeDist host\n\tinstead of locally. This allows for a seamless switch from single-host to\n\tmulti-host scenarios without changing the code. If you need to listen locally,\n\tuse listenHTTPPlain() instead.\n\n\tParams:\n\t\tsettings = Customizes the HTTP servers functionality (host string or HTTPServerSettings object)\n\t\trequest_handler = This callback is invoked for each incoming request and is responsible\n\t\t\tfor generating the response.\n\n\tReturns:\n\t\tA handle is returned that can be used to stop listening for further HTTP\n\t\trequests with the supplied settings. Another call to `listenHTTP` can be\n\t\tused afterwards to start listening again.\n"
			},
			{
				"constraint": "is(Settings == string) || is(Settings == HTTPServerSettings)",
				"parameters": [
					{
						"kind": "type",
						"name": "Settings"
					}
				],
				"line": 107,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Settings",
								"name": "settings"
							},
							{
								"type": "HTTPServerRequestFunction",
								"name": "request_handler"
							}
						],
						"line": 107,
						"kind": "function",
						"char": 14,
						"name": "listenHTTP",
						"type": "@safe HTTPListener(Settings settings, HTTPServerRequestFunction request_handler)",
						"endchar": 1,
						"endline": 111
					}
				],
				"name": "listenHTTP",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(Settings == string) || is(Settings == HTTPServerSettings)",
				"parameters": [
					{
						"kind": "type",
						"name": "Settings"
					}
				],
				"line": 113,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Settings",
								"name": "settings"
							},
							{
								"type": "HTTPServerRequestHandler",
								"name": "request_handler"
							}
						],
						"line": 113,
						"kind": "function",
						"char": 14,
						"name": "listenHTTP",
						"type": "@safe HTTPListener(Settings settings, HTTPServerRequestHandler request_handler)",
						"endchar": 1,
						"endline": 117
					}
				],
				"name": "listenHTTP",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(Settings == string) || is(Settings == HTTPServerSettings)",
				"parameters": [
					{
						"kind": "type",
						"name": "Settings"
					}
				],
				"line": 119,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Settings",
								"name": "settings"
							},
							{
								"type": "HTTPServerRequestDelegateS",
								"name": "request_handler"
							}
						],
						"line": 119,
						"kind": "function",
						"char": 14,
						"name": "listenHTTP",
						"type": "@safe HTTPListener(Settings settings, HTTPServerRequestDelegateS request_handler)",
						"endchar": 1,
						"endline": 123
					}
				],
				"name": "listenHTTP",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(Settings == string) || is(Settings == HTTPServerSettings)",
				"parameters": [
					{
						"kind": "type",
						"name": "Settings"
					}
				],
				"line": 125,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Settings",
								"name": "settings"
							},
							{
								"type": "HTTPServerRequestFunctionS",
								"name": "request_handler"
							}
						],
						"line": 125,
						"kind": "function",
						"char": 14,
						"name": "listenHTTP",
						"type": "@safe HTTPListener(Settings settings, HTTPServerRequestFunctionS request_handler)",
						"endchar": 1,
						"endline": 129
					}
				],
				"name": "listenHTTP",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(Settings == string) || is(Settings == HTTPServerSettings)",
				"parameters": [
					{
						"kind": "type",
						"name": "Settings"
					}
				],
				"line": 131,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Settings",
								"name": "settings"
							},
							{
								"type": "HTTPServerRequestHandlerS",
								"name": "request_handler"
							}
						],
						"line": 131,
						"kind": "function",
						"char": 14,
						"name": "listenHTTP",
						"type": "@safe HTTPListener(Settings settings, HTTPServerRequestHandlerS request_handler)",
						"endchar": 1,
						"endline": 135
					}
				],
				"name": "listenHTTP",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(Settings == string) || is(Settings == HTTPServerSettings)",
				"parameters": [
					{
						"kind": "type",
						"name": "Settings"
					}
				],
				"line": 138,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Settings",
								"name": "settings"
							},
							{
								"type": "void delegate(HTTPServerRequest, HTTPServerResponse) @system",
								"name": "request_handler"
							}
						],
						"line": 138,
						"kind": "function",
						"char": 14,
						"name": "listenHTTP",
						"type": "@system HTTPListener(Settings settings, void delegate(HTTPServerRequest, HTTPServerResponse) @system request_handler)",
						"endchar": 1,
						"endline": 142
					}
				],
				"name": "listenHTTP",
				"comment": "Scheduled for deprecation - use a `@safe` callback instead.\n"
			},
			{
				"constraint": "is(Settings == string) || is(Settings == HTTPServerSettings)",
				"parameters": [
					{
						"kind": "type",
						"name": "Settings"
					}
				],
				"line": 144,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Settings",
								"name": "settings"
							},
							{
								"type": "void function(HTTPServerRequest, HTTPServerResponse) @system",
								"name": "request_handler"
							}
						],
						"line": 144,
						"kind": "function",
						"char": 14,
						"name": "listenHTTP",
						"type": "@system HTTPListener(Settings settings, void function(HTTPServerRequest, HTTPServerResponse) @system request_handler)",
						"endchar": 1,
						"endline": 148
					}
				],
				"name": "listenHTTP",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(Settings == string) || is(Settings == HTTPServerSettings)",
				"parameters": [
					{
						"kind": "type",
						"name": "Settings"
					}
				],
				"line": 150,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Settings",
								"name": "settings"
							},
							{
								"type": "void delegate(scope HTTPServerRequest, scope HTTPServerResponse) @system",
								"name": "request_handler"
							}
						],
						"line": 150,
						"kind": "function",
						"char": 14,
						"name": "listenHTTP",
						"type": "@system HTTPListener(Settings settings, void delegate(scope HTTPServerRequest, scope HTTPServerResponse) @system request_handler)",
						"endchar": 1,
						"endline": 154
					}
				],
				"name": "listenHTTP",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(Settings == string) || is(Settings == HTTPServerSettings)",
				"parameters": [
					{
						"kind": "type",
						"name": "Settings"
					}
				],
				"line": 156,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Settings",
								"name": "settings"
							},
							{
								"type": "void function(scope HTTPServerRequest, scope HTTPServerResponse) @system",
								"name": "request_handler"
							}
						],
						"line": 156,
						"kind": "function",
						"char": 14,
						"name": "listenHTTP",
						"type": "@system HTTPListener(Settings settings, void function(scope HTTPServerRequest, scope HTTPServerResponse) @system request_handler)",
						"endchar": 1,
						"endline": 160
					}
				],
				"name": "listenHTTP",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4core3net13TCPConnection",
						"name": "connection"
					},
					{
						"deco": "C4vibe4http6server17HTTPServerContext",
						"name": "context"
					}
				],
				"line": 196,
				"kind": "function",
				"char": 6,
				"name": "handleHTTPConnection",
				"deco": "FNfS4vibe4core3net13TCPConnectionCQBe4http6server17HTTPServerContextZv",
				"endchar": 1,
				"endline": 261,
				"comment": " Treats an existing connection as an HTTP connection and processes incoming\n\trequests.\n\n\tAfter all requests have been processed, the connection will be closed and\n\tthe function returns to the caller.\n\n\tParams:\n\t\tconnection = The stream to treat as an incoming HTTP client connection.\n\t\tcontext = Information about the incoming listener and available\n\t\t\tvirtual hosts\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "template_file"
					}
				],
				"line": 267,
				"kind": "template",
				"char": 38,
				"members": [
					{
						"line": 267,
						"kind": "function",
						"char": 38,
						"name": "staticTemplate",
						"type": "@property HTTPServerRequestDelegateS()",
						"endchar": 1,
						"endline": 272
					}
				],
				"name": "staticTemplate",
				"comment": "\tProvides a HTTP request handler that responds with a static Diet template.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "url"
					},
					{
						"deco": "E4vibe4http6status10HTTPStatus",
						"default": "cast(HTTPStatus)302",
						"name": "status"
					}
				],
				"line": 284,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegate(string url, HTTPStatus status = HTTPStatus.found)",
				"char": 27,
				"name": "staticRedirect",
				"deco": "FNfAyaE4vibe4http6status10HTTPStatusZDFNfCQBjQBh6server17HTTPServerRequestCQCqQCoQBh18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 289,
				"comment": "\tProvides a HTTP request handler that responds with a static redirection to the specified URL.\n\n\tParams:\n\t\turl = The URL to redirect to\n\t\tstatus = Redirection status to use $(LPAREN)by default this is $(D HTTPStatus.found)$(RPAREN).\n\n\tReturns:\n\t\tReturns a $(D HTTPServerRequestDelegate) that performs the redirect\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L299_C1)\n---\nimport vibe.http.router;\n\nvoid test()\n{\n\tauto router = new URLRouter;\n\trouter.get(\"/old_url\", staticRedirect(\"http://example.org/new_url\", HTTPStatus.movedPermanently));\n\n\tlistenHTTP(new HTTPServerSettings, router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L299_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "E4vibe4http6status10HTTPStatus",
						"default": "cast(HTTPStatus)302",
						"name": "status"
					}
				],
				"line": 291,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegate(URL url, HTTPStatus status = HTTPStatus.found)",
				"char": 27,
				"name": "staticRedirect",
				"deco": "FNfS4vibe4inet3url3URLEQt4http6status10HTTPStatusZDFNfCQBzQBh6server17HTTPServerRequestCQDgQCoQBh18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 296,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"name": "port"
					}
				],
				"line": 315,
				"kind": "function",
				"char": 6,
				"name": "setVibeDistHost",
				"deco": "FNfAyatZv",
				"endchar": 1,
				"endline": 319,
				"comment": "\tSets a VibeDist host to register with.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "template_file"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"line": 337,
				"kind": "template",
				"char": 16,
				"members": [
					{
						"parameters": [
							{
								"type": "HTTPServerResponse",
								"name": "res"
							}
						],
						"line": 337,
						"kind": "function",
						"char": 16,
						"name": "render",
						"type": "@property void(HTTPServerResponse res)",
						"endchar": 1,
						"endline": 346
					}
				],
				"name": "render",
				"comment": "\tRenders the given Diet template and makes all ALIASES available to the template.\n\n\tYou can call this function as a pseudo-member of `HTTPServerResponse` using\n\tD's uniform function call syntax.\n\n\tSee_also: `diet.html.compileHTMLDietFile`\n\n\tExamples:\n\t\t---\n\t\tstring title = \"Hello, World!\";\n\t\tint pageNumber = 1;\n\t\tres.render!(\"mytemplate.dt\", title, pageNumber);\n\t\t---\n"
			},
			{
				"kind": "struct",
				"line": 353,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 359,
						"kind": "variable",
						"char": 28,
						"name": "htmlOutputStyle",
						"deco": "E4diet4html15HTMLOutputStyle",
						"init": "cast(HTMLOutputStyle)1"
					},
					{
						"storageClass": [
							"enum"
						],
						"line": 358,
						"kind": "variable",
						"char": 55,
						"name": "htmlOutputStyle",
						"init": "HTMLOutputStyle.compact",
						"type": "HTMLOutputStyle"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "I"
							}
						],
						"line": 361,
						"kind": "template",
						"char": 16,
						"members": [
							{
								"parameters": [
									{
										"type": "I",
										"name": "text"
									},
									{
										"type": "size_t",
										"default": "0",
										"name": "indent"
									}
								],
								"line": 361,
								"kind": "function",
								"char": 16,
								"name": "filterCss",
								"type": "string(I text, size_t indent = 0)",
								"endchar": 2,
								"endline": 375
							}
						],
						"name": "filterCss"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "I"
							}
						],
						"line": 378,
						"kind": "template",
						"char": 16,
						"members": [
							{
								"parameters": [
									{
										"type": "I",
										"name": "text"
									},
									{
										"type": "size_t",
										"default": "0",
										"name": "indent"
									}
								],
								"line": 378,
								"kind": "function",
								"char": 16,
								"name": "filterJavascript",
								"type": "string(I text, size_t indent = 0)",
								"endchar": 2,
								"endline": 391
							}
						],
						"name": "filterJavascript"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "I"
							}
						],
						"line": 393,
						"kind": "template",
						"char": 16,
						"members": [
							{
								"parameters": [
									{
										"type": "I",
										"name": "text"
									}
								],
								"line": 393,
								"kind": "function",
								"char": 16,
								"name": "filterMarkdown",
								"type": "string(I text)",
								"endchar": 2,
								"endline": 398
							}
						],
						"name": "filterMarkdown"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "I"
							}
						],
						"line": 400,
						"kind": "template",
						"char": 16,
						"members": [
							{
								"parameters": [
									{
										"type": "I",
										"name": "text"
									}
								],
								"line": 400,
								"kind": "function",
								"char": 16,
								"name": "filterHtmlescape",
								"type": "string(I text)",
								"endchar": 2,
								"endline": 405
							}
						],
						"name": "filterHtmlescape"
					},
					{
						"storageClass": [
							"static"
						],
						"line": 415,
						"kind": "variable",
						"originalType": "SafeFilterCallback[string]",
						"char": 36,
						"name": "filters",
						"deco": "HAyaDFNfxAaMDFNfxQiZvZv"
					}
				],
				"comment": "\tProvides the default `css`, `javascript`, `markdown` and `htmlescape` filters\n",
				"name": "DefaultDietFilters"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "E4vibe4http6common10HTTPMethod",
						"default": "cast(HTTPMethod)0",
						"name": "method"
					},
					{
						"deco": "C4vibe4core6stream11InputStream",
						"default": "null",
						"name": "data"
					}
				],
				"line": 444,
				"kind": "function",
				"originalType": "@safe HTTPServerRequest(URL url, HTTPMethod method = HTTPMethod.GET, InputStream data = null)",
				"char": 19,
				"name": "createTestHTTPServerRequest",
				"deco": "FNfS4vibe4inet3url3URLEQt4http6common10HTTPMethodCQBu4core6stream11InputStreamZCQCyQCg6server17HTTPServerRequest",
				"endchar": 1,
				"endline": 448,
				"comment": "\tCreates a HTTPServerRequest suitable for writing unit tests.\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "E4vibe4http6common10HTTPMethod",
						"name": "method"
					},
					{
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi0Vmi12Vbi0ZQBi",
						"name": "headers"
					},
					{
						"deco": "C4vibe4core6stream11InputStream",
						"default": "null",
						"name": "data"
					}
				],
				"line": 450,
				"kind": "function",
				"originalType": "@safe HTTPServerRequest(URL url, HTTPMethod method, InetHeaderMap headers, InputStream data = null)",
				"char": 19,
				"name": "createTestHTTPServerRequest",
				"deco": "FNfS4vibe4inet3url3URLEQt4http6common10HTTPMethodSQBu5utils14dictionarylist__T14DictionaryListTAyaVbi0Vmi12Vbi0ZQBiCQEi4core6stream11InputStreamZCQFmQEu6server17HTTPServerRequest",
				"endchar": 1,
				"endline": 464,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe4core6stream12OutputStream",
						"default": "null",
						"name": "data_sink"
					},
					{
						"deco": "C4vibe4http7session12SessionStore",
						"default": "null",
						"name": "session_store"
					}
				],
				"line": 469,
				"kind": "function",
				"char": 20,
				"name": "createTestHTTPServerResponse",
				"deco": "FNfC4vibe4core6stream12OutputStreamCQBg4http7session12SessionStoreZCQCmQBg6server18HTTPServerResponse",
				"endchar": 1,
				"endline": 482,
				"comment": "\tCreates a HTTPServerResponse suitable for writing unit tests.\n"
			},
			{
				"kind": "alias",
				"line": 490,
				"char": 1,
				"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
				"comment": "\n\n\n\nDelegate based request handler\n",
				"name": "HTTPServerRequestDelegate"
			},
			{
				"kind": "alias",
				"line": 492,
				"char": 1,
				"deco": "PFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
				"comment": "Static function based request handler\n",
				"name": "HTTPServerRequestFunction"
			},
			{
				"kind": "interface",
				"line": 494,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "C4vibe4http6server17HTTPServerRequest",
								"name": "req"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerResponse",
								"name": "res"
							}
						],
						"line": 496,
						"kind": "function",
						"char": 7,
						"name": "handleRequest",
						"deco": "FNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
						"comment": "Handles incoming HTTP requests\n"
					}
				],
				"comment": "Interface for class based request handlers\n",
				"name": "HTTPServerRequestHandler"
			},
			{
				"kind": "alias",
				"line": 500,
				"char": 1,
				"deco": "DFNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseZv",
				"comment": "Delegate based request handler with scoped parameters\n",
				"name": "HTTPServerRequestDelegateS"
			},
			{
				"kind": "alias",
				"line": 502,
				"char": 1,
				"deco": "PFNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseZv",
				"comment": "Static function based request handler with scoped parameters\n",
				"name": "HTTPServerRequestFunctionS"
			},
			{
				"kind": "interface",
				"line": 504,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "C4vibe4http6server17HTTPServerRequest",
								"storageClass": [
									"scope"
								],
								"name": "req"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerResponse",
								"storageClass": [
									"scope"
								],
								"name": "res"
							}
						],
						"line": 506,
						"kind": "function",
						"char": 7,
						"name": "handleRequest",
						"deco": "FNfMC4vibe4http6server17HTTPServerRequestMCQBmQBkQBi18HTTPServerResponseZv",
						"comment": "Handles incoming HTTP requests\n"
					}
				],
				"comment": "Interface for class based request handlers with scoped parameters\n",
				"name": "HTTPServerRequestHandlerS"
			},
			{
				"kind": "class",
				"line": 515,
				"char": 7,
				"members": [
					{
						"line": 517,
						"kind": "variable",
						"char": 6,
						"name": "code",
						"deco": "i",
						"offset": 16,
						"comment": "The HTTP status code\n"
					},
					{
						"line": 519,
						"kind": "variable",
						"char": 9,
						"name": "message",
						"deco": "Aya",
						"offset": 24,
						"comment": "The error message\n"
					},
					{
						"line": 521,
						"kind": "variable",
						"char": 9,
						"name": "debugMessage",
						"deco": "Aya",
						"offset": 40,
						"comment": "Extended error message with debug information such as a stack trace\n"
					},
					{
						"line": 523,
						"kind": "variable",
						"originalType": "Throwable",
						"char": 12,
						"name": "exception",
						"deco": "C6object9Throwable",
						"offset": 56,
						"comment": "The error exception, if any\n"
					}
				],
				"comment": "Aggregates all information about an HTTP error status.\n",
				"name": "HTTPServerErrorInfo"
			},
			{
				"kind": "alias",
				"line": 527,
				"char": 1,
				"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseCQCpQCnQCl19HTTPServerErrorInfoZv",
				"comment": "Delegate type used for user defined error page generator callbacks.\n",
				"name": "HTTPServerErrorPageHandler"
			},
			{
				"kind": "struct",
				"line": 549,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"static",
							"enum"
						],
						"line": 550,
						"kind": "variable",
						"char": 14,
						"name": "none",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 552,
						"kind": "variable",
						"char": 14,
						"name": "parseURL",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 554,
						"kind": "variable",
						"char": 14,
						"name": "parseQueryString",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 556,
						"kind": "variable",
						"char": 14,
						"name": "parseFormBody",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 558,
						"kind": "variable",
						"char": 14,
						"name": "parseJsonBody",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 560,
						"kind": "variable",
						"char": 14,
						"name": "parseMultiPartBody",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 578,
						"kind": "variable",
						"char": 14,
						"name": "distribute",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)512",
						"comment": " Deprecated: Distributes request processing among worker threads\n\n\t\tNote that this functionality assumes that the request handler\n\t\tis implemented in a thread-safe way. However, the D type system\n\t\tis bypassed, so that no static verification takes place.\n\n\t\tFor this reason, it is recommended to instead use\n\t\t`vibe.core.core.runWorkerTaskDist` and call `listenHTTP`\n\t\tfrom each task/thread individually. If the `reusePort` option\n\t\tis set, then all threads will be able to listen on the same port,\n\t\twith the operating system distributing the incoming connections.\n\n\t\tIf possible, instead of threads, the use of separate processes\n\t\tis more robust and often faster. The `reusePort` option works\n\t\tthe same way in this scenario.\n"
					},
					{
						"storageClass": [
							"static",
							"enum"
						],
						"line": 587,
						"kind": "variable",
						"char": 14,
						"name": "errorStackTraces",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)128",
						"comment": " Enables stack traces (`HTTPServerErrorInfo.debugMessage`).\n\n\t\tNote that generating the stack traces are generally a costly\n\t\toperation that should usually be avoided in production\n\t\tenvironments. It can also reveal internal information about\n\t\tthe application, such as function addresses, which can\n\t\thelp an attacker to abuse possible security holes.\n"
					},
					{
						"storageClass": [
							"static",
							"enum"
						],
						"line": 589,
						"kind": "variable",
						"char": 14,
						"name": "reusePort",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)256",
						"comment": "Enable port reuse in `listenTCP()`\n"
					},
					{
						"storageClass": [
							"static",
							"enum"
						],
						"line": 591,
						"kind": "variable",
						"char": 14,
						"name": "reuseAddress",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)1024",
						"comment": "Enable address reuse in `listenTCP()`\n"
					},
					{
						"storageClass": [
							"static",
							"enum"
						],
						"line": 598,
						"kind": "variable",
						"char": 14,
						"name": "defaults",
						"deco": "S4vibe4http6server16HTTPServerOption",
						"init": "HTTPServerOption(cast(HTTPServerOptionImpl)1024)",
						"comment": " The default set of options.\n\n\t\tIncludes all parsing options, as well as the `errorStackTraces`\n\t\toption if the code is compiled in debug mode.\n"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 605,
						"kind": "variable",
						"char": 14,
						"name": "None",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 607,
						"kind": "variable",
						"char": 14,
						"name": "ParseURL",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 609,
						"kind": "variable",
						"char": 14,
						"name": "ParseQueryString",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 611,
						"kind": "variable",
						"char": 14,
						"name": "ParseFormBody",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 613,
						"kind": "variable",
						"char": 14,
						"name": "ParseJsonBody",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 615,
						"kind": "variable",
						"char": 14,
						"name": "ParseMultiPartBody",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"storageClass": [
							"static",
							"deprecated",
							"enum"
						],
						"line": 617,
						"kind": "variable",
						"char": 14,
						"name": "ParseCookies",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)0"
					},
					{
						"line": 619,
						"kind": "variable",
						"char": 23,
						"name": "x",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"offset": 0
					}
				],
				"comment": "\tSpecifies optional features of the HTTP server.\n\n\tDisabling unneeded features can speed up the server or reduce its memory usage.\n\n\tNote that the options `parseFormBody`, `parseJsonBody` and `parseMultiPartBody`\n\twill also drain the `HTTPServerRequest.bodyReader` stream whenever a request\n\tbody with form or JSON data is encountered.\n",
				"name": "HTTPServerOption"
			},
			{
				"kind": "class",
				"line": 629,
				"char": 7,
				"members": [
					{
						"line": 639,
						"kind": "variable",
						"char": 9,
						"name": "port",
						"deco": "t",
						"init": "cast(ushort)80u",
						"offset": 16,
						"comment": " The port on which the HTTP server is listening.\n\n\t\tThe default value is 80. If you are running a TLS enabled server you may want to set this\n\t\tto 443 instead.\n\n\t\tUsing a value of `0` instructs the server to use any available port on\n\t\tthe given `bindAddresses` the actual addresses and ports can then be\n\t\tqueried with `TCPListener.bindAddresses`.\n"
					},
					{
						"line": 645,
						"kind": "variable",
						"char": 11,
						"name": "bindAddresses",
						"deco": "AAya",
						"init": "[\"::\", \"0.0.0.0\"]",
						"offset": 24,
						"comment": " The interfaces on which the HTTP server is listening.\n\n\t\tBy default, the server will listen on all IPv4 and IPv6 interfaces.\n"
					},
					{
						"line": 652,
						"kind": "variable",
						"char": 9,
						"name": "hostName",
						"deco": "Aya",
						"offset": 40,
						"comment": " Determines the server host name.\n\n\t\tIf multiple servers are listening on the same port, the host name will determine which one\n\t\tgets a request.\n"
					},
					{
						"line": 660,
						"kind": "variable",
						"char": 23,
						"name": "options",
						"deco": "E4vibe4http6server20HTTPServerOptionImpl",
						"init": "cast(HTTPServerOptionImpl)1024",
						"offset": 56,
						"comment": " Configures optional features of the HTTP server\n\n\t\tDisabling unneeded features can improve performance or reduce the server\n\t\tload in case of invalid or unwanted requests (DoS). By default,\n\t\tHTTPServerOption.defaults is used.\n"
					},
					{
						"line": 666,
						"kind": "variable",
						"char": 11,
						"name": "maxRequestTime",
						"deco": "S4core4time8Duration",
						"init": "Duration(0L)",
						"offset": 64,
						"comment": " Time of a request after which the connection is closed with an error; not supported yet\n\n\t\tThe default limit of 0 means that the request time is not limited.\n"
					},
					{
						"line": 672,
						"kind": "variable",
						"char": 11,
						"name": "keepAliveTimeout",
						"deco": "S4core4time8Duration",
						"init": "Duration(100000000L)",
						"offset": 72,
						"comment": " Maximum time between two request on a keep-alive connection\n\n\t\tThe default value is 10 seconds.\n"
					},
					{
						"line": 676,
						"kind": "variable",
						"char": 8,
						"name": "maxRequestSize",
						"deco": "m",
						"init": "2097152LU",
						"offset": 80,
						"comment": "Maximum number of transferred bytes per request after which the connection is closed with\nan error\n"
					},
					{
						"line": 681,
						"kind": "variable",
						"char": 8,
						"name": "maxRequestHeaderSize",
						"deco": "m",
						"init": "8192LU",
						"offset": 88,
						"comment": "Maximum number of transferred bytes for the request header. This includes the request line\nthe url and all headers.\n"
					},
					{
						"line": 684,
						"kind": "function",
						"originalType": "@property @safe HTTPServerErrorPageHandler()",
						"char": 39,
						"name": "errorPageHandler",
						"deco": "FNdNfZDFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseCQCpQCnQCl19HTTPServerErrorInfoZv",
						"endchar": 92,
						"endline": 684,
						"comment": "Sets a custom handler for displaying error pages for HTTP errors\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseCQCpQCnQCl19HTTPServerErrorInfoZv",
								"name": "del"
							}
						],
						"line": 686,
						"kind": "function",
						"originalType": "@property @safe void(HTTPServerErrorPageHandler del)",
						"char": 17,
						"name": "errorPageHandler",
						"deco": "FNdNfDFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseCQCpQCnQCl19HTTPServerErrorInfoZvZv",
						"endchar": 99,
						"endline": 686,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseCQCpQCnQCl19HTTPServerErrorInfoZv",
								"name": "del"
							}
						],
						"line": 688,
						"kind": "function",
						"char": 17,
						"name": "errorPageHandler",
						"deco": "FNdDFC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseCQCpQCnQCl19HTTPServerErrorInfoZvZv",
						"endchar": 2,
						"endline": 691,
						"comment": "Scheduled for deprecation - use a `@safe` callback instead.\n"
					},
					{
						"line": 696,
						"kind": "variable",
						"originalType": "TLSContext",
						"char": 13,
						"name": "tlsContext",
						"deco": "C4vibe6stream3tls10TLSContext",
						"offset": 112,
						"comment": "If set, a HTTPS server will be started instead of plain HTTP.\n"
					},
					{
						"line": 699,
						"kind": "variable",
						"originalType": "SessionStore",
						"char": 15,
						"name": "sessionStore",
						"deco": "C4vibe4http7session12SessionStore",
						"offset": 120,
						"comment": "Session management is enabled if a session store instance is provided\n"
					},
					{
						"line": 700,
						"kind": "variable",
						"char": 9,
						"name": "sessionIdCookie",
						"deco": "Aya",
						"init": "\"vibe.session_id\"",
						"offset": 128
					},
					{
						"line": 703,
						"kind": "variable",
						"char": 16,
						"name": "sessionOptions",
						"deco": "E4vibe4http6server13SessionOption",
						"init": "cast(SessionOption)1",
						"offset": 144,
						"comment": "Session options to use when initializing a new session.\n"
					},
					{
						"line": 707,
						"kind": "variable",
						"char": 9,
						"name": "serverString",
						"deco": "Aya",
						"init": "\"vibe.d/1.7.0\"",
						"offset": 152
					},
					{
						"line": 717,
						"kind": "variable",
						"char": 9,
						"name": "accessLogFormat",
						"deco": "Aya",
						"init": "\"%h - %u %t \\\"%r\\\" %s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\"",
						"offset": 168,
						"comment": " Specifies the format used for the access log.\n\n\t\tThe log format is given using the Apache server syntax. By default NCSA combined is used.\n\n\t\t---\n\t\t\"%h - %u %t \\\"%r\\\" %s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\"\n\t\t---\n"
					},
					{
						"line": 720,
						"kind": "variable",
						"char": 9,
						"name": "accessLogFile",
						"deco": "Aya",
						"init": "\"\"",
						"offset": 184,
						"comment": "Spefifies the name of a file to which access log messages are appended.\n"
					},
					{
						"line": 723,
						"kind": "variable",
						"char": 7,
						"name": "accessLogToConsole",
						"deco": "b",
						"init": "false",
						"offset": 200,
						"comment": "If set, access log entries will be output to the console.\n"
					},
					{
						"line": 727,
						"kind": "variable",
						"originalType": "HTTPLogger",
						"char": 13,
						"name": "accessLogger",
						"deco": "C4vibe4http3log10HTTPLogger",
						"offset": 208,
						"comment": " Specifies a custom access logger instance.\n"
					},
					{
						"line": 730,
						"kind": "function",
						"char": 31,
						"name": "dup",
						"deco": "FNdNfZC4vibe4http6server18HTTPServerSettings",
						"endchar": 2,
						"endline": 740,
						"comment": "Returns a duplicate of the settings object.\n"
					},
					{
						"line": 743,
						"kind": "variable",
						"char": 7,
						"name": "disableDistHost",
						"deco": "b",
						"init": "false",
						"offset": 216,
						"comment": "Disable support for VibeDist and instead start listening immediately.\n"
					},
					{
						"line": 754,
						"kind": "variable",
						"char": 7,
						"name": "useCompressionIfPossible",
						"deco": "b",
						"init": "false",
						"offset": 217,
						"comment": " Responds to \"Accept-Encoding\" by using compression if possible.\n\n\t\tCompression can also be manually enabled by setting the\n\t\t\"Content-Encoding\" header of the HTTP response appropriately before\n\t\tsending the response body.\n\n\t\tThis setting is disabled by default. Also note that there are still some\n\t\tknown issues with the GZIP compression code.\n"
					},
					{
						"line": 761,
						"kind": "variable",
						"char": 11,
						"name": "webSocketPingInterval",
						"deco": "S4core4time8Duration",
						"init": "Duration(600000000L)",
						"offset": 224,
						"comment": " Interval between WebSocket ping frames.\n\n\t\tThe default value is 60 seconds; set to Duration.zero to disable pings.\n"
					},
					{
						"line": 765,
						"kind": "constructor",
						"originalType": "@safe ()",
						"char": 2,
						"name": "this",
						"deco": "FNfZC4vibe4http6server18HTTPServerSettings",
						"endchar": 16,
						"endline": 765,
						"comment": " Constructs a new settings object with default values.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "bind_string"
							}
						],
						"line": 776,
						"kind": "constructor",
						"originalType": "@safe (string bind_string)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyaZC4vibe4http6server18HTTPServerSettings",
						"endchar": 2,
						"endline": 797,
						"comment": " Constructs a new settings object with a custom bind interface and/or port.\n\n\t\tThe syntax of `bind_string` is `[<IP address>][:<port>]`, where either of\n\t\tthe two parts can be left off. IPv6 addresses must be enclosed in square\n\t\tbrackets, as they would within a URL.\n\n\t\tThrows:\n\t\t\tAn exception is thrown if `bind_string` is malformed.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L800_C2)\n---\nauto s = new HTTPServerSettings(\":8080\");\nassert(s.bindAddresses == [\"::\", \"0.0.0.0\"]); // default bind addresses\nassert(s.port == 8080);\n\ns = new HTTPServerSettings(\"123.123.123.123\");\nassert(s.bindAddresses == [\"123.123.123.123\"]);\nassert(s.port == 80);\n\ns = new HTTPServerSettings(\"[::1]:443\");\nassert(s.bindAddresses == [\"::1\"]);\nassert(s.port == 443);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L800_C2)\n"
					}
				],
				"comment": "\tContains all settings for configuring a basic HTTP server.\n\n\tThe defaults are sufficient for most normal uses.\n",
				"name": "HTTPServerSettings"
			},
			{
				"line": 823,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 825,
						"char": 2,
						"value": "0",
						"comment": "No options.\n",
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 831,
						"char": 2,
						"value": "1",
						"comment": " Instructs the browser to disallow accessing the session ID from JavaScript.\n\n\t\tSee_Also: Cookie.httpOnly\n",
						"name": "httpOnly"
					},
					{
						"kind": "enum member",
						"line": 841,
						"char": 2,
						"value": "2",
						"comment": " Instructs the browser to disallow sending the session ID over\n\t\tunencrypted connections.\n\n\t\tBy default, the type of the connection on which the session is started\n\t\twill be used to determine if secure or noSecure is used.\n\n\t\tSee_Also: noSecure, Cookie.secure\n",
						"name": "secure"
					},
					{
						"kind": "enum member",
						"line": 851,
						"char": 2,
						"value": "4",
						"comment": " Instructs the browser to allow sending the session ID over unencrypted\n\t\tconnections.\n\n\t\tBy default, the type of the connection on which the session is started\n\t\twill be used to determine if secure or noSecure is used.\n\n\t\tSee_Also: secure, Cookie.secure\n",
						"name": "noSecure"
					},
					{
						"kind": "enum member",
						"line": 861,
						"char": 2,
						"value": "8",
						"comment": "    Instructs the browser to allow sending this cookie along with cross-site requests.\n\n    By default, the protection is `strict`. This flag allows to set it to `lax`.\n    The strict value will prevent the cookie from being sent by the browser\n    to the target site in all cross-site browsing context,\n    even when following a regular link.\n",
						"name": "noSameSiteStrict"
					}
				],
				"name": "SessionOption",
				"baseDeco": "i",
				"comment": "\tOptions altering how sessions are created.\n\n\tMultiple values can be or'ed together.\n\n\tSee_Also: HTTPServerResponse.startSession\n"
			},
			{
				"line": 868,
				"kind": "class",
				"char": 7,
				"base": "vibe.http.common.HTTPRequest",
				"members": [
					{
						"line": 878,
						"kind": "function",
						"char": 20,
						"name": "peer",
						"deco": "FNbNdNfZAya",
						"endchar": 3,
						"endline": 889,
						"comment": "The IP address of the client\n"
					},
					{
						"line": 891,
						"kind": "variable",
						"char": 18,
						"name": "clientAddress",
						"deco": "S4vibe4core3net14NetworkAddress",
						"offset": 536,
						"comment": "ditto\n"
					},
					{
						"line": 894,
						"kind": "variable",
						"char": 8,
						"name": "noLog",
						"deco": "b",
						"offset": 648,
						"comment": "Determines if the request should be logged to the access log file.\n"
					},
					{
						"line": 897,
						"kind": "variable",
						"char": 8,
						"name": "tls",
						"deco": "b",
						"offset": 649,
						"comment": "Determines if the request was issued over an TLS encrypted channel.\n"
					},
					{
						"line": 904,
						"kind": "variable",
						"char": 29,
						"name": "clientCertificate",
						"deco": "S4vibe6stream3tls25TLSCertificateInformation",
						"offset": 656,
						"comment": " Information about the TLS certificate provided by the client.\n\n\t\t\tRemarks: This field is only set if `tls` is true, and the peer\n\t\t\tpresented a client certificate.\n"
					},
					{
						"line": 913,
						"kind": "function",
						"char": 10,
						"name": "path",
						"deco": "FNfZAya",
						"endchar": 3,
						"endline": 918,
						"comment": " Deprecated: The _path part of the URL.\n\n\t\t\tNote that this function contains the decoded version of the\n\t\t\trequested path, which can yield incorrect results if the path\n\t\t\tcontains URL encoded path separators. Use `requestPath` instead to\n\t\t\tget an encoding-aware representation.\n"
					},
					{
						"line": 924,
						"kind": "variable",
						"originalType": "InetPath",
						"char": 12,
						"name": "requestPath",
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd14InetPathFormatZQBp",
						"offset": 968,
						"comment": " The path part of the requested URI.\n"
					},
					{
						"line": 928,
						"kind": "variable",
						"char": 10,
						"name": "username",
						"deco": "Aya",
						"offset": 984,
						"comment": " The user name part of the URL, if present.\n"
					},
					{
						"line": 932,
						"kind": "variable",
						"char": 10,
						"name": "password",
						"deco": "Aya",
						"offset": 1000,
						"comment": " The _password part of the URL, if present.\n"
					},
					{
						"line": 936,
						"kind": "variable",
						"char": 10,
						"name": "queryString",
						"deco": "Aya",
						"offset": 1016,
						"comment": " The _query string part of the URL.\n"
					},
					{
						"line": 945,
						"kind": "function",
						"char": 32,
						"name": "cookies",
						"deco": "FNcNdNfZS4vibe4http6common14CookieValueMap",
						"endchar": 3,
						"endline": 952,
						"comment": " Contains the list of _cookies that are stored on the client.\n\n\t\t\tNote that the a single cookie name may occur multiple times if multiple\n\t\t\tcookies have that name but different paths or domains that all match\n\t\t\tthe request URI. By default, the first cookie will be returned, which is\n\t\t\tthe or one of the cookies with the closest path match.\n"
					},
					{
						"line": 959,
						"kind": "function",
						"originalType": "@property ref @safe FormFields()",
						"char": 28,
						"name": "query",
						"deco": "FNcNdNfZS4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi1Vmi16Vbi0ZQBi",
						"endchar": 3,
						"endline": 966,
						"comment": " Contains all _form fields supplied using the _query string.\n\n\t\t\tThe fields are stored in the same order as they are received.\n"
					},
					{
						"line": 967,
						"kind": "variable",
						"originalType": "Nullable!FormFields",
						"char": 23,
						"name": "_query",
						"deco": "S3std8typecons__T8NullableTS4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi1Vmi16Vbi0ZQBiZQDb",
						"offset": 1056
					},
					{
						"kind": "import",
						"char": 10,
						"line": 969,
						"name": "vibe.utils.dictionarylist"
					},
					{
						"line": 976,
						"kind": "variable",
						"originalType": "DictionaryList!(string, true, 8)",
						"char": 36,
						"name": "params",
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi1Vmi8Vbi0ZQBh",
						"offset": 1600,
						"comment": " A map of general parameters for the request.\n\n\t\t\tThis map is supposed to be used by middleware functionality to store\n\t\t\tinformation for later stages. For example vibe.http.router.URLRouter uses this map\n\t\t\tto store the value of any named placeholders.\n"
					},
					{
						"kind": "import",
						"char": 10,
						"selective": [
							"Variant"
						],
						"line": 978,
						"name": "std.variant"
					},
					{
						"line": 990,
						"kind": "variable",
						"originalType": "DictionaryList!(Variant, true, 2)",
						"char": 37,
						"name": "context",
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTS3std7variant__T8VariantNVmi32ZQpVbi1Vmi2Vbi0ZQCl",
						"offset": 1888,
						"comment": " A map of context items for the request.\n\n\t\t\tThis is especially useful for passing application specific data down\n\t\t\tthe chain of processors along with the request itself.\n\n\t\t\tFor example, a generic route may be defined to check user login status,\n\t\t\tif the user is logged in, add a reference to user specific data to the\n\t\t\tcontext.\n\n\t\t\tThis is implemented with `std.variant.Variant` to allow any type of data.\n"
					},
					{
						"line": 1001,
						"kind": "variable",
						"originalType": "InputStream",
						"char": 15,
						"name": "bodyReader",
						"deco": "C4vibe4core6stream11InputStream",
						"offset": 2048,
						"comment": " Supplies the request body as a stream.\n\n\t\t\tNote that when certain server options are set (such as\n\t\t\tHTTPServerOption.parseJsonBody) and a matching request was sent,\n\t\t\tthe returned stream will be empty. If needed, remove those\n\t\t\toptions and do your own processing of the body when launching\n\t\t\tthe server. HTTPServerOption has a list of all options that affect\n\t\t\tthe request body.\n"
					},
					{
						"line": 1007,
						"kind": "function",
						"char": 22,
						"name": "json",
						"deco": "FNcNdNfZS4vibe4data4json4Json",
						"endchar": 3,
						"endline": 1018,
						"comment": " Contains the parsed Json for a JSON request.\n\n\t\t\tA JSON request must have the Content-Type \"application/json\" or \"application/vnd.api+json\".\n"
					},
					{
						"line": 1030,
						"kind": "function",
						"originalType": "@property ref @safe FormFields()",
						"char": 28,
						"name": "form",
						"deco": "FNcNdNfZS4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi1Vmi16Vbi0ZQBi",
						"endchar": 3,
						"endline": 1035,
						"comment": " Contains the parsed parameters of a HTML POST _form request.\n\n\t\t\tThe fields are stored in the same order as they are received.\n\n\t\t\tRemarks:\n\t\t\t\tA form request must either have the Content-Type\n\t\t\t\t\"application/x-www-form-urlencoded\" or \"multipart/form-data\".\n"
					},
					{
						"line": 1046,
						"kind": "function",
						"originalType": "@property ref @safe FilePartFormFields()",
						"char": 36,
						"name": "files",
						"deco": "FNcNdNfZS4vibe5utils14dictionarylist__T14DictionaryListTSQBw4inet7webform8FilePartVbi1Vmi0Vbi0ZQCe",
						"endchar": 3,
						"endline": 1054,
						"comment": " Contains information about any uploaded file for a HTML _form request.\n"
					},
					{
						"line": 1066,
						"kind": "variable",
						"char": 11,
						"name": "session",
						"deco": "S4vibe4http7session7Session",
						"offset": 2672,
						"comment": " The current Session object.\n\n\t\t\tThis field is set if HTTPServerResponse.startSession() has been called\n\t\t\ton a previous response and if the client has sent back the matching\n\t\t\tcookie.\n\n\t\t\tRemarks: Requires the HTTPServerOption.parseCookies option.\n"
					},
					{
						"parameters": [
							{
								"deco": "S3std8datetime7systime7SysTime",
								"name": "time"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"line": 1078,
						"kind": "constructor",
						"originalType": "@safe (SysTime time, ushort port)",
						"char": 2,
						"name": "this",
						"deco": "FNfS3std8datetime7systime7SysTimetZC4vibe4http6server17HTTPServerRequest",
						"endchar": 2,
						"endline": 1082
					},
					{
						"line": 1086,
						"kind": "function",
						"char": 20,
						"name": "timeCreated",
						"deco": "xFNdNfZS3std8datetime7systime7SysTime",
						"endchar": 70,
						"endline": 1086,
						"comment": " Time when this request started processing.\n"
					},
					{
						"line": 1098,
						"kind": "function",
						"char": 16,
						"name": "fullURL",
						"deco": "xFNdNfZS4vibe4inet3url3URL",
						"endchar": 2,
						"endline": 1156,
						"comment": " The full URL that corresponds to this request.\n\n\t\tThe host URL includes the protocol, host and optionally the user\n\t\tand password that was used for this request. This field is useful to\n\t\tconstruct self referencing URLs.\n\n\t\tNote that the port is currently not set, so that this only works if\n\t\tthe standard port is used.\n"
					},
					{
						"line": 1166,
						"kind": "function",
						"char": 19,
						"name": "rootDir",
						"deco": "xFNdNfZAya",
						"endchar": 2,
						"endline": 1172,
						"comment": " The relative path to the root folder.\n\n\t\tUsing this function instead of absolute URLs for embedded links can be\n\t\tuseful to avoid dead link when the site is piped through a\n\t\treverse-proxy.\n\n\t\tThe returned string always ends with a slash.\n"
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 7,
						"line": 868,
						"name": "~this"
					}
				],
				"name": "HTTPServerRequest",
				"comment": "\tRepresents a HTTP request as received by the server side.\n"
			},
			{
				"line": 1187,
				"kind": "class",
				"char": 7,
				"base": "vibe.http.common.HTTPResponse",
				"members": [
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "conn"
							},
							{
								"deco": "C4vibe4core6stream16ConnectionStream",
								"name": "raw_connection"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerSettings",
								"name": "settings"
							},
							{
								"deco": "C4stdx9allocator10IAllocator",
								"name": "req_alloc"
							}
						],
						"line": 1206,
						"kind": "constructor",
						"originalType": "@safe (Stream conn, ConnectionStream raw_connection, HTTPServerSettings settings, IAllocator req_alloc)",
						"char": 3,
						"name": "this",
						"deco": "FNfC4vibe4core6stream6StreamCQzQwQt16ConnectionStreamCQBy4http6server18HTTPServerSettingsC4stdx9allocator10IAllocatorZCQElQCnQCl18HTTPServerResponse",
						"endchar": 3,
						"endline": 1209
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "conn"
							},
							{
								"deco": "C4vibe4core6stream16ConnectionStream",
								"name": "raw_connection"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerSettings",
								"name": "settings"
							},
							{
								"deco": "C4stdx9allocator10IAllocator",
								"name": "req_alloc"
							}
						],
						"line": 1206,
						"kind": "constructor",
						"originalType": "@safe (Stream conn, ConnectionStream raw_connection, HTTPServerSettings settings, IAllocator req_alloc)",
						"char": 3,
						"name": "this",
						"deco": "FNfC4vibe4core6stream6StreamCQzQwQt16ConnectionStreamCQBy4http6server18HTTPServerSettingsC4stdx9allocator10IAllocatorZCQElQCnQCl18HTTPServerResponse",
						"endchar": 3,
						"endline": 1209
					},
					{
						"parameters": [
							{
								"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
								"name": "conn"
							},
							{
								"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream16ConnectionStreamZQCa",
								"name": "raw_connection"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerSettings",
								"name": "settings"
							},
							{
								"deco": "C4stdx9allocator10IAllocator",
								"name": "req_alloc"
							}
						],
						"line": 1212,
						"kind": "constructor",
						"originalType": "@safe (InterfaceProxy!Stream conn, InterfaceProxy!ConnectionStream raw_connection, HTTPServerSettings settings, IAllocator req_alloc)",
						"char": 2,
						"name": "this",
						"deco": "FNfS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBpSQDaQCyQCs__TQCfTCQDrQBsQBq16ConnectionStreamZQDmCQEx4http6server18HTTPServerSettingsC4stdx9allocator10IAllocatorZCQHkQCnQCl18HTTPServerResponse",
						"endchar": 2,
						"endline": 1219
					},
					{
						"line": 1225,
						"kind": "function",
						"char": 20,
						"name": "timeFinalized",
						"deco": "xFNdNfZS3std8datetime7systime7SysTime",
						"endchar": 74,
						"endline": 1225,
						"comment": " Returns the time at which the request was finalized.\n\n\t\tNote that this field will only be set after `finalize` has been called.\n"
					},
					{
						"line": 1229,
						"kind": "function",
						"char": 17,
						"name": "headerWritten",
						"deco": "xFNdNfZb",
						"endchar": 71,
						"endline": 1229,
						"comment": " Determines if the HTTP header has already been written.\n"
					},
					{
						"line": 1233,
						"kind": "function",
						"char": 7,
						"name": "isHeadResponse",
						"deco": "xFNfZb",
						"endchar": 63,
						"endline": 1233,
						"comment": " Determines if the response does not need a body.\n"
					},
					{
						"line": 1237,
						"kind": "function",
						"char": 7,
						"name": "tls",
						"deco": "xFNfZb",
						"endchar": 41,
						"endline": 1237,
						"comment": " Determines if the response is sent over an encrypted connection.\n"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "data"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "content_type"
							}
						],
						"line": 1251,
						"kind": "function",
						"originalType": "@safe void(in ubyte[] data, string content_type = null)",
						"char": 7,
						"name": "writeBody",
						"deco": "FNfxAhAyaZv",
						"endchar": 2,
						"endline": 1257,
						"comment": " Writes the entire response body at once.\n\n\t\tParams:\n\t\t\tdata = The data to write as the body contents\n\t\t\tstatus = Optional response status code to set\n\t\t\tcontent_type = Optional content type to apply to the response.\n\t\t\t\tIf no content type is given and no \"Content-Type\" header is\n\t\t\t\tset in the response, this will default to\n\t\t\t\t`\"application/octet-stream\"`.\n\n\t\tSee_Also: `HTTPStatusCode`\n"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "data"
							},
							{
								"deco": "i",
								"name": "status"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "content_type"
							}
						],
						"line": 1259,
						"kind": "function",
						"originalType": "@safe void(in ubyte[] data, int status, string content_type = null)",
						"char": 7,
						"name": "writeBody",
						"deco": "FNfxAhiAyaZv",
						"endchar": 2,
						"endline": 1263,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"storageClass": [
									"scope"
								],
								"name": "data"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "content_type"
							}
						],
						"line": 1265,
						"kind": "function",
						"char": 7,
						"name": "writeBody",
						"deco": "FNfMC4vibe4core6stream11InputStreamAyaZv",
						"endchar": 2,
						"endline": 1270,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "data"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "content_type"
							}
						],
						"line": 1285,
						"kind": "function",
						"char": 7,
						"name": "writeBody",
						"deco": "FNfAyaQdZv",
						"endchar": 2,
						"endline": 1290,
						"comment": " Writes the entire response body as a single string.\n\n\t\tParams:\n\t\t\tdata = The string to write as the body contents\n\t\t\tstatus = Optional response status code to set\n\t\t\tcontent_type = Optional content type to apply to the response.\n\t\t\t\tIf no content type is given and no \"Content-Type\" header is\n\t\t\t\tset in the response, this will default to\n\t\t\t\t`\"text/plain; charset=UTF-8\"`.\n\n\t\tSee_Also: `HTTPStatusCode`\nditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "data"
							},
							{
								"deco": "i",
								"name": "status"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "content_type"
							}
						],
						"line": 1292,
						"kind": "function",
						"char": 7,
						"name": "writeBody",
						"deco": "FNfAyaiQeZv",
						"endchar": 2,
						"endline": 1296,
						"comment": "ditto\n"
					},
					{
						"constraint": "isRandomAccessStream!RandomAccessStream",
						"parameters": [
							{
								"kind": "type",
								"name": "RandomAccessStream"
							}
						],
						"line": 1308,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "RandomAccessStream",
										"name": "stream"
									}
								],
								"line": 1308,
								"kind": "function",
								"char": 7,
								"name": "writeRawBody",
								"type": "@safe void(RandomAccessStream stream)",
								"endchar": 2,
								"endline": 1318
							}
						],
						"name": "writeRawBody",
						"comment": " Writes the whole response body at once, without doing any further encoding.\n\n\t\tThe caller has to make sure that the appropriate headers are set correctly\n\t\t(i.e. Content-Type and Content-Encoding).\n\n\t\tNote that the version taking a RandomAccessStream may perform additional\n\t\toptimizations such as sending a file directly from the disk to the\n\t\tnetwork card using a DMA transfer.\n\n"
					},
					{
						"constraint": "isInputStream!InputStream && !isRandomAccessStream!InputStream",
						"parameters": [
							{
								"kind": "type",
								"name": "InputStream"
							}
						],
						"line": 1320,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "InputStream",
										"name": "stream"
									},
									{
										"type": "size_t",
										"default": "0",
										"name": "num_bytes"
									}
								],
								"line": 1320,
								"kind": "function",
								"char": 7,
								"name": "writeRawBody",
								"type": "@safe void(InputStream stream, size_t num_bytes = 0)",
								"endchar": 2,
								"endline": 1331
							}
						],
						"name": "writeRawBody",
						"comment": "ditto\n"
					},
					{
						"constraint": "isRandomAccessStream!RandomAccessStream",
						"parameters": [
							{
								"kind": "type",
								"name": "RandomAccessStream"
							}
						],
						"line": 1333,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "RandomAccessStream",
										"name": "stream"
									},
									{
										"deco": "i",
										"name": "status"
									}
								],
								"line": 1333,
								"kind": "function",
								"char": 7,
								"name": "writeRawBody",
								"type": "@safe void(RandomAccessStream stream, int status)",
								"endchar": 2,
								"endline": 1338
							}
						],
						"name": "writeRawBody",
						"comment": "ditto\n"
					},
					{
						"constraint": "isInputStream!InputStream && !isRandomAccessStream!InputStream",
						"parameters": [
							{
								"kind": "type",
								"name": "InputStream"
							}
						],
						"line": 1340,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "InputStream",
										"name": "stream"
									},
									{
										"deco": "i",
										"name": "status"
									},
									{
										"type": "size_t",
										"default": "0",
										"name": "num_bytes"
									}
								],
								"line": 1340,
								"kind": "function",
								"char": 7,
								"name": "writeRawBody",
								"type": "@safe void(InputStream stream, int status, size_t num_bytes = 0)",
								"endchar": 2,
								"endline": 1345
							}
						],
						"name": "writeRawBody",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1349,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "data"
									},
									{
										"deco": "i",
										"name": "status"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "allow_chunked"
									}
								],
								"line": 1349,
								"kind": "function",
								"char": 7,
								"name": "writeJsonBody",
								"type": "void(T data, int status, bool allow_chunked = false)",
								"endchar": 2,
								"endline": 1353
							}
						],
						"name": "writeJsonBody",
						"comment": "Writes a JSON message with the specified status\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1355,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "data"
									},
									{
										"deco": "i",
										"name": "status"
									},
									{
										"type": "string",
										"name": "content_type"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "allow_chunked"
									}
								],
								"line": 1355,
								"kind": "function",
								"char": 7,
								"name": "writeJsonBody",
								"type": "void(T data, int status, string content_type, bool allow_chunked = false)",
								"endchar": 2,
								"endline": 1359
							}
						],
						"name": "writeJsonBody",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1362,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "data"
									},
									{
										"type": "string",
										"name": "content_type"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "allow_chunked"
									}
								],
								"line": 1362,
								"kind": "function",
								"char": 7,
								"name": "writeJsonBody",
								"type": "void(T data, string content_type, bool allow_chunked = false)",
								"endchar": 2,
								"endline": 1366
							}
						],
						"name": "writeJsonBody",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1368,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "data"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "allow_chunked"
									}
								],
								"line": 1368,
								"kind": "function",
								"char": 7,
								"name": "writeJsonBody",
								"type": "void(T data, bool allow_chunked = false)",
								"endchar": 2,
								"endline": 1371
							}
						],
						"name": "writeJsonBody",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1373,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "data"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "allow_chunked"
									}
								],
								"line": 1373,
								"kind": "function",
								"char": 7,
								"name": "writePrettyJsonBody",
								"type": "void(T data, bool allow_chunked = false)",
								"endchar": 2,
								"endline": 1376
							}
						],
						"name": "writePrettyJsonBody",
						"comment": "ditto\n"
					},
					{
						"line": 1413,
						"kind": "function",
						"char": 7,
						"name": "writeVoidBody",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 1422,
						"comment": " Writes the response with no body.\n\n This method should be used in situations where no body is\n requested, such as a HEAD request. For an empty body, just use writeBody,\n as this method causes problems with some keep-alive connections.\n"
					},
					{
						"line": 1429,
						"kind": "function",
						"originalType": "@property @safe InterfaceProxy!OutputStream()",
						"char": 40,
						"name": "bodyWriter",
						"deco": "FNdNfZS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream12OutputStreamZQBw",
						"endchar": 2,
						"endline": 1482,
						"comment": " A stream for writing the body of the HTTP response.\n\n\t\tNote that after 'bodyWriter' has been accessed for the first time, it\n\t\tis not allowed to change any header or the status code of the response.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "url"
							},
							{
								"deco": "i",
								"default": "302",
								"name": "status"
							}
						],
						"line": 1490,
						"kind": "function",
						"originalType": "@safe void(string url, int status = HTTPStatus.Found)",
						"char": 7,
						"name": "redirect",
						"deco": "FNfAyaiZv",
						"endchar": 2,
						"endline": 1499,
						"comment": " Sends a redirect request to the client.\n\n\t\tParams:\n\t\t\turl = The URL to redirect to\n\t\t\tstatus = The HTTP redirect status (3xx) to send - by default this is $(D HTTPStatus.found)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1507_C8)\n---\nimport vibe.http.router;\n\nvoid request_handler(HTTPServerRequest req, HTTPServerResponse res)\n{\n\tres.redirect(\"http://example.org/some_other_url\");\n}\n\nvoid test()\n{\n\tauto router = new URLRouter;\n\trouter.get(\"/old_url\", &request_handler);\n\n\tlistenHTTP(new HTTPServerSettings, router);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1507_C8)\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4inet3url3URL",
								"name": "url"
							},
							{
								"deco": "i",
								"default": "302",
								"name": "status"
							}
						],
						"line": 1501,
						"kind": "function",
						"originalType": "@safe void(URL url, int status = HTTPStatus.Found)",
						"char": 7,
						"name": "redirect",
						"deco": "FNfS4vibe4inet3url3URLiZv",
						"endchar": 2,
						"endline": 1504,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "protocol"
							}
						],
						"line": 1535,
						"kind": "function",
						"char": 19,
						"name": "switchProtocol",
						"deco": "FNfAyaZC4vibe4core6stream16ConnectionStream",
						"endchar": 2,
						"endline": 1542,
						"comment": " Special method sending a SWITCHING_PROTOCOLS response to the client.\n\n\t\tNotice: For the overload that returns a `ConnectionStream`, it must be\n\t\t\tensured that the returned instance doesn't outlive the request\n\t\t\thandler callback.\n\n\t\tParams:\n\t\t\tprotocol = The protocol set in the \"Upgrade\" header of the response.\n\t\t\t\tUse an empty string to skip setting this field.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "protocol"
							},
							{
								"deco": "DFNfMC4vibe4core6stream16ConnectionStreamZv",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 1544,
						"kind": "function",
						"char": 7,
						"name": "switchProtocol",
						"deco": "FNfAyaMDFNfMC4vibe4core6stream16ConnectionStreamZvZv",
						"endchar": 2,
						"endline": 1555,
						"comment": "ditto\n"
					},
					{
						"line": 1563,
						"kind": "function",
						"char": 19,
						"name": "connectProxy",
						"deco": "FNfZC4vibe4core6stream16ConnectionStream",
						"endchar": 2,
						"endline": 1566,
						"comment": " Special method for handling CONNECT proxy tunnel\n\n\t\tNotice: For the overload that returns a `ConnectionStream`, it must be\n\t\t\tensured that the returned instance doesn't outlive the request\n\t\t\thandler callback.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfMC4vibe4core6stream16ConnectionStreamZv",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 1568,
						"kind": "function",
						"char": 7,
						"name": "connectProxy",
						"deco": "FNfMDFNfMC4vibe4core6stream16ConnectionStreamZvZv",
						"endchar": 2,
						"endline": 1575,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "Aya",
								"name": "value"
							},
							{
								"deco": "Aya",
								"default": "\"/\"",
								"name": "path"
							},
							{
								"deco": "E4vibe4http6common6Cookie8Encoding",
								"default": "cast(Encoding)0",
								"name": "encoding"
							}
						],
						"line": 1585,
						"kind": "function",
						"originalType": "@safe Cookie(string name, string value, string path = \"/\", Cookie.Encoding encoding = Cookie.Encoding.url)",
						"char": 9,
						"name": "setCookie",
						"deco": "FNfAyaQdQfE4vibe4http6common6Cookie8EncodingZCQBjQBhQBfQBb",
						"endchar": 2,
						"endline": 1596,
						"comment": " Sets the specified cookie value.\n\n\t\tParams:\n\t\t\tname = Name of the cookie\n\t\t\tvalue = New cookie value - pass null to clear the cookie\n\t\t\tpath = Path (as seen by the client) of the directory tree in which the cookie is visible\n\t\t\tencoding = Optional encoding (url, raw), default to URL encoding\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "\"/\"",
								"name": "path"
							}
						],
						"line": 1605,
						"kind": "function",
						"char": 10,
						"name": "startSession",
						"deco": "FNfAyaZS4vibe4http7session7Session",
						"endchar": 2,
						"endline": 1608,
						"comment": "\t\tInitiates a new session.\n\n\t\tThe session is stored in the SessionStore that was specified when\n\t\tcreating the server. Depending on this, the session can be persistent\n\t\tor temporary and specific to this server instance.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							},
							{
								"deco": "E4vibe4http6server13SessionOption",
								"name": "options"
							}
						],
						"line": 1611,
						"kind": "function",
						"char": 10,
						"name": "startSession",
						"deco": "FNfAyaE4vibe4http6server13SessionOptionZSQBiQBg7session7Session",
						"endchar": 2,
						"endline": 1630,
						"comment": "ditto\n"
					},
					{
						"line": 1635,
						"kind": "function",
						"char": 7,
						"name": "terminateSession",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 1642,
						"comment": "\t\tTerminates the current session (if any).\n"
					},
					{
						"line": 1644,
						"kind": "function",
						"char": 18,
						"name": "bytesWritten",
						"deco": "xFNdNfZm",
						"endchar": 85,
						"endline": 1644
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"default": "max()",
								"name": "timeout"
							}
						],
						"line": 1656,
						"kind": "function",
						"originalType": "@safe bool(Duration timeout = Duration.max)",
						"char": 7,
						"name": "waitForConnectionClose",
						"deco": "FNfS4core4time8DurationZb",
						"endchar": 2,
						"endline": 1661,
						"comment": "\t\tWaits until either the connection closes, data arrives, or until the\n\t\tgiven timeout is reached.\n\n\t\tReturns:\n\t\t\t$(D true) if the connection was closed and $(D false) if either the\n\t\t\ttimeout was reached, or if data has arrived for consumption.\n\n\t\tSee_Also: `connected`\n"
					},
					{
						"line": 1671,
						"kind": "function",
						"char": 17,
						"name": "connected",
						"deco": "xFNdNfZb",
						"endchar": 2,
						"endline": 1675,
						"comment": "\t\tDetermines if the underlying connection is still alive.\n\n\t\tReturns $(D true) if the remote peer is still connected and $(D false)\n\t\tif the remote peer closed the connection.\n\n\t\tSee_Also: `waitForConnectionClose`\n"
					},
					{
						"line": 1684,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 1713,
						"comment": "\t\tFinalizes the response. This is usually called automatically by the server.\n\n\t\tThis method can be called manually after writing the response to force\n\t\tall network traffic associated with the current request to be finalized.\n\t\tAfter the call returns, the `timeFinalized` property will be set.\n"
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 7,
						"line": 1187,
						"name": "~this"
					}
				],
				"name": "HTTPServerResponse",
				"comment": "\tRepresents a HTTP response as sent from the server side.\n"
			},
			{
				"kind": "struct",
				"line": 1768,
				"char": 1,
				"members": [
					{
						"line": 1775,
						"kind": "function",
						"char": 29,
						"name": "bindAddresses",
						"deco": "FNdZAS4vibe4core3net14NetworkAddress",
						"endchar": 2,
						"endline": 1786
					},
					{
						"line": 1791,
						"kind": "function",
						"char": 7,
						"name": "stopListening",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 1807,
						"comment": " Stops handling HTTP requests and closes the TCP listening port if\n\t\tpossible.\n"
					}
				],
				"comment": "\tRepresents the request listener for a specific `listenHTTP` call.\n\n\tThis struct can be used to stop listening for HTTP requests at runtime.\n",
				"name": "HTTPListener"
			},
			{
				"kind": "class",
				"line": 1822,
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "bind_address"
							},
							{
								"deco": "t",
								"name": "bind_port"
							}
						],
						"line": 1841,
						"kind": "constructor",
						"originalType": "@safe (string bind_address, ushort bind_port)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyatZC4vibe4http6server17HTTPServerContext",
						"endchar": 2,
						"endline": 1845
					},
					{
						"line": 1855,
						"kind": "function",
						"char": 23,
						"name": "tlsContext",
						"deco": "FNdNfZC4vibe6stream3tls10TLSContext",
						"endchar": 59,
						"endline": 1855,
						"comment": " Returns the TLS context associated with the listener.\n\n\t\tFor non-HTTPS listeners, `null` will be returned. Otherwise, if only a\n\t\tsingle virtual host has been added, the TLS context of that host's\n\t\tsettings is returned. For multiple virtual hosts, an SNI context is\n\t\treturned, which forwards to the individual contexts based on the\n\t\trequested host name.\n"
					},
					{
						"line": 1858,
						"kind": "function",
						"char": 19,
						"name": "bindAddress",
						"deco": "xFNdNfZAya",
						"endchar": 63,
						"endline": 1858,
						"comment": "The local network interface IP address associated with this listener\n"
					},
					{
						"line": 1861,
						"kind": "function",
						"char": 19,
						"name": "bindPort",
						"deco": "xFNdNfZt",
						"endchar": 57,
						"endline": 1861,
						"comment": "The local port associated with this listener\n"
					},
					{
						"line": 1864,
						"kind": "function",
						"char": 17,
						"name": "hasVirtualHosts",
						"deco": "xFNdNfZb",
						"endchar": 77,
						"endline": 1864,
						"comment": "Determines if any virtual hosts have been addded\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4http6server18HTTPServerSettings",
								"name": "settings"
							},
							{
								"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseZv",
								"name": "request_handler"
							}
						],
						"line": 1874,
						"kind": "function",
						"originalType": "@safe size_t(HTTPServerSettings settings, HTTPServerRequestDelegate request_handler)",
						"char": 9,
						"name": "addVirtualHost",
						"deco": "FNfC4vibe4http6server18HTTPServerSettingsDFNfCQBqQBoQBm17HTTPServerRequestCQCtQCrQCp18HTTPServerResponseZvZm",
						"endchar": 2,
						"endline": 1906,
						"comment": " Adds a single virtual host.\n\n\t\tNote that the port and bind address defined in `settings` must match the\n\t\tones for this listener. The `settings.host` field must be unique for\n\t\tall virtual hosts.\n\n\t\tReturns: Returns a unique ID for the new virtual host\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "id"
							}
						],
						"line": 1909,
						"kind": "function",
						"originalType": "@safe bool(size_t id)",
						"char": 7,
						"name": "removeVirtualHost",
						"deco": "FNfmZb",
						"endchar": 2,
						"endline": 1919,
						"comment": "Removes a previously added virtual host using its ID.\n"
					}
				],
				"comment": " Represents a single HTTP server port.\n\n\tThis class defines the incoming interface, port, and TLS configuration of\n\tthe public server port. The public server port may differ from the local\n\tone if a reverse proxy of some kind is facing the public internet and\n\tforwards to this HTTP server.\n\n\tMultiple virtual hosts can be configured to be served from the same port.\n\tTheir TLS settings must be compatible and each virtual host must have a\n\tunique name.\n",
				"name": "HTTPServerContext"
			},
			{
				"kind": "alias",
				"type": "Throwable",
				"char": 37,
				"line": 2437,
				"name": "UncaughtException"
			}
		],
		"comment": "\tA HTTP 1.1/1.0 server implementation.\n\n\tCopyright: © 2012-2017 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger, Ilya Shipunov\n",
		"name": "vibe.http.server"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/session.d",
		"members": [
			{
				"kind": "alias",
				"char": 1,
				"line": 23,
				"name": "Base64URLNoPadding"
			},
			{
				"kind": "struct",
				"line": 31,
				"char": 1,
				"members": [
					{
						"line": 52,
						"kind": "function",
						"char": 7,
						"name": "opCast",
						"deco": "xFNfZb",
						"endchar": 55,
						"endline": 52,
						"comment": " Checks if the session is active.\n\n\t\tThis operator enables a $(D Session) value to be used in conditionals\n\t\tto check if they are actially valid/active.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L55_C2)\n---\n//import vibe.http.server;\n// workaround for cyclic module ctor compiler error\nclass HTTPServerRequest { Session session; string[string] form; }\nclass HTTPServerResponse { Session startSession() { assert(false); } }\n\nvoid login(scope HTTPServerRequest req, scope HTTPServerResponse res)\n{\n\t// TODO: validate username+password\n\n\t// ensure that there is an active session\n\tif (!req.session) req.session = res.startSession();\n\n\t// update session variables\n\treq.session.set(\"loginUser\", req.form[\"user\"]);\n}\n}\n\n/// Returns the unique session id of this session.\n@property string id() const @safe { return m_id; \n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L55_C2)\n"
					},
					{
						"line": 74,
						"kind": "function",
						"char": 19,
						"name": "id",
						"deco": "xFNdNfZAya",
						"endchar": 51,
						"endline": 74,
						"comment": "Returns the unique session id of this session.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 77,
						"kind": "function",
						"char": 7,
						"name": "isKeySet",
						"deco": "FNfAyaZb",
						"endchar": 72,
						"endline": 77,
						"comment": "Queries the session for the existence of a particular key.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 81,
						"kind": "template",
						"char": 11,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"storageClass": [
											"lazy"
										],
										"default": "T.init",
										"name": "def_value"
									}
								],
								"line": 81,
								"kind": "function",
								"char": 11,
								"name": "get",
								"type": "@trusted const(T)(string key, lazy T def_value = T.init)",
								"endchar": 2,
								"endline": 86
							}
						],
						"name": "get",
						"comment": " Gets a typed field from the session.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 90,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 90,
								"kind": "function",
								"char": 7,
								"name": "set",
								"type": "void(string key, T value)",
								"endchar": 2,
								"endline": 94
							}
						],
						"name": "set",
						"comment": " Sets a typed field to the session.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 97,
						"kind": "function",
						"char": 7,
						"name": "remove",
						"deco": "FNfAyaZv",
						"endchar": 61,
						"endline": 97
					},
					{
						"parameters": [
							{
								"deco": "DFNfAyaZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 102,
						"kind": "function",
						"char": 6,
						"name": "opApply",
						"deco": "FNfMDFNfAyaZiZi",
						"endchar": 2,
						"endline": 105,
						"comment": "\t\tEnables foreach-iteration over all keys of the session.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L107_C2)\n---\n//import vibe.http.server;\n// workaround for cyclic module ctor compiler error\nclass HTTPServerRequest { Session session; }\nclass HTTPServerResponse { import vibe.core.stream; OutputStream bodyWriter() @safe { assert(false); } string contentType; }\n\n// sends all session entries to the requesting browser\n// assumes that all entries are strings\nvoid handleRequest(scope HTTPServerRequest req, scope HTTPServerResponse res)\n{\n\tres.contentType = \"text/plain\";\n\treq.session.opApply((key) @safe {\n\t\tres.bodyWriter.write(key ~ \": \" ~ req.session.get!string(key) ~ \"\\n\");\n\t\treturn 0;\n\t});\n}\n}\n\npackage void destroy() @safe { m_store.destroy(m_id); \n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L107_C2)\n"
					}
				],
				"comment": "\tRepresents a single HTTP session.\n\n\tIndexing the session object with string keys allows to store arbitrary key/value pairs.\n",
				"name": "Session"
			},
			{
				"kind": "interface",
				"line": 159,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"line": 163,
						"kind": "function",
						"char": 31,
						"name": "storageType",
						"deco": "xFNdNfZE4vibe4http7session18SessionStorageType",
						"comment": "Returns the internal type used for storing session keys.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 166,
						"kind": "function",
						"char": 10,
						"name": "create",
						"deco": "FNfZS4vibe4http7session7Session",
						"comment": "Creates a new session.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"line": 169,
						"kind": "function",
						"char": 10,
						"name": "open",
						"deco": "FNfAyaZS4vibe4http7session7Session",
						"comment": "Opens an existing session.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant__T8VariantNVmi32ZQp",
								"name": "value"
							}
						],
						"line": 172,
						"kind": "function",
						"originalType": "@safe void(string id, string name, Variant value)",
						"char": 7,
						"name": "set",
						"deco": "FNfAyaQdS3std7variant__T8VariantNVmi32ZQpZv",
						"comment": "Sets a name/value pair for a given session.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant__T8VariantNVmi32ZQp",
								"storageClass": [
									"lazy"
								],
								"name": "defaultVal"
							}
						],
						"line": 175,
						"kind": "function",
						"originalType": "@safe Variant(string id, string name, lazy Variant defaultVal)",
						"char": 10,
						"name": "get",
						"deco": "FNfAyaQdLS3std7variant__T8VariantNVmi32ZQpZQBi",
						"comment": "Returns the value for a given session key.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 178,
						"kind": "function",
						"char": 7,
						"name": "isKeySet",
						"deco": "FNfAyaQdZb",
						"comment": "Determines if a certain session key is set.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 181,
						"kind": "function",
						"char": 7,
						"name": "remove",
						"deco": "FNfAyaQdZv",
						"comment": "Removes a key from a session\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"line": 184,
						"kind": "function",
						"char": 7,
						"name": "destroy",
						"deco": "FNfAyaZv",
						"comment": "Terminates the given session.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "DFNfAyaZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 187,
						"kind": "function",
						"char": 6,
						"name": "iterateSession",
						"deco": "FNfAyaMDFNfQiZiZi",
						"comment": "Iterates all keys stored in the given session.\n"
					},
					{
						"storageClass": [
							"final",
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "id"
							}
						],
						"line": 190,
						"kind": "function",
						"char": 26,
						"name": "createSessionInstance",
						"deco": "FNfAyaZS4vibe4http7session7Session",
						"protection": "protected",
						"endchar": 2,
						"endline": 199,
						"comment": "Creates a new Session object which sources its contents from this store.\n"
					}
				],
				"comment": "\tInterface for a basic session store.\n\n\tA session store is responsible for storing the id and the associated key/value pairs of a\n\tsession.\n",
				"name": "SessionStore"
			},
			{
				"line": 202,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 203,
						"name": "native"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 204,
						"name": "json"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 205,
						"name": "bson"
					}
				],
				"name": "SessionStorageType",
				"baseDeco": "i"
			},
			{
				"line": 216,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"overrides": [
							"vibe.http.session.SessionStore.storageType"
						],
						"line": 223,
						"kind": "function",
						"char": 31,
						"name": "storageType",
						"deco": "xFNdNfZE4vibe4http7session18SessionStorageType",
						"endchar": 2,
						"endline": 226
					},
					{
						"overrides": [
							"vibe.http.session.SessionStore.create"
						],
						"line": 228,
						"kind": "function",
						"char": 10,
						"name": "create",
						"deco": "FNfZS4vibe4http7session7Session",
						"endchar": 2,
						"endline": 233
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.open"
						],
						"line": 235,
						"kind": "function",
						"char": 10,
						"name": "open",
						"deco": "FNfAyaZS4vibe4http7session7Session",
						"endchar": 2,
						"endline": 239
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant__T8VariantNVmi32ZQp",
								"name": "value"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.set"
						],
						"line": 241,
						"kind": "function",
						"originalType": "@trusted void(string id, string name, Variant value)",
						"char": 7,
						"name": "set",
						"deco": "FNeAyaQdS3std7variant__T8VariantNVmi32ZQpZv",
						"endchar": 2,
						"endline": 245
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant__T8VariantNVmi32ZQp",
								"storageClass": [
									"lazy"
								],
								"name": "defaultVal"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.get"
						],
						"line": 247,
						"kind": "function",
						"originalType": "@trusted Variant(string id, string name, lazy Variant defaultVal)",
						"char": 10,
						"name": "get",
						"deco": "FNeAyaQdLS3std7variant__T8VariantNVmi32ZQpZQBi",
						"endchar": 2,
						"endline": 256
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.isKeySet"
						],
						"line": 258,
						"kind": "function",
						"char": 7,
						"name": "isKeySet",
						"deco": "FNfAyaQdZb",
						"endchar": 2,
						"endline": 261
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.remove"
						],
						"line": 263,
						"kind": "function",
						"char": 7,
						"name": "remove",
						"deco": "FNfAyaQdZv",
						"endchar": 2,
						"endline": 266
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.destroy"
						],
						"line": 268,
						"kind": "function",
						"char": 7,
						"name": "destroy",
						"deco": "FNfAyaZv",
						"endchar": 2,
						"endline": 271
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"line": 273,
						"kind": "function",
						"originalType": "@safe int delegate(int delegate(ref string key, ref Variant value) @safe) @safe(string id)",
						"char": 76,
						"name": "iterateSession",
						"deco": "FNfAyaZDFNfDFNfKQnKS3std7variant__T8VariantNVmi32ZQpZiZi",
						"endchar": 2,
						"endline": 284
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "DFNfAyaZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.iterateSession"
						],
						"line": 286,
						"kind": "function",
						"char": 6,
						"name": "iterateSession",
						"deco": "FNeAyaMDFNfQiZiZi",
						"endchar": 2,
						"endline": 293
					}
				],
				"name": "MemorySessionStore",
				"interfaces": [
					"vibe.http.session.SessionStore"
				],
				"comment": "\tSession store for storing a session in local memory.\n\n\tIf the server is running as a single instance (no thread or process clustering), this kind of\n\tsession store provies the fastest and simplest way to store sessions. In any other case,\n\ta persistent session store based on a database is necessary.\n"
			}
		],
		"comment": "\tCookie based session support.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig, Ilya Shipunov\n",
		"name": "vibe.http.session"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/status.d",
		"members": [
			{
				"line": 13,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "100",
						"line": 14,
						"name": "continue_"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "101",
						"line": 15,
						"name": "switchingProtocols"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "200",
						"line": 16,
						"name": "ok"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "201",
						"line": 17,
						"name": "created"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "202",
						"line": 18,
						"name": "accepted"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "203",
						"line": 19,
						"name": "nonAuthoritativeInformation"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "204",
						"line": 20,
						"name": "noContent"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "205",
						"line": 21,
						"name": "resetContent"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "206",
						"line": 22,
						"name": "partialContent"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "300",
						"line": 23,
						"name": "multipleChoices"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "301",
						"line": 24,
						"name": "movedPermanently"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "302",
						"line": 25,
						"name": "found"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "303",
						"line": 26,
						"name": "seeOther"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "304",
						"line": 27,
						"name": "notModified"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "305",
						"line": 28,
						"name": "useProxy"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "307",
						"line": 29,
						"name": "temporaryRedirect"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "400",
						"line": 30,
						"name": "badRequest"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "401",
						"line": 31,
						"name": "unauthorized"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "402",
						"line": 32,
						"name": "paymentRequired"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "403",
						"line": 33,
						"name": "forbidden"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "404",
						"line": 34,
						"name": "notFound"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "405",
						"line": 35,
						"name": "methodNotAllowed"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "406",
						"line": 36,
						"name": "notAcceptable"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "407",
						"line": 37,
						"name": "proxyAuthenticationRequired"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "408",
						"line": 38,
						"name": "requestTimeout"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "409",
						"line": 39,
						"name": "conflict"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "410",
						"line": 40,
						"name": "gone"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "411",
						"line": 41,
						"name": "lengthRequired"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "412",
						"line": 42,
						"name": "preconditionFailed"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "413",
						"line": 43,
						"name": "requestEntityTooLarge"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "414",
						"line": 44,
						"name": "requestURITooLarge"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "415",
						"line": 45,
						"name": "unsupportedMediaType"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "416",
						"line": 46,
						"name": "requestedrangenotsatisfiable"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "417",
						"line": 47,
						"name": "expectationFailed"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "429",
						"line": 48,
						"name": "tooManyRequests"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "451",
						"line": 49,
						"name": "unavailableForLegalReasons"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "500",
						"line": 50,
						"name": "internalServerError"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "501",
						"line": 51,
						"name": "notImplemented"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "502",
						"line": 52,
						"name": "badGateway"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "503",
						"line": 53,
						"name": "serviceUnavailable"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "504",
						"line": 54,
						"name": "gatewayTimeout"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "505",
						"line": 55,
						"name": "httpVersionNotSupported"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "207",
						"line": 57,
						"name": "multiStatus"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "422",
						"line": 58,
						"name": "unprocessableEntity"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "423",
						"line": 59,
						"name": "locked"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "424",
						"line": 60,
						"name": "failedDependency"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "507",
						"line": 61,
						"name": "insufficientStorage"
					},
					{
						"kind": "enum member",
						"line": 63,
						"char": 2,
						"value": "100",
						"comment": "deprecated\n",
						"name": "Continue"
					},
					{
						"kind": "enum member",
						"line": 64,
						"char": 2,
						"value": "101",
						"comment": "deprecated\n",
						"name": "SwitchingProtocols"
					},
					{
						"kind": "enum member",
						"line": 65,
						"char": 2,
						"value": "200",
						"comment": "deprecated\n",
						"name": "OK"
					},
					{
						"kind": "enum member",
						"line": 66,
						"char": 2,
						"value": "201",
						"comment": "deprecated\n",
						"name": "Created"
					},
					{
						"kind": "enum member",
						"line": 67,
						"char": 2,
						"value": "202",
						"comment": "deprecated\n",
						"name": "Accepted"
					},
					{
						"kind": "enum member",
						"line": 68,
						"char": 2,
						"value": "203",
						"comment": "deprecated\n",
						"name": "NonAuthoritativeInformation"
					},
					{
						"kind": "enum member",
						"line": 69,
						"char": 2,
						"value": "204",
						"comment": "deprecated\n",
						"name": "NoContent"
					},
					{
						"kind": "enum member",
						"line": 70,
						"char": 2,
						"value": "205",
						"comment": "deprecated\n",
						"name": "ResetContent"
					},
					{
						"kind": "enum member",
						"line": 71,
						"char": 2,
						"value": "206",
						"comment": "deprecated\n",
						"name": "PartialContent"
					},
					{
						"kind": "enum member",
						"line": 72,
						"char": 2,
						"value": "300",
						"comment": "deprecated\n",
						"name": "MultipleChoices"
					},
					{
						"kind": "enum member",
						"line": 73,
						"char": 2,
						"value": "301",
						"comment": "deprecated\n",
						"name": "MovedPermanently"
					},
					{
						"kind": "enum member",
						"line": 74,
						"char": 2,
						"value": "302",
						"comment": "deprecated\n",
						"name": "Found"
					},
					{
						"kind": "enum member",
						"line": 75,
						"char": 2,
						"value": "303",
						"comment": "deprecated\n",
						"name": "SeeOther"
					},
					{
						"kind": "enum member",
						"line": 76,
						"char": 2,
						"value": "304",
						"comment": "deprecated\n",
						"name": "NotModified"
					},
					{
						"kind": "enum member",
						"line": 77,
						"char": 2,
						"value": "305",
						"comment": "deprecated\n",
						"name": "UseProxy"
					},
					{
						"kind": "enum member",
						"line": 78,
						"char": 2,
						"value": "307",
						"comment": "deprecated\n",
						"name": "TemporaryRedirect"
					},
					{
						"kind": "enum member",
						"line": 79,
						"char": 2,
						"value": "400",
						"comment": "deprecated\n",
						"name": "BadRequest"
					},
					{
						"kind": "enum member",
						"line": 80,
						"char": 2,
						"value": "401",
						"comment": "deprecated\n",
						"name": "Unauthorized"
					},
					{
						"kind": "enum member",
						"line": 81,
						"char": 2,
						"value": "402",
						"comment": "deprecated\n",
						"name": "PaymentRequired"
					},
					{
						"kind": "enum member",
						"line": 82,
						"char": 2,
						"value": "403",
						"comment": "deprecated\n",
						"name": "Forbidden"
					},
					{
						"kind": "enum member",
						"line": 83,
						"char": 2,
						"value": "404",
						"comment": "deprecated\n",
						"name": "NotFound"
					},
					{
						"kind": "enum member",
						"line": 84,
						"char": 2,
						"value": "405",
						"comment": "deprecated\n",
						"name": "MethodNotAllowed"
					},
					{
						"kind": "enum member",
						"line": 85,
						"char": 2,
						"value": "406",
						"comment": "deprecated\n",
						"name": "NotAcceptable"
					},
					{
						"kind": "enum member",
						"line": 86,
						"char": 2,
						"value": "407",
						"comment": "deprecated\n",
						"name": "ProxyAuthenticationRequired"
					},
					{
						"kind": "enum member",
						"line": 87,
						"char": 2,
						"value": "408",
						"comment": "deprecated\n",
						"name": "RequestTimeout"
					},
					{
						"kind": "enum member",
						"line": 88,
						"char": 2,
						"value": "409",
						"comment": "deprecated\n",
						"name": "Conflict"
					},
					{
						"kind": "enum member",
						"line": 89,
						"char": 2,
						"value": "410",
						"comment": "deprecated\n",
						"name": "Gone"
					},
					{
						"kind": "enum member",
						"line": 90,
						"char": 2,
						"value": "411",
						"comment": "deprecated\n",
						"name": "LengthRequired"
					},
					{
						"kind": "enum member",
						"line": 91,
						"char": 2,
						"value": "412",
						"comment": "deprecated\n",
						"name": "PreconditionFailed"
					},
					{
						"kind": "enum member",
						"line": 92,
						"char": 2,
						"value": "413",
						"comment": "deprecated\n",
						"name": "RequestEntityTooLarge"
					},
					{
						"kind": "enum member",
						"line": 93,
						"char": 2,
						"value": "414",
						"comment": "deprecated\n",
						"name": "RequestURITooLarge"
					},
					{
						"kind": "enum member",
						"line": 94,
						"char": 2,
						"value": "415",
						"comment": "deprecated\n",
						"name": "UnsupportedMediaType"
					},
					{
						"kind": "enum member",
						"line": 95,
						"char": 2,
						"value": "416",
						"comment": "deprecated\n",
						"name": "Requestedrangenotsatisfiable"
					},
					{
						"kind": "enum member",
						"line": 96,
						"char": 2,
						"value": "417",
						"comment": "deprecated\n",
						"name": "ExpectationFailed"
					},
					{
						"kind": "enum member",
						"line": 97,
						"char": 2,
						"value": "500",
						"comment": "deprecated\n",
						"name": "InternalServerError"
					},
					{
						"kind": "enum member",
						"line": 98,
						"char": 2,
						"value": "501",
						"comment": "deprecated\n",
						"name": "NotImplemented"
					},
					{
						"kind": "enum member",
						"line": 99,
						"char": 2,
						"value": "502",
						"comment": "deprecated\n",
						"name": "BadGateway"
					},
					{
						"kind": "enum member",
						"line": 100,
						"char": 2,
						"value": "503",
						"comment": "deprecated\n",
						"name": "ServiceUnavailable"
					},
					{
						"kind": "enum member",
						"line": 101,
						"char": 2,
						"value": "504",
						"comment": "deprecated\n",
						"name": "GatewayTimeout"
					},
					{
						"kind": "enum member",
						"line": 102,
						"char": 2,
						"value": "505",
						"comment": "deprecated\n",
						"name": "HTTPVersionNotSupported"
					}
				],
				"name": "HTTPStatus",
				"baseDeco": "i",
				"comment": "\tDefinitions of all standard HTTP status codes.\n"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "code"
					}
				],
				"line": 111,
				"kind": "function",
				"char": 8,
				"name": "httpStatusText",
				"deco": "FNaNbNiNfiZAya",
				"endchar": 1,
				"endline": 171,
				"comment": "\tReturns a standard text description of the specified HTTP status code.\n"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "status"
					}
				],
				"line": 176,
				"kind": "function",
				"char": 6,
				"name": "justifiesConnectionClose",
				"deco": "FNaNbNiNfiZb",
				"endchar": 1,
				"endline": 185,
				"comment": "\tDetermines if the given status code justifies closing the connection (e.g. evil big request bodies)\n"
			},
			{
				"parameters": [
					{
						"deco": "E4vibe4http6status10HTTPStatus",
						"name": "status"
					}
				],
				"line": 190,
				"kind": "function",
				"char": 6,
				"name": "isSuccessCode",
				"deco": "FNaNbNiNfE4vibe4http6status10HTTPStatusZb",
				"endchar": 1,
				"endline": 193,
				"comment": "\tDetermines if status code is generally successful (>= 200 && < 300)\n"
			}
		],
		"comment": "\tList of all standard HTTP status codes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n",
		"name": "vibe.http.status"
	},
	{
		"kind": "module",
		"file": "http/vibe/http/websockets.d",
		"members": [
			{
				"kind": "alias",
				"deco": "DFNbNfMC4vibe4http10websockets9WebSocketZv",
				"char": 1,
				"line": 62,
				"name": "WebSocketHandshakeDelegate"
			},
			{
				"line": 66,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 71,
						"kind": "constructor",
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 2,
						"name": "this",
						"deco": "FNaNbNfAyaQdmC6object9ThrowableZC4vibe4http10websockets18WebSocketException",
						"endchar": 2,
						"endline": 74,
						"comment": "\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							}
						],
						"line": 77,
						"kind": "constructor",
						"originalType": "pure nothrow @safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__)",
						"char": 2,
						"name": "this",
						"deco": "FNaNbNfAyaC6object9ThrowableQvmZC4vibe4http10websockets18WebSocketException",
						"endchar": 2,
						"endline": 80,
						"comment": "\n"
					}
				],
				"name": "WebSocketException",
				"comment": "Exception thrown by $(D vibe.http.websockets).\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "xC4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings()",
						"name": "settings"
					}
				],
				"line": 86,
				"kind": "function",
				"originalType": "@safe WebSocket(URL url, const(HTTPClientSettings) settings = defaultSettings)",
				"char": 11,
				"name": "connectWebSocket",
				"deco": "FNfS4vibe4inet3url3URLxCQu4http6client18HTTPClientSettingsZCQCeQBl10websockets9WebSocket",
				"endchar": 1,
				"endline": 109,
				"comment": "\tReturns a WebSocket client object that is connected to the specified host.\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "DFNbNfMC4vibe4http10websockets9WebSocketZv",
						"storageClass": [
							"scope"
						],
						"name": "del"
					},
					{
						"deco": "xC4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings()",
						"name": "settings"
					}
				],
				"line": 112,
				"kind": "function",
				"originalType": "@safe void(URL url, scope WebSocketHandshakeDelegate del, const(HTTPClientSettings) settings = defaultSettings)",
				"char": 6,
				"name": "connectWebSocket",
				"deco": "FNfS4vibe4inet3url3URLMDFNbNfMCQBb4http10websockets9WebSocketZvxCQCjQBi6client18HTTPClientSettingsZv",
				"endchar": 1,
				"endline": 141,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "DFNbMC4vibe4http10websockets9WebSocketZv",
						"storageClass": [
							"scope"
						],
						"name": "del"
					},
					{
						"deco": "xC4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings()",
						"name": "settings"
					}
				],
				"line": 143,
				"kind": "function",
				"originalType": "@system void(URL url, scope void delegate(scope WebSocket) nothrow @system del, const(HTTPClientSettings) settings = defaultSettings)",
				"char": 6,
				"name": "connectWebSocket",
				"deco": "FS4vibe4inet3url3URLMDFNbMCQz4http10websockets9WebSocketZvxCQCgQBi6client18HTTPClientSettingsZv",
				"endchar": 1,
				"endline": 146,
				"comment": "Scheduled for deprecation - use a `@safe` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "DFNfMC4vibe4http10websockets9WebSocketZv",
						"storageClass": [
							"scope"
						],
						"name": "del"
					},
					{
						"deco": "xC4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings()",
						"name": "settings"
					}
				],
				"line": 148,
				"kind": "function",
				"originalType": "@safe void(URL url, scope void delegate(scope WebSocket) @safe del, const(HTTPClientSettings) settings = defaultSettings)",
				"char": 6,
				"name": "connectWebSocket",
				"deco": "FNfS4vibe4inet3url3URLMDFNfMCQz4http10websockets9WebSocketZvxCQCgQBi6client18HTTPClientSettingsZv",
				"endchar": 1,
				"endline": 154,
				"comment": "Scheduled for deprecation - use a `nothrow` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "DFMC4vibe4http10websockets9WebSocketZv",
						"storageClass": [
							"scope"
						],
						"name": "del"
					},
					{
						"deco": "xC4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings()",
						"name": "settings"
					}
				],
				"line": 156,
				"kind": "function",
				"originalType": "@system void(URL url, scope void delegate(scope WebSocket) @system del, const(HTTPClientSettings) settings = defaultSettings)",
				"char": 6,
				"name": "connectWebSocket",
				"deco": "FS4vibe4inet3url3URLMDFMCQx4http10websockets9WebSocketZvxCQCeQBi6client18HTTPClientSettingsZv",
				"endchar": 1,
				"endline": 162,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "DFNbNfMC4vibe4http10websockets9WebSocketZv",
						"storageClass": [
							"scope"
						],
						"name": "on_handshake"
					},
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					}
				],
				"line": 168,
				"kind": "function",
				"originalType": "@safe void(scope WebSocketHandshakeDelegate on_handshake, scope HTTPServerRequest req, scope HTTPServerResponse res)",
				"char": 6,
				"name": "handleWebSocket",
				"deco": "FNfMDFNbNfMC4vibe4http10websockets9WebSocketZvMCQBkQBi6server17HTTPServerRequestMCQCsQCqQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 213,
				"comment": "\tEstablishes a web socket conection and passes it to the $(D on_handshake) delegate.\n"
			},
			{
				"parameters": [
					{
						"deco": "DFNbMC4vibe4http10websockets9WebSocketZv",
						"storageClass": [
							"scope"
						],
						"name": "on_handshake"
					},
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					}
				],
				"line": 215,
				"kind": "function",
				"char": 6,
				"name": "handleWebSocket",
				"deco": "FMDFNbMC4vibe4http10websockets9WebSocketZvMCQBkQBi6server17HTTPServerRequestMCQCsQCqQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 218,
				"comment": "Scheduled for deprecation - use a `@safe` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "DFNfMC4vibe4http10websockets9WebSocketZv",
						"storageClass": [
							"scope"
						],
						"name": "on_handshake"
					},
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					}
				],
				"line": 220,
				"kind": "function",
				"char": 6,
				"name": "handleWebSocket",
				"deco": "FNfMDFNfMC4vibe4http10websockets9WebSocketZvMCQBkQBi6server17HTTPServerRequestMCQCsQCqQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 226,
				"comment": "Scheduled for deprecation - use a `nothrow` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "DFMC4vibe4http10websockets9WebSocketZv",
						"storageClass": [
							"scope"
						],
						"name": "on_handshake"
					},
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"storageClass": [
							"scope"
						],
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"storageClass": [
							"scope"
						],
						"name": "res"
					}
				],
				"line": 228,
				"kind": "function",
				"char": 6,
				"name": "handleWebSocket",
				"deco": "FMDFMC4vibe4http10websockets9WebSocketZvMCQBkQBi6server17HTTPServerRequestMCQCsQCqQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 234,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "PFNbNfMC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"line": 240,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegateS(void function(scope WebSocket) nothrow @safe on_handshake)",
				"char": 28,
				"name": "handleWebSockets",
				"deco": "FNfPFNbNfMC4vibe4http10websockets9WebSocketZvZDFNfMCQBpQBn6server17HTTPServerRequestMCQCxQCvQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 243,
				"comment": "\tReturns a HTTP request handler that establishes web socket conections.\n"
			},
			{
				"parameters": [
					{
						"deco": "DFNbNfMC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"line": 245,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegateS(WebSocketHandshakeDelegate on_handshake)",
				"char": 28,
				"name": "handleWebSockets",
				"deco": "FNfDFNbNfMC4vibe4http10websockets9WebSocketZvZDFNfMCQBpQBn6server17HTTPServerRequestMCQCxQCvQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 291,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "DFNbMC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"line": 293,
				"kind": "function",
				"originalType": "@system HTTPServerRequestDelegateS(void delegate(scope WebSocket) nothrow @system on_handshake)",
				"char": 28,
				"name": "handleWebSockets",
				"deco": "FDFNbMC4vibe4http10websockets9WebSocketZvZDFNfMCQBpQBn6server17HTTPServerRequestMCQCxQCvQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 296,
				"comment": "Scheduled for deprecation - use a `@safe` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "PFNbMC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"line": 298,
				"kind": "function",
				"originalType": "@system HTTPServerRequestDelegateS(void function(scope WebSocket) nothrow @system on_handshake)",
				"char": 28,
				"name": "handleWebSockets",
				"deco": "FPFNbMC4vibe4http10websockets9WebSocketZvZDFNfMCQBpQBn6server17HTTPServerRequestMCQCxQCvQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 301,
				"comment": "Scheduled for deprecation - use a `@safe` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "DFNfMC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"line": 303,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegateS(void delegate(scope WebSocket) @safe on_handshake)",
				"char": 28,
				"name": "handleWebSockets",
				"deco": "FNfDFNfMC4vibe4http10websockets9WebSocketZvZDFNfMCQBpQBn6server17HTTPServerRequestMCQCxQCvQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 309,
				"comment": "Scheduled for deprecation - use a `nothrow` callback instead.\n"
			},
			{
				"parameters": [
					{
						"deco": "PFNfMC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"line": 311,
				"kind": "function",
				"originalType": "@safe HTTPServerRequestDelegateS(void function(scope WebSocket) @safe on_handshake)",
				"char": 28,
				"name": "handleWebSockets",
				"deco": "FNfPFNfMC4vibe4http10websockets9WebSocketZvZDFNfMCQBpQBn6server17HTTPServerRequestMCQCxQCvQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 317,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "DFMC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"line": 319,
				"kind": "function",
				"originalType": "@system HTTPServerRequestDelegateS(void delegate(scope WebSocket) @system on_handshake)",
				"char": 28,
				"name": "handleWebSockets",
				"deco": "FDFMC4vibe4http10websockets9WebSocketZvZDFNfMCQBpQBn6server17HTTPServerRequestMCQCxQCvQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 325,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "PFMC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"line": 327,
				"kind": "function",
				"originalType": "@system HTTPServerRequestDelegateS(void function(scope WebSocket) @system on_handshake)",
				"char": 28,
				"name": "handleWebSockets",
				"deco": "FPFMC4vibe4http10websockets9WebSocketZvZDFNfMCQBpQBn6server17HTTPServerRequestMCQCxQCvQBi18HTTPServerResponseZv",
				"endchar": 1,
				"endline": 333,
				"comment": "ditto\n"
			},
			{
				"line": 359,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)0",
						"line": 361,
						"name": "none"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1000",
						"line": 362,
						"name": "normalClosure"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1001",
						"line": 363,
						"name": "goingAway"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1002",
						"line": 364,
						"name": "protocolError"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1003",
						"line": 365,
						"name": "unsupportedData"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1005",
						"line": 366,
						"name": "noStatusReceived"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1006",
						"line": 367,
						"name": "abnormalClosure"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1007",
						"line": 368,
						"name": "invalidFramePayloadData"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1008",
						"line": 369,
						"name": "policyViolation"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1009",
						"line": 370,
						"name": "messageTooBig"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1011",
						"line": 371,
						"name": "internalError"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1012",
						"line": 372,
						"name": "serviceRestart"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1013",
						"line": 373,
						"name": "tryAgainLater"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1014",
						"line": 374,
						"name": "badGateway"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "cast(short)1015",
						"line": 375,
						"name": "tlsHandshake"
					}
				],
				"name": "WebSocketCloseReason",
				"baseDeco": "s",
				"comment": " Provides the reason that a websocket connection has closed.\n\n Further documentation for the WebSocket and it's codes can be found from:\n https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n\n ---\n\n void echoSocket(scope WebSocket sock)\n {\n   import std.datetime : seconds;\n\n   while(sock.waitForData(3.seconds))\n   {\n     string msg = sock.receiveText;\n     logInfo(\"Got a message: %s\", msg);\n     sock.send(msg);\n   }\n\n   if(sock.connected)\n     sock.close(WebSocketCloseReason.policyViolation, \"timeout\");\n }\n ---\n"
			},
			{
				"parameters": [
					{
						"deco": "E4vibe4http10websockets20WebSocketCloseReason",
						"name": "reason"
					}
				],
				"line": 378,
				"kind": "function",
				"char": 8,
				"name": "closeReasonString",
				"deco": "FNiNfE4vibe4http10websockets20WebSocketCloseReasonZAya",
				"endchar": 1,
				"endline": 434
			},
			{
				"kind": "class",
				"line": 492,
				"char": 7,
				"members": [
					{
						"line": 565,
						"kind": "function",
						"char": 17,
						"name": "connected",
						"deco": "FNdNfZb",
						"endchar": 87,
						"endline": 565,
						"comment": "\t\tDetermines if the WebSocket connection is still alive and ready for sending.\n\n\t\tNote that for determining the ready state for $(EM reading), you need\n\t\tto use $(D waitForData) instead, because both methods can return\n\t\tdifferent values while a disconnect is in proress.\n\n\t\tSee_also: $(D waitForData)\n"
					},
					{
						"line": 575,
						"kind": "function",
						"char": 18,
						"name": "closeCode",
						"deco": "FNdNfZs",
						"endchar": 52,
						"endline": 575,
						"comment": "\t\tReturns the close code sent by the remote end.\n\n\t\tNote if the connection was never opened, is still alive, or was closed\n\t\tlocally this value will be 0. If no close code was given by the remote\n\t\tend in the close frame, the value will be 1005. If the connection was\n\t\tnot closed cleanly by the remote end, this value will be 1006.\n"
					},
					{
						"line": 583,
						"kind": "function",
						"char": 26,
						"name": "closeReason",
						"deco": "FNdNfZAxa",
						"endchar": 64,
						"endline": 583,
						"comment": "\t\tReturns the close reason sent by the remote end.\n\n\t\tNote if the connection was never opened, is still alive, or was closed\n\t\tlocally this value will be an empty string.\n"
					},
					{
						"line": 588,
						"kind": "function",
						"char": 37,
						"name": "request",
						"deco": "xFNdNfZxC4vibe4http6server17HTTPServerRequest",
						"endchar": 73,
						"endline": 588,
						"comment": "\t\tThe HTTP request that established the web socket connection.\n"
					},
					{
						"line": 593,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 104,
						"endline": 593,
						"comment": "\t\tChecks if data is readily available for read.\n"
					},
					{
						"line": 599,
						"kind": "function",
						"char": 7,
						"name": "waitForData",
						"deco": "FNfZb",
						"endchar": 2,
						"endline": 608,
						"comment": " Waits until either a message arrives or until the connection is closed.\n\n\t\tThis function can be used in a read loop to cleanly determine when to stop reading.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"line": 611,
						"kind": "function",
						"char": 7,
						"name": "waitForData",
						"deco": "FNfS4core4time8DurationZb",
						"endchar": 2,
						"endline": 626,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Axa",
								"storageClass": [
									"scope"
								],
								"name": "data"
							}
						],
						"line": 637,
						"kind": "function",
						"char": 7,
						"name": "send",
						"deco": "FNfMAxaZv",
						"endchar": 2,
						"endline": 642,
						"comment": "\t\tSends a text message.\n\n\t\tOn the JavaScript side, the text will be available as message.data (type string).\n\n\t\tThrows:\n\t\t\tA `WebSocketException` is thrown if the connection gets closed\n\t\t\tbefore or during the transfer of the message.\n"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "data"
							}
						],
						"line": 653,
						"kind": "function",
						"originalType": "@safe void(in ubyte[] data)",
						"char": 7,
						"name": "send",
						"deco": "FNfxAhZv",
						"endchar": 2,
						"endline": 656,
						"comment": "\t\tSends a binary message.\n\n\t\tOn the JavaScript side, the text will be available as message.data (type Blob).\n\n\t\tThrows:\n\t\t\tA `WebSocketException` is thrown if the connection gets closed\n\t\t\tbefore or during the transfer of the message.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfMC4vibe4http10websockets24OutgoingWebSocketMessageZv",
								"storageClass": [
									"scope"
								],
								"name": "sender"
							},
							{
								"deco": "E4vibe4http10websockets11FrameOpcode",
								"name": "frameOpcode"
							}
						],
						"line": 665,
						"kind": "function",
						"char": 7,
						"name": "send",
						"deco": "FNfMDFNfMC4vibe4http10websockets24OutgoingWebSocketMessageZvEQBzQBxQBv11FrameOpcodeZv",
						"endchar": 2,
						"endline": 673,
						"comment": "\t\tSends a message using an output stream.\n\n\t\tThrows:\n\t\t\tA `WebSocketException` is thrown if the connection gets closed\n\t\t\tbefore or during the transfer of the message.\n"
					},
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "DFNfMC4vibe4http10websockets24OutgoingWebSocketMessageZv",
								"storageClass": [
									"scope"
								],
								"name": "sender"
							}
						],
						"line": 677,
						"kind": "function",
						"char": 7,
						"name": "send",
						"deco": "FNfMDFNfMC4vibe4http10websockets24OutgoingWebSocketMessageZvZv",
						"endchar": 2,
						"endline": 680,
						"comment": "Compatibility overload - will be removed soon.\n"
					},
					{
						"parameters": [
							{
								"deco": "s",
								"default": "cast(short)1000",
								"name": "code"
							},
							{
								"deco": "Axa",
								"storageClass": [
									"scope"
								],
								"default": "\"\"",
								"name": "reason"
							}
						],
						"line": 689,
						"kind": "function",
						"originalType": "@safe void(short code = WebSocketCloseReason.normalClosure, scope const(char)[] reason = \"\")",
						"char": 7,
						"name": "close",
						"deco": "FNfsMAxaZv",
						"endchar": 2,
						"endline": 729,
						"comment": "\t\tActively closes the connection.\n\n\t\tParams:\n\t\t\tcode = Numeric code indicating a termination reason.\n\t\t\treason = Message describing why the connection was terminated.\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"default": "true",
								"name": "strict"
							}
						],
						"line": 739,
						"kind": "function",
						"char": 10,
						"name": "receiveBinary",
						"deco": "FNfbZAh",
						"endchar": 2,
						"endline": 748,
						"comment": "\t\tReceives a new message and returns its contents as a newly allocated data array.\n\n\t\tParams:\n\t\t\tstrict = If set, ensures the exact frame type (text/binary) is received and throws an execption otherwise.\n\t\tThrows: WebSocketException if the connection is closed or\n\t\t\tif $(D strict == true) and the frame received is not the right type\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"default": "true",
								"name": "strict"
							}
						],
						"line": 750,
						"kind": "function",
						"char": 9,
						"name": "receiveText",
						"deco": "FNfbZAya",
						"endchar": 2,
						"endline": 759,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfMC4vibe4http10websockets24IncomingWebSocketMessageZv",
								"storageClass": [
									"scope"
								],
								"name": "receiver"
							}
						],
						"line": 765,
						"kind": "function",
						"char": 7,
						"name": "receive",
						"deco": "FNfMDFNfMC4vibe4http10websockets24IncomingWebSocketMessageZvZv",
						"endchar": 2,
						"endline": 776,
						"comment": "\t\tReceives a new message using an InputStream.\n\t\tThrows: WebSocketException if the connection is closed.\n"
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 7,
						"line": 492,
						"name": "~this"
					}
				],
				"comment": " Represents a single _WebSocket connection.\n\n ---\n shared static this ()\n {\n   runTask(() => connectToWS());\n }\n\n void connectToWS ()\n {\n   auto ws_url = URL(\"wss://websockets.example.com/websocket/auth_token\");\n   auto ws = connectWebSocket(ws_url);\n   logInfo(\"WebSocket connected\");\n\n   while (ws.waitForData())\n   {\n     auto txt = ws.receiveText;\n     logInfo(\"Received: %s\", txt);\n   }\n   logFatal(\"Connection lost!\");\n }\n ---\n",
				"name": "WebSocket"
			},
			{
				"line": 861,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 879,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 890
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 892,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 897
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 899,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 904
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 925,
						"name": "write"
					}
				],
				"name": "OutgoingWebSocketMessage",
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"comment": "\tRepresents a single outgoing _WebSocket message as an OutputStream.\n"
			},
			{
				"line": 932,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 948,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "xFNdNfZb",
						"endchar": 76,
						"endline": 948
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 950,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "xFNdNfZm",
						"endchar": 76,
						"endline": 950
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 952,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 55,
						"endline": 952
					},
					{
						"line": 955,
						"kind": "function",
						"char": 24,
						"name": "frameOpcode",
						"deco": "xFNdNfZE4vibe4http10websockets11FrameOpcode",
						"endchar": 76,
						"endline": 955,
						"comment": "The frame type for this nessage;\n"
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 957,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 57,
						"endline": 957
					},
					{
						"line": 971,
						"kind": "function",
						"char": 7,
						"name": "skipFrame",
						"deco": "FNfZb",
						"endchar": 2,
						"endline": 978,
						"comment": " Retrieve the next websocket frame of the stream and discard the current\n one\n\n This function is helpful if one wish to process frames by frames,\n or minimize memory allocation, as `peek` will only return the current\n frame data, and read requires a pre-allocated buffer.\n\n Returns:\n `false` if the current frame is the final one, `true` if a new frame\n was read.\n"
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 980,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 1003
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 1005,
						"name": "read"
					}
				],
				"name": "IncomingWebSocketMessage",
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"comment": "\tRepresents a single incoming _WebSocket message as an InputStream.\n"
			}
		],
		"comment": "\tImplements WebSocket support and fallbacks for older browsers.\n\n\tStandards: $(LINK2 https://tools.ietf.org/html/rfc6455, RFC6455)\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L12_C7)\n---\nvoid handleConn(scope WebSocket sock)\n{\n\t// simple echo server\n\twhile (sock.connected) {\n\t\tauto msg = sock.receiveText();\n\t\tsock.send(msg);\n\t}\n}\n\nvoid startServer()\n{\n\timport vibe.http.router;\n\tauto router = new URLRouter;\n\trouter.get(\"/ws\", handleWebSockets(&handleConn));\n\n\t// Start HTTP server using listenHTTP()...\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L12_C7)\n",
		"name": "vibe.http.websockets"
	},
	{
		"kind": "module",
		"file": "../diet-ng/source/diet/defs.d",
		"members": [
			{
				"storageClass": [
					"enum"
				],
				"line": 13,
				"kind": "variable",
				"char": 6,
				"name": "dietOutputRangeName",
				"deco": "Aya",
				"init": "\"_diet_output\"",
				"comment": " The name of the output range variable within a Diet template.\n\n\tD statements can access the variable with this name to directly write to the\n\toutput.\n"
			},
			{
				"kind": "alias",
				"line": 17,
				"char": 1,
				"deco": "C9Exception",
				"comment": "Thrown by the parser for malformed input.\n",
				"name": "DietParserException"
			},
			{
				"parameters": [
					{
						"deco": "b",
						"name": "cond"
					},
					{
						"deco": "Aya",
						"storageClass": [
							"lazy"
						],
						"name": "text"
					},
					{
						"deco": "xS4diet3dom8Location",
						"storageClass": [
							"ref"
						],
						"name": "loc"
					}
				],
				"line": 30,
				"kind": "function",
				"originalType": "void(bool cond, lazy string text, ref Location loc)",
				"char": 6,
				"name": "enforcep",
				"deco": "FbLAyaKxS4diet3dom8LocationZv",
				"endchar": 1,
				"endline": 38,
				"comment": " Throws an exception if the condition evaluates to `false`.\n\n\tThis function will generate a proper error message including file and line\n\tnumber when called at compile time. An assertion is used in this case\n\tinstead of an exception:\n\n\tThrows:\n\t\tThrows a `DietParserException` when called with a `false` condition at\n\t\trun time.\n"
			}
		],
		"comment": " Contains common types and constants.\n",
		"name": "diet.defs"
	},
	{
		"kind": "module",
		"file": "../diet-ng/source/diet/dom.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "xS4diet3dom9Attribute",
						"name": "att"
					}
				],
				"line": 13,
				"kind": "function",
				"char": 8,
				"name": "expectText",
				"deco": "FxS4diet3dom9AttributeZAya",
				"endchar": 1,
				"endline": 19
			},
			{
				"parameters": [
					{
						"deco": "xC4diet3dom4Node",
						"name": "n"
					}
				],
				"line": 21,
				"kind": "function",
				"char": 8,
				"name": "expectText",
				"deco": "FxC4diet3dom4NodeZAya",
				"endchar": 1,
				"endline": 29
			},
			{
				"parameters": [
					{
						"deco": "xS4diet3dom9Attribute",
						"name": "att"
					}
				],
				"line": 31,
				"kind": "function",
				"char": 8,
				"name": "expectExpression",
				"deco": "FxS4diet3dom9AttributeZAya",
				"endchar": 1,
				"endline": 36
			},
			{
				"parameters": [
					{
						"deco": "xAC4diet3dom4Node",
						"name": "nodes"
					}
				],
				"line": 38,
				"kind": "function",
				"originalType": "Node[](in Node[] nodes)",
				"char": 8,
				"name": "clone",
				"deco": "FxAC4diet3dom4NodeZACQrQoQm",
				"endchar": 1,
				"endline": 43
			},
			{
				"parameters": [
					{
						"deco": "xS4diet3dom9Attribute",
						"name": "att"
					}
				],
				"line": 45,
				"kind": "function",
				"char": 6,
				"name": "isExpression",
				"deco": "FxS4diet3dom9AttributeZb",
				"endchar": 139,
				"endline": 45
			},
			{
				"parameters": [
					{
						"deco": "xS4diet3dom9Attribute",
						"name": "att"
					}
				],
				"line": 46,
				"kind": "function",
				"char": 6,
				"name": "isText",
				"deco": "FxS4diet3dom9AttributeZb",
				"endchar": 152,
				"endline": 46
			},
			{
				"parameters": [
					{
						"deco": "xAS4diet3dom16AttributeContent",
						"name": "contents"
					},
					{
						"deco": "S4diet3dom8Location",
						"name": "loc"
					}
				],
				"line": 50,
				"kind": "function",
				"originalType": "NodeContent[](in AttributeContent[] contents, Location loc)",
				"char": 15,
				"name": "toNodeContent",
				"deco": "FxAS4diet3dom16AttributeContentSQBcQBa8LocationZASQBuQBs11NodeContent",
				"endchar": 1,
				"endline": 61,
				"comment": " Converts an array of attribute contents to node contents.\n"
			},
			{
				"kind": "class",
				"line": 66,
				"char": 11,
				"members": [
					{
						"line": 67,
						"kind": "variable",
						"char": 9,
						"name": "nodes",
						"deco": "AC4diet3dom4Node",
						"offset": 16
					},
					{
						"parameters": [
							{
								"deco": "AC4diet3dom4Node",
								"name": "nodes"
							}
						],
						"line": 69,
						"kind": "constructor",
						"originalType": "(Node[] nodes)",
						"char": 2,
						"name": "this",
						"deco": "FAC4diet3dom4NodeZCQqQn8Document",
						"endchar": 43,
						"endline": 69
					}
				],
				"comment": " Encapsulates a full Diet template document.\n",
				"name": "Document"
			},
			{
				"kind": "class",
				"line": 75,
				"char": 11,
				"members": [
					{
						"line": 79,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"line": 83,
								"char": 3,
								"value": "\"//\"",
								"comment": " Normal comment. The content will appear in the output if the output\n\t\t\tformat supports comments.\n",
								"name": "comment"
							},
							{
								"kind": "enum member",
								"line": 87,
								"char": 3,
								"value": "\"//-\"",
								"comment": " Hidden comment. The content will never appear in the output.\n",
								"name": "hidden"
							},
							{
								"kind": "enum member",
								"line": 96,
								"char": 3,
								"value": "\"-\"",
								"comment": " D statement. A node that has pure text as its first content,\n\t\t\toptionally followed by any number of child nodes. The text content\n\t\t\tis either a complete D statement, or an open block statement\n\t\t\t(without a block statement appended). In the latter case, all nested\n\t\t\tnodes are considered to be part of the block statement's body by\n\t\t\tthe generator.\n",
								"name": "code"
							},
							{
								"kind": "enum member",
								"line": 104,
								"char": 3,
								"value": "\"|\"",
								"comment": " A dummy node that contains only text and string interpolations.\n\t\t\tThese nodes behave the same as if their node content would be\n\t\t\tinserted in their place, except that they will cause whitespace\n\t\t\t(usually a space or a newline) to be prepended in the output, if\n\t\t\tthey are not the first child of their parent.\n",
								"name": "text"
							},
							{
								"kind": "enum member",
								"line": 111,
								"char": 3,
								"value": "\":\"",
								"comment": " Filter node. These nodes contain only text and string interpolations\n\t\t\tand have a \"filterChain\" attribute that contains a space separated\n\t\t\tlist of filter names that are applied in reverse order when the\n\t\t\ttraits (see `diet.traits.applyTraits`) are applied by the generator.\n",
								"name": "filter"
							}
						],
						"name": "SpecialName",
						"baseDeco": "Aya",
						"comment": "A set of names that identify special-purpose nodes\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 115,
						"kind": "variable",
						"char": 11,
						"name": "loc",
						"deco": "S4diet3dom8Location",
						"offset": 16,
						"comment": "Start location of the node in the source file.\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 117,
						"kind": "variable",
						"char": 9,
						"name": "name",
						"deco": "Aya",
						"offset": 40,
						"comment": "Name of the node\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 119,
						"kind": "variable",
						"char": 14,
						"name": "attributes",
						"deco": "AS4diet3dom9Attribute",
						"offset": 56,
						"comment": "A key-value set of attributes.\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 121,
						"kind": "variable",
						"char": 16,
						"name": "contents",
						"deco": "AS4diet3dom11NodeContent",
						"offset": 72,
						"comment": "The main contents of the node.\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 123,
						"kind": "variable",
						"char": 14,
						"name": "attribs",
						"deco": "E4diet3dom11NodeAttribs",
						"offset": 88,
						"comment": "Flags that control the parser and generator behavior.\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 125,
						"kind": "variable",
						"char": 9,
						"name": "translationKey",
						"deco": "Aya",
						"offset": 96,
						"comment": "Original text used to look up the translation (only set if translated)\n"
					},
					{
						"parameters": [
							{
								"deco": "S4diet3dom8Location",
								"default": "Location(null, 0)",
								"name": "loc"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "name"
							},
							{
								"deco": "AS4diet3dom9Attribute",
								"default": "null",
								"name": "attributes"
							},
							{
								"deco": "AS4diet3dom11NodeContent",
								"default": "null",
								"name": "contents"
							},
							{
								"deco": "E4diet3dom11NodeAttribs",
								"default": "cast(NodeAttribs)0",
								"name": "attribs"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "translation_key"
							}
						],
						"line": 128,
						"kind": "constructor",
						"originalType": "nothrow @safe (Location loc = Location.init, string name = null, Attribute[] attributes = null, NodeContent[] contents = null, NodeAttribs attribs = NodeAttribs.none, string translation_key = null)",
						"char": 2,
						"name": "this",
						"deco": "FNbNfS4diet3dom8LocationAyaASQxQu9AttributeASQBnQBl11NodeContentEQChQCf11NodeAttribsQCiZCQDfQDd4Node",
						"endchar": 2,
						"endline": 138,
						"comment": "Constructs a new node.\n"
					},
					{
						"line": 141,
						"kind": "function",
						"char": 29,
						"name": "id",
						"deco": "NgFNbNdNfZNgS4diet3dom9Attribute",
						"endchar": 69,
						"endline": 141,
						"comment": "Returns the \"id\" attribute.\n"
					},
					{
						"line": 143,
						"kind": "function",
						"char": 29,
						"name": "class_",
						"deco": "NgFNbNdNfZNgS4diet3dom9Attribute",
						"endchar": 76,
						"endline": 143,
						"comment": "Returns \"class\" attribute - a white space separated list of style class identifiers.\n"
					},
					{
						"line": 145,
						"kind": "function",
						"char": 7,
						"name": "clone",
						"deco": "xFNbNfZC4diet3dom4Node",
						"endchar": 2,
						"endline": 153
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "text"
							},
							{
								"deco": "xS4diet3dom8Location",
								"storageClass": [
									"ref"
								],
								"name": "loc"
							}
						],
						"line": 165,
						"kind": "function",
						"originalType": "nothrow @safe void(string text, ref Location loc)",
						"char": 7,
						"name": "addText",
						"deco": "FNbNfAyaKxS4diet3dom8LocationZv",
						"endchar": 2,
						"endline": 170,
						"comment": " Adds a piece of text to the node's contents.\n\n\t\tIf the node already has some content and the last piece of content is\n\t\talso text, with a matching location, the text will be appended to that\n\t\t`NodeContent`'s value. Otherwise, a new `NodeContent` will be appended.\n\n\t\tParams:\n\t\t\ttext = The text to append to the node\n\t\t\tloc = Location in the source file\n"
					},
					{
						"line": 173,
						"kind": "function",
						"char": 7,
						"name": "stripIfOnlyWhitespace",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 177,
						"comment": " Removes all content if it conists of only white space.\n"
					},
					{
						"line": 180,
						"kind": "function",
						"char": 7,
						"name": "hasNonWhitespaceContent",
						"deco": "xFNbNfZb",
						"endchar": 2,
						"endline": 184,
						"comment": " Determines if this node has any non-whitespace contents.\n"
					},
					{
						"line": 187,
						"kind": "function",
						"char": 7,
						"name": "stripLeadingWhitespace",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 195,
						"comment": " Strips any leading whitespace from the contents.\n"
					},
					{
						"line": 198,
						"kind": "function",
						"char": 7,
						"name": "stripTrailingWhitespace",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 206,
						"comment": " Strips any trailign whitespace from the contents.\n"
					},
					{
						"line": 209,
						"kind": "function",
						"char": 7,
						"name": "isTextNode",
						"deco": "xFNbNfZb",
						"endchar": 102,
						"endline": 209,
						"comment": "Tests if the node consists of only a single, static string.\n"
					},
					{
						"line": 212,
						"kind": "function",
						"char": 7,
						"name": "isProceduralTextNode",
						"deco": "xFNbNfZb",
						"endchar": 136,
						"endline": 212,
						"comment": "Tests if the node consists only of text and interpolations, but doesn't contain child nodes.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 214,
						"kind": "function",
						"char": 7,
						"name": "hasAttribute",
						"deco": "xFNbNfAyaZb",
						"endchar": 2,
						"endline": 221
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 227,
						"kind": "function",
						"char": 19,
						"name": "getAttribute",
						"deco": "NgFNbNeAyaZNgS4diet3dom9Attribute",
						"endchar": 2,
						"endline": 233,
						"comment": " Returns a given named attribute.\n\n\t\tIf the attribute doesn't exist, an empty value will be returned.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4diet3dom9Attribute",
								"name": "att"
							}
						],
						"line": 235,
						"kind": "function",
						"char": 7,
						"name": "setAttribute",
						"deco": "FNbNfS4diet3dom9AttributeZv",
						"endchar": 2,
						"endline": 243
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"object.Object.toString"
						],
						"line": 246,
						"kind": "function",
						"char": 18,
						"name": "toString",
						"deco": "xFNbNfZAya",
						"endchar": 2,
						"endline": 250,
						"comment": "Outputs a simple string representation of the node.\n"
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "C6Object",
								"name": "other_"
							}
						],
						"overrides": [
							"object.Object.opEquals"
						],
						"line": 253,
						"kind": "function",
						"char": 16,
						"name": "opEquals",
						"deco": "FNbNfC6ObjectZb",
						"endchar": 2,
						"endline": 257,
						"comment": "Compares all properties of two nodes for equality.\n"
					},
					{
						"parameters": [
							{
								"deco": "xC4diet3dom4Node",
								"name": "other"
							}
						],
						"line": 259,
						"kind": "function",
						"originalType": "const nothrow @safe bool(in Node other)",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNbNfxC4diet3dom4NodeZb",
						"endchar": 77,
						"endline": 259
					}
				],
				"comment": " Represents a single node in the DOM tree.\n",
				"name": "Node"
			},
			{
				"line": 265,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 266,
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 267,
						"char": 2,
						"value": "1",
						"comment": "Translate node contents\n",
						"name": "translated"
					},
					{
						"kind": "enum member",
						"line": 268,
						"char": 2,
						"value": "2",
						"comment": "All nested lines are treated as text\n",
						"name": "textNode"
					},
					{
						"kind": "enum member",
						"line": 269,
						"char": 2,
						"value": "4",
						"comment": "All nested lines are treated as raw text (no interpolations or inline tags)\n",
						"name": "rawTextNode"
					},
					{
						"kind": "enum member",
						"line": 270,
						"char": 2,
						"value": "8",
						"comment": "Don't insert white space outside of the node when generating output (currently ignored by the HTML generator)\n",
						"name": "fitOutside"
					},
					{
						"kind": "enum member",
						"line": 271,
						"char": 2,
						"value": "16",
						"comment": "Don't insert white space around the node contents when generating output (currently ignored by the HTML generator)\n",
						"name": "fitInside"
					}
				],
				"name": "NodeAttribs",
				"baseDeco": "i",
				"comment": " Flags that control parser or generator behavior.\n"
			},
			{
				"kind": "struct",
				"line": 282,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 286,
						"kind": "variable",
						"char": 11,
						"name": "loc",
						"deco": "S4diet3dom8Location",
						"offset": 0,
						"comment": "Location in source file\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 288,
						"kind": "variable",
						"char": 9,
						"name": "name",
						"deco": "Aya",
						"offset": 24,
						"comment": "Name of the attribute\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 290,
						"kind": "variable",
						"char": 21,
						"name": "contents",
						"deco": "AS4diet3dom16AttributeContent",
						"offset": 40,
						"comment": "Value of the attribute\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "Aya",
								"name": "value"
							},
							{
								"deco": "S4diet3dom8Location",
								"name": "loc"
							}
						],
						"line": 293,
						"kind": "function",
						"char": 19,
						"name": "text",
						"deco": "FNbNfAyaQdS4diet3dom8LocationZSQuQr9Attribute",
						"endchar": 128,
						"endline": 293,
						"comment": "Creates a new attribute with a static text value.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "Aya",
								"name": "value"
							},
							{
								"deco": "S4diet3dom8Location",
								"name": "loc"
							}
						],
						"line": 295,
						"kind": "function",
						"char": 19,
						"name": "expr",
						"deco": "FNbNfAyaQdS4diet3dom8LocationZSQuQr9Attribute",
						"endchar": 137,
						"endline": 295,
						"comment": "Creates a new attribute with an expression based value.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4diet3dom8Location",
								"name": "loc"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "AS4diet3dom16AttributeContent",
								"name": "contents"
							}
						],
						"line": 297,
						"kind": "constructor",
						"originalType": "nothrow ref @safe (Location loc, string name, AttributeContent[] contents)",
						"char": 2,
						"name": "this",
						"deco": "FNbNcNfS4diet3dom8LocationAyaASQxQu16AttributeContentZSQBvQBt9Attribute",
						"endchar": 2,
						"endline": 302
					},
					{
						"line": 305,
						"kind": "function",
						"char": 22,
						"name": "dup",
						"deco": "xFNbNdNfZS4diet3dom9Attribute",
						"endchar": 79,
						"endline": 305,
						"comment": "Creates a copy of the attribute.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							}
						],
						"line": 314,
						"kind": "function",
						"char": 7,
						"name": "addText",
						"deco": "FNbNfAyaZv",
						"endchar": 2,
						"endline": 320,
						"comment": " Appends raw text to the attribute.\n\n\t\tIf the attribute already has contents and the last piece of content is\n\t\talso text, then the text will be appended to the value of that\n\t\t`AttributeContent`. Otherwise, a new `AttributeContent` will be\n\t\tappended to `contents`.\n"
					},
					{
						"parameters": [
							{
								"deco": "AxS4diet3dom16AttributeContent",
								"name": "contents"
							}
						],
						"line": 328,
						"kind": "function",
						"char": 7,
						"name": "addContents",
						"deco": "FNbNfAxS4diet3dom16AttributeContentZv",
						"endchar": 2,
						"endline": 335,
						"comment": " Appends a list of contents.\n\n\t\tIf the list of contents starts with a text `AttributeContent`, then this\n\t\tfirst part will be appended using the same rules as for `addText`. The\n\t\tremaining parts will be appended normally.\n"
					}
				],
				"comment": " A single node attribute.\n\n\tAttributes are key-value pairs, where the value can either be empty\n\t(considered as a Boolean value of `true`), a string with optional\n\tstring interpolations, or a D expression (stored as a single\n\t`interpolation` `AttributeContent`).\n",
				"name": "Attribute"
			},
			{
				"kind": "struct",
				"line": 341,
				"char": 1,
				"members": [
					{
						"line": 345,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"line": 346,
								"char": 3,
								"value": "0",
								"comment": "Raw text (will be escaped by the generator as necessary)\n",
								"name": "text"
							},
							{
								"kind": "enum member",
								"line": 347,
								"char": 3,
								"value": "1",
								"comment": "A D expression that will be converted to text at runtime (escaped as necessary)\n",
								"name": "interpolation"
							},
							{
								"kind": "enum member",
								"line": 348,
								"char": 3,
								"value": "2",
								"comment": "A D expression that will be converted to text at runtime (not escaped)\n",
								"name": "rawInterpolation"
							}
						],
						"name": "Kind",
						"baseDeco": "i",
						"comment": "\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 352,
						"kind": "variable",
						"char": 7,
						"name": "kind",
						"deco": "E4diet3dom16AttributeContent4Kind",
						"offset": 0,
						"comment": "Kind of this attribute content\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 354,
						"kind": "variable",
						"char": 9,
						"name": "value",
						"deco": "Aya",
						"offset": 8,
						"comment": "The value - either text or a D expression\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "text"
							}
						],
						"line": 357,
						"kind": "function",
						"char": 26,
						"name": "text",
						"deco": "FNbNfAyaZS4diet3dom16AttributeContent",
						"endchar": 88,
						"endline": 357,
						"comment": "Creates a new text attribute content value.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "expression"
							}
						],
						"line": 359,
						"kind": "function",
						"char": 26,
						"name": "interpolation",
						"deco": "FNbNfAyaZS4diet3dom16AttributeContent",
						"endchar": 118,
						"endline": 359,
						"comment": "Creates a new string interpolation attribute content value.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "expression"
							}
						],
						"line": 361,
						"kind": "function",
						"char": 26,
						"name": "rawInterpolation",
						"deco": "FNbNfAyaZS4diet3dom16AttributeContent",
						"endchar": 124,
						"endline": 361,
						"comment": "Creates a new raw string interpolation attribute content value.\n"
					}
				],
				"comment": " A single piece of an attribute value.\n",
				"name": "AttributeContent"
			},
			{
				"kind": "struct",
				"line": 367,
				"char": 1,
				"members": [
					{
						"line": 371,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"line": 372,
								"char": 3,
								"value": "0",
								"comment": "A child node\n",
								"name": "node"
							},
							{
								"kind": "enum member",
								"line": 373,
								"char": 3,
								"value": "1",
								"comment": "Raw text (not escaped in the output)\n",
								"name": "text"
							},
							{
								"kind": "enum member",
								"line": 374,
								"char": 3,
								"value": "2",
								"comment": "A D expression that will be converted to text at runtime (escaped as necessary)\n",
								"name": "interpolation"
							},
							{
								"kind": "enum member",
								"line": 375,
								"char": 3,
								"value": "3",
								"comment": "A D expression that will be converted to text at runtime (not escaped)\n",
								"name": "rawInterpolation"
							}
						],
						"name": "Kind",
						"baseDeco": "i",
						"comment": "\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 379,
						"kind": "variable",
						"char": 7,
						"name": "kind",
						"deco": "E4diet3dom11NodeContent4Kind",
						"offset": 0,
						"comment": "Kind of this node content\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 381,
						"kind": "variable",
						"char": 11,
						"name": "loc",
						"deco": "S4diet3dom8Location",
						"offset": 8,
						"comment": "Location of the content in the source file\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 383,
						"kind": "variable",
						"originalType": "Node",
						"char": 7,
						"name": "node",
						"deco": "C4diet3dom4Node",
						"offset": 32,
						"comment": "The node - only used for `Kind.node`\n"
					},
					{
						"storageClass": [
							"nothrow",
							"@safe"
						],
						"line": 385,
						"kind": "variable",
						"char": 9,
						"name": "value",
						"deco": "Aya",
						"offset": 40,
						"comment": "The string value - either text or a D expression\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "C4diet3dom4Node",
								"name": "node"
							}
						],
						"line": 388,
						"kind": "function",
						"char": 21,
						"name": "tag",
						"deco": "FNbNfC4diet3dom4NodeZSQqQn11NodeContent",
						"endchar": 85,
						"endline": 388,
						"comment": "Creates a new child node content value.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "text"
							},
							{
								"deco": "S4diet3dom8Location",
								"name": "loc"
							}
						],
						"line": 390,
						"kind": "function",
						"char": 21,
						"name": "text",
						"deco": "FNbNfAyaS4diet3dom8LocationZSQuQr11NodeContent",
						"endchar": 108,
						"endline": 390,
						"comment": "Creates a new text node content value.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "text"
							},
							{
								"deco": "S4diet3dom8Location",
								"name": "loc"
							}
						],
						"line": 392,
						"kind": "function",
						"char": 21,
						"name": "interpolation",
						"deco": "FNbNfAyaS4diet3dom8LocationZSQuQr11NodeContent",
						"endchar": 126,
						"endline": 392,
						"comment": "Creates a new string interpolation node content value.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "text"
							},
							{
								"deco": "S4diet3dom8Location",
								"name": "loc"
							}
						],
						"line": 394,
						"kind": "function",
						"char": 21,
						"name": "rawInterpolation",
						"deco": "FNbNfAyaS4diet3dom8LocationZSQuQr11NodeContent",
						"endchar": 132,
						"endline": 394,
						"comment": "Creates a new raw string interpolation node content value.\n"
					},
					{
						"line": 396,
						"kind": "function",
						"char": 24,
						"name": "clone",
						"deco": "xFNbNdNfZS4diet3dom11NodeContent",
						"endchar": 2,
						"endline": 404
					},
					{
						"parameters": [
							{
								"deco": "xS4diet3dom11NodeContent",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 407,
						"kind": "function",
						"originalType": "const nothrow @safe bool(ref NodeContent other)",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNbNfKxS4diet3dom11NodeContentZb",
						"endchar": 2,
						"endline": 415,
						"comment": "Compares node content for equality.\n"
					}
				],
				"comment": " A single piece of node content.\n",
				"name": "NodeContent"
			},
			{
				"kind": "struct",
				"line": 420,
				"char": 1,
				"members": [
					{
						"line": 422,
						"kind": "variable",
						"char": 9,
						"name": "file",
						"deco": "Aya",
						"offset": 0,
						"comment": "Name of the source file\n"
					},
					{
						"line": 424,
						"kind": "variable",
						"char": 6,
						"name": "line",
						"deco": "i",
						"offset": 16,
						"comment": "Zero based line index within the file\n"
					}
				],
				"comment": "Represents the location of an entity within the source file.\n",
				"name": "Location"
			}
		],
		"comment": " Types to represent the DOM tree.\n\n\tThe DOM tree is used as an intermediate representation between the parser\n\tand the generator. Filters and other kinds of transformations can be\n\texecuted on the DOM tree. The generator itself will apply filters and\n\tother traits using `diet.traits.applyTraits`.\n",
		"name": "diet.dom"
	},
	{
		"kind": "module",
		"file": "../diet-ng/source/diet/html.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "filename"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"line": 32,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"static",
							"immutable"
						],
						"line": 35,
						"kind": "variable",
						"char": 27,
						"name": "contents",
						"init": "stripUTF8BOM(import(filename))"
					},
					{
						"kind": "alias",
						"type": "compileHTMLDietFileString!(filename, contents, ALIASES)",
						"char": 2,
						"line": 36,
						"name": "compileHTMLDietFile"
					}
				],
				"name": "compileHTMLDietFile",
				"comment": " Compiles a Diet template file that is available as a string import.\n\n\tThe final HTML will be written to the given `_diet_output` output range.\n\n\tParams:\n\t\tfilename = Name of the main Diet template file.\n\t\tALIASES = A list of variables to make available inside of the template,\n\t\t\tas well as traits structs annotated with the `@dietTraits`\n\t\t\tattribute.\n\n\tTraits:\n\t\tIn addition to the default Diet traits, adding an enum field\n\t\t`htmlOutputStyle` of type `HTMLOutputStyle` to a traits\n\t\tstruct can be used to control the style of the generated\n\t\tHTML.\n\n\tSee_Also: `compileHTMLDietString`, `compileHTMLDietStrings`\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "filename"
					},
					{
						"kind": "alias",
						"name": "contents"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"line": 57,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 60,
						"kind": "variable",
						"char": 7,
						"name": "_diet_files",
						"init": "collectFiles!(filename, contents)"
					},
					{
						"storageClass": [
							"enum"
						],
						"line": 62,
						"kind": "variable",
						"char": 30,
						"name": "_diet_use_cache",
						"init": "true"
					},
					{
						"line": 66,
						"kind": "function",
						"char": 8,
						"name": "computeTemplateHash",
						"type": "ulong()",
						"endchar": 2,
						"endline": 81
					},
					{
						"storageClass": [
							"enum"
						],
						"line": 83,
						"kind": "variable",
						"char": 7,
						"name": "_diet_hash",
						"init": "computeTemplateHash()"
					},
					{
						"storageClass": [
							"enum"
						],
						"line": 84,
						"kind": "variable",
						"char": 7,
						"name": "_diet_cache_file_name",
						"init": "\"_cached_\" ~ filename ~ \"_\" ~ _diet_hash.to!string ~ \".d\""
					},
					{
						"storageClass": [
							"enum"
						],
						"line": 88,
						"kind": "variable",
						"char": 8,
						"name": "_dietParser",
						"init": "import(_diet_cache_file_name)"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 106,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "R",
										"storageClass": [
											"ref"
										],
										"name": "_diet_output"
									}
								],
								"line": 106,
								"kind": "function",
								"char": 15,
								"name": "exec",
								"type": "void(ref R _diet_output)",
								"endchar": 2,
								"endline": 111
							}
						],
						"name": "exec"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 113,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "R",
										"storageClass": [
											"ref"
										],
										"name": "dst"
									}
								],
								"line": 113,
								"kind": "function",
								"char": 7,
								"name": "compileHTMLDietFileString",
								"type": "void(ref R dst)",
								"endchar": 2,
								"endline": 116
							}
						],
						"name": "compileHTMLDietFileString"
					}
				],
				"name": "compileHTMLDietFileString",
				"comment": " Compiles a Diet template given as a string, with support for includes and extensions.\n\n\tThis function behaves the same as `compileHTMLDietFile`, except that the\n\tcontents of the file are\n\n\tThe final HTML will be written to the given `_diet_output` output range.\n\n\tParams:\n\t\tfilename = The name to associate with `contents`\n\t\tcontents = The contents of the Diet template\n\t\tALIASES = A list of variables to make available inside of the template,\n\t\t\tas well as traits structs annotated with the `@dietTraits`\n\t\t\tattribute.\n\t\tdst = The output range to write the generated HTML to.\n\n\tSee_Also: `compileHTMLDietFile`, `compileHTMLDietString`, `compileHTMLDietStrings`\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "contents"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"line": 133,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 135,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "R",
										"storageClass": [
											"ref"
										],
										"name": "dst"
									}
								],
								"line": 135,
								"kind": "function",
								"char": 7,
								"name": "compileHTMLDietString",
								"type": "void(ref R dst)",
								"endchar": 2,
								"endline": 138
							}
						],
						"name": "compileHTMLDietString"
					}
				],
				"name": "compileHTMLDietString",
				"comment": " Compiles a Diet template given as a string.\n\n\tThe final HTML will be written to the given `_diet_output` output range.\n\n\tParams:\n\t\tcontents = The contents of the Diet template\n\t\tALIASES = A list of variables to make available inside of the template,\n\t\t\tas well as traits structs annotated with the `@dietTraits`\n\t\t\tattribute.\n\t\tdst = The output range to write the generated HTML to.\n\n\tSee_Also: `compileHTMLDietFileString`, `compileHTMLDietStrings`\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "FILES_GROUP"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"line": 156,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "DietTraits!ALIASES",
						"char": 2,
						"line": 158,
						"name": "TRAITS"
					},
					{
						"storageClass": [
							"static"
						],
						"line": 159,
						"kind": "function",
						"char": 26,
						"name": "_diet_nodes",
						"type": "Document()",
						"endchar": 127,
						"endline": 159
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 162,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "R",
										"storageClass": [
											"ref"
										],
										"name": "_diet_output"
									}
								],
								"line": 162,
								"kind": "function",
								"char": 15,
								"name": "exec",
								"type": "void(ref R _diet_output)",
								"endchar": 2,
								"endline": 167
							}
						],
						"name": "exec"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 169,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "R",
										"storageClass": [
											"ref"
										],
										"name": "dst"
									}
								],
								"line": 169,
								"kind": "function",
								"char": 7,
								"name": "compileHTMLDietStrings",
								"type": "void(ref R dst)",
								"endchar": 2,
								"endline": 172
							}
						],
						"name": "compileHTMLDietStrings"
					}
				],
				"name": "compileHTMLDietStrings",
				"comment": " Compiles a set of Diet template files.\n\n\tThe final HTML will be written to the given `_diet_output` output range.\n\n\tParams:\n\t\tFILES_GROUP = A `diet.input.Group` containing an alternating list of\n\t\t\tfile names and file contents.\n\t\tALIASES = A list of variables to make available inside of the template,\n\t\t\tas well as traits structs annotated with the `@dietTraits`\n\t\t\tattribute.\n\t\tdst = The output range to write the generated HTML to.\n\n\tSee_Also: `compileHTMLDietString`, `compileHTMLDietStrings`\n"
			},
			{
				"parameters": [
					{
						"deco": "xC4diet3dom8Document",
						"name": "doc"
					},
					{
						"deco": "Aya",
						"default": "\"_diet_output\"",
						"name": "range_name"
					},
					{
						"deco": "E4diet4html15HTMLOutputStyle",
						"default": "cast(HTMLOutputStyle)0",
						"name": "style"
					}
				],
				"line": 186,
				"kind": "function",
				"originalType": "string(in Document doc, string range_name = dietOutputRangeName, HTMLOutputStyle style = HTMLOutputStyle.compact)",
				"char": 8,
				"name": "getHTMLMixin",
				"deco": "FxC4diet3dom8DocumentAyaEQw4html15HTMLOutputStyleZQBd",
				"endchar": 1,
				"endline": 197,
				"comment": " Returns a mixin string that generates HTML for the given DOM tree.\n\n\tParams:\n\t\tdoc = The root nodes of the DOM tree.\n\t\trange_name = Optional custom name to use for the output range, defaults\n\t\t\tto `_diet_output`.\n\t\tstyle = Output style to use.\n\n\tReturns:\n\t\tA string of D statements suitable to be mixed in inside of a function.\n"
			},
			{
				"line": 234,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 235,
						"char": 2,
						"value": "0",
						"comment": "Outputs no extraneous whitespace (including line breaks) around HTML tags\n",
						"name": "compact"
					},
					{
						"kind": "enum member",
						"line": 236,
						"char": 2,
						"value": "1",
						"comment": "Inserts line breaks and indents lines according to their nesting level in the HTML structure\n",
						"name": "pretty"
					}
				],
				"name": "HTMLOutputStyle",
				"baseDeco": "i",
				"comment": " Determines how the generated HTML gets styled.\n\n\tTo use this, put an enum field named `htmlOutputStyle` into a diet traits\n\tstruct and pass that to the render function.\n\n\tThe default output style is `compact`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L240_C1)\n---\n@dietTraits\nstruct Traits {\n\tenum htmlOutputStyle = HTMLOutputStyle.pretty;\n}\n\nimport std.array : appender;\nauto dst = appender!string();\ndst.compileHTMLDietString!(\"html\\n\\tbody\\n\\t\\tp Hello\", Traits);\nimport std.conv : to;\nassert(dst.data == \"<html>\\n\\t<body>\\n\\t\\t<p>Hello<\/p>\\n\\t<\/body>\\n<\/html>\", [dst.data].to!string);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L240_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"type": "string",
						"name": "diet"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"line": 757,
				"kind": "template",
				"char": 17,
				"members": [
					{
						"line": 757,
						"kind": "function",
						"char": 17,
						"name": "utCompile",
						"type": "string()",
						"endchar": 2,
						"endline": 763
					}
				],
				"name": "utCompile"
			}
		],
		"comment": " HTML output generator implementation.\n",
		"name": "diet.html"
	},
	{
		"kind": "module",
		"file": "../diet-ng/source/diet/input.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "FILES_GROUP"
					}
				],
				"line": 13,
				"kind": "template",
				"char": 23,
				"members": [
					{
						"line": 13,
						"kind": "function",
						"char": 23,
						"name": "filesFromGroup",
						"type": "@property InputFile[]()",
						"endchar": 1,
						"endline": 24
					}
				],
				"name": "filesFromGroup",
				"comment": " Converts a `Group` with alternating file names and contents to an array of\n\t`InputFile`s.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "root_file"
					}
				],
				"line": 32,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"static",
							"immutable"
						],
						"line": 35,
						"kind": "variable",
						"char": 27,
						"name": "contents",
						"init": "stripUTF8BOM(import(root_file))"
					},
					{
						"storageClass": [
							"enum"
						],
						"line": 36,
						"kind": "variable",
						"char": 7,
						"name": "collectFiles",
						"init": "collectFiles!(root_file, contents)"
					}
				],
				"name": "collectFiles",
				"comment": " Using the file name of a string import Diet file, returns a list of all\n\trequired files.\n\n\tThese files recursively include all imports or extension templates that\n\tare used. The type of the list is `InputFile[]`.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "root_file"
					},
					{
						"kind": "alias",
						"name": "root_contents"
					}
				],
				"line": 39,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 42,
						"kind": "variable",
						"char": 7,
						"name": "baseFiles",
						"init": "collectReferencedFiles!(root_file, root_contents)"
					},
					{
						"storageClass": [
							"enum"
						],
						"line": 44,
						"kind": "variable",
						"char": 8,
						"name": "collectFiles",
						"init": "baseFiles"
					}
				],
				"name": "collectFiles",
				"comment": "ditto\n"
			},
			{
				"kind": "struct",
				"line": 49,
				"char": 1,
				"members": [
					{
						"line": 50,
						"kind": "variable",
						"char": 9,
						"name": "name",
						"deco": "Aya",
						"offset": 0
					},
					{
						"line": 51,
						"kind": "variable",
						"char": 9,
						"name": "contents",
						"deco": "Aya",
						"offset": 16
					}
				],
				"comment": "Encapsulates a single input file.\n",
				"name": "InputFile"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "A"
					}
				],
				"line": 58,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "TypeTuple!A",
						"char": 2,
						"line": 60,
						"name": "expand"
					}
				],
				"name": "Group",
				"comment": " Helper template to aggregate a list of compile time values.\n\n\tThis is similar to `AliasSeq`, but does not auto-expand.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "i",
						"name": "i"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"line": 66,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 71,
						"kind": "variable",
						"char": 68,
						"name": "localAliasesMixin",
						"init": "localAliasesMixin!(i + 1)",
						"type": "string"
					}
				],
				"name": "localAliasesMixin",
				"comment": " Returns a mixin string that makes all passed symbols available in the\n\tmixin's scope.\n"
			}
		],
		"comment": " Contains common definitions and logic to collect input dependencies.\n\n\tThis module is typically only used by generator implementations.\n",
		"name": "diet.input"
	},
	{
		"kind": "module",
		"file": "../diet-ng/source/diet/parser.d",
		"members": [
			{
				"constraint": "is(typeof(TR(string.init)) == string)",
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "identity",
						"name": "TR"
					}
				],
				"line": 50,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "text"
							},
							{
								"type": "string",
								"default": "\"string\"",
								"name": "filename"
							}
						],
						"line": 50,
						"kind": "function",
						"char": 10,
						"name": "parseDiet",
						"type": "Document(string text, string filename = \"string\")",
						"endchar": 1,
						"endline": 57
					}
				],
				"name": "parseDiet",
				"comment": " Parses a Diet template document and outputs the resulting DOM tree.\n\n\tThe overload that takes a list of files will automatically resolve\n\tincludes and extensions.\n\n\tParams:\n\t\tTR = An optional translation function that takes and returns a string.\n\t\t\tThis function will be invoked whenever node text contents need\n\t\t\tto be translated at compile tile (for the `&` node suffix).\n\t\ttext = For the single-file overload, specifies the contents of the Diet\n\t\t\ttemplate.\n\t\tfilename = For the single-file overload, specifies the file name that\n\t\t\tis displayed in error messages and stored in the DOM `Location`s.\n\t\tfiles = A full set of Diet template files. All files referenced in\n\t\t\tincludes or extension directives must be present.\n\n\tReturns:\n\t\tThe list of parsed root nodes is returned.\n"
			},
			{
				"constraint": "is(typeof(TR(string.init)) == string)",
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "identity",
						"name": "TR"
					}
				],
				"line": 60,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "InputFile[]",
								"name": "files"
							}
						],
						"line": 60,
						"kind": "function",
						"char": 10,
						"name": "parseDiet",
						"type": "Document(InputFile[] files)",
						"endchar": 1,
						"endline": 69
					}
				],
				"name": "parseDiet",
				"comment": "Ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					}
				],
				"line": 664,
				"kind": "function",
				"char": 8,
				"name": "identity",
				"deco": "FNbNiNfAyaZQe",
				"endchar": 63,
				"endline": 664,
				"comment": " Dummy translation function that returns the input unmodified.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "TR"
					}
				],
				"line": 885,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "InputFile",
								"name": "file"
							}
						],
						"line": 885,
						"kind": "function",
						"char": 8,
						"name": "parseDietRaw",
						"type": "Node[](InputFile file)",
						"endchar": 1,
						"endline": 1040
					}
				],
				"name": "parseDietRaw",
				"comment": " Parses a single Diet template file, without resolving includes and extensions.\n\n\tSee_Also: `parseDiet`\n"
			}
		],
		"comment": "\tGeneric Diet format parser.\n\n\tPerforms generic parsing of a Diet template file. The resulting AST is\n\tagnostic to the output format context in which it is used. Format\n\tspecific constructs, such as inline code or special tags, are parsed\n\tas-is without any preprocessing.\n\n\tThe supported features of the are:\n\t$(UL\n\t\t$(LI string interpolations)\n\t\t$(LI assignment expressions)\n\t\t$(LI blocks/extensions)\n\t\t$(LI includes)\n\t\t$(LI text paragraphs)\n\t\t$(LI translation annotations)\n\t\t$(LI class and ID attribute shortcuts)\n\t)\n",
		"name": "diet.parser"
	},
	{
		"kind": "module",
		"file": "../diet-ng/source/diet/traits.d",
		"members": [
			{
				"line": 31,
				"kind": "function",
				"char": 31,
				"name": "dietTraits",
				"deco": "FNdZS4diet6traits19DietTraitsAttribute",
				"endchar": 79,
				"endline": 31,
				"comment": " Marks a struct as a Diet traits container.\n\n\tA traits struct can contain any of the following:\n\n\t$(UL\n\t\t$(LI `string translate(string)` - A function that takes a `string` and\n\t\t\treturns the translated version of that string. This is used for\n\t\t\ttranslating the text of nodes marked with `&` at compile time. Note\n\t\t\tthat the input string may contain string interpolations.)\n\t\t$(LI `void filterX(string)` - Any number of compile-time filter\n\t\t\tfunctions, where \"X\" is a placeholder for the actual filter name.\n\t\t\tThe first character will be converted to lower case, so that a\n\t\t\tfunction `filterCss` will be available as `:css` within the Diet\n\t\t\ttemplate.)\n\t\t$(LI `SafeFilterCallback[string] filters` - A dictionary of runtime filter\n\t\t\tfunctions that will be used to for filter nodes that don't have an\n\t\t\tavailable compile-time filter or contain string interpolations.)\n\t\t$(LI `alias processors = AliasSeq!(...)` - A list of callables taking\n\t\t\ta `Document` to modify its contents)\n\t\t$(LI `HTMLOutputStyle htmlOutputStyle` - An enum to configure\n\t\t    the output style of the generated HTML, e.g. compact or pretty)\n\t)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L34_C1)\n---\nimport diet.html : compileHTMLDietString;\nimport std.array : appender, array;\nimport std.string : toUpper;\n\n@dietTraits\nstatic struct CTX {\n\tstatic string translate(string text) {\n\t\treturn text == \"Hello, World!\" ? \"Hallo, Welt!\" : text;\n\t}\n\n\tstatic string filterUppercase(I)(I input) {\n\t\treturn input.toUpper();\n\t}\n}\n\nauto dst = appender!string;\ndst.compileHTMLDietString!(\"p& Hello, World!\", CTX);\nassert(dst.data == \"<p>Hallo, Welt!<\/p>\");\n\ndst = appender!string;\ndst.compileHTMLDietString!(\":uppercase testing\", CTX);\nassert(dst.data == \"TESTING\");\n}\n\n\n/** Translates a line of text based on the traits passed to the Diet parser.\n\nThe input text may contain string interpolations of the form `#{...}` or\n`!{...\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L34_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "TRAITS"
					}
				],
				"line": 66,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "text"
							}
						],
						"line": 66,
						"kind": "function",
						"char": 8,
						"name": "translate",
						"type": "string(string text)",
						"endchar": 1,
						"endline": 76
					}
				],
				"name": "translate",
				"comment": " Translates a line of text based on the traits passed to the Diet parser.\n\n\tThe input text may contain string interpolations of the form `#{...}` or\n\t`!{...}`, where the contents form an arbitrary D expression. The\n\ttranslation function is required to pass these through unmodified.\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "TRAITS"
					}
				],
				"line": 86,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "Document",
								"name": "doc"
							}
						],
						"line": 86,
						"kind": "function",
						"char": 10,
						"name": "applyTraits",
						"type": "Document(Document doc)",
						"endchar": 1,
						"endline": 151
					}
				],
				"name": "applyTraits",
				"comment": " Applies any transformations that are defined in the supplied traits list.\n\n\tTransformations are defined by declaring a `processors` sequence in a\n\ttraits struct.\n\n\tSee_also: `dietTraits`\n"
			},
			{
				"storageClass": [
					"deprecated"
				],
				"line": 154,
				"kind": "alias",
				"char": 1,
				"name": "FilterCallback",
				"deco": "DFxAaMDFNfxQiZvZv"
			},
			{
				"kind": "alias",
				"deco": "DFNfxAaMDFNfxQiZvZv",
				"char": 1,
				"line": 155,
				"name": "SafeFilterCallback"
			},
			{
				"kind": "alias",
				"deco": "DFNfxAaZv",
				"char": 1,
				"line": 156,
				"name": "CharacterSink"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"line": 158,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "char[]",
								"storageClass": [
									"in"
								],
								"name": "input"
							},
							{
								"type": "string",
								"name": "filter"
							},
							{
								"type": "CharacterSink",
								"name": "output"
							}
						],
						"line": 158,
						"kind": "function",
						"char": 6,
						"name": "filter",
						"type": "void(in char[] input, string filter, CharacterSink output)",
						"endchar": 1,
						"endline": 173
					}
				],
				"name": "filter"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"line": 322,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"kind": "value",
								"type": "size_t",
								"name": "i"
							}
						],
						"line": 327,
						"kind": "template",
						"char": 2,
						"members": [
							{
								"kind": "alias",
								"type": "AliasSeq!(ALIASES[i], impl!(i + 1))",
								"char": 5,
								"line": 330,
								"name": "impl"
							}
						],
						"name": "impl"
					},
					{
						"kind": "alias",
						"type": "impl!0",
						"char": 2,
						"line": 334,
						"name": "DietTraits"
					}
				],
				"name": "DietTraits",
				"comment": " Extracts all Diet traits structs from a set of aliases as passed to a render function.\n"
			}
		],
		"comment": " Definitions to support customization of the Diet compilation process.\n",
		"name": "diet.traits"
	},
	{
		"kind": "module",
		"file": "inet/vibe/inet/message.d",
		"members": [
			{
				"constraint": "isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 35,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "input"
							},
							{
								"type": "InetHeaderMap",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "size_t",
								"default": "1000",
								"name": "max_line_length"
							},
							{
								"type": "IAllocator",
								"default": "vibeThreadAllocator()",
								"name": "alloc"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "rfc822_compatible"
							}
						],
						"line": 35,
						"kind": "function",
						"char": 6,
						"name": "parseRFC5322Header",
						"type": "void(InputStream input, ref InetHeaderMap dst, size_t max_line_length = 1000, IAllocator alloc = vibeThreadAllocator(), bool rfc822_compatible = true)",
						"endchar": 1,
						"endline": 71
					}
				],
				"name": "parseRFC5322Header",
				"comment": "\tParses an internet header according to RFC5322 (with RFC822 compatibility).\n\n\tParams:\n\t\tinput = Input stream from which the header is parsed\n\t\tdst = Destination map to write into\n\t\tmax_line_length = The maximum allowed length of a single line\n\t\talloc = Custom allocator to use for allocating strings\n\t\trfc822_compatible = Flag indicating that duplicate fields should be merged using a comma\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 98,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "SysTime",
								"name": "time"
							}
						],
						"line": 98,
						"kind": "function",
						"char": 6,
						"name": "writeRFC822DateString",
						"type": "void(ref R dst, SysTime time)",
						"endchar": 1,
						"endline": 101
					}
				],
				"name": "writeRFC822DateString",
				"comment": "\tWrites an RFC-822/5322 date string to the given output range.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 103,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "Date",
								"name": "date"
							}
						],
						"line": 103,
						"kind": "function",
						"char": 6,
						"name": "writeRFC822DateString",
						"type": "void(ref R dst, Date date)",
						"endchar": 1,
						"endline": 113
					}
				],
				"name": "writeRFC822DateString",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 118,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "SysTime",
								"name": "time"
							}
						],
						"line": 118,
						"kind": "function",
						"char": 6,
						"name": "writeRFC822TimeString",
						"type": "void(ref R dst, SysTime time)",
						"endchar": 1,
						"endline": 121
					}
				],
				"name": "writeRFC822TimeString",
				"comment": "\tWrites an RFC-822 time string to the given output range.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 123,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "TimeOfDay",
								"name": "time"
							},
							{
								"deco": "i",
								"name": "tz_offset"
							}
						],
						"line": 123,
						"kind": "function",
						"char": 6,
						"name": "writeRFC822TimeString",
						"type": "void(ref R dst, TimeOfDay time, int tz_offset)",
						"endchar": 1,
						"endline": 138
					}
				],
				"name": "writeRFC822TimeString",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 143,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "SysTime",
								"name": "time"
							}
						],
						"line": 143,
						"kind": "function",
						"char": 6,
						"name": "writeRFC822DateTimeString",
						"type": "void(ref R dst, SysTime time)",
						"endchar": 1,
						"endline": 146
					}
				],
				"name": "writeRFC822DateTimeString",
				"comment": "\tWrites an RFC-822 date+time string to the given output range.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 148,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "DateTime",
								"name": "time"
							},
							{
								"deco": "i",
								"name": "tz_offset"
							}
						],
						"line": 148,
						"kind": "function",
						"char": 6,
						"name": "writeRFC822DateTimeString",
						"type": "void(ref R dst, DateTime time, int tz_offset)",
						"endchar": 1,
						"endline": 153
					}
				],
				"name": "writeRFC822DateTimeString",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "S3std8datetime7systime7SysTime",
						"name": "time"
					}
				],
				"line": 158,
				"kind": "function",
				"char": 8,
				"name": "toRFC822TimeString",
				"deco": "FNeS3std8datetime7systime7SysTimeZAya",
				"endchar": 1,
				"endline": 163,
				"comment": "\tReturns the RFC-822 time string representation of the given time.\n"
			},
			{
				"parameters": [
					{
						"deco": "S3std8datetime7systime7SysTime",
						"name": "time"
					}
				],
				"line": 168,
				"kind": "function",
				"char": 8,
				"name": "toRFC822DateString",
				"deco": "FNeS3std8datetime7systime7SysTimeZAya",
				"endchar": 1,
				"endline": 173,
				"comment": "\tReturns the RFC-822/5322 date string representation of the given time.\n"
			},
			{
				"parameters": [
					{
						"deco": "S3std8datetime7systime7SysTime",
						"name": "time"
					}
				],
				"line": 178,
				"kind": "function",
				"char": 8,
				"name": "toRFC822DateTimeString",
				"deco": "FNeS3std8datetime7systime7SysTimeZAya",
				"endchar": 1,
				"endline": 183,
				"comment": "\tReturns the RFC-822 date+time string representation of the given time.\n"
			},
			{
				"parameters": [
					{
						"deco": "S3std8datetime7systime7SysTime",
						"name": "time"
					}
				],
				"line": 188,
				"kind": "function",
				"char": 5,
				"name": "getRFC822TimeZoneOffset",
				"deco": "FNfS3std8datetime7systime7SysTimeZi",
				"endchar": 1,
				"endline": 191,
				"comment": "\tReturns the offset of the given time from UTC in minutes.\n"
			},
			{
				"kind": "alias",
				"line": 194,
				"char": 1,
				"comment": "Parses a date+time string according to RFC-822/5322.\n",
				"name": "parseRFC822DateTimeString"
			},
			{
				"parameters": [],
				"line": 218,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "encoded"
							}
						],
						"line": 218,
						"kind": "function",
						"char": 8,
						"name": "decodeEncodedWords",
						"type": "string(string encoded)",
						"endchar": 1,
						"endline": 227
					}
				],
				"name": "decodeEncodedWords",
				"comment": "\tDecodes a string in encoded-word form.\n\n\tSee_Also: $(LINK http://tools.ietf.org/html/rfc2047#section-2)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 229,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "string",
								"name": "encoded"
							}
						],
						"line": 229,
						"kind": "function",
						"char": 6,
						"name": "decodeEncodedWords",
						"type": "void(ref R dst, string encoded)",
						"endchar": 1,
						"endline": 269
					}
				],
				"name": "decodeEncodedWords",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "header"
					},
					{
						"deco": "Aya",
						"storageClass": [
							"out"
						],
						"name": "name"
					},
					{
						"deco": "Aya",
						"storageClass": [
							"out"
						],
						"name": "address"
					}
				],
				"line": 275,
				"kind": "function",
				"char": 6,
				"name": "decodeEmailAddressHeader",
				"deco": "FNfAyaJQeJQhZv",
				"endchar": 1,
				"endline": 299,
				"comment": "\tDecodes a From/To header value as it appears in emails.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAh",
						"name": "message_body"
					},
					{
						"deco": "Aya",
						"name": "content_transfer_encoding"
					}
				],
				"line": 308,
				"kind": "function",
				"originalType": "@safe string(in ubyte[] message_body, string content_transfer_encoding)",
				"char": 8,
				"name": "decodeMessage",
				"deco": "FNfxAhAyaZQe",
				"endchar": 1,
				"endline": 337,
				"comment": "\tDecodes a message body according to the specified content transfer\n\tencoding (\"Content-Transfer-Encoding\" header).\n\n\tThe result is returned as a UTF-8 string.\n"
			},
			{
				"kind": "alias",
				"line": 351,
				"char": 1,
				"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi0Vmi12Vbi0ZQBi",
				"comment": "\tBehaves similar to string[string] but case does not matter for the key, the insertion order is not\n\tchanged and multiple values per key are supported.\n\n\tThis kind of map is used for MIME headers (e.g. for HTTP), where the case of the key strings\n\tdoes not matter. Note that the map can contain fields with the same key multiple times if\n\taddField is used for insertion. Insertion order is preserved.\n\n\tNote that despite case not being relevant for matching keyse, iterating over the map will yield\n\tthe original case of the key that was put in.\n",
				"name": "InetHeaderMap"
			},
			{
				"kind": "struct",
				"line": 358,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "xAa",
								"name": "input"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "in_header"
							}
						],
						"line": 359,
						"kind": "function",
						"originalType": "@safe ubyte[](in char[] input, bool in_header = false)",
						"char": 17,
						"name": "decode",
						"deco": "FNfxAabZAh",
						"endchar": 2,
						"endline": 374
					}
				],
				"comment": "\tPerforms quoted-printable decoding.\n",
				"name": "QuotedPrintable"
			}
		],
		"comment": "\tInternet message handling according to RFC822/RFC5322\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.inet.message"
	},
	{
		"kind": "module",
		"file": "inet/vibe/inet/mimetypes.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "filename"
					}
				],
				"line": 19,
				"kind": "function",
				"char": 8,
				"name": "getMimeTypeForFile",
				"deco": "FNaNfAyaZQe",
				"endchar": 1,
				"endline": 735,
				"comment": "\tReturns the standard mime type for the extension of the specified file name.\n\n\tAny unknown file extension will map to \"application/octet-stream\".\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "mimetype"
					}
				],
				"line": 743,
				"kind": "function",
				"char": 6,
				"name": "isCompressedFormat",
				"deco": "FNaNbNiNfAyaZb",
				"endchar": 1,
				"endline": 754,
				"comment": "\tReturns true for a selected but incomplete list of mime-types that are describing a compressed\n\tformat.\n\n\tThis function is useful for avoiding redundant compression.\n"
			}
		],
		"comment": "\tMaps file name extensions to standard mime types.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.inet.mimetypes"
	},
	{
		"kind": "module",
		"file": "inet/vibe/inet/path.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.core.path"
			}
		],
		"comment": "\tCompatibility module - use `vibe.core.path` instead.\n\n\tCopyright: © 2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.inet.path"
	},
	{
		"kind": "module",
		"file": "inet/vibe/inet/url.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.core.path"
			},
			{
				"kind": "struct",
				"line": 26,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							},
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd14InetPathFormatZQBp",
								"name": "path"
							}
						],
						"line": 40,
						"kind": "constructor",
						"originalType": "pure ref @safe (string schema, string host, ushort port, InetPath path)",
						"char": 2,
						"name": "this",
						"deco": "FNaNcNfAyaQdtS4vibe4core4path__T11GenericPathTSQBhQBfQBd14InetPathFormatZQBpZSQCm4inet3url3URL",
						"endchar": 2,
						"endline": 47,
						"comment": "Constructs a new URL object from its components.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd14InetPathFormatZQBp",
								"name": "path"
							}
						],
						"line": 49,
						"kind": "constructor",
						"originalType": "pure ref @safe (string schema, InetPath path)",
						"char": 2,
						"name": "this",
						"deco": "FNaNcNfAyaS4vibe4core4path__T11GenericPathTSQBhQBfQBd14InetPathFormatZQBpZSQCm4inet3url3URL",
						"endchar": 2,
						"endline": 52,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							},
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
								"name": "path"
							}
						],
						"line": 56,
						"kind": "constructor",
						"originalType": "pure ref @safe (string schema, string host, ushort port, PosixPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfAyaQdtS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZSQCn4inet3url3URL",
						"endchar": 3,
						"endline": 59,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
								"name": "path"
							}
						],
						"line": 61,
						"kind": "constructor",
						"originalType": "pure ref @safe (string schema, PosixPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfAyaS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZSQCn4inet3url3URL",
						"endchar": 3,
						"endline": 64,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							},
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBs",
								"name": "path"
							}
						],
						"line": 66,
						"kind": "constructor",
						"originalType": "pure ref @safe (string schema, string host, ushort port, WindowsPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfAyaQdtS4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBsZSQCp4inet3url3URL",
						"endchar": 3,
						"endline": 69,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBs",
								"name": "path"
							}
						],
						"line": 71,
						"kind": "constructor",
						"originalType": "pure ref @safe (string schema, WindowsPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfAyaS4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBsZSQCp4inet3url3URL",
						"endchar": 3,
						"endline": 74,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBs",
								"name": "path"
							}
						],
						"line": 81,
						"kind": "constructor",
						"originalType": "pure ref @safe (WindowsPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBsZSQCp4inet3url3URL",
						"endchar": 3,
						"endline": 101,
						"comment": " Constructs a \"file:\" URL from a native file system path.\n\n\t\t\tNote that the path must be absolute. On Windows, both, paths starting\n\t\t\twith a drive letter and UNC paths are supported.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
								"name": "path"
							}
						],
						"line": 103,
						"kind": "constructor",
						"originalType": "pure ref @safe (PosixPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZSQCn4inet3url3URL",
						"endchar": 3,
						"endline": 108,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							},
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
								"name": "path"
							}
						],
						"line": 56,
						"kind": "constructor",
						"originalType": "pure ref @safe (string schema, string host, ushort port, PosixPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfAyaQdtS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZSQCn4inet3url3URL",
						"endchar": 3,
						"endline": 59,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
								"name": "path"
							}
						],
						"line": 61,
						"kind": "constructor",
						"originalType": "pure ref @safe (string schema, PosixPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfAyaS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZSQCn4inet3url3URL",
						"endchar": 3,
						"endline": 64,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							},
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBs",
								"name": "path"
							}
						],
						"line": 66,
						"kind": "constructor",
						"originalType": "pure ref @safe (string schema, string host, ushort port, WindowsPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfAyaQdtS4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBsZSQCp4inet3url3URL",
						"endchar": 3,
						"endline": 69,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBs",
								"name": "path"
							}
						],
						"line": 71,
						"kind": "constructor",
						"originalType": "pure ref @safe (string schema, WindowsPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfAyaS4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBsZSQCp4inet3url3URL",
						"endchar": 3,
						"endline": 74,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBs",
								"name": "path"
							}
						],
						"line": 81,
						"kind": "constructor",
						"originalType": "pure ref @safe (WindowsPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd17WindowsPathFormatZQBsZSQCp4inet3url3URL",
						"endchar": 3,
						"endline": 101,
						"comment": " Constructs a \"file:\" URL from a native file system path.\n\n\t\t\tNote that the path must be absolute. On Windows, both, paths starting\n\t\t\twith a drive letter and UNC paths are supported.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
								"name": "path"
							}
						],
						"line": 103,
						"kind": "constructor",
						"originalType": "pure ref @safe (PosixPath path)",
						"char": 3,
						"name": "this",
						"deco": "FNaNcNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZSQCn4inet3url3URL",
						"endchar": 3,
						"endline": 108,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_string"
							}
						],
						"line": 115,
						"kind": "constructor",
						"originalType": "ref @safe (string url_string)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfAyaZS4vibe4inet3url3URL",
						"endchar": 2,
						"endline": 184,
						"comment": " Constructs a URL from its string representation.\n\n\t\tTODO: additional validation required (e.g. valid host and user names and port)\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_string"
							}
						],
						"line": 186,
						"kind": "function",
						"char": 13,
						"name": "parse",
						"deco": "FNfAyaZS4vibe4inet3url3URL",
						"endchar": 2,
						"endline": 189,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_string"
							}
						],
						"line": 191,
						"kind": "function",
						"char": 13,
						"name": "fromString",
						"deco": "FNfAyaZS4vibe4inet3url3URL",
						"endchar": 2,
						"endline": 194,
						"comment": "ditto\n"
					},
					{
						"line": 202,
						"kind": "function",
						"char": 19,
						"name": "schema",
						"deco": "xFNdNfZAya",
						"endchar": 53,
						"endline": 202,
						"comment": "The schema/protocol part of the URL\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"line": 204,
						"kind": "function",
						"char": 17,
						"name": "schema",
						"deco": "FNdNfAyaZv",
						"endchar": 50,
						"endline": 204,
						"comment": "ditto\n"
					},
					{
						"line": 207,
						"kind": "function",
						"char": 19,
						"name": "pathString",
						"deco": "xFNdNfZAya",
						"endchar": 61,
						"endline": 207,
						"comment": "The url encoded path part of the URL\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "s"
							}
						],
						"line": 210,
						"kind": "function",
						"char": 17,
						"name": "pathString",
						"deco": "FNdNfAyaZv",
						"endchar": 2,
						"endline": 214,
						"comment": "Set the path part of the URL. It should be properly encoded.\n"
					},
					{
						"line": 217,
						"kind": "function",
						"originalType": "const @property @safe InetPath()",
						"char": 21,
						"name": "path",
						"deco": "xFNdNfZS4vibe4core4path__T11GenericPathTSQBhQBfQBd14InetPathFormatZQBp",
						"endchar": 2,
						"endline": 222,
						"comment": "The path part of the URL\n"
					},
					{
						"constraint": "isInstanceOf!(GenericPath, Path)",
						"parameters": [
							{
								"kind": "type",
								"name": "Path"
							}
						],
						"line": 225,
						"kind": "template",
						"char": 18,
						"members": [
							{
								"parameters": [
									{
										"type": "Path",
										"name": "p"
									}
								],
								"line": 225,
								"kind": "function",
								"char": 18,
								"name": "path",
								"type": "@property void(Path p)",
								"endchar": 3,
								"endline": 229
							}
						],
						"name": "path",
						"comment": "ditto\n"
					},
					{
						"constraint": "isInstanceOf!(GenericPath, Path)",
						"parameters": [
							{
								"kind": "type",
								"name": "Path"
							}
						],
						"line": 225,
						"kind": "template",
						"char": 18,
						"members": [
							{
								"parameters": [
									{
										"type": "Path",
										"name": "p"
									}
								],
								"line": 225,
								"kind": "function",
								"char": 18,
								"name": "path",
								"type": "@property void(Path p)",
								"endchar": 3,
								"endline": 229
							}
						],
						"name": "path",
						"comment": "ditto\n"
					},
					{
						"line": 239,
						"kind": "function",
						"char": 19,
						"name": "host",
						"deco": "xFNaNdNfZAya",
						"endchar": 54,
						"endline": 239,
						"comment": "The host part of the URL (depends on the schema)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"line": 241,
						"kind": "function",
						"char": 17,
						"name": "host",
						"deco": "FNdNfAyaZv",
						"endchar": 46,
						"endline": 241,
						"comment": "ditto\n"
					},
					{
						"line": 244,
						"kind": "function",
						"char": 19,
						"name": "port",
						"deco": "xFNdNfZt",
						"endchar": 82,
						"endline": 244,
						"comment": "The port part of the URL (optional)\n"
					},
					{
						"parameters": [
							{
								"deco": "t",
								"name": "v"
							}
						],
						"line": 246,
						"kind": "function",
						"originalType": "@property @safe (ushort v)",
						"char": 12,
						"name": "port",
						"deco": "FNaNbNdNiNftZv",
						"endchar": 41,
						"endline": 246,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							}
						],
						"line": 249,
						"kind": "function",
						"char": 16,
						"name": "defaultPort",
						"deco": "FNfAyaZt",
						"endchar": 2,
						"endline": 259,
						"comment": "Get the default port for the given schema or 0\n"
					},
					{
						"line": 261,
						"kind": "function",
						"char": 9,
						"name": "defaultPort",
						"deco": "xFNfZt",
						"endchar": 2,
						"endline": 263,
						"comment": "ditto\n"
					},
					{
						"line": 266,
						"kind": "function",
						"char": 19,
						"name": "username",
						"deco": "xFNdNfZAya",
						"endchar": 57,
						"endline": 266,
						"comment": "The user name part of the URL (optional)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"line": 268,
						"kind": "function",
						"char": 17,
						"name": "username",
						"deco": "FNdNfAyaZv",
						"endchar": 54,
						"endline": 268,
						"comment": "ditto\n"
					},
					{
						"line": 271,
						"kind": "function",
						"char": 19,
						"name": "password",
						"deco": "xFNdNfZAya",
						"endchar": 57,
						"endline": 271,
						"comment": "The password part of the URL (optional)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"line": 273,
						"kind": "function",
						"char": 17,
						"name": "password",
						"deco": "FNdNfAyaZv",
						"endchar": 54,
						"endline": 273,
						"comment": "ditto\n"
					},
					{
						"line": 276,
						"kind": "function",
						"char": 19,
						"name": "queryString",
						"deco": "xFNdNfZAya",
						"endchar": 63,
						"endline": 276,
						"comment": "The query string part of the URL (optional)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"line": 278,
						"kind": "function",
						"char": 17,
						"name": "queryString",
						"deco": "FNdNfAyaZv",
						"endchar": 60,
						"endline": 278,
						"comment": "ditto\n"
					},
					{
						"line": 281,
						"kind": "function",
						"char": 19,
						"name": "anchor",
						"deco": "xFNdNfZAya",
						"endchar": 53,
						"endline": 281,
						"comment": "The anchor part of the URL (optional)\n"
					},
					{
						"line": 284,
						"kind": "function",
						"char": 19,
						"name": "localURI",
						"deco": "xFNdNfZAya",
						"endchar": 2,
						"endline": 298,
						"comment": "The path part plus query string and anchor\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							}
						],
						"line": 300,
						"kind": "function",
						"char": 17,
						"name": "localURI",
						"deco": "FNdNfAyaZv",
						"endchar": 2,
						"endline": 315,
						"comment": "ditto\n"
					},
					{
						"line": 318,
						"kind": "function",
						"char": 16,
						"name": "parentURL",
						"deco": "xFNdNfZS4vibe4inet3url3URL",
						"endchar": 2,
						"endline": 327,
						"comment": "The URL to the parent path with query string and anchor stripped.\n"
					},
					{
						"line": 330,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFNfZAya",
						"endchar": 2,
						"endline": 355,
						"comment": "Converts this URL object to its string representation.\n"
					},
					{
						"line": 359,
						"kind": "function",
						"originalType": "const @safe NativePath()",
						"char": 13,
						"name": "toNativePath",
						"deco": "xFNfZS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"endchar": 2,
						"endline": 386,
						"comment": " Converts a \"file\" URL back to a native file system path.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4inet3url3URL",
								"name": "rhs"
							}
						],
						"line": 388,
						"kind": "function",
						"originalType": "const @safe bool(const URL rhs)",
						"char": 7,
						"name": "startsWith",
						"deco": "xFNfxS4vibe4inet3url3URLZb",
						"endchar": 2,
						"endline": 395
					},
					{
						"constraint": "OP == \"~\" && isAnyPath!Path",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							},
							{
								"kind": "type",
								"name": "Path"
							}
						],
						"line": 397,
						"kind": "template",
						"char": 6,
						"members": [
							{
								"parameters": [
									{
										"type": "Path",
										"name": "rhs"
									}
								],
								"line": 397,
								"kind": "function",
								"char": 6,
								"name": "opBinary",
								"type": "const URL(Path rhs)",
								"endchar": 138,
								"endline": 397
							}
						],
						"name": "opBinary"
					},
					{
						"constraint": "OP == \"~\" && isAnyPath!Path",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							},
							{
								"kind": "type",
								"name": "Path"
							}
						],
						"line": 398,
						"kind": "template",
						"char": 6,
						"members": [
							{
								"parameters": [
									{
										"type": "Path.Segment",
										"name": "rhs"
									}
								],
								"line": 398,
								"kind": "function",
								"char": 6,
								"name": "opBinary",
								"type": "const URL(Path.Segment rhs)",
								"endchar": 146,
								"endline": 398
							}
						],
						"name": "opBinary"
					},
					{
						"constraint": "OP == \"~\" && isAnyPath!Path",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							},
							{
								"kind": "type",
								"name": "Path"
							}
						],
						"line": 399,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "Path",
										"name": "rhs"
									}
								],
								"line": 399,
								"kind": "function",
								"char": 7,
								"name": "opOpAssign",
								"type": "void(Path rhs)",
								"endchar": 109,
								"endline": 399
							}
						],
						"name": "opOpAssign"
					},
					{
						"constraint": "OP == \"~\" && isAnyPath!Path",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							},
							{
								"kind": "type",
								"name": "Path"
							}
						],
						"line": 400,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "Path.Segment",
										"name": "rhs"
									}
								],
								"line": 400,
								"kind": "function",
								"char": 7,
								"name": "opOpAssign",
								"type": "void(Path.Segment rhs)",
								"endchar": 117,
								"endline": 400
							}
						],
						"name": "opOpAssign"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4inet3url3URL",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"line": 403,
						"kind": "function",
						"originalType": "const @safe bool(ref const URL rhs)",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfKxS4vibe4inet3url3URLZb",
						"endchar": 2,
						"endline": 408,
						"comment": "Tests two URLs for equality using '=='.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4inet3url3URL",
								"name": "other"
							}
						],
						"line": 410,
						"kind": "function",
						"originalType": "const @safe bool(const URL other)",
						"char": 7,
						"name": "opEquals",
						"deco": "xFNfxS4vibe4inet3url3URLZb",
						"endchar": 65,
						"endline": 410,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "xS4vibe4inet3url3URL",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"line": 412,
						"kind": "function",
						"originalType": "const @safe int(ref const URL rhs)",
						"char": 6,
						"name": "opCmp",
						"deco": "xFNfKxS4vibe4inet3url3URLZi",
						"endchar": 2,
						"endline": 417
					}
				],
				"comment": "\tRepresents a URL decomposed into its components.\n",
				"name": "URL"
			}
		],
		"comment": "\tURL parsing routines.\n\n\tCopyright: © 2012-2017 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.inet.url"
	},
	{
		"kind": "module",
		"file": "inet/vibe/inet/urltransfer.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"default": "void*",
						"name": "HTTPClient_"
					}
				],
				"line": 30,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "URL",
								"name": "url"
							},
							{
								"type": "void delegate(scope InputStream)",
								"storageClass": [
									"scope"
								],
								"name": "callback"
							},
							{
								"type": "HTTPClient_",
								"default": "null",
								"name": "client_"
							}
						],
						"line": 30,
						"kind": "function",
						"char": 6,
						"name": "download",
						"type": "void(URL url, scope void delegate(scope InputStream) callback, HTTPClient_ client_ = null)",
						"endchar": 1,
						"endline": 94
					}
				],
				"name": "download",
				"comment": "\tDownloads a file from the specified URL.\n\n\tAny redirects will be followed until the actual file resource is reached or if the redirection\n\tlimit of 10 is reached. Note that only HTTP(S) is currently supported.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "void*",
						"name": "HTTPClient_"
					}
				],
				"line": 97,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "url"
							},
							{
								"type": "void delegate(scope InputStream)",
								"storageClass": [
									"scope"
								],
								"name": "callback"
							},
							{
								"type": "HTTPClient_",
								"default": "null",
								"name": "client_"
							}
						],
						"line": 97,
						"kind": "function",
						"char": 6,
						"name": "download",
						"type": "void(string url, scope void delegate(scope InputStream) callback, HTTPClient_ client_ = null)",
						"endchar": 1,
						"endline": 100
					}
				],
				"name": "download",
				"comment": "ditto\n"
			},
			{
				"parameters": [],
				"line": 103,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "url"
							},
							{
								"type": "string",
								"name": "filename"
							}
						],
						"line": 103,
						"kind": "function",
						"char": 6,
						"name": "download",
						"type": "void(string url, string filename)",
						"endchar": 1,
						"endline": 110
					}
				],
				"name": "download",
				"comment": "ditto\n"
			},
			{
				"parameters": [],
				"line": 113,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "URL",
								"name": "url"
							},
							{
								"type": "NativePath",
								"name": "filename"
							}
						],
						"line": 113,
						"kind": "function",
						"char": 6,
						"name": "download",
						"type": "void(URL url, NativePath filename)",
						"endchar": 1,
						"endline": 116
					}
				],
				"name": "download",
				"comment": "ditto\n"
			}
		],
		"comment": "\tDownloading and uploading of data from/to URLs.\n\n\tNote that this module is scheduled for deprecation and will be replaced by\n\tanother module in the future. All functions are defined as templates to\n\tavoid this dependency issue when building the library.\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.inet.urltransfer"
	},
	{
		"kind": "module",
		"file": "inet/vibe/inet/webform.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi1Vmi16Vbi0ZQBi",
						"storageClass": [
							"ref"
						],
						"name": "fields"
					},
					{
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTSQBw4inet7webform8FilePartVbi1Vmi0Vbi0ZQCe",
						"storageClass": [
							"ref"
						],
						"name": "files"
					},
					{
						"deco": "Aya",
						"name": "content_type"
					},
					{
						"deco": "C4vibe4core6stream11InputStream",
						"name": "body_reader"
					},
					{
						"deco": "m",
						"name": "max_line_length"
					}
				],
				"line": 41,
				"kind": "function",
				"originalType": "@safe bool(ref FormFields fields, ref FilePartFormFields files, string content_type, InputStream body_reader, size_t max_line_length)",
				"char": 6,
				"name": "parseFormData",
				"deco": "FNfKS4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi1Vmi16Vbi0ZQBiKSQCrQCpQCm__TQBzTSQDi4inet7webform8FilePartVbi1Vmi0Vbi0ZQDqQDcCQFb4core6stream11InputStreammZb",
				"endchar": 1,
				"endline": 59,
				"comment": "\tParses form data according \tto an HTTP Content-Type header.\n\n\tWrites the form fields into a key-value of type $(D FormFields), parsed from the\n\tspecified $(D InputStream) and using the corresponding Content-Type header. Parsing\n\tis gracefully aborted if the Content-Type header is unrelated.\n\n\tParams:\n\t\tfields = The key-value map to which form fields must be written\n\t\tfiles = The $(D FilePart)s mapped to the corresponding key in which details on\n\t\t\t\ttransmitted files will be written to.\n\t\tcontent_type = The value of the Content-Type HTTP header.\n\t\tbody_reader = A valid $(D InputSteram) data stream consumed by the parser.\n\t\tmax_line_length = The byte-sized maximum length of lines used as boundary delimitors in Multi-Part forms.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi1Vmi16Vbi0ZQBi",
						"storageClass": [
							"ref"
						],
						"name": "params"
					}
				],
				"line": 68,
				"kind": "function",
				"originalType": "@safe void(string str, ref FormFields params)",
				"char": 6,
				"name": "parseURLEncodedForm",
				"deco": "FNfAyaKS4vibe5utils14dictionarylist__T14DictionaryListTQCaVbi1Vmi16Vbi0ZQBiZv",
				"endchar": 1,
				"endline": 100,
				"comment": "\tParses a URL encoded form and stores the key/value pairs.\n\n\tWrites to the $(D FormFields) the key-value map associated to an\n\t\"application/x-www-form-urlencoded\" MIME formatted string, ie. all '+'\n\tcharacters are considered as ' ' spaces.\nExample:\nThis example demonstrates parsing using all known form separators, it builds\n\ta key-value map into the destination $(D FormFields)$(DDOX_UNITTEST_HEADER __unittest_L106_C1)\n---\nFormFields dst;\nparseURLEncodedForm(\"a=b;c;dee=asd&e=fgh&f=j%20l\", dst);\nassert(\"a\" in dst && dst[\"a\"] == \"b\");\nassert(\"c\" in dst && dst[\"c\"] == \"\");\nassert(\"dee\" in dst && dst[\"dee\"] == \"asd\");\nassert(\"e\" in dst && dst[\"e\"] == \"fgh\");\nassert(\"f\" in dst && dst[\"f\"] == \"j l\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L106_C1)\n"
			},
			{
				"constraint": "isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 132,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "FormFields",
								"storageClass": [
									"ref"
								],
								"name": "fields"
							},
							{
								"type": "FilePartFormFields",
								"storageClass": [
									"ref"
								],
								"name": "files"
							},
							{
								"type": "string",
								"name": "content_type"
							},
							{
								"type": "InputStream",
								"name": "body_reader"
							},
							{
								"type": "size_t",
								"name": "max_line_length"
							}
						],
						"line": 132,
						"kind": "function",
						"char": 6,
						"name": "parseMultiPartForm",
						"type": "void(ref FormFields fields, ref FilePartFormFields files, string content_type, InputStream body_reader, size_t max_line_length)",
						"endchar": 1,
						"endline": 145
					}
				],
				"name": "parseMultiPartForm",
				"comment": "\tParses a form in \"multipart/form-data\" format.\n\n\tIf any files are contained in the form, they are written to temporary files using\n\t$(D vibe.core.file.createTempFile) and their details returned in the files field.\n\n\tParams:\n\t\tfields = The key-value map to which form fields must be written\n\t\tfiles = The $(D FilePart)s mapped to the corresponding key in which details on\n\t\t\t\ttransmitted files will be written to.\n\t\tcontent_type = The value of the Content-Type HTTP header.\n\t\tbody_reader = A valid $(D InputSteram) data stream consumed by the parser.\n\t\tmax_line_length = The byte-sized maximum length of lines used as boundary delimitors in Multi-Part forms.\n"
			},
			{
				"kind": "alias",
				"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi1Vmi16Vbi0ZQBi",
				"char": 1,
				"line": 147,
				"name": "FormFields"
			},
			{
				"kind": "alias",
				"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTSQBw4inet7webform8FilePartVbi1Vmi0Vbi0ZQCe",
				"char": 1,
				"line": 148,
				"name": "FilePartFormFields"
			},
			{
				"kind": "struct",
				"line": 242,
				"char": 1,
				"members": [
					{
						"line": 243,
						"kind": "variable",
						"originalType": "InetHeaderMap",
						"char": 16,
						"name": "headers",
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi0Vmi12Vbi0ZQBi",
						"offset": 0
					},
					{
						"line": 244,
						"kind": "variable",
						"originalType": "NativePath.Segment",
						"char": 21,
						"name": "filename",
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq7Segment",
						"offset": 408
					},
					{
						"line": 245,
						"kind": "variable",
						"originalType": "NativePath",
						"char": 13,
						"name": "tempPath",
						"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
						"offset": 448
					},
					{
						"line": 248,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFZAya",
						"endchar": 50,
						"endline": 248
					},
					{
						"parameters": [
							{
								"deco": "S4vibe4inet7webform8FilePart",
								"name": "p"
							}
						],
						"line": 242,
						"kind": "generated function",
						"originalType": "ref FilePart(FilePart p) return",
						"char": 1,
						"name": "opAssign",
						"deco": "FNaNbNcNiNjNfS4vibe4inet7webform8FilePartZQBd"
					}
				],
				"comment": "\tSingle part of a multipart form.\n\n\tA FilePart is the data structure for individual \"multipart/form-data\" parts\n\taccording to RFC 1867 section 7.\n",
				"name": "FilePart"
			},
			{
				"constraint": "isFormMap!T && isOutputRange!(R, char)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 351,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "T",
								"name": "map"
							},
							{
								"deco": "a",
								"default": "'&'",
								"name": "sep"
							}
						],
						"line": 351,
						"kind": "function",
						"char": 6,
						"name": "formEncode",
						"type": "void(auto ref R dst, T map, char sep = '&')",
						"endchar": 1,
						"endline": 355
					}
				],
				"name": "formEncode",
				"comment": "\tEncodes a Key-Value map into a form URL encoded string.\n\n\tWrites to the $(D OutputRange) an application/x-www-form-urlencoded MIME formatted string,\n\tie. all spaces ' ' are replaced by the '+' character\n\n\tParams:\n\t\tdst\t= The destination $(D OutputRange) where the resulting string must be written to.\n\t\tmap\t= An iterable key-value map iterable with $(D foreach(string key, string value; map)).\n\t\tsep\t= A valid form separator, common values are '&' or ';'\nExample:\nThe following example demonstrates the use of $(D formEncode) with a json map,\n\tthe ordering of keys will be preserved in $(D Bson) and $(D DictionaryList) objects only.$(DDOX_UNITTEST_HEADER __unittest_L361_C1)\n---\nimport std.array : Appender;\nstring[string] map;\nmap[\"numbers\"] = \"123456789\";\nmap[\"spaces\"] = \"1 2 3 4 a b c d\";\n\nAppender!string app;\napp.formEncode(map);\nassert(app.data == \"spaces=1+2+3+4+a+b+c+d&numbers=123456789\" ||\n\t   app.data == \"numbers=123456789&spaces=1+2+3+4+a+b+c+d\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L361_C1)\n"
			},
			{
				"constraint": "isFormMap!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 383,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "map"
							},
							{
								"deco": "a",
								"default": "'&'",
								"name": "sep"
							}
						],
						"line": 383,
						"kind": "function",
						"char": 8,
						"name": "formEncode",
						"type": "string(T map, char sep = '&')",
						"endchar": 1,
						"endline": 387
					}
				],
				"name": "formEncode",
				"comment": "\tEncodes a Key-Value map into a form URL encoded string.\n\n\tReturns an application/x-www-form-urlencoded MIME formatted string,\n\tie. all spaces ' ' are replaced by the '+' character\n\n\tParams:\n\t\tmap = An iterable key-value map iterable with $(D foreach(string key, string value; map)).\n\t\tsep = A valid form separator, common values are '&' or ';'\n"
			},
			{
				"constraint": "isFormMap!T && isOutputRange!(R, char)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 396,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "T",
								"name": "map"
							}
						],
						"line": 396,
						"kind": "function",
						"char": 6,
						"name": "urlEncode",
						"type": "void(auto ref R dst, T map)",
						"endchar": 1,
						"endline": 400
					}
				],
				"name": "urlEncode",
				"comment": "\tWrites to the $(D OutputRange) an URL encoded string as specified in RFC 3986 section 2\n\n\tParams:\n\t\tdst\t= The destination $(D OutputRange) where the resulting string must be written to.\n\t\tmap\t= An iterable key-value map iterable with $(D foreach(string key, string value; map)).\n"
			},
			{
				"constraint": "isFormMap!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 409,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "map"
							}
						],
						"line": 409,
						"kind": "function",
						"char": 8,
						"name": "urlEncode",
						"type": "string(T map)",
						"endchar": 1,
						"endline": 413
					}
				],
				"name": "urlEncode",
				"comment": "\tReturns an URL encoded string as specified in RFC 3986 section 2\n\n\tParams:\n\t\tmap = An iterable key-value map iterable with $(D foreach(string key, string value; map)).\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 424,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 427,
						"kind": "variable",
						"char": 7,
						"name": "isFormMap",
						"init": "isStringMap!T || isJsonLike!T"
					}
				],
				"name": "isFormMap",
				"comment": "\tTests if a given type is suitable for storing a web form.\n\n\tTypes that define iteration support with the key typed as $(D string) and\n\tthe value either also typed as $(D string), or as a $(D vibe.data.json.Json)\n\tlike value. The latter case specifically requires a $(D .type) property that\n\tis tested for equality with $(D T.Type.string), as well as a\n\t$(D .get!string) method.\n"
			}
		],
		"comment": "\tContains HTML/urlencoded form parsing and construction routines.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
		"name": "vibe.inet.webform"
	},
	{
		"kind": "module",
		"file": "stream/vibe/stream/base64.d",
		"members": [
			{
				"constraint": "isOutputStream!OutputStream",
				"parameters": [
					{
						"kind": "value",
						"deco": "a",
						"defaultValue": "'+'",
						"name": "C62"
					},
					{
						"kind": "value",
						"deco": "a",
						"defaultValue": "'/'",
						"name": "C63"
					},
					{
						"kind": "value",
						"deco": "a",
						"defaultValue": "'='",
						"name": "CPAD"
					},
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 24,
				"kind": "template",
				"char": 55,
				"members": [
					{
						"parameters": [
							{
								"type": "OutputStream",
								"name": "output"
							},
							{
								"deco": "m",
								"default": "57",
								"name": "max_bytes_per_line"
							}
						],
						"line": 24,
						"kind": "function",
						"char": 55,
						"name": "createBase64OutputStream",
						"type": "Base64OutputStreamImpl!(C62, C63, CPAD, OutputStream)(OutputStream output, ulong max_bytes_per_line = 57)",
						"endchar": 1,
						"endline": 28
					}
				],
				"name": "createBase64OutputStream",
				"comment": " Creates a Base64 encoding stream.max_bytes_per_line\n\n\tBy default, the stream generates a MIME compatible Base64 encoding.\n\n\tParams:\n\t\toutput = The output sink to which the encoded result is written.\n\t\tmax_bytes_per_line = The maximum number of input bytes after which a\n\t\t\tline break is inserted into the output. Defaults to 57,\n\t\t\taccording to the MIME standard.\n"
			},
			{
				"constraint": "isOutputStream!OutputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 38,
				"kind": "template",
				"char": 54,
				"members": [
					{
						"parameters": [
							{
								"type": "OutputStream",
								"name": "output"
							},
							{
								"deco": "m",
								"default": "57",
								"name": "max_bytes_per_line"
							}
						],
						"line": 38,
						"kind": "function",
						"char": 54,
						"name": "createBase64URLOutputStream",
						"type": "Base64OutputStreamImpl!('-', '_', '=', OutputStream)(OutputStream output, ulong max_bytes_per_line = 57)",
						"endchar": 1,
						"endline": 42
					}
				],
				"name": "createBase64URLOutputStream",
				"comment": " Creates a URL safe Base64 encoding stream (using '-' and '_' for non-alphabetic values).\n\n\tParams:\n\t\toutput = The output sink to which the encoded result is written.\n\t\tmax_bytes_per_line = The maximum number of input bytes after which a\n\t\t\tline break is inserted into the output. Defaults to 57,\n\t\t\taccording to the MIME standard.\n"
			},
			{
				"kind": "alias",
				"line": 48,
				"char": 1,
				"deco": "C4vibe6stream6base64__T22Base64OutputStreamImplVai43Vai47Vai61TCQCl4coreQCo12OutputStreamZQCp",
				"comment": "\tMIME compatible Base64 encoding stream.\n",
				"name": "Base64OutputStream"
			},
			{
				"kind": "alias",
				"line": 53,
				"char": 1,
				"deco": "C4vibe6stream6base64__T22Base64OutputStreamImplVai45Vai95Vai61TCQCl4coreQCo12OutputStreamZQCp",
				"comment": "\tURL safe Base64 encoding stream (using '-' and '_' for non-alphabetic values).\n",
				"name": "Base64URLOutputStream"
			},
			{
				"constraint": "isOutputStream!OutputStream",
				"parameters": [
					{
						"kind": "value",
						"deco": "a",
						"name": "C62"
					},
					{
						"kind": "value",
						"deco": "a",
						"name": "C63"
					},
					{
						"kind": "value",
						"deco": "a",
						"defaultValue": "'='",
						"name": "CPAD"
					},
					{
						"kind": "type",
						"default": ".OutputStream",
						"name": "OutputStream"
					}
				],
				"line": 62,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"kind": "class",
						"char": 7,
						"members": [
							{
								"kind": "variable",
								"type": "OutputStream",
								"char": 16,
								"line": 66,
								"name": "m_out"
							},
							{
								"kind": "variable",
								"deco": "m",
								"char": 9,
								"line": 67,
								"name": "m_maxBytesPerLine"
							},
							{
								"line": 68,
								"kind": "variable",
								"char": 9,
								"name": "m_bytesInCurrentLine",
								"deco": "m",
								"init": "0"
							},
							{
								"kind": "alias",
								"type": "Base64Impl!(C62, C63, CPAD)",
								"char": 10,
								"line": 71,
								"name": "B64"
							},
							{
								"parameters": [
									{
										"type": "OutputStream",
										"name": "output"
									},
									{
										"deco": "m",
										"default": "57",
										"name": "max_bytes_per_line"
									}
								],
								"line": 74,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(OutputStream output, ulong max_bytes_per_line = 57)",
								"endchar": 2,
								"endline": 77
							},
							{
								"parameters": [
									{
										"type": "ubyte[]",
										"storageClass": [
											"in"
										],
										"name": "bytes_"
									},
									{
										"type": "IOMode"
									}
								],
								"line": 87,
								"kind": "function",
								"char": 9,
								"name": "write",
								"type": "@trusted size_t(in ubyte[] bytes_, IOMode)",
								"endchar": 2,
								"endline": 114
							},
							{
								"kind": "alias",
								"type": ".OutputStream.write",
								"char": 2,
								"line": 116,
								"name": "write"
							},
							{
								"line": 118,
								"kind": "function",
								"char": 7,
								"name": "flush",
								"type": "void()",
								"endchar": 2,
								"endline": 121
							},
							{
								"line": 123,
								"kind": "function",
								"char": 7,
								"name": "finalize",
								"type": "void()",
								"endchar": 2,
								"endline": 126
							}
						],
						"line": 62,
						"name": "Base64OutputStreamImpl"
					}
				],
				"name": "Base64OutputStreamImpl",
				"comment": "\tGeneric Base64 encoding output stream.\n\n\tThe template arguments C62 and C63 determine which non-alphabetic characters\n\tare used to represent the 62nd and 63rd code units. CPAD is the character\n\tused for padding the end of the result if necessary.\n"
			}
		],
		"comment": "\tBase64 encoding routines\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n",
		"name": "vibe.stream.base64"
	},
	{
		"kind": "module",
		"file": "stream/vibe/stream/counting.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 11,
				"name": "vibe.core.stream"
			},
			{
				"constraint": "isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 26,
				"kind": "template",
				"char": 20,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"name": "byte_limit"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "silent_limit"
							}
						],
						"line": 26,
						"kind": "function",
						"char": 20,
						"name": "createLimitedInputStream",
						"type": "LimitedInputStream(InputStream stream, ulong byte_limit, bool silent_limit = false)",
						"endchar": 1,
						"endline": 30
					}
				],
				"name": "createLimitedInputStream",
				"comment": " Constructs a limited stream from an existing input stream.\n\n\tParams:\n\t\tstream = the input stream to be wrapped\n\t\tbyte_limit = the maximum number of bytes readable from the constructed stream\n\t\tsilent_limit = if set, the stream will behave exactly like the original stream, but\n\t\t\twill throw an exception as soon as the limit is reached.\n"
			},
			{
				"constraint": "isOutputStream!OutputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 45,
				"kind": "template",
				"char": 22,
				"members": [
					{
						"parameters": [
							{
								"type": "OutputStream",
								"name": "output"
							},
							{
								"deco": "m",
								"default": "(ulong).max",
								"name": "byte_limit"
							}
						],
						"line": 45,
						"kind": "function",
						"char": 22,
						"name": "createCountingOutputStream",
						"type": "CountingOutputStream(OutputStream output, ulong byte_limit = (ulong).max)",
						"endchar": 1,
						"endline": 49
					}
				],
				"name": "createCountingOutputStream",
				"comment": " Creates a proxy stream that counts the number of bytes written.\n\n\tParams:\n\t\toutput = The stream to forward the written data to\n\t\tbyte_limit = Optional total write size limit after which an exception is thrown\n"
			},
			{
				"constraint": "isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 65,
				"kind": "template",
				"char": 24,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "input"
							},
							{
								"type": "void delegate() @safe",
								"name": "callback"
							}
						],
						"line": 65,
						"kind": "function",
						"char": 24,
						"name": "createEndCallbackInputStream",
						"type": "EndCallbackInputStream(InputStream input, void delegate() @safe callback)",
						"endchar": 1,
						"endline": 69
					}
				],
				"name": "createEndCallbackInputStream",
				"comment": " Creates a stream that fires a callback once the end of the underlying input stream is reached.\n\n\tParams:\n\t\tinput = Source stream to read from\n\t\tcallback = The callback that is invoked one the source stream has been drained\n"
			},
			{
				"line": 82,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"name": "byte_limit"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "silent_limit"
							}
						],
						"line": 92,
						"kind": "constructor",
						"originalType": "@safe (InputStream stream, ulong byte_limit, bool silent_limit = false)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream11InputStreammbZCQBiQBb8counting18LimitedInputStream",
						"endchar": 2,
						"endline": 95
					},
					{
						"line": 107,
						"kind": "function",
						"originalType": "inout @property @safe inout(InterfaceProxy!InputStream)()",
						"char": 46,
						"name": "sourceStream",
						"deco": "NgFNdNfZNgS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream11InputStreamZQBv",
						"endchar": 85,
						"endline": 107,
						"comment": "The stream that is wrapped by this one\n"
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 109,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 86,
						"endline": 109
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 111,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 98,
						"endline": 111
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 113,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 79,
						"endline": 113
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "bytes"
							}
						],
						"line": 115,
						"kind": "function",
						"char": 7,
						"name": "increment",
						"deco": "FNfmZv",
						"endchar": 2,
						"endline": 119
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 121,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 49,
						"endline": 121
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 123,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 129
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 131,
						"name": "read"
					},
					{
						"line": 133,
						"kind": "function",
						"char": 17,
						"name": "onSizeLimitReached",
						"deco": "FNfZv",
						"protection": "protected",
						"endchar": 2,
						"endline": 135
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 1,
						"line": 82,
						"name": "~this"
					}
				],
				"name": "LimitedInputStream",
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"comment": "\tWraps an existing stream, limiting the amount of data that can be read.\n"
			},
			{
				"line": 142,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "18446744073709551615LU",
								"name": "write_limit"
							}
						],
						"line": 152,
						"kind": "constructor",
						"originalType": "@safe (OutputStream stream, ulong write_limit = (ulong).max)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream12OutputStreammZCQBiQBb8counting20CountingOutputStream",
						"endchar": 2,
						"endline": 155
					},
					{
						"line": 166,
						"kind": "function",
						"char": 18,
						"name": "bytesWritten",
						"deco": "xFNdNfZm",
						"endchar": 64,
						"endline": 166,
						"comment": "Returns the total number of bytes written.\n"
					},
					{
						"line": 169,
						"kind": "function",
						"char": 18,
						"name": "writeLimit",
						"deco": "xFNdNfZm",
						"endchar": 60,
						"endline": 169,
						"comment": "The maximum number of bytes to write\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "value"
							}
						],
						"line": 171,
						"kind": "function",
						"char": 17,
						"name": "writeLimit",
						"deco": "FNdNfmZv",
						"endchar": 65,
						"endline": 171,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "bytes"
							}
						],
						"line": 175,
						"kind": "function",
						"char": 7,
						"name": "increment",
						"deco": "FNfmZv",
						"endchar": 2,
						"endline": 179,
						"comment": " Manually increments the write counter without actually writing data.\n"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 181,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 188
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 190,
						"name": "write"
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 192,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 32,
						"endline": 192
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 193,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 35,
						"endline": 193
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 1,
						"line": 142,
						"name": "~this"
					}
				],
				"name": "CountingOutputStream",
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"comment": "\tWraps an existing output stream, counting the bytes that are written.\n"
			},
			{
				"line": 200,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							}
						],
						"line": 209,
						"kind": "constructor",
						"originalType": "@safe (InputStream stream)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream11InputStreamZCQBgQz8counting19CountingInputStream",
						"endchar": 2,
						"endline": 212
					},
					{
						"line": 221,
						"kind": "function",
						"char": 18,
						"name": "bytesRead",
						"deco": "xFNdNfZm",
						"endchar": 58,
						"endline": 221
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 223,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 48,
						"endline": 223
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 224,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 58,
						"endline": 224
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 225,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 76,
						"endline": 225
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "bytes"
							}
						],
						"line": 227,
						"kind": "function",
						"char": 7,
						"name": "increment",
						"deco": "FNfmZv",
						"endchar": 2,
						"endline": 230
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 232,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 46,
						"endline": 232
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 234,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 239
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 241,
						"name": "read"
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 1,
						"line": 200,
						"name": "~this"
					}
				],
				"name": "CountingInputStream",
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"comment": "\tWraps an existing input stream, counting the bytes that are written.\n"
			},
			{
				"line": 255,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "input"
							},
							{
								"deco": "DFNfZv",
								"name": "callback"
							}
						],
						"line": 265,
						"kind": "constructor",
						"originalType": "@safe (InputStream input, void delegate() @safe callback)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream11InputStreamDFNfZvZCQBmQBf8counting22EndCallbackInputStream",
						"endchar": 2,
						"endline": 268
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 278,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 2,
						"endline": 282
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 284,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 2,
						"endline": 289
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 291,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 2,
						"endline": 295
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 297,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 2,
						"endline": 301
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 303,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 309
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 311,
						"name": "read"
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 1,
						"line": 255,
						"name": "~this"
					}
				],
				"name": "EndCallbackInputStream",
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"comment": "\tWraps an input stream and calls the given delegate once the stream is empty.\n\n\tNote that this function will potentially block after each read operation to\n\tsee if the end has already been reached - this may take as long until either\n\tnew data has arrived or until the connection was closed.\n\n\tThe stream will also guarantee that the inner stream is not used after it\n\thas been determined to be empty. It can thus be safely deleted once the\n\tcallback is invoked.\n"
			},
			{
				"line": 323,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "m",
								"name": "limit"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "i",
								"default": "__LINE__",
								"name": "line"
							}
						],
						"line": 328,
						"kind": "constructor",
						"originalType": "@safe (string message, ulong limit, Throwable next = null, string file = __FILE__, int line = __LINE__)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyamC6object9ThrowableQwiZC4vibe6stream8counting14LimitException",
						"endchar": 2,
						"endline": 331
					},
					{
						"line": 334,
						"kind": "function",
						"char": 18,
						"name": "limit",
						"deco": "xFNdNfZm",
						"endchar": 50,
						"endline": 334,
						"comment": "The byte limit of the stream that emitted the exception\n"
					}
				],
				"name": "LimitException"
			}
		],
		"comment": "\tWrapper streams which count the number of bytes or limit the stream based on the number of\n\ttransferred bytes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.stream.counting"
	},
	{
		"kind": "module",
		"file": "stream/vibe/stream/memory.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "C4stdx9allocator10IAllocator",
						"default": "vibeThreadAllocator()",
						"name": "alloc"
					}
				],
				"line": 19,
				"kind": "function",
				"char": 20,
				"name": "createMemoryOutputStream",
				"deco": "FNbNfC4stdx9allocator10IAllocatorZC4vibe6stream6memory18MemoryOutputStream",
				"endchar": 1,
				"endline": 22
			},
			{
				"parameters": [
					{
						"deco": "Ah",
						"name": "data"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "writable"
					},
					{
						"deco": "m",
						"default": "18446744073709551615LU",
						"name": "initial_size"
					}
				],
				"line": 31,
				"kind": "function",
				"originalType": "nothrow @safe MemoryStream(ubyte[] data, bool writable = true, size_t initial_size = size_t.max)",
				"char": 14,
				"name": "createMemoryStream",
				"deco": "FNbNfAhbmZC4vibe6stream6memory12MemoryStream",
				"endchar": 1,
				"endline": 34,
				"comment": " Creates a new stream with the given data array as its contents.\n\n\tParams:\n\t\tdata = The data array\n\t\twritable = Flag that controls whether the data array may be changed\n\t\tinitial_size = The initial value that size returns - the file can grow up to data.length in size\n"
			},
			{
				"line": 40,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4stdx9allocator10IAllocator",
								"default": "vibeThreadAllocator()",
								"name": "alloc"
							}
						],
						"line": 48,
						"kind": "constructor",
						"originalType": "@safe (IAllocator alloc = vibeThreadAllocator())",
						"char": 2,
						"name": "this",
						"deco": "FNfC4stdx9allocator10IAllocatorZC4vibe6stream6memory18MemoryOutputStream",
						"endchar": 2,
						"endline": 51
					},
					{
						"line": 60,
						"kind": "function",
						"char": 20,
						"name": "data",
						"deco": "FNbNdNfZAh",
						"endchar": 66,
						"endline": 60,
						"comment": "An array with all data written to the stream so far.\n"
					},
					{
						"parameters": [
							{
								"deco": "E4vibe5utils5array17AppenderResetMode",
								"default": "cast(AppenderResetMode)0",
								"name": "mode"
							}
						],
						"line": 63,
						"kind": "function",
						"originalType": "@system void(AppenderResetMode mode = AppenderResetMode.keepData)",
						"char": 7,
						"name": "reset",
						"deco": "FE4vibe5utils5array17AppenderResetModeZv",
						"endchar": 2,
						"endline": 66,
						"comment": "Resets the stream to its initial state containing no data.\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "nbytes"
							}
						],
						"line": 69,
						"kind": "function",
						"originalType": "@safe void(size_t nbytes)",
						"char": 7,
						"name": "reserve",
						"deco": "FNfmZv",
						"endchar": 2,
						"endline": 72,
						"comment": "Reserves space for data - useful for optimization.\n"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "_param_1"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 74,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes, IOMode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 78
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 80,
						"name": "write"
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 82,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 84
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 86,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNbNfZv",
						"endchar": 2,
						"endline": 88
					}
				],
				"name": "MemoryOutputStream",
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"comment": " OutputStream that collects the written data in memory and allows to query it\n\tas a byte array.\n"
			},
			{
				"kind": "mixin",
				"char": 1,
				"line": 91,
				"name": "validateOutputStream!(MemoryOutputStream)"
			},
			{
				"line": 97,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "Ah",
								"name": "data"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "writable"
							},
							{
								"deco": "m",
								"default": "18446744073709551615LU",
								"name": "initial_size"
							}
						],
						"line": 109,
						"kind": "constructor",
						"originalType": "@safe (ubyte[] data, bool writable = true, size_t initial_size = size_t.max)",
						"char": 2,
						"name": "this",
						"deco": "FNfAhbmZC4vibe6stream6memory12MemoryStream",
						"endchar": 2,
						"endline": 112
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "size"
							}
						],
						"line": 127,
						"kind": "function",
						"originalType": "@property @safe void(size_t size)",
						"char": 17,
						"name": "peekWindow",
						"deco": "FNdNfmZv",
						"endchar": 64,
						"endline": 127,
						"comment": " Controls the maximum size of the array returned by peek().\n\n\t\tThis property is mainly useful for debugging purposes.\n"
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 129,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 52,
						"endline": 129
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 130,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 55,
						"endline": 130
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 131,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 66,
						"endline": 131
					},
					{
						"overrides": [
							"vibe.core.stream.RandomAccessStream.size"
						],
						"line": 132,
						"kind": "function",
						"char": 18,
						"name": "size",
						"deco": "xFNbNdNfZm",
						"endchar": 56,
						"endline": 132
					},
					{
						"line": 133,
						"kind": "function",
						"originalType": "const nothrow @property @safe size_t()",
						"char": 19,
						"name": "capacity",
						"deco": "xFNbNdNfZm",
						"endchar": 68,
						"endline": 133
					},
					{
						"overrides": [
							"vibe.core.stream.RandomAccessStream.readable"
						],
						"line": 134,
						"kind": "function",
						"char": 17,
						"name": "readable",
						"deco": "xFNbNdNfZb",
						"endchar": 57,
						"endline": 134
					},
					{
						"overrides": [
							"vibe.core.stream.RandomAccessStream.writable"
						],
						"line": 135,
						"kind": "function",
						"char": 17,
						"name": "writable",
						"deco": "xFNbNdNfZb",
						"endchar": 63,
						"endline": 135
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "size"
							}
						],
						"line": 137,
						"kind": "function",
						"char": 7,
						"name": "truncate",
						"deco": "FNfmZv",
						"endchar": 2,
						"endline": 141
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "offset"
							}
						],
						"overrides": [
							"vibe.core.stream.RandomAccessStream.seek"
						],
						"line": 143,
						"kind": "function",
						"char": 7,
						"name": "seek",
						"deco": "FNfmZv",
						"endchar": 89,
						"endline": 143
					},
					{
						"overrides": [
							"vibe.core.stream.RandomAccessStream.tell"
						],
						"line": 144,
						"kind": "function",
						"char": 8,
						"name": "tell",
						"deco": "FNbNfZm",
						"endchar": 39,
						"endline": 144
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 145,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 83,
						"endline": 145
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 147,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 154
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 156,
						"name": "read"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "_param_1"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 158,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes, IOMode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 166
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 168,
						"name": "write"
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 170,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 16,
						"endline": 170
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 171,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 19,
						"endline": 171
					}
				],
				"name": "MemoryStream",
				"interfaces": [
					"vibe.core.stream.RandomAccessStream"
				],
				"comment": "\tProvides a random access stream interface for accessing an array of bytes.\n"
			},
			{
				"kind": "mixin",
				"char": 1,
				"line": 174,
				"name": "validateRandomAccessStream!(MemoryStream)"
			}
		],
		"comment": "\tIn-memory streams\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.stream.memory"
	},
	{
		"kind": "module",
		"file": "stream/vibe/stream/multicast.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "AC4vibe4core6stream12OutputStream",
						"storageClass": [
							"scope"
						],
						"name": "outputs"
					}
				],
				"line": 15,
				"kind": "function",
				"char": 17,
				"name": "createMulticastStream",
				"deco": "FMAC4vibe4core6stream12OutputStreamXCQBhQBa9multicast15MulticastStream",
				"endchar": 1,
				"endline": 18
			},
			{
				"line": 21,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "AC4vibe4core6stream12OutputStream",
								"name": "outputs"
							}
						],
						"line": 27,
						"kind": "constructor",
						"originalType": "(OutputStream[] outputs...)",
						"char": 2,
						"name": "this",
						"deco": "FAC4vibe4core6stream12OutputStreamXCQBhQBa9multicast15MulticastStream",
						"endchar": 2,
						"endline": 30
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 39,
						"kind": "function",
						"originalType": "void()",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 42
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 44,
						"kind": "function",
						"originalType": "void()",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 48
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 50,
						"kind": "function",
						"originalType": "size_t(in ubyte[] bytes, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 60
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 62,
						"name": "write"
					}
				],
				"name": "MulticastStream",
				"interfaces": [
					"vibe.core.stream.OutputStream"
				]
			}
		],
		"comment": "\tMulticasts an input stream to multiple output streams.\n\n\tCopyright: © 2014-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Eric Cornelius\n",
		"name": "vibe.stream.multicast"
	},
	{
		"kind": "module",
		"file": "stream/vibe/stream/operations.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.core.stream"
			},
			{
				"constraint": "isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 36,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"type": "size_t",
								"default": "size_t.max",
								"name": "max_bytes"
							},
							{
								"type": "string",
								"default": "\"\\x0d\\x0a\"",
								"name": "linesep"
							},
							{
								"type": "IAllocator",
								"default": "vibeThreadAllocator()",
								"name": "alloc"
							}
						],
						"line": 36,
						"kind": "function",
						"char": 9,
						"name": "readLine",
						"type": "ubyte[](InputStream stream, size_t max_bytes = size_t.max, string linesep = \"\\x0d\\x0a\", IAllocator alloc = vibeThreadAllocator())",
						"endchar": 1,
						"endline": 43
					}
				],
				"name": "readLine",
				"comment": "\n\n\n\n\tReads and returns a single line from the stream.\n\n\tThrows:\n\t\tAn exception if either the stream end was hit without hitting a newline first, or\n\t\tif more than max_bytes have been read from the stream.\n"
			},
			{
				"constraint": "isInputStream!InputStream && isOutputStream!OutputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					},
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 45,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"type": "OutputStream",
								"name": "dst"
							},
							{
								"type": "size_t",
								"default": "size_t.max",
								"name": "max_bytes"
							},
							{
								"type": "string",
								"default": "\"\\x0d\\x0a\"",
								"name": "linesep"
							}
						],
						"line": 45,
						"kind": "function",
						"char": 6,
						"name": "readLine",
						"type": "void(InputStream stream, OutputStream dst, size_t max_bytes = size_t.max, string linesep = \"\\x0d\\x0a\")",
						"endchar": 1,
						"endline": 51
					}
				],
				"name": "readLine",
				"comment": "ditto\n"
			},
			{
				"constraint": "isOutputRange!(R, ubyte)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 53,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "size_t",
								"default": "size_t.max",
								"name": "max_bytes"
							},
							{
								"type": "string",
								"default": "\"\\x0d\\x0a\"",
								"name": "linesep"
							}
						],
						"line": 53,
						"kind": "function",
						"char": 6,
						"name": "readLine",
						"type": "void(InputStream stream, ref R dst, size_t max_bytes = size_t.max, string linesep = \"\\x0d\\x0a\")",
						"endchar": 1,
						"endline": 57
					}
				],
				"name": "readLine",
				"comment": "ditto\n"
			},
			{
				"constraint": "isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 119,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"type": "ubyte[]",
								"storageClass": [
									"in"
								],
								"name": "end_marker"
							},
							{
								"type": "size_t",
								"default": "size_t.max",
								"name": "max_bytes"
							},
							{
								"type": "IAllocator",
								"default": "vibeThreadAllocator()",
								"name": "alloc"
							}
						],
						"line": 119,
						"kind": "function",
						"char": 9,
						"name": "readUntil",
						"type": "ubyte[](InputStream stream, in ubyte[] end_marker, size_t max_bytes = size_t.max, IAllocator alloc = vibeThreadAllocator())",
						"endchar": 1,
						"endline": 126
					}
				],
				"name": "readUntil",
				"comment": "\tReads all data of a stream until the specified end marker is detected.\n\n\tParams:\n\t\tstream = The input stream which is searched for end_marker\n\t\tend_marker = The byte sequence which is searched in the stream\n\t\tmax_bytes = An optional limit of how much data is to be read from the\n\t\t\tinput stream; if the limit is reaached before hitting the end\n\t\t\tmarker, an exception is thrown.\n\t\talloc = An optional allocator that is used to build the result string\n\t\t\tin the string variant of this function\n\t\tdst = The output stream, to which the prefix to the end marker of the\n\t\t\tinput stream is written\n\n\tReturns:\n\t\tThe string variant of this function returns the complete prefix to the\n\t\tend marker of the input stream, excluding the end marker itself.\n\n\tThrows:\n\t\tAn exception if either the stream end was hit without hitting a marker\n\t\tfirst, or if more than max_bytes have been read from the stream in\n\t\tcase of max_bytes != 0.\n\n\tRemarks:\n\t\tThis function uses an algorithm inspired by the\n\t\t$(LINK2 http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm,\n\t\tBoyer-Moore string search algorithm). However, contrary to the original\n\t\talgorithm, it will scan the whole input string exactly once, without\n\t\tjumping over portions of it. This allows the algorithm to work with\n\t\tconstant memory requirements and without the memory copies that would\n\t\tbe necessary for streams that do not hold their complete data in\n\t\tmemory.\n\n\t\tThe current implementation has a run time complexity of O(n*m+m²) and\n\t\tO(n+m) in typical cases, with n being the length of the scanned input\n\t\tstring and m the length of the marker.\n"
			},
			{
				"constraint": "isInputStream!InputStream && isOutputStream!OutputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					},
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 128,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"type": "OutputStream",
								"name": "dst"
							},
							{
								"type": "ubyte[]",
								"storageClass": [
									"in"
								],
								"name": "end_marker"
							},
							{
								"deco": "m",
								"default": "(ulong).max",
								"name": "max_bytes"
							}
						],
						"line": 128,
						"kind": "function",
						"char": 6,
						"name": "readUntil",
						"type": "void(InputStream stream, OutputStream dst, in ubyte[] end_marker, ulong max_bytes = (ulong).max)",
						"endchar": 1,
						"endline": 134
					}
				],
				"name": "readUntil",
				"comment": "ditto\n"
			},
			{
				"constraint": "isOutputRange!(R, ubyte) && isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 136,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "ubyte[]",
								"storageClass": [
									"in"
								],
								"name": "end_marker"
							},
							{
								"deco": "m",
								"default": "(ulong).max",
								"name": "max_bytes"
							}
						],
						"line": 136,
						"kind": "function",
						"char": 6,
						"name": "readUntil",
						"type": "void(InputStream stream, ref R dst, in ubyte[] end_marker, ulong max_bytes = (ulong).max)",
						"endchar": 1,
						"endline": 145
					}
				],
				"name": "readUntil",
				"comment": "ditto\n"
			},
			{
				"constraint": "isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 219,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"type": "size_t",
								"default": "size_t.max",
								"name": "max_bytes"
							},
							{
								"type": "size_t",
								"default": "0",
								"name": "reserve_bytes"
							}
						],
						"line": 219,
						"kind": "function",
						"char": 9,
						"name": "readAll",
						"type": "ubyte[](InputStream stream, size_t max_bytes = size_t.max, size_t reserve_bytes = 0)",
						"endchar": 1,
						"endline": 243
					}
				],
				"name": "readAll",
				"comment": "\tReads the complete contents of a stream, optionally limited by max_bytes.\n\n\tThrows:\n\t\tAn exception is thrown if the stream contains more than max_bytes data.\n"
			},
			{
				"constraint": "isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 261,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "sanitize"
							},
							{
								"type": "size_t",
								"default": "size_t.max",
								"name": "max_bytes"
							}
						],
						"line": 261,
						"kind": "function",
						"char": 8,
						"name": "readAllUTF8",
						"type": "string(InputStream stream, bool sanitize = false, size_t max_bytes = size_t.max)",
						"endchar": 1,
						"endline": 273
					}
				],
				"name": "readAllUTF8",
				"comment": "\tReads the complete contents of a stream, assuming UTF-8 encoding.\n\n\tParams:\n\t\tstream = Specifies the stream from which to read.\n\t\tsanitize = If true, the input data will not be validated but will instead be made valid UTF-8.\n\t\tmax_bytes = Optional size limit of the data that is read.\n\n\tReturns:\n\t\tThe full contents of the stream, excluding a possible BOM, are returned as a UTF-8 string.\n\n\tThrows:\n\t\tAn exception is thrown if max_bytes != 0 and the stream contains more than max_bytes data.\n\t\tIf the sanitize parameter is false and the stream contains invalid UTF-8 code sequences,\n\t\ta UTFException is thrown.\n"
			},
			{
				"constraint": "isOutputStream!OutputStream && isConnectionStream!ConnectionStream",
				"parameters": [
					{
						"kind": "type",
						"name": "OutputStream"
					},
					{
						"kind": "type",
						"name": "ConnectionStream"
					}
				],
				"line": 288,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "OutputStream",
								"name": "destination"
							},
							{
								"type": "ConnectionStream",
								"name": "source"
							},
							{
								"deco": "m",
								"default": "0",
								"name": "nbytes"
							},
							{
								"type": "Duration",
								"default": "0.seconds",
								"name": "max_latency"
							}
						],
						"line": 288,
						"kind": "function",
						"char": 6,
						"name": "pipeRealtime",
						"type": "void(OutputStream destination, ConnectionStream source, ulong nbytes = 0, Duration max_latency = 0.seconds)",
						"endchar": 1,
						"endline": 332
					}
				],
				"name": "pipeRealtime",
				"comment": "\tPipes a stream to another while keeping the latency within the specified threshold.\n\n\tParams:\n\t\tdestination = The destination stram to pipe into\n\t\tsource =      The source stream to read data from\n\t\tnbytes =      Number of bytes to pipe through. The default of zero means to pipe\n\t\t\t\t\t  the whole input stream.\n\t\tmax_latency = The maximum time before data is flushed to destination. The default value\n\t\t\t\t\t  of 0 s will flush after each chunk of data read from source.\n\n\tSee_also: OutputStream.write\n"
			},
			{
				"constraint": "isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 353,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"type": "const(ubyte)[]",
								"name": "bytes"
							}
						],
						"line": 353,
						"kind": "function",
						"char": 6,
						"name": "skipBytes",
						"type": "bool(InputStream stream, const(ubyte)[] bytes)",
						"endchar": 1,
						"endline": 365
					}
				],
				"name": "skipBytes",
				"comment": "\tConsumes `bytes.length` bytes of the stream and determines if the contents\n\tmatch up.\n\n\tReturns: True $(I iff) the consumed bytes equal the passed array.\n\tThrows: Throws an exception if reading from the stream fails.\n"
			}
		],
		"comment": "\tHigh level stream manipulation functions.\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.stream.operations"
	},
	{
		"kind": "module",
		"file": "stream/vibe/stream/stdio.d",
		"members": [
			{
				"line": 19,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "b",
								"name": "read"
							},
							{
								"deco": "b",
								"name": "write"
							}
						],
						"line": 28,
						"kind": "constructor",
						"originalType": "(bool read, bool write)",
						"char": 2,
						"name": "this",
						"deco": "FbbZC4vibe6stream5stdio13StdFileStream",
						"endchar": 2,
						"endline": 32
					},
					{
						"parameters": [
							{
								"deco": "S3std5stdio4File",
								"name": "file"
							}
						],
						"line": 34,
						"kind": "function",
						"originalType": "void(std.stdio.File file)",
						"char": 7,
						"name": "setup",
						"deco": "FS3std5stdio4FileZv",
						"endchar": 2,
						"endline": 49
					},
					{
						"line": 51,
						"kind": "function",
						"originalType": "@property std.stdio.File()",
						"char": 27,
						"name": "stdFile",
						"deco": "FNdZS3std5stdio4File",
						"endchar": 54,
						"endline": 51
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 53,
						"kind": "function",
						"originalType": "@property bool()",
						"char": 26,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 80,
						"endline": 53
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 55,
						"kind": "function",
						"originalType": "@property ulong()",
						"char": 27,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 2,
						"endline": 59
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 61,
						"kind": "function",
						"originalType": "@property bool()",
						"char": 26,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 2,
						"endline": 65
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.core.stream.ConnectionStream.connected"
						],
						"line": 67,
						"kind": "function",
						"originalType": "const @property bool()",
						"char": 26,
						"name": "connected",
						"deco": "xFNdNfZb",
						"endchar": 75,
						"endline": 67
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.core.stream.ConnectionStream.close"
						],
						"line": 69,
						"kind": "function",
						"originalType": "void()",
						"char": 16,
						"name": "close",
						"deco": "FNfZv",
						"endchar": 47,
						"endline": 69
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"overrides": [
							"vibe.core.stream.ConnectionStream.waitForData"
						],
						"line": 71,
						"kind": "function",
						"originalType": "bool(Duration timeout)",
						"char": 16,
						"name": "waitForData",
						"deco": "FNfS4core4time8DurationZb",
						"endchar": 88,
						"endline": 71
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 73,
						"kind": "function",
						"originalType": "const(ubyte)[]()",
						"char": 26,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 2,
						"endline": 77
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 79,
						"kind": "function",
						"originalType": "size_t(scope ubyte[] dst, IOMode mode)",
						"char": 18,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 83
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 85,
						"name": "read"
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes_"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 87,
						"kind": "function",
						"originalType": "size_t(in ubyte[] bytes_, IOMode mode)",
						"char": 18,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 91
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 93,
						"name": "write"
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 95,
						"kind": "function",
						"originalType": "void()",
						"char": 16,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 99
					},
					{
						"storageClass": [
							"override"
						],
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 101,
						"kind": "function",
						"originalType": "void()",
						"char": 16,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 107
					},
					{
						"line": 109,
						"kind": "function",
						"char": 7,
						"name": "enforceReadable",
						"deco": "FNfZv",
						"endchar": 81,
						"endline": 109
					},
					{
						"line": 110,
						"kind": "function",
						"char": 7,
						"name": "enforceWritable",
						"deco": "FNfZv",
						"endchar": 82,
						"endline": 110
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 1,
						"line": 19,
						"name": "~this"
					}
				],
				"name": "StdFileStream",
				"interfaces": [
					"vibe.core.stream.ConnectionStream"
				]
			},
			{
				"line": 166,
				"kind": "class",
				"char": 7,
				"base": "vibe.stream.stdio.StdFileStream",
				"members": [
					{
						"line": 167,
						"kind": "constructor",
						"originalType": "()",
						"char": 2,
						"name": "this",
						"deco": "FZC4vibe6stream5stdio12StdoutStream",
						"endchar": 2,
						"endline": 170
					}
				],
				"name": "StdoutStream",
				"comment": "\tOutputStream that writes to stdout\n"
			},
			{
				"line": 176,
				"kind": "class",
				"char": 7,
				"base": "vibe.stream.stdio.StdFileStream",
				"members": [
					{
						"line": 177,
						"kind": "constructor",
						"originalType": "()",
						"char": 2,
						"name": "this",
						"deco": "FZC4vibe6stream5stdio12StderrStream",
						"endchar": 2,
						"endline": 180
					}
				],
				"name": "StderrStream",
				"comment": "\tOutputStream that writes to stderr\n"
			},
			{
				"line": 186,
				"kind": "class",
				"char": 7,
				"base": "vibe.stream.stdio.StdFileStream",
				"members": [
					{
						"line": 187,
						"kind": "constructor",
						"originalType": "()",
						"char": 2,
						"name": "this",
						"deco": "FZC4vibe6stream5stdio11StdinStream",
						"endchar": 2,
						"endline": 190
					}
				],
				"name": "StdinStream",
				"comment": "\tInputStream that reads from stdin\n"
			}
		],
		"comment": "\tStandard I/O streams\n\n\tCopyright: © 2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Eric Cornelius\n",
		"name": "vibe.stream.stdio"
	},
	{
		"kind": "module",
		"file": "stream/vibe/stream/taskpipe.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.core.stream"
			},
			{
				"line": 24,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "b",
								"default": "false",
								"name": "grow_when_full"
							}
						],
						"line": 31,
						"kind": "constructor",
						"originalType": "(bool grow_when_full = false)",
						"char": 2,
						"name": "this",
						"deco": "FbZC4vibe6stream8taskpipe8TaskPipe",
						"endchar": 2,
						"endline": 34,
						"comment": " Constructs a new pipe ready for use.\n"
					},
					{
						"line": 37,
						"kind": "function",
						"originalType": "const @property size_t()",
						"char": 19,
						"name": "bufferSize",
						"deco": "xFNdZm",
						"endchar": 66,
						"endline": 37,
						"comment": "Size of the (fixed) FIFO buffer used to transfer data between tasks\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "nbytes"
							}
						],
						"line": 39,
						"kind": "function",
						"originalType": "@property void(size_t nbytes)",
						"char": 17,
						"name": "bufferSize",
						"deco": "FNdmZv",
						"endchar": 73,
						"endline": 39,
						"comment": "ditto\n"
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 41,
						"kind": "function",
						"originalType": "@property bool()",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 52,
						"endline": 41
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 42,
						"kind": "function",
						"originalType": "@property ulong()",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 74,
						"endline": 42
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 43,
						"kind": "function",
						"originalType": "@property bool()",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 66,
						"endline": 43
					},
					{
						"overrides": [
							"vibe.core.stream.ConnectionStream.connected"
						],
						"line": 44,
						"kind": "function",
						"originalType": "const @property bool()",
						"char": 17,
						"name": "connected",
						"deco": "xFNdNfZb",
						"endchar": 57,
						"endline": 44
					},
					{
						"overrides": [
							"vibe.core.stream.ConnectionStream.close"
						],
						"line": 46,
						"kind": "function",
						"originalType": "void()",
						"char": 7,
						"name": "close",
						"deco": "FNfZv",
						"endchar": 33,
						"endline": 46
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"overrides": [
							"vibe.core.stream.ConnectionStream.waitForData"
						],
						"line": 47,
						"kind": "function",
						"originalType": "bool(Duration timeout)",
						"char": 7,
						"name": "waitForData",
						"deco": "FNfS4core4time8DurationZb",
						"endchar": 2,
						"endline": 52
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 53,
						"kind": "function",
						"originalType": "const(ubyte)[]()",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 46,
						"endline": 53
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 54,
						"kind": "function",
						"originalType": "size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 79,
						"endline": 54
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 55,
						"name": "read"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 56,
						"kind": "function",
						"originalType": "size_t(in ubyte[] bytes, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 82,
						"endline": 56
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 57,
						"name": "write"
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 58,
						"kind": "function",
						"originalType": "void()",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 16,
						"endline": 58
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 59,
						"kind": "function",
						"originalType": "void()",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 36,
						"endline": 59
					}
				],
				"name": "TaskPipe",
				"interfaces": [
					"vibe.core.stream.ConnectionStream"
				],
				"comment": "\tImplements a unidirectional data pipe between two tasks.\n"
			}
		],
		"comment": "\tStream interface for passing data between different tasks.\n\n\tCopyright: © 2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.stream.taskpipe"
	},
	{
		"kind": "module",
		"file": "stream/vibe/stream/wrapper.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.core.stream"
			},
			{
				"constraint": "isStream!Stream",
				"parameters": [
					{
						"kind": "type",
						"name": "Stream"
					}
				],
				"line": 19,
				"kind": "template",
				"char": 13,
				"members": [
					{
						"parameters": [
							{
								"type": "Stream",
								"name": "stream"
							}
						],
						"line": 19,
						"kind": "function",
						"char": 13,
						"name": "createProxyStream",
						"type": "ProxyStream(Stream stream)",
						"endchar": 1,
						"endline": 23
					}
				],
				"name": "createProxyStream"
			},
			{
				"constraint": "isInputStream!InputStream && isOutputStream!OutputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					},
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 25,
				"kind": "template",
				"char": 13,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "input"
							},
							{
								"type": "OutputStream",
								"name": "output"
							}
						],
						"line": 25,
						"kind": "function",
						"char": 13,
						"name": "createProxyStream",
						"type": "ProxyStream(InputStream input, OutputStream output)",
						"endchar": 1,
						"endline": 29
					}
				],
				"name": "createProxyStream"
			},
			{
				"constraint": "isStream!Stream && isConnectionStream!ConnectionStream",
				"parameters": [
					{
						"kind": "type",
						"name": "Stream"
					},
					{
						"kind": "type",
						"name": "ConnectionStream"
					}
				],
				"line": 31,
				"kind": "template",
				"char": 23,
				"members": [
					{
						"parameters": [
							{
								"type": "Stream",
								"name": "stream"
							},
							{
								"type": "ConnectionStream",
								"name": "connection_stream"
							}
						],
						"line": 31,
						"kind": "function",
						"char": 23,
						"name": "createConnectionProxyStream",
						"type": "ConnectionProxyStream(Stream stream, ConnectionStream connection_stream)",
						"endchar": 1,
						"endline": 37
					}
				],
				"name": "createConnectionProxyStream"
			},
			{
				"constraint": "isInputStream!InputStream && isOutputStream!OutputStream && isConnectionStream!ConnectionStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					},
					{
						"kind": "type",
						"name": "OutputStream"
					},
					{
						"kind": "type",
						"name": "ConnectionStream"
					}
				],
				"line": 48,
				"kind": "template",
				"char": 23,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "input"
							},
							{
								"type": "OutputStream",
								"name": "output"
							},
							{
								"type": "ConnectionStream",
								"name": "connection_stream"
							}
						],
						"line": 48,
						"kind": "function",
						"char": 23,
						"name": "createConnectionProxyStream",
						"type": "ConnectionProxyStream(InputStream input, OutputStream output, ConnectionStream connection_stream)",
						"endchar": 1,
						"endline": 52
					}
				],
				"name": "createConnectionProxyStream"
			},
			{
				"line": 58,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"default": "null",
								"name": "stream"
							}
						],
						"line": 67,
						"kind": "constructor",
						"originalType": "@safe (Stream stream = null)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream6StreamZCQBaQt7wrapper11ProxyStream",
						"endchar": 2,
						"endline": 72
					},
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "input"
							},
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "output"
							}
						],
						"line": 75,
						"kind": "constructor",
						"originalType": "@safe (InputStream input, OutputStream output)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream11InputStreamCQBfQBdQBb12OutputStreamZCQCeQBx7wrapper11ProxyStream",
						"endchar": 2,
						"endline": 79
					},
					{
						"line": 97,
						"kind": "function",
						"originalType": "inout @property @safe inout(InterfaceProxy!Stream)()",
						"char": 41,
						"name": "underlying",
						"deco": "NgFNdNfZNgS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
						"endchar": 83,
						"endline": 97,
						"comment": "The stream that is wrapped by this one\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
								"name": "value"
							}
						],
						"line": 99,
						"kind": "function",
						"originalType": "@property @safe void(InterfaceProxy!Stream value)",
						"char": 17,
						"name": "underlying",
						"deco": "FNdNfS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBpZv",
						"endchar": 116,
						"endline": 99,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "value"
							}
						],
						"line": 102,
						"kind": "function",
						"char": 18,
						"name": "underlying",
						"deco": "FNdNfC4vibe4core6stream6StreamZv",
						"endchar": 93,
						"endline": 102,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "value"
							}
						],
						"line": 102,
						"kind": "function",
						"char": 18,
						"name": "underlying",
						"deco": "FNdNfC4vibe4core6stream6StreamZv",
						"endchar": 93,
						"endline": 102,
						"comment": "ditto\n"
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 104,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 66,
						"endline": 104
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 106,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 72,
						"endline": 106
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 108,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 97,
						"endline": 108
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 110,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 49,
						"endline": 110
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 112,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 80,
						"endline": 112
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 114,
						"name": "read"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 116,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 84,
						"endline": 116
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 118,
						"name": "write"
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 120,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 35,
						"endline": 120
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 122,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 41,
						"endline": 122
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 1,
						"line": 58,
						"name": "~this"
					}
				],
				"name": "ProxyStream",
				"interfaces": [
					"vibe.core.stream.Stream"
				],
				"comment": "\tProvides a way to access varying streams using a constant stream reference.\n"
			},
			{
				"line": 134,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "stream"
							},
							{
								"deco": "C4vibe4core6stream16ConnectionStream",
								"name": "connection_stream"
							}
						],
						"line": 145,
						"kind": "constructor",
						"originalType": "@safe (Stream stream, ConnectionStream connection_stream)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream6StreamCQzQwQt16ConnectionStreamZCQBzQBs7wrapper21ConnectionProxyStream",
						"endchar": 2,
						"endline": 148
					},
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "input"
							},
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "output"
							},
							{
								"deco": "C4vibe4core6stream16ConnectionStream",
								"name": "connection_stream"
							}
						],
						"line": 151,
						"kind": "constructor",
						"originalType": "@safe (InputStream input, OutputStream output, ConnectionStream connection_stream)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream11InputStreamCQBfQBdQBb12OutputStreamCQCdQCbQBz16ConnectionStreamZCQDgQCz7wrapper21ConnectionProxyStream",
						"endchar": 2,
						"endline": 154
					},
					{
						"overrides": [
							"vibe.core.stream.ConnectionStream.connected"
						],
						"line": 174,
						"kind": "function",
						"char": 17,
						"name": "connected",
						"deco": "xFNdNfZb",
						"endchar": 2,
						"endline": 180
					},
					{
						"overrides": [
							"vibe.core.stream.ConnectionStream.close"
						],
						"line": 182,
						"kind": "function",
						"char": 7,
						"name": "close",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 189
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"default": "dur(0L)",
								"name": "timeout"
							}
						],
						"overrides": [
							"vibe.core.stream.ConnectionStream.waitForData"
						],
						"line": 191,
						"kind": "function",
						"originalType": "@safe bool(Duration timeout = 0.seconds)",
						"char": 7,
						"name": "waitForData",
						"deco": "FNfS4core4time8DurationZb",
						"endchar": 2,
						"endline": 199
					},
					{
						"line": 202,
						"kind": "function",
						"originalType": "inout @property @safe inout(InterfaceProxy!Stream)()",
						"char": 41,
						"name": "underlying",
						"deco": "NgFNdNfZNgS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
						"endchar": 83,
						"endline": 202,
						"comment": "The stream that is wrapped by this one\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
								"name": "value"
							}
						],
						"line": 204,
						"kind": "function",
						"originalType": "@property @safe void(InterfaceProxy!Stream value)",
						"char": 17,
						"name": "underlying",
						"deco": "FNdNfS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBpZv",
						"endchar": 116,
						"endline": 204,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "value"
							}
						],
						"line": 207,
						"kind": "function",
						"char": 18,
						"name": "underlying",
						"deco": "FNdNfC4vibe4core6stream6StreamZv",
						"endchar": 93,
						"endline": 207,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "value"
							}
						],
						"line": 207,
						"kind": "function",
						"char": 18,
						"name": "underlying",
						"deco": "FNdNfC4vibe4core6stream6StreamZv",
						"endchar": 93,
						"endline": 207,
						"comment": "ditto\n"
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 209,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 66,
						"endline": 209
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 211,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 72,
						"endline": 211
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 213,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 97,
						"endline": 213
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 215,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 49,
						"endline": 215
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 217,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 80,
						"endline": 217
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 219,
						"name": "read"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 221,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 84,
						"endline": 221
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 223,
						"name": "write"
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 225,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 35,
						"endline": 225
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 227,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 41,
						"endline": 227
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 1,
						"line": 134,
						"name": "~this"
					}
				],
				"name": "ConnectionProxyStream",
				"interfaces": [
					"vibe.core.stream.ConnectionStream"
				],
				"comment": "\tSpecial kind of proxy stream for streams nested in a ConnectionStream.\n\n\tThis stream will forward all stream operations to the selected stream,\n\tbut will forward all connection related operations to the given\n\tConnectionStream. This allows wrapping embedded streams, such as\n\tSSL streams in a ConnectionStream.\n"
			},
			{
				"kind": "struct",
				"line": 245,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							}
						],
						"line": 257,
						"kind": "constructor",
						"originalType": "ref @safe (InputStream stream)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfC4vibe4core6stream11InputStreamZSQBgQz7wrapper16StreamInputRange",
						"endchar": 2,
						"endline": 261
					},
					{
						"line": 263,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 68,
						"endline": 263
					},
					{
						"line": 265,
						"kind": "function",
						"char": 8,
						"name": "front",
						"deco": "FNfZh",
						"endchar": 2,
						"endline": 269
					},
					{
						"line": 270,
						"kind": "function",
						"char": 7,
						"name": "popFront",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 275
					}
				],
				"comment": "\tImplements an input range interface on top of an InputStream using an\n\tinternal buffer.\n\n\tThe buffer is GC allocated and is filled chunk wise. Thus an InputStream\n\tthat has been wrapped in a StreamInputRange cannot be used reliably on its\n\town anymore.\n\n\tReading occurs in a fully lazy fashion. The first call to either front,\n\tpopFront or empty will potentially trigger waiting for the next chunk of\n\tdata to arrive - but especially popFront will not wait if it was called\n\tafter a call to front. This property allows the range to be used in\n\trequest-response scenarios.\n",
				"name": "StreamInputRange"
			},
			{
				"parameters": [],
				"line": 290,
				"kind": "template",
				"char": 32,
				"members": [
					{
						"parameters": [
							{
								"type": "OutputStream",
								"name": "stream"
							}
						],
						"line": 290,
						"kind": "function",
						"char": 32,
						"name": "StreamOutputRange",
						"type": "StreamOutputRange!OutputStream(OutputStream stream)",
						"endchar": 122,
						"endline": 290
					}
				],
				"name": "StreamOutputRange",
				"comment": "\tImplements a buffered output range interface on top of an OutputStream.\n"
			},
			{
				"constraint": "isOutputStream!OutputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "OutputStream"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "256",
						"name": "buffer_size"
					}
				],
				"line": 292,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "OutputStream",
								"char": 16,
								"line": 298,
								"name": "m_stream"
							},
							{
								"line": 299,
								"kind": "variable",
								"char": 10,
								"name": "m_fill",
								"init": "0",
								"type": "size_t"
							},
							{
								"line": 300,
								"kind": "variable",
								"char": 22,
								"name": "m_data",
								"init": "void",
								"type": "ubyte[buffer_size]"
							},
							{
								"parameters": [
									{
										"type": "OutputStream",
										"name": "stream"
									}
								],
								"line": 305,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(OutputStream stream)",
								"endchar": 2,
								"endline": 308
							},
							{
								"line": 310,
								"kind": "destructor",
								"char": 2,
								"name": "~this",
								"endchar": 2,
								"endline": 313
							},
							{
								"line": 315,
								"kind": "function",
								"char": 7,
								"name": "flush",
								"type": "void()",
								"endchar": 2,
								"endline": 320
							},
							{
								"line": 322,
								"kind": "function",
								"char": 7,
								"name": "drop",
								"type": "void()",
								"endchar": 2,
								"endline": 325
							},
							{
								"parameters": [
									{
										"deco": "h",
										"name": "bt"
									}
								],
								"line": 327,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "void(ubyte bt)",
								"endchar": 2,
								"endline": 331
							},
							{
								"parameters": [
									{
										"type": "const(ubyte)[]",
										"name": "bts"
									}
								],
								"line": 333,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "void(const(ubyte)[] bts)",
								"endchar": 2,
								"endline": 349
							},
							{
								"parameters": [
									{
										"deco": "a",
										"name": "elem"
									}
								],
								"line": 351,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "void(char elem)",
								"endchar": 46,
								"endline": 351
							},
							{
								"parameters": [
									{
										"type": "const(char)[]",
										"name": "elems"
									}
								],
								"line": 352,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "void(const(char)[] elems)",
								"endchar": 66,
								"endline": 352
							},
							{
								"parameters": [
									{
										"deco": "w",
										"name": "elem"
									}
								],
								"line": 354,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "void(dchar elem)",
								"endchar": 2,
								"endline": 360
							},
							{
								"parameters": [
									{
										"type": "const(dchar)[]",
										"name": "elems"
									}
								],
								"line": 362,
								"kind": "function",
								"char": 7,
								"name": "put",
								"type": "void(const(dchar)[] elems)",
								"endchar": 65,
								"endline": 362
							}
						],
						"line": 292,
						"name": "StreamOutputRange"
					}
				],
				"name": "StreamOutputRange",
				"comment": "ditto\n"
			},
			{
				"constraint": "isOutputStream!OutputStream",
				"parameters": [
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "256",
						"name": "buffer_size"
					},
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 365,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "OutputStream",
								"name": "stream"
							}
						],
						"line": 365,
						"kind": "function",
						"char": 6,
						"name": "streamOutputRange",
						"type": "(OutputStream stream)",
						"endchar": 1,
						"endline": 369
					}
				],
				"name": "streamOutputRange",
				"comment": "ditto\n"
			}
		],
		"comment": "\tStream proxy and wrapper facilities.\n\n\tCopyright: © 2013-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.stream.wrapper"
	},
	{
		"kind": "module",
		"file": "stream/vibe/stream/zlib.d",
		"members": [
			{
				"constraint": "isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 24,
				"kind": "template",
				"char": 17,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "source"
							}
						],
						"line": 24,
						"kind": "function",
						"char": 17,
						"name": "createDeflateInputStream",
						"type": "@safe ZlibInputStream(InputStream source)",
						"endchar": 1,
						"endline": 28
					}
				],
				"name": "createDeflateInputStream",
				"comment": " Creates a new deflate uncompression stream.\n"
			},
			{
				"constraint": "isOutputStream!OutputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 39,
				"kind": "template",
				"char": 18,
				"members": [
					{
						"parameters": [
							{
								"type": "OutputStream",
								"name": "destination"
							}
						],
						"line": 39,
						"kind": "function",
						"char": 18,
						"name": "createDeflateOutputStream",
						"type": "@safe ZlibOutputStream(OutputStream destination)",
						"endchar": 1,
						"endline": 43
					}
				],
				"name": "createDeflateOutputStream",
				"comment": " Creates a new deflate compression stream.\n"
			},
			{
				"constraint": "isInputStream!InputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "InputStream"
					}
				],
				"line": 54,
				"kind": "template",
				"char": 17,
				"members": [
					{
						"parameters": [
							{
								"type": "InputStream",
								"name": "source"
							}
						],
						"line": 54,
						"kind": "function",
						"char": 17,
						"name": "createGzipInputStream",
						"type": "@safe ZlibInputStream(InputStream source)",
						"endchar": 1,
						"endline": 58
					}
				],
				"name": "createGzipInputStream",
				"comment": " Creates a new deflate uncompression stream.\n"
			},
			{
				"constraint": "isOutputStream!OutputStream",
				"parameters": [
					{
						"kind": "type",
						"name": "OutputStream"
					}
				],
				"line": 69,
				"kind": "template",
				"char": 18,
				"members": [
					{
						"parameters": [
							{
								"type": "OutputStream",
								"name": "destination"
							}
						],
						"line": 69,
						"kind": "function",
						"char": 18,
						"name": "createGzipOutputStream",
						"type": "@safe ZlibOutputStream(OutputStream destination)",
						"endchar": 1,
						"endline": 73
					}
				],
				"name": "createGzipOutputStream",
				"comment": " Creates a new deflate uncompression stream.\n"
			},
			{
				"line": 87,
				"kind": "class",
				"char": 7,
				"base": "vibe.stream.zlib.ZlibOutputStream",
				"members": [
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "dst"
							}
						],
						"line": 88,
						"kind": "constructor",
						"originalType": "@safe (OutputStream dst)",
						"char": 8,
						"name": "this",
						"deco": "FNfC4vibe4core6stream12OutputStreamZCQBhQBa4zlib19DeflateOutputStream",
						"endchar": 2,
						"endline": 91
					}
				],
				"name": "DeflateOutputStream",
				"comment": "\tWrites any data compressed in deflate format to the specified output stream.\n"
			},
			{
				"line": 99,
				"kind": "class",
				"char": 7,
				"base": "vibe.stream.zlib.ZlibOutputStream",
				"members": [
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "dst"
							}
						],
						"line": 100,
						"kind": "constructor",
						"originalType": "@safe (OutputStream dst)",
						"char": 8,
						"name": "this",
						"deco": "FNfC4vibe4core6stream12OutputStreamZCQBhQBa4zlib16GzipOutputStream",
						"endchar": 2,
						"endline": 103
					}
				],
				"name": "GzipOutputStream",
				"comment": "\tWrites any data compressed in gzip format to the specified output stream.\n"
			},
			{
				"line": 109,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 120,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"char": 3,
								"value": "0",
								"line": 121,
								"name": "gzip"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "1",
								"line": 122,
								"name": "deflate"
							}
						],
						"name": "HeaderFormat",
						"baseDeco": "i"
					},
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "dst"
							},
							{
								"deco": "E4vibe6stream4zlib16ZlibOutputStream12HeaderFormat",
								"name": "type"
							},
							{
								"deco": "i",
								"default": "-1",
								"name": "level"
							}
						],
						"line": 126,
						"kind": "constructor",
						"originalType": "@safe (OutputStream dst, HeaderFormat type, int level = Z_DEFAULT_COMPRESSION)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream12OutputStreamEQBgQz4zlib16ZlibOutputStream12HeaderFormatiZCQCzQCsQBuQBs",
						"endchar": 2,
						"endline": 129
					},
					{
						"line": 138,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 141
					},
					{
						"storageClass": [
							"final"
						],
						"parameters": [
							{
								"deco": "xAh",
								"name": "data"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 143,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] data, IOMode mode)",
						"char": 15,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 156
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 158,
						"name": "write"
					},
					{
						"storageClass": [
							"final"
						],
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 160,
						"kind": "function",
						"char": 13,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 165
					},
					{
						"storageClass": [
							"final"
						],
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 167,
						"kind": "function",
						"char": 13,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 174
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 2,
						"line": 138,
						"name": "~this"
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 2,
						"line": 138,
						"name": "~this"
					}
				],
				"name": "ZlibOutputStream",
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"comment": "\tGeneric zlib output stream.\n"
			},
			{
				"line": 210,
				"kind": "class",
				"char": 1,
				"base": "vibe.stream.zlib.ZlibInputStream",
				"members": [
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "dst"
							}
						],
						"line": 211,
						"kind": "constructor",
						"originalType": "@safe (InputStream dst)",
						"char": 8,
						"name": "this",
						"deco": "FNfC4vibe4core6stream11InputStreamZCQBgQz4zlib18DeflateInputStream",
						"endchar": 2,
						"endline": 214
					}
				],
				"name": "DeflateInputStream",
				"comment": "\tTakes an input stream that contains data in deflate compressed format and outputs the\n\tuncompressed data.\n"
			},
			{
				"line": 223,
				"kind": "class",
				"char": 1,
				"base": "vibe.stream.zlib.ZlibInputStream",
				"members": [
					{
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "dst"
							}
						],
						"line": 224,
						"kind": "constructor",
						"originalType": "@safe (InputStream dst)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream11InputStreamZCQBgQz4zlib15GzipInputStream",
						"endchar": 2,
						"endline": 227
					}
				],
				"name": "GzipInputStream",
				"comment": "\tTakes an input stream that contains data in gzip compressed format and outputs the\n\tuncompressed data.\n"
			},
			{
				"line": 264,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 277,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"char": 3,
								"value": "0",
								"line": 278,
								"name": "gzip"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "1",
								"line": 279,
								"name": "deflate"
							},
							{
								"kind": "enum member",
								"char": 3,
								"value": "2",
								"line": 280,
								"name": "automatic"
							}
						],
						"name": "HeaderFormat",
						"baseDeco": "i"
					},
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "src"
							},
							{
								"deco": "E4vibe6stream4zlib15ZlibInputStream12HeaderFormat",
								"name": "type"
							}
						],
						"line": 284,
						"kind": "constructor",
						"originalType": "@safe (InputStream src, HeaderFormat type)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe4core6stream11InputStreamEQBfQy4zlib15ZlibInputStream12HeaderFormatZCQCwQCpQBsQBq",
						"endchar": 2,
						"endline": 287
					},
					{
						"line": 304,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 307
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 309,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 55,
						"endline": 309
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 311,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 2,
						"endline": 320
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 322,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 2,
						"endline": 325
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 327,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 53,
						"endline": 327
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 329,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 351
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 353,
						"name": "read"
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 2,
						"line": 304,
						"name": "~this"
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 2,
						"line": 304,
						"name": "~this"
					}
				],
				"name": "ZlibInputStream",
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"comment": "\tGeneric zlib input stream.\n"
			}
		],
		"comment": "\tZlib input/output streams\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.stream.zlib"
	},
	{
		"kind": "module",
		"file": "textfilter/vibe/textfilter/html.d",
		"members": [
			{
				"constraint": "isInputRange!R",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 19,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "str"
							}
						],
						"line": 19,
						"kind": "function",
						"char": 8,
						"name": "htmlEscape",
						"type": "@trusted string(R str)",
						"endchar": 1,
						"endline": 31
					}
				],
				"name": "htmlEscape",
				"comment": " Returns the HTML escaped version of a given string.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L34_C1)\n---\nassert(htmlEscape(`\"Hello\", <World>!`) == `\"Hello\", &lt;World&gt;!`);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L34_C1)\n"
			},
			{
				"constraint": "isOutputRange!(R, dchar) && isInputRange!S",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"line": 41,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "S",
								"name": "str"
							},
							{
								"type": "HTMLEscapeFlags",
								"default": "HTMLEscapeFlags.escapeNewline",
								"name": "flags"
							}
						],
						"line": 41,
						"kind": "function",
						"char": 6,
						"name": "filterHTMLEscape",
						"type": "void(ref R dst, S str, HTMLEscapeFlags flags = HTMLEscapeFlags.escapeNewline)",
						"endchar": 1,
						"endline": 46
					}
				],
				"name": "filterHTMLEscape",
				"comment": " Writes the HTML escaped version of a given string to an output range.\n"
			},
			{
				"constraint": "isInputRange!R",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 51,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "str"
							}
						],
						"line": 51,
						"kind": "function",
						"char": 8,
						"name": "htmlAttribEscape",
						"type": "@trusted string(R str)",
						"endchar": 1,
						"endline": 63
					}
				],
				"name": "htmlAttribEscape",
				"comment": " Returns the HTML escaped version of a given string (also escapes double quotes).\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L66_C1)\n---\nassert(htmlAttribEscape(`\"Hello\", <World>!`) == `&quot;Hello&quot;, &lt;World&gt;!`);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L66_C1)\n"
			},
			{
				"constraint": "isOutputRange!(R, dchar) && isInputRange!S",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"line": 73,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "S",
								"name": "str"
							}
						],
						"line": 73,
						"kind": "function",
						"char": 6,
						"name": "filterHTMLAttribEscape",
						"type": "void(ref R dst, S str)",
						"endchar": 1,
						"endline": 78
					}
				],
				"name": "filterHTMLAttribEscape",
				"comment": " Writes the HTML escaped version of a given string to an output range (also escapes double quotes).\n"
			},
			{
				"constraint": "isInputRange!R",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 83,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "str"
							}
						],
						"line": 83,
						"kind": "function",
						"char": 8,
						"name": "htmlAllEscape",
						"type": "@trusted string(R str)",
						"endchar": 1,
						"endline": 95
					}
				],
				"name": "htmlAllEscape",
				"comment": " Returns the HTML escaped version of a given string (escapes every character).\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L98_C1)\n---\nassert(htmlAllEscape(\"Hello!\") == \"&#72;&#101;&#108;&#108;&#111;&#33;\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L98_C1)\n"
			},
			{
				"constraint": "isOutputRange!(R, dchar) && isInputRange!S",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"line": 105,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "S",
								"name": "str"
							}
						],
						"line": 105,
						"kind": "function",
						"char": 6,
						"name": "filterHTMLAllEscape",
						"type": "void(ref R dst, S str)",
						"endchar": 1,
						"endline": 113
					}
				],
				"name": "filterHTMLAllEscape",
				"comment": " Writes the HTML escaped version of a given string to an output range (escapes every character).\n"
			},
			{
				"constraint": "isInputRange!R",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 119,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "str"
							}
						],
						"line": 119,
						"kind": "function",
						"char": 8,
						"name": "htmlEscapeMin",
						"type": "@trusted string(R str)",
						"endchar": 1,
						"endline": 126
					}
				],
				"name": "htmlEscapeMin",
				"comment": "\tMinimally escapes a text so that no HTML tags appear in it.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 132,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"deco": "w",
								"name": "ch"
							},
							{
								"type": "HTMLEscapeFlags",
								"default": "HTMLEscapeFlags.escapeNewline",
								"name": "flags"
							}
						],
						"line": 132,
						"kind": "function",
						"char": 6,
						"name": "filterHTMLEscape",
						"type": "void(ref R dst, dchar ch, HTMLEscapeFlags flags = HTMLEscapeFlags.escapeNewline)",
						"endchar": 1,
						"endline": 169
					}
				],
				"name": "filterHTMLEscape",
				"comment": "\tWrites the HTML escaped version of a character to an output range.\n"
			},
			{
				"line": 172,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 173,
						"name": "escapeMinimal"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 174,
						"name": "escapeQuotes"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 175,
						"name": "escapeNewline"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "4",
						"line": 176,
						"name": "escapeUnknown"
					}
				],
				"name": "HTMLEscapeFlags",
				"baseDeco": "i"
			}
		],
		"comment": "\tHTML character entity escaping.\n\n\tTODO: Make things @safe once Appender is.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.textfilter.html"
	},
	{
		"kind": "module",
		"file": "textfilter/vibe/textfilter/markdown.d",
		"members": [
			{
				"line": 27,
				"kind": "function",
				"char": 6,
				"name": "main",
				"type": "int()",
				"endchar": 2,
				"endline": 37
			},
			{
				"parameters": [],
				"line": 42,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "MarkdownFlags",
								"name": "flags"
							}
						],
						"line": 42,
						"kind": "function",
						"char": 8,
						"name": "filterMarkdown",
						"type": "@trusted string(string str, MarkdownFlags flags)",
						"endchar": 1,
						"endline": 47
					}
				],
				"name": "filterMarkdown",
				"comment": " Returns a Markdown filtered HTML string.\n"
			},
			{
				"parameters": [],
				"line": 49,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "MarkdownSettings",
								"storageClass": [
									"scope"
								],
								"default": "null",
								"name": "settings"
							}
						],
						"line": 49,
						"kind": "function",
						"char": 8,
						"name": "filterMarkdown",
						"type": "@trusted string(string str, scope MarkdownSettings settings = null)",
						"endchar": 1,
						"endline": 54
					}
				],
				"name": "filterMarkdown",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 59,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "string",
								"name": "src"
							},
							{
								"type": "MarkdownFlags",
								"name": "flags"
							}
						],
						"line": 59,
						"kind": "function",
						"char": 6,
						"name": "filterMarkdown",
						"type": "void(ref R dst, string src, MarkdownFlags flags)",
						"endchar": 1,
						"endline": 64
					}
				],
				"name": "filterMarkdown",
				"comment": " Markdown filters the given string and writes the corresponding HTML to an output range.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 66,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "string",
								"name": "src"
							},
							{
								"type": "MarkdownSettings",
								"storageClass": [
									"scope"
								],
								"default": "null",
								"name": "settings"
							}
						],
						"line": 66,
						"kind": "function",
						"char": 6,
						"name": "filterMarkdown",
						"type": "void(ref R dst, string src, scope MarkdownSettings settings = null)",
						"endchar": 1,
						"endline": 76
					}
				],
				"name": "filterMarkdown",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "markdown_source"
					},
					{
						"deco": "C4vibe10textfilter8markdown16MarkdownSettings",
						"storageClass": [
							"scope"
						],
						"default": "null",
						"name": "settings"
					}
				],
				"line": 81,
				"kind": "function",
				"char": 11,
				"name": "getMarkdownOutline",
				"deco": "FAyaMC4vibe10textfilter8markdown16MarkdownSettingsZASQBvQBtQBk7Section",
				"endchar": 1,
				"endline": 105,
				"comment": "\tReturns the hierarchy of sections\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L108_C1)\n---\nimport std.conv : to;\nassert(getMarkdownOutline(\"## first\\n## second\\n### third\\n# fourth\\n### fifth\") ==\n\t[\n\t\tSection(2, \" first\", \"first\"),\n\t\tSection(2, \" second\", \"second\", [\n\t\t\tSection(3, \" third\", \"third\")\n\t\t]),\n\t\tSection(1, \" fourth\", \"fourth\", [\n\t\t\tSection(3, \" fifth\", \"fifth\")\n\t\t])\n\t]\n);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L108_C1)\n"
			},
			{
				"kind": "class",
				"char": 7,
				"members": [
					{
						"line": 125,
						"kind": "variable",
						"char": 16,
						"name": "flags",
						"deco": "E4vibe10textfilter8markdown13MarkdownFlags",
						"init": "cast(MarkdownFlags)0",
						"offset": 16,
						"comment": "Controls the capabilities of the parser.\n"
					},
					{
						"line": 128,
						"kind": "variable",
						"originalType": "size_t",
						"char": 9,
						"name": "headingBaseLevel",
						"deco": "m",
						"init": "1LU",
						"offset": 24,
						"comment": "Heading tags will start at this level.\n"
					},
					{
						"line": 131,
						"kind": "variable",
						"char": 53,
						"name": "urlFilter",
						"deco": "DFAyabZQf",
						"offset": 32,
						"comment": "Called for every link/image URL to perform arbitrary transformations.\n"
					},
					{
						"line": 134,
						"kind": "variable",
						"char": 11,
						"name": "allowedURISchemas",
						"deco": "AAya",
						"init": "[\"http\", \"https\", \"ftp\", \"mailto\"]",
						"offset": 48,
						"comment": "White list of URI schemas that can occur in link/image targets\n"
					}
				],
				"line": 123,
				"name": "MarkdownSettings"
			},
			{
				"line": 137,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 138,
						"name": "none"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 139,
						"name": "keepLineBreaks"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 140,
						"name": "backtickCodeBlocks"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "4",
						"line": 141,
						"name": "noInlineHtml"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "32",
						"line": 144,
						"name": "tables"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "64",
						"line": 145,
						"name": "attributes"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 146,
						"name": "vanillaMarkdown"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "39",
						"line": 147,
						"name": "forumDefault"
					}
				],
				"name": "MarkdownFlags",
				"baseDeco": "i"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 151,
						"kind": "variable",
						"originalType": "size_t",
						"char": 9,
						"name": "headingLevel",
						"deco": "m",
						"offset": 0
					},
					{
						"line": 152,
						"kind": "variable",
						"char": 9,
						"name": "caption",
						"deco": "Aya",
						"offset": 8
					},
					{
						"line": 153,
						"kind": "variable",
						"char": 9,
						"name": "anchor",
						"deco": "Aya",
						"offset": 24
					},
					{
						"line": 154,
						"kind": "variable",
						"char": 12,
						"name": "subSections",
						"deco": "AS4vibe10textfilter8markdown7Section",
						"offset": 40
					}
				],
				"line": 150,
				"name": "Section"
			},
			{
				"constraint": "isInputRange!R && is(typeof(R.init.front) == dchar)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 1354,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "R",
								"name": "text"
							}
						],
						"line": 1354,
						"kind": "function",
						"char": 6,
						"name": "asSlug",
						"type": "(R text)",
						"endchar": 1,
						"endline": 1410
					}
				],
				"name": "asSlug",
				"comment": "\tGenerates an identifier suitable to use as within a URL.\n\n\tThe resulting string will contain only ASCII lower case alphabetic or\n\tnumeric characters, as well as dashes (-). Every sequence of\n\tnon-alphanumeric characters will be replaced by a single dash. No dashes\n\twill be at either the front or the back of the result string.\n"
			}
		],
		"comment": "\tMarkdown parser implementation\n\n\tCopyright: © 2012-2019 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.textfilter.markdown"
	},
	{
		"kind": "module",
		"file": "textfilter/vibe/textfilter/urlencode.d",
		"members": [
			{
				"constraint": "is(T[] : const(char)[])",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 23,
				"kind": "template",
				"char": 5,
				"members": [
					{
						"parameters": [
							{
								"type": "T[]",
								"name": "str"
							},
							{
								"type": "const(char)[]",
								"default": "null",
								"name": "allowed_chars"
							}
						],
						"line": 23,
						"kind": "function",
						"char": 5,
						"name": "urlEncode",
						"type": "T[](T[] str, const(char)[] allowed_chars = null)",
						"endchar": 1,
						"endline": 28
					}
				],
				"name": "urlEncode",
				"comment": " Returns:\n   the URL encoded version of a given string, in a newly-allocated string.\n"
			},
			{
				"parameters": [
					{
						"deco": "Axa",
						"name": "str"
					},
					{
						"deco": "Axa",
						"default": "null",
						"name": "reserved_chars"
					}
				],
				"line": 52,
				"kind": "function",
				"char": 6,
				"name": "isURLEncoded",
				"deco": "FNfAxaQdZb",
				"endchar": 1,
				"endline": 78,
				"comment": " Checks whether a given string has valid URL encoding.\n"
			},
			{
				"constraint": "is(T[] : const(char)[])",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 90,
				"kind": "template",
				"char": 5,
				"members": [
					{
						"parameters": [
							{
								"type": "T[]",
								"name": "str"
							}
						],
						"line": 90,
						"kind": "function",
						"char": 5,
						"name": "urlDecode",
						"type": "T[](T[] str)",
						"endchar": 1,
						"endline": 96
					}
				],
				"name": "urlDecode",
				"comment": " Returns the decoded version of a given URL encoded string.\n"
			},
			{
				"constraint": "is(T[] : const(char)[])",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 106,
				"kind": "template",
				"char": 5,
				"members": [
					{
						"parameters": [
							{
								"type": "T[]",
								"name": "str"
							},
							{
								"type": "const(char)[]",
								"default": "null",
								"name": "allowed_chars"
							}
						],
						"line": 106,
						"kind": "function",
						"char": 5,
						"name": "formEncode",
						"type": "T[](T[] str, const(char)[] allowed_chars = null)",
						"endchar": 1,
						"endline": 111
					}
				],
				"name": "formEncode",
				"comment": " Returns the form encoded version of a given string.\n\n\tForm encoding is the same as normal URL encoding, except that\n\tspaces are replaced by plus characters.\n\n\tNote that newlines should always be represented as \\r\\n sequences\n\taccording to the HTTP standard.\n"
			},
			{
				"constraint": "is(T[] : const(char)[])",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 118,
				"kind": "template",
				"char": 5,
				"members": [
					{
						"parameters": [
							{
								"type": "T[]",
								"name": "str"
							}
						],
						"line": 118,
						"kind": "function",
						"char": 5,
						"name": "formDecode",
						"type": "T[](T[] str)",
						"endchar": 1,
						"endline": 124
					}
				],
				"name": "formDecode",
				"comment": " Returns the decoded version of a form encoded string.\n\n\tForm encoding is the same as normal URL encoding, except that\n\tspaces are replaced by plus characters.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 128,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "const(char)[]",
								"name": "str"
							},
							{
								"type": "const(char)[]",
								"default": "null",
								"name": "allowed_chars"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "form_encoding"
							}
						],
						"line": 128,
						"kind": "function",
						"char": 6,
						"name": "filterURLEncode",
						"type": "void(ref R dst, const(char)[] str, const(char)[] allowed_chars = null, bool form_encoding = false)",
						"endchar": 1,
						"endline": 158
					}
				],
				"name": "filterURLEncode",
				"comment": " Writes the URL encoded version of the given string to an output range.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 163,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "const(char)[]",
								"name": "str"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "form_encoding"
							}
						],
						"line": 163,
						"kind": "function",
						"char": 6,
						"name": "filterURLDecode",
						"type": "void(ref R dst, const(char)[] str, bool form_encoding = false)",
						"endchar": 1,
						"endline": 188
					}
				],
				"name": "filterURLDecode",
				"comment": " Writes the decoded version of the given URL encoded string to an output range.\n"
			}
		],
		"comment": "\tURL-encoding implementation\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n",
		"name": "vibe.textfilter.urlencode"
	},
	{
		"kind": "module",
		"file": "tls/openssl_version.d",
		"members": [
			{
				"storageClass": [
					"enum"
				],
				"line": 2,
				"kind": "variable",
				"char": 6,
				"name": "OPENSSL_VERSION",
				"deco": "Aya",
				"init": "\"1.1.1\""
			}
		],
		"name": "openssl_version"
	},
	{
		"kind": "module",
		"file": "tls/vibe/stream/botan.d",
		"members": [
			{
				"kind": "class",
				"char": 1,
				"members": [
					{
						"kind": "variable",
						"type": "InterfaceProxy!Stream",
						"char": 25,
						"line": 38,
						"name": "m_stream"
					},
					{
						"kind": "variable",
						"type": "TLSBlockingChannel",
						"char": 22,
						"line": 39,
						"name": "m_tlsChannel"
					},
					{
						"kind": "variable",
						"type": "BotanTLSContext",
						"char": 19,
						"line": 40,
						"name": "m_ctx"
					},
					{
						"kind": "variable",
						"type": "OnAlert",
						"char": 11,
						"line": 42,
						"name": "m_alertCB"
					},
					{
						"kind": "variable",
						"type": "OnHandshakeComplete",
						"char": 23,
						"line": 43,
						"name": "m_handshakeComplete"
					},
					{
						"kind": "variable",
						"type": "TLSCiphersuite",
						"char": 18,
						"line": 44,
						"name": "m_cipher"
					},
					{
						"kind": "variable",
						"type": "TLSProtocolVersion",
						"char": 22,
						"line": 45,
						"name": "m_ver"
					},
					{
						"kind": "variable",
						"type": "SysTime",
						"char": 11,
						"line": 46,
						"name": "m_session_age"
					},
					{
						"kind": "variable",
						"type": "X509Certificate",
						"char": 19,
						"line": 47,
						"name": "m_peer_cert"
					},
					{
						"kind": "variable",
						"type": "TLSCertificateInformation",
						"char": 29,
						"line": 48,
						"name": "m_cert_compat"
					},
					{
						"kind": "variable",
						"type": "ubyte[]",
						"char": 11,
						"line": 49,
						"name": "m_sess_id"
					},
					{
						"kind": "variable",
						"type": "Exception",
						"char": 13,
						"line": 50,
						"name": "m_ex"
					},
					{
						"line": 54,
						"kind": "function",
						"char": 20,
						"name": "started",
						"type": "const @property SysTime()",
						"endchar": 60,
						"endline": 54,
						"comment": "Returns the date/time the session was started\n"
					},
					{
						"line": 57,
						"kind": "function",
						"char": 27,
						"name": "sessionId",
						"type": "@property const(ubyte[])()",
						"endchar": 59,
						"endline": 57,
						"comment": "Get the session ID\n"
					},
					{
						"line": 60,
						"kind": "function",
						"char": 35,
						"name": "x509Certificate",
						"type": "const @property @system const(X509Certificate)()",
						"endchar": 89,
						"endline": 60,
						"comment": "Returns the remote public certificate from the chain\n"
					},
					{
						"line": 63,
						"kind": "function",
						"char": 31,
						"name": "protocol",
						"type": "const @property TLSProtocolVersion()",
						"endchar": 64,
						"endline": 63,
						"comment": "Returns the negotiated version of the TLS Protocol\n"
					},
					{
						"line": 66,
						"kind": "function",
						"char": 27,
						"name": "cipher",
						"type": "const @property TLSCiphersuite()",
						"endchar": 61,
						"endline": 66,
						"comment": "Returns the complete ciphersuite details from the negotiated TLS connection\n"
					},
					{
						"line": 68,
						"kind": "function",
						"char": 19,
						"name": "alpn",
						"type": "const @property @trusted string()",
						"endchar": 106,
						"endline": 68
					},
					{
						"line": 70,
						"kind": "function",
						"char": 38,
						"name": "peerCertificate",
						"type": "@property TLSCertificateInformation()",
						"endchar": 2,
						"endline": 78
					},
					{
						"parameters": [
							{
								"type": "InterfaceProxy!Stream",
								"name": "underlying"
							},
							{
								"type": "BotanTLSContext",
								"name": "ctx"
							},
							{
								"type": "void delegate(in TLSAlert alert, in ubyte[] ub)",
								"name": "alert_cb"
							},
							{
								"type": "bool delegate(in TLSSession session)",
								"name": "hs_cb"
							},
							{
								"type": "string",
								"default": "null",
								"name": "peer_name"
							},
							{
								"type": "NetworkAddress",
								"default": "NetworkAddress.init",
								"name": "peer_address"
							}
						],
						"line": 81,
						"kind": "constructor",
						"char": 2,
						"name": "this",
						"type": "@trusted (InterfaceProxy!Stream underlying, BotanTLSContext ctx, void delegate(in TLSAlert alert, in ubyte[] ub) alert_cb, bool delegate(in TLSSession session) hs_cb, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
						"endchar": 2,
						"endline": 100
					},
					{
						"parameters": [
							{
								"type": "InterfaceProxy!Stream",
								"name": "underlying"
							},
							{
								"type": "BotanTLSContext",
								"name": "ctx"
							},
							{
								"type": "TLSStreamState",
								"name": "state"
							},
							{
								"type": "string",
								"default": "null",
								"name": "peer_name"
							},
							{
								"type": "NetworkAddress",
								"default": "NetworkAddress.init",
								"name": "peer_address"
							}
						],
						"line": 103,
						"kind": "constructor",
						"char": 2,
						"name": "this",
						"type": "@trusted (InterfaceProxy!Stream underlying, BotanTLSContext ctx, TLSStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
						"endchar": 2,
						"endline": 129
					},
					{
						"storageClass": [
							"@trusted"
						],
						"line": 131,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"endchar": 2,
						"endline": 136
					},
					{
						"line": 138,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"type": "void()",
						"endchar": 2,
						"endline": 142
					},
					{
						"line": 144,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"type": "void()",
						"endchar": 2,
						"endline": 155
					},
					{
						"parameters": [
							{
								"type": "ubyte[]",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"type": "IOMode"
							}
						],
						"line": 157,
						"kind": "function",
						"char": 9,
						"name": "read",
						"type": "size_t(scope ubyte[] dst, IOMode)",
						"endchar": 2,
						"endline": 164
					},
					{
						"kind": "alias",
						"type": "Stream.read",
						"char": 2,
						"line": 166,
						"name": "read"
					},
					{
						"parameters": [
							{
								"type": "ubyte[]",
								"name": "buf"
							}
						],
						"line": 168,
						"kind": "function",
						"char": 10,
						"name": "readChunk",
						"type": "ubyte[](ubyte[] buf)",
						"endchar": 2,
						"endline": 174
					},
					{
						"parameters": [
							{
								"type": "ubyte[]",
								"storageClass": [
									"in"
								],
								"name": "src"
							},
							{
								"type": "IOMode"
							}
						],
						"line": 176,
						"kind": "function",
						"char": 9,
						"name": "write",
						"type": "size_t(in ubyte[] src, IOMode)",
						"endchar": 2,
						"endline": 183
					},
					{
						"kind": "alias",
						"type": "Stream.write",
						"char": 2,
						"line": 185,
						"name": "write"
					},
					{
						"line": 187,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"type": "@property bool()",
						"endchar": 2,
						"endline": 191
					},
					{
						"line": 193,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"type": "@property ulong()",
						"endchar": 2,
						"endline": 203
					},
					{
						"line": 205,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"type": "@property bool()",
						"endchar": 2,
						"endline": 212
					},
					{
						"line": 214,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"type": "const(ubyte)[]()",
						"endchar": 2,
						"endline": 221
					},
					{
						"parameters": [
							{
								"type": "OnAlert",
								"name": "alert_cb"
							}
						],
						"line": 223,
						"kind": "function",
						"char": 7,
						"name": "setAlertCallback",
						"type": "@system void(OnAlert alert_cb)",
						"endchar": 2,
						"endline": 227
					},
					{
						"parameters": [
							{
								"type": "OnHandshakeComplete",
								"name": "hs_cb"
							}
						],
						"line": 229,
						"kind": "function",
						"char": 7,
						"name": "setHandshakeCallback",
						"type": "@system void(OnHandshakeComplete hs_cb)",
						"endchar": 2,
						"endline": 233
					},
					{
						"line": 235,
						"kind": "function",
						"char": 15,
						"name": "processException",
						"type": "@safe void()",
						"endchar": 2,
						"endline": 241
					},
					{
						"parameters": [
							{
								"type": "TLSAlert",
								"storageClass": [
									"in"
								],
								"name": "alert"
							},
							{
								"type": "ubyte[]",
								"storageClass": [
									"in"
								],
								"name": "data"
							}
						],
						"line": 243,
						"kind": "function",
						"char": 15,
						"name": "onAlert",
						"type": "@trusted void(in TLSAlert alert, in ubyte[] data)",
						"endchar": 2,
						"endline": 249
					},
					{
						"parameters": [
							{
								"type": "TLSSession",
								"storageClass": [
									"in"
								],
								"name": "session"
							}
						],
						"line": 251,
						"kind": "function",
						"char": 15,
						"name": "onHandhsakeComplete",
						"type": "@trusted bool(in TLSSession session)",
						"endchar": 2,
						"endline": 262
					},
					{
						"parameters": [
							{
								"type": "ubyte[]",
								"name": "buf"
							}
						],
						"line": 264,
						"kind": "function",
						"char": 18,
						"name": "onRead",
						"type": "ubyte[](ubyte[] buf)",
						"endchar": 2,
						"endline": 278
					},
					{
						"parameters": [
							{
								"type": "ubyte[]",
								"storageClass": [
									"in"
								],
								"name": "src"
							}
						],
						"line": 280,
						"kind": "function",
						"char": 15,
						"name": "onWrite",
						"type": "void(in ubyte[] src)",
						"endchar": 2,
						"endline": 283
					}
				],
				"line": 33,
				"name": "BotanTLSStream"
			},
			{
				"kind": "class",
				"char": 1,
				"members": [
					{
						"kind": "variable",
						"type": "TLSSessionManager",
						"char": 21,
						"line": 288,
						"name": "m_sessionManager"
					},
					{
						"kind": "variable",
						"type": "TLSPolicy",
						"char": 13,
						"line": 289,
						"name": "m_policy"
					},
					{
						"kind": "variable",
						"type": "TLSCredentialsManager",
						"char": 25,
						"line": 290,
						"name": "m_credentials"
					},
					{
						"kind": "variable",
						"type": "TLSContextKind",
						"char": 18,
						"line": 291,
						"name": "m_kind"
					},
					{
						"kind": "variable",
						"type": "AutoSeededRNG",
						"char": 17,
						"line": 292,
						"name": "m_rng"
					},
					{
						"kind": "variable",
						"type": "TLSProtocolVersion",
						"char": 22,
						"line": 293,
						"name": "m_offer_version"
					},
					{
						"kind": "variable",
						"type": "TLSServerNameCallback",
						"char": 25,
						"line": 294,
						"name": "m_sniCallback"
					},
					{
						"kind": "variable",
						"type": "TLSALPNCallback",
						"char": 19,
						"line": 295,
						"name": "m_serverCb"
					},
					{
						"kind": "variable",
						"type": "Vector!string",
						"char": 17,
						"line": 296,
						"name": "m_clientOffers"
					},
					{
						"kind": "variable",
						"deco": "b",
						"char": 8,
						"line": 297,
						"name": "m_is_datagram"
					},
					{
						"kind": "variable",
						"deco": "b",
						"char": 8,
						"line": 298,
						"name": "m_certChecked"
					},
					{
						"parameters": [
							{
								"type": "TLSContextKind",
								"name": "kind"
							},
							{
								"type": "TLSCredentialsManager",
								"default": "null",
								"name": "credentials"
							},
							{
								"type": "TLSPolicy",
								"default": "null",
								"name": "policy"
							},
							{
								"type": "TLSSessionManager",
								"default": "null",
								"name": "session_manager"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "is_datagram"
							}
						],
						"line": 301,
						"kind": "constructor",
						"char": 2,
						"name": "this",
						"type": "@trusted (TLSContextKind kind, TLSCredentialsManager credentials = null, TLSPolicy policy = null, TLSSessionManager session_manager = null, bool is_datagram = false)",
						"endchar": 2,
						"endline": 329
					},
					{
						"line": 332,
						"kind": "function",
						"char": 27,
						"name": "kind",
						"type": "const @property TLSContextKind()",
						"endchar": 2,
						"endline": 334,
						"comment": "The kind of TLS context (client/server)\n"
					},
					{
						"parameters": [
							{
								"type": "TLSProtocolVersion",
								"name": "ver"
							}
						],
						"line": 337,
						"kind": "function",
						"char": 17,
						"name": "defaultProtocolOffer",
						"type": "@property void(TLSProtocolVersion ver)",
						"endchar": 87,
						"endline": 337,
						"comment": "Used by clients to indicate protocol preference, use TLSPolicy to restrict the protocol versions\n"
					},
					{
						"line": 339,
						"kind": "function",
						"char": 31,
						"name": "defaultProtocolOffer",
						"type": "@property TLSProtocolVersion()",
						"endchar": 80,
						"endline": 339,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"type": "TLSServerNameCallback",
								"name": "callback"
							}
						],
						"line": 341,
						"kind": "function",
						"char": 17,
						"name": "sniCallback",
						"type": "@property void(TLSServerNameCallback callback)",
						"endchar": 2,
						"endline": 344
					},
					{
						"line": 345,
						"kind": "function",
						"char": 41,
						"name": "sniCallback",
						"type": "inout @property inout(TLSServerNameCallback)()",
						"endchar": 85,
						"endline": 345
					},
					{
						"parameters": [
							{
								"type": "TLSALPNCallback",
								"name": "alpn_chooser"
							}
						],
						"line": 348,
						"kind": "function",
						"char": 17,
						"name": "alpnCallback",
						"type": "@property void(TLSALPNCallback alpn_chooser)",
						"endchar": 2,
						"endline": 351,
						"comment": "Callback function invoked by server to choose alpn\n"
					},
					{
						"line": 354,
						"kind": "function",
						"char": 28,
						"name": "alpnCallback",
						"type": "const @property TLSALPNCallback()",
						"endchar": 70,
						"endline": 354,
						"comment": "Get the current ALPN callback function\n"
					},
					{
						"parameters": [
							{
								"type": "string[]",
								"name": "alpn_list"
							}
						],
						"line": 357,
						"kind": "function",
						"char": 17,
						"name": "setClientALPN",
						"type": "@property void(string[] alpn_list)",
						"endchar": 2,
						"endline": 362,
						"comment": "Invoked by client to offer alpn, all strings are copied on the GC\n"
					},
					{
						"parameters": [
							{
								"type": "InterfaceProxy!Stream",
								"name": "underlying"
							},
							{
								"type": "TLSStreamState",
								"name": "state"
							},
							{
								"type": "string",
								"default": "null",
								"name": "peer_name"
							},
							{
								"type": "NetworkAddress",
								"default": "NetworkAddress.init",
								"name": "peer_address"
							}
						],
						"line": 366,
						"kind": "function",
						"char": 12,
						"name": "createStream",
						"type": "TLSStream(InterfaceProxy!Stream underlying, TLSStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
						"endchar": 2,
						"endline": 371,
						"comment": " Creates a new stream associated to this context.\n"
					},
					{
						"parameters": [
							{
								"type": "TLSPeerValidationMode",
								"name": "mode"
							}
						],
						"line": 379,
						"kind": "function",
						"char": 17,
						"name": "peerValidationMode",
						"type": "@property void(TLSPeerValidationMode mode)",
						"endchar": 2,
						"endline": 385,
						"comment": " Specifies the validation level of remote peers.\n\n\t\tThe default mode for TLSContextKind.client is\n\t\tTLSPeerValidationMode.trustedCert and the default for\n\t\tTLSContextKind.server is TLSPeerValidationMode.none.\n"
					},
					{
						"line": 387,
						"kind": "function",
						"char": 34,
						"name": "peerValidationMode",
						"type": "const @property TLSPeerValidationMode()",
						"endchar": 2,
						"endline": 392,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"type": "TLSPeerValidationCallback",
								"name": "callback"
							}
						],
						"line": 398,
						"kind": "function",
						"char": 17,
						"name": "peerValidationCallback",
						"type": "@property void(TLSPeerValidationCallback callback)",
						"endchar": 202,
						"endline": 398,
						"comment": " An optional user callback for peer validation.\n\n\t\tPeer validation callback is unused in Botan. Specify a custom TLS Policy to handle peer certificate data.\n"
					},
					{
						"line": 400,
						"kind": "function",
						"char": 45,
						"name": "peerValidationCallback",
						"type": "inout @property inout(TLSPeerValidationCallback)()",
						"endchar": 117,
						"endline": 400,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "val"
							}
						],
						"line": 409,
						"kind": "function",
						"char": 17,
						"name": "maxCertChainLength",
						"type": "@property void(int val)",
						"endchar": 2,
						"endline": 416,
						"comment": " The maximum length of an accepted certificate chain.\n\n\t\tAny certificate chain longer than this will result in the TLS\n\t\tnegitiation failing.\n\n\t\tThe default value is 9.\n"
					},
					{
						"line": 418,
						"kind": "function",
						"char": 16,
						"name": "maxCertChainLength",
						"type": "const @property int()",
						"endchar": 2,
						"endline": 423,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"type": "string",
								"default": "null",
								"name": "list"
							}
						],
						"line": 425,
						"kind": "function",
						"char": 7,
						"name": "setCipherList",
						"type": "void(string list = null)",
						"endchar": 101,
						"endline": 425
					},
					{
						"parameters": [
							{
								"type": "string",
								"default": "null",
								"name": "pem_file"
							}
						],
						"line": 435,
						"kind": "function",
						"char": 7,
						"name": "setDHParams",
						"type": "void(string pem_file = null)",
						"endchar": 101,
						"endline": 435,
						"comment": " Set params to use for DH cipher.\n\n By default the 2048-bit prime from RFC 3526 is used.\n\n Params:\n pem_file = Path to a PEM file containing the DH parameters. Calling\n    this function without argument will restore the default.\n"
					},
					{
						"parameters": [
							{
								"type": "string",
								"default": "null",
								"name": "curve"
							}
						],
						"line": 446,
						"kind": "function",
						"char": 7,
						"name": "setECDHCurve",
						"type": "void(string curve = null)",
						"endchar": 99,
						"endline": 446,
						"comment": " Set the elliptic curve to use for ECDH cipher.\n\n By default a curve is either chosen automatically or  prime256v1 is used.\n\n Params:\n curve = The short name of the elliptic curve to use. Calling this\n    function without argument will restore the default.\n\n"
					},
					{
						"parameters": [
							{
								"type": "string",
								"name": "path"
							}
						],
						"line": 449,
						"kind": "function",
						"char": 7,
						"name": "useCertificateChainFile",
						"type": "void(string path)",
						"endchar": 2,
						"endline": 456,
						"comment": "Sets a certificate file to use for authenticating to the remote peer\n"
					},
					{
						"parameters": [
							{
								"type": "string",
								"name": "path"
							}
						],
						"line": 461,
						"kind": "function",
						"char": 7,
						"name": "usePrivateKeyFile",
						"type": "void(string path)",
						"endchar": 2,
						"endline": 468,
						"comment": "Sets the private key to use for authenticating to the remote peer based\non the configured certificate chain file.\ntodo: Use passphrase?\n"
					},
					{
						"parameters": [
							{
								"type": "string",
								"name": "path"
							}
						],
						"line": 479,
						"kind": "function",
						"char": 7,
						"name": "useTrustedCertificateFile",
						"type": "void(string path)",
						"endchar": 2,
						"endline": 488,
						"comment": " Sets the list of trusted certificates for verifying peer certificates.\n\n\t\tIf this is a server context, this also entails that the given\n\t\tcertificates are advertised to connecting clients during handshake.\n\n\t\tOn Linux, the system's root certificate authority list is usually\n\t\tfound at \"/etc/ssl/certs/ca-certificates.crt\",\n\t\t\"/etc/pki/tls/certs/ca-bundle.crt\", or \"/etc/ssl/ca-bundle.pem\".\n"
					},
					{
						"parameters": [
							{
								"type": "string",
								"name": "hostname"
							}
						],
						"line": 490,
						"kind": "function",
						"char": 31,
						"name": "sniHandler",
						"type": "SNIContextSwitchInfo(string hostname)",
						"endchar": 2,
						"endline": 501
					},
					{
						"parameters": [
							{
								"type": "Vector!string",
								"storageClass": [
									"in"
								],
								"name": "offers"
							}
						],
						"line": 503,
						"kind": "function",
						"char": 17,
						"name": "nextProtocolHandler",
						"type": "string(in Vector!string offers)",
						"endchar": 2,
						"endline": 508
					},
					{
						"parameters": [
							{
								"type": "string",
								"name": "hostname"
							}
						],
						"line": 510,
						"kind": "function",
						"char": 26,
						"name": "onSNI",
						"type": "BotanTLSContext(string hostname)",
						"endchar": 2,
						"endline": 522
					},
					{
						"line": 524,
						"kind": "function",
						"char": 15,
						"name": "checkCert",
						"type": "void()",
						"endchar": 2,
						"endline": 544
					}
				],
				"line": 286,
				"name": "BotanTLSContext"
			},
			{
				"kind": "class",
				"line": 550,
				"char": 9,
				"members": [
					{
						"line": 553,
						"kind": "variable",
						"char": 22,
						"name": "m_min_ver",
						"init": "TLSProtocolVersion.TLS_V10",
						"type": "TLSProtocolVersion"
					},
					{
						"line": 554,
						"kind": "variable",
						"char": 7,
						"name": "m_min_dh_group_size",
						"deco": "i",
						"init": "1024"
					},
					{
						"kind": "variable",
						"type": "Vector!TLSCiphersuite",
						"char": 25,
						"line": 555,
						"name": "m_pri_ciphersuites"
					},
					{
						"kind": "variable",
						"type": "Vector!string",
						"char": 17,
						"line": 556,
						"name": "m_pri_ecc_curves"
					},
					{
						"line": 557,
						"kind": "variable",
						"char": 12,
						"name": "m_session_lifetime",
						"init": "24.hours",
						"type": "Duration"
					},
					{
						"kind": "variable",
						"deco": "b",
						"char": 8,
						"line": 558,
						"name": "m_pri_ciphers_exclusive"
					},
					{
						"kind": "variable",
						"deco": "b",
						"char": 8,
						"line": 559,
						"name": "m_pri_curves_exclusive"
					},
					{
						"parameters": [
							{
								"type": "TLSProtocolVersion",
								"name": "ver"
							}
						],
						"line": 563,
						"kind": "function",
						"char": 17,
						"name": "minProtocolVersion",
						"type": "@property void(TLSProtocolVersion ver)",
						"endchar": 79,
						"endline": 563,
						"comment": "Sets the minimum acceptable protocol version\n"
					},
					{
						"line": 566,
						"kind": "function",
						"char": 31,
						"name": "minProtocolVersion",
						"type": "@property TLSProtocolVersion()",
						"endchar": 72,
						"endline": 566,
						"comment": "Get the minimum acceptable protocol version\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "sz"
							}
						],
						"line": 568,
						"kind": "function",
						"char": 17,
						"name": "minDHGroupSize",
						"type": "@property void(int sz)",
						"endchar": 68,
						"endline": 568
					},
					{
						"line": 569,
						"kind": "function",
						"char": 16,
						"name": "minDHGroupSize",
						"type": "@property int()",
						"endchar": 63,
						"endline": 569
					},
					{
						"parameters": [
							{
								"type": "TLSCiphersuite[]",
								"name": "suites"
							}
						],
						"line": 572,
						"kind": "function",
						"char": 7,
						"name": "addPriorityCiphersuites",
						"type": "void(TLSCiphersuite[] suites)",
						"endchar": 88,
						"endline": 572,
						"comment": "Add a cipher suite to the priority ciphers with lowest ordering value\n"
					},
					{
						"line": 574,
						"kind": "function",
						"char": 29,
						"name": "ciphers",
						"type": "@property TLSCiphersuite[]()",
						"endchar": 70,
						"endline": 574
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "b"
							}
						],
						"line": 577,
						"kind": "function",
						"char": 17,
						"name": "priorityCiphersOnly",
						"type": "@property void(bool b)",
						"endchar": 76,
						"endline": 577,
						"comment": "Set to true to use excuslively priority ciphers passed through \"addCiphersuites\"\n"
					},
					{
						"line": 578,
						"kind": "function",
						"char": 17,
						"name": "priorityCiphersOnly",
						"type": "@property bool()",
						"endchar": 73,
						"endline": 578
					},
					{
						"parameters": [
							{
								"type": "string[]",
								"name": "curves"
							}
						],
						"line": 580,
						"kind": "function",
						"char": 7,
						"name": "addPriorityCurves",
						"type": "void(string[] curves)",
						"endchar": 2,
						"endline": 582
					},
					{
						"line": 583,
						"kind": "function",
						"char": 21,
						"name": "priorityCurves",
						"type": "@property string[]()",
						"endchar": 67,
						"endline": 583
					},
					{
						"parameters": [
							{
								"deco": "b",
								"name": "b"
							}
						],
						"line": 586,
						"kind": "function",
						"char": 17,
						"name": "priorityCurvesOnly",
						"type": "@property void(bool b)",
						"endchar": 74,
						"endline": 586,
						"comment": "Uses only priority curves passed through \"add\"\n"
					},
					{
						"line": 587,
						"kind": "function",
						"char": 17,
						"name": "priorityCurvesOnly",
						"type": "@property bool()",
						"endchar": 71,
						"endline": 587
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "Vector!string",
								"storageClass": [
									"in"
								],
								"name": "curve_names"
							}
						],
						"line": 589,
						"kind": "function",
						"char": 18,
						"name": "chooseCurve",
						"type": "const string(in Vector!string curve_names)",
						"endchar": 2,
						"endline": 600
					},
					{
						"storageClass": [
							"override"
						],
						"line": 602,
						"kind": "function",
						"char": 25,
						"name": "allowedEccCurves",
						"type": "const Vector!string()",
						"endchar": 2,
						"endline": 609
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "TLSProtocolVersion",
								"name": "_version"
							},
							{
								"deco": "b",
								"name": "have_srp"
							}
						],
						"line": 611,
						"kind": "function",
						"char": 25,
						"name": "ciphersuiteList",
						"type": "const Vector!ushort(TLSProtocolVersion _version, bool have_srp)",
						"endchar": 2,
						"endline": 624
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "TLSProtocolVersion",
								"name": "_version"
							}
						],
						"line": 626,
						"kind": "function",
						"char": 16,
						"name": "acceptableProtocolVersion",
						"type": "const bool(TLSProtocolVersion _version)",
						"endchar": 2,
						"endline": 631
					},
					{
						"storageClass": [
							"override"
						],
						"line": 633,
						"kind": "function",
						"char": 20,
						"name": "sessionTicketLifetime",
						"type": "const Duration()",
						"endchar": 2,
						"endline": 635
					},
					{
						"storageClass": [
							"override"
						],
						"line": 637,
						"kind": "function",
						"char": 18,
						"name": "minimumDhGroupSize",
						"type": "const size_t()",
						"endchar": 2,
						"endline": 639
					}
				],
				"comment": " TLS Policy as a settings object\n",
				"name": "CustomTLSPolicy"
			},
			{
				"kind": "class",
				"char": 9,
				"members": [
					{
						"line": 646,
						"kind": "variable",
						"char": 25,
						"name": "m_validationMode",
						"init": "TLSPeerValidationMode.none",
						"type": "TLSPeerValidationMode"
					},
					{
						"line": 647,
						"kind": "variable",
						"char": 7,
						"name": "m_max_cert_chain_length",
						"deco": "i",
						"init": "9"
					},
					{
						"kind": "variable",
						"type": "X509Certificate",
						"char": 19,
						"line": 651,
						"name": "m_server_cert"
					},
					{
						"kind": "variable",
						"type": "X509Certificate",
						"char": 34,
						"line": 651,
						"name": "m_ca_cert"
					},
					{
						"kind": "variable",
						"type": "PrivateKey",
						"char": 14,
						"line": 652,
						"name": "m_key"
					},
					{
						"kind": "variable",
						"type": "Vector!CertificateStore",
						"char": 27,
						"line": 653,
						"name": "m_stores"
					},
					{
						"line": 656,
						"kind": "constructor",
						"char": 2,
						"name": "this",
						"type": "()",
						"endchar": 11,
						"endline": 656
					},
					{
						"parameters": [
							{
								"type": "TLSPeerValidationMode",
								"default": "TLSPeerValidationMode.checkPeer",
								"name": "validation_mode"
							}
						],
						"line": 659,
						"kind": "constructor",
						"char": 2,
						"name": "this",
						"type": "(TLSPeerValidationMode validation_mode = TLSPeerValidationMode.checkPeer)",
						"endchar": 2,
						"endline": 661
					},
					{
						"parameters": [
							{
								"type": "X509Certificate",
								"name": "server_cert"
							},
							{
								"type": "X509Certificate",
								"name": "ca_cert"
							},
							{
								"type": "PrivateKey",
								"name": "server_key"
							}
						],
						"line": 664,
						"kind": "constructor",
						"char": 2,
						"name": "this",
						"type": "(X509Certificate server_cert, X509Certificate ca_cert, PrivateKey server_key)",
						"endchar": 2,
						"endline": 674
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								]
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								]
							}
						],
						"line": 676,
						"kind": "function",
						"char": 35,
						"name": "trustedCertificateAuthorities",
						"type": "Vector!CertificateStore(in string, in string)",
						"endchar": 2,
						"endline": 681
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "Vector!string",
								"storageClass": [
									"const",
									"ref"
								],
								"name": "cert_key_types"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "type"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								]
							}
						],
						"line": 683,
						"kind": "function",
						"char": 34,
						"name": "certChain",
						"type": "Vector!X509Certificate(ref const Vector!string cert_key_types, in string type, in string)",
						"endchar": 2,
						"endline": 705
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "type"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "purported_hostname"
							},
							{
								"type": "Vector!X509Certificate",
								"storageClass": [
									"const",
									"ref"
								],
								"name": "cert_chain"
							}
						],
						"line": 707,
						"kind": "function",
						"char": 16,
						"name": "verifyCertificateChain",
						"type": "void(in string type, in string purported_hostname, ref const Vector!X509Certificate cert_chain)",
						"endchar": 2,
						"endline": 767
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "X509Certificate",
								"storageClass": [
									"in"
								]
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								]
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								]
							}
						],
						"line": 769,
						"kind": "function",
						"char": 22,
						"name": "privateKeyFor",
						"type": "PrivateKey(in X509Certificate, in string, in string)",
						"endchar": 2,
						"endline": 772
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "cert_key_type"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "type"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "context"
							}
						],
						"line": 775,
						"kind": "function",
						"char": 34,
						"name": "certChainSingleType",
						"type": "Vector!X509Certificate(in string cert_key_type, in string type, in string context)",
						"endchar": 2,
						"endline": 780
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "type"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "context"
							}
						],
						"line": 782,
						"kind": "function",
						"char": 16,
						"name": "attemptSrp",
						"type": "bool(in string type, in string context)",
						"endchar": 2,
						"endline": 785
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "type"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "context"
							}
						],
						"line": 787,
						"kind": "function",
						"char": 18,
						"name": "srpIdentifier",
						"type": "string(in string type, in string context)",
						"endchar": 2,
						"endline": 790
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "type"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "context"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "identifier"
							}
						],
						"line": 792,
						"kind": "function",
						"char": 18,
						"name": "srpPassword",
						"type": "string(in string type, in string context, in string identifier)",
						"endchar": 2,
						"endline": 795
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "type"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "context"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "identifier"
							},
							{
								"type": "string",
								"storageClass": [
									"ref"
								],
								"name": "group_name"
							},
							{
								"type": "BigInt",
								"storageClass": [
									"ref"
								],
								"name": "verifier"
							},
							{
								"type": "Vector!ubyte",
								"storageClass": [
									"ref"
								],
								"name": "salt"
							},
							{
								"deco": "b",
								"name": "generate_fake_on_unknown"
							}
						],
						"line": 797,
						"kind": "function",
						"char": 16,
						"name": "srpVerifier",
						"type": "bool(in string type, in string context, in string identifier, ref string group_name, ref BigInt verifier, ref Vector!ubyte salt, bool generate_fake_on_unknown)",
						"endchar": 2,
						"endline": 806
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "type"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "context"
							}
						],
						"line": 808,
						"kind": "function",
						"char": 18,
						"name": "pskIdentityHint",
						"type": "string(in string type, in string context)",
						"endchar": 2,
						"endline": 811
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "type"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "context"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "identity_hint"
							}
						],
						"line": 813,
						"kind": "function",
						"char": 18,
						"name": "pskIdentity",
						"type": "string(in string type, in string context, in string identity_hint)",
						"endchar": 2,
						"endline": 816
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "type"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "context"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "identity"
							}
						],
						"line": 818,
						"kind": "function",
						"char": 24,
						"name": "psk",
						"type": "SymmetricKey(in string type, in string context, in string identity)",
						"endchar": 2,
						"endline": 821
					},
					{
						"storageClass": [
							"override"
						],
						"line": 823,
						"kind": "function",
						"char": 16,
						"name": "hasPsk",
						"type": "bool()",
						"endchar": 2,
						"endline": 826
					}
				],
				"line": 643,
				"name": "CustomTLSCredentials"
			},
			{
				"line": 829,
				"kind": "function",
				"char": 30,
				"name": "createCreds",
				"type": "CustomTLSCredentials()",
				"endchar": 1,
				"endline": 868
			},
			{
				"storageClass": [
					"__gshared"
				],
				"line": 871,
				"kind": "variable",
				"char": 28,
				"name": "gs_default_policy",
				"type": "CustomTLSPolicy"
			}
		],
		"comment": "\tBotan TLS implementation\n\tCopyright: © 2015 RejectedSoftware e.K., GlobecSys Inc\n\tAuthors: Sönke Ludwig, Etienne Cimon\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
		"name": "vibe.stream.botan"
	},
	{
		"kind": "module",
		"file": "tls/vibe/stream/openssl.d",
		"members": [
			{
				"line": 52,
				"kind": "import",
				"char": 15,
				"selective": [
					"OPENSSL_VERSION"
				],
				"name": "openssl_version",
				"file": "tls/vibe/stream/openssl.d-mixin-52"
			},
			{
				"kind": "import",
				"char": 15,
				"selective": [
					"OPENSSL_VERSION"
				],
				"line": 52,
				"name": "openssl_version"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 47,
				"kind": "variable",
				"char": 7,
				"name": "OPENSSL_VERSION",
				"init": "\"0.0.0\"",
				"file": "tls/vibe/stream/openssl.d"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 45,
				"kind": "variable",
				"char": 7,
				"name": "OPENSSL_VERSION",
				"init": "\"0.9.0\""
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 43,
				"kind": "variable",
				"char": 7,
				"name": "OPENSSL_VERSION",
				"init": "\"1.0.0\""
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 41,
				"kind": "variable",
				"char": 7,
				"name": "OPENSSL_VERSION",
				"init": "\"1.1.0\""
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 63,
				"kind": "variable",
				"char": 60,
				"name": "haveECDH",
				"init": "false"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 66,
				"kind": "variable",
				"char": 11,
				"name": "alpn_forced",
				"deco": "b",
				"init": "false"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 65,
				"kind": "variable",
				"char": 29,
				"name": "alpn_forced",
				"init": "true"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 67,
				"kind": "variable",
				"char": 6,
				"name": "haveALPN",
				"deco": "b",
				"init": "false"
			},
			{
				"line": 71,
				"kind": "function",
				"originalType": "extern (C) const(SSL_METHOD)*()",
				"char": 31,
				"name": "TLS_client_method",
				"deco": "UZPxS6deimos7openssl3ssl13ssl_method_st",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 72,
				"name": "SSLv23_client_method"
			},
			{
				"line": 74,
				"kind": "function",
				"originalType": "extern (C) const(SSL_METHOD)*()",
				"char": 31,
				"name": "TLS_server_method",
				"deco": "UZPxS6deimos7openssl3ssl13ssl_method_st",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 75,
				"name": "SSLv23_server_method"
			},
			{
				"line": 78,
				"kind": "function",
				"char": 7,
				"name": "SSL_load_error_strings",
				"deco": "FZv",
				"endchar": 33,
				"endline": 78
			},
			{
				"parameters": [
					{
						"deco": "m",
						"name": "opts"
					},
					{
						"deco": "xPv",
						"name": "settings"
					}
				],
				"line": 80,
				"kind": "function",
				"originalType": "extern (C) int(ulong opts, const void* settings)",
				"char": 17,
				"name": "OPENSSL_init_ssl",
				"deco": "UmxPvZi",
				"linkage": "c"
			},
			{
				"line": 83,
				"kind": "function",
				"char": 6,
				"name": "SSL_library_init",
				"deco": "FZi",
				"endchar": 2,
				"endline": 85
			},
			{
				"line": 88,
				"kind": "function",
				"char": 6,
				"name": "CRYPTO_num_locks",
				"deco": "FZi",
				"endchar": 2,
				"endline": 90
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 92,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "t"
							}
						],
						"line": 92,
						"kind": "function",
						"char": 7,
						"name": "CRYPTO_set_id_callback",
						"type": "void(T t)",
						"endchar": 2,
						"endline": 93
					}
				],
				"name": "CRYPTO_set_id_callback"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 95,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "t"
							}
						],
						"line": 95,
						"kind": "function",
						"char": 7,
						"name": "CRYPTO_set_locking_callback",
						"type": "void(T t)",
						"endchar": 2,
						"endline": 96
					}
				],
				"name": "CRYPTO_set_locking_callback"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "class_index"
					},
					{
						"deco": "l",
						"name": "argl"
					},
					{
						"deco": "Pv",
						"name": "argp"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZi",
						"name": "new_func"
					},
					{
						"deco": "PUPS6deimos7openssl6crypto17crypto_ex_data_stQBrPvilQeZi",
						"name": "dup_func"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZv",
						"name": "free_func"
					}
				],
				"line": 101,
				"kind": "function",
				"originalType": "extern (C) int(int class_index, c_long argl, void* argp, CRYPTO_EX_new* new_func, CRYPTO_EX_dup* dup_func, CRYPTO_EX_free* free_func)",
				"char": 16,
				"name": "CRYPTO_get_ex_new_index",
				"deco": "UilPvPUQeQgPS6deimos7openssl6crypto17crypto_ex_data_stilQCbZiPUQCaQCdQCoilQCtZiPUQDaQDdQCyilQDlZvZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "l",
						"name": "argl"
					},
					{
						"deco": "Pv",
						"name": "argp"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZi",
						"name": "new_func"
					},
					{
						"deco": "PUPS6deimos7openssl6crypto17crypto_ex_data_stQBrPvilQeZi",
						"name": "dup_func"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZv",
						"name": "free_func"
					}
				],
				"line": 105,
				"kind": "function",
				"originalType": "int(c_long argl, void* argp, CRYPTO_EX_new* new_func, CRYPTO_EX_dup* dup_func, CRYPTO_EX_free* free_func)",
				"char": 6,
				"name": "SSL_get_ex_new_index",
				"deco": "FlPvPUQeQgPS6deimos7openssl6crypto17crypto_ex_data_stilQCbZiPUQCaQCdQCoilQCtZiPUQDaQDdQCyilQDlZvZi",
				"endchar": 2,
				"endline": 111
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl2bn9bignum_st",
						"name": "bn"
					}
				],
				"line": 113,
				"kind": "function",
				"originalType": "extern (C) BIGNUM*(BIGNUM* bn)",
				"char": 20,
				"name": "BN_get_rfc3526_prime_2048",
				"deco": "UPS6deimos7openssl2bn9bignum_stZQBf",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 115,
				"name": "get_rfc3526_prime_2048"
			},
			{
				"parameters": [
					{
						"deco": "xPv"
					}
				],
				"line": 118,
				"kind": "function",
				"originalType": "extern (C) int(const void*)",
				"char": 16,
				"name": "OPENSSL_sk_num",
				"deco": "UxPvZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PxS6deimos7openssl5stack8stack_st",
						"name": "p"
					}
				],
				"line": 119,
				"kind": "function",
				"originalType": "extern (C) int(const(_STACK)* p)",
				"char": 16,
				"name": "sk_num",
				"deco": "UPxS6deimos7openssl5stack8stack_stZi",
				"endchar": 69,
				"endline": 119,
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "xPv"
					},
					{
						"deco": "i"
					}
				],
				"line": 122,
				"kind": "function",
				"originalType": "extern (C) void*(const void*, int)",
				"char": 18,
				"name": "OPENSSL_sk_value",
				"deco": "UxPviZPv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PxS6deimos7openssl5stack8stack_st",
						"name": "p"
					},
					{
						"deco": "i",
						"name": "i"
					}
				],
				"line": 123,
				"kind": "function",
				"originalType": "extern (C) void*(const(_STACK)* p, int i)",
				"char": 18,
				"name": "sk_value",
				"deco": "UPxS6deimos7openssl5stack8stack_stiZPv",
				"endchar": 85,
				"endline": 123,
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "i",
						"name": "init_"
					}
				],
				"line": 136,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, int init_)",
				"char": 8,
				"name": "BIO_set_init",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 137,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* bio)",
				"char": 7,
				"name": "BIO_get_init",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "Pv",
						"name": "ptr"
					}
				],
				"line": 138,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, void* ptr)",
				"char": 8,
				"name": "BIO_set_data",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stPvZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 139,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void*(BIO* bio)",
				"char": 9,
				"name": "BIO_get_data",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZPv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "i",
						"name": "shut"
					}
				],
				"line": 140,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, int shut)",
				"char": 8,
				"name": "BIO_set_shutdown",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 141,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* bio)",
				"char": 7,
				"name": "BIO_get_shutdown",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 142,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* b, int flags)",
				"char": 8,
				"name": "BIO_clear_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 143,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* b, int flags)",
				"char": 7,
				"name": "BIO_test_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 144,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* b, int flags)",
				"char": 8,
				"name": "BIO_set_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
				"char": 3,
				"line": 146,
				"name": "BIOMethWriteCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
				"char": 3,
				"line": 147,
				"name": "BIOMethReadCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stilPvZl",
				"char": 3,
				"line": 148,
				"name": "BIOMethCtrlCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
				"char": 3,
				"line": 149,
				"name": "BIOMethCreateCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
				"char": 3,
				"line": 150,
				"name": "BIOMethDestroyCallback"
			},
			{
				"line": 152,
				"kind": "function",
				"char": 7,
				"name": "BIO_get_new_index",
				"deco": "UNbZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "type"
					},
					{
						"deco": "Pxa",
						"name": "name"
					}
				],
				"line": 153,
				"kind": "function",
				"originalType": "nothrow extern (C) BIO_METHOD*(int type, const(char)* name)",
				"char": 15,
				"name": "BIO_meth_new",
				"deco": "UNbiPxaZPS6deimos7openssl3bio13bio_method_st",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					}
				],
				"line": 154,
				"kind": "function",
				"originalType": "nothrow extern (C) void(BIO_METHOD* biom)",
				"char": 8,
				"name": "BIO_meth_free",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
						"name": "cb"
					}
				],
				"line": 155,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethWriteCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_write",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stPxaiZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
						"name": "cb"
					}
				],
				"line": 156,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethReadCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_read",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stPxaiZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stilPvZl",
						"name": "cb"
					}
				],
				"line": 157,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethCtrlCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_ctrl",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stilPvZlZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
						"name": "cb"
					}
				],
				"line": 158,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethCreateCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_create",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
						"name": "cb"
					}
				],
				"line": 159,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethDestroyCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_destroy",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stZiZi",
				"linkage": "c"
			},
			{
				"line": 71,
				"kind": "function",
				"originalType": "extern (C) const(SSL_METHOD)*()",
				"char": 31,
				"name": "TLS_client_method",
				"deco": "UZPxS6deimos7openssl3ssl13ssl_method_st",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 72,
				"name": "SSLv23_client_method"
			},
			{
				"line": 74,
				"kind": "function",
				"originalType": "extern (C) const(SSL_METHOD)*()",
				"char": 31,
				"name": "TLS_server_method",
				"deco": "UZPxS6deimos7openssl3ssl13ssl_method_st",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 75,
				"name": "SSLv23_server_method"
			},
			{
				"line": 78,
				"kind": "function",
				"char": 7,
				"name": "SSL_load_error_strings",
				"deco": "FZv",
				"endchar": 33,
				"endline": 78
			},
			{
				"parameters": [
					{
						"deco": "m",
						"name": "opts"
					},
					{
						"deco": "xPv",
						"name": "settings"
					}
				],
				"line": 80,
				"kind": "function",
				"originalType": "extern (C) int(ulong opts, const void* settings)",
				"char": 17,
				"name": "OPENSSL_init_ssl",
				"deco": "UmxPvZi",
				"linkage": "c"
			},
			{
				"line": 83,
				"kind": "function",
				"char": 6,
				"name": "SSL_library_init",
				"deco": "FZi",
				"endchar": 2,
				"endline": 85
			},
			{
				"line": 88,
				"kind": "function",
				"char": 6,
				"name": "CRYPTO_num_locks",
				"deco": "FZi",
				"endchar": 2,
				"endline": 90
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 92,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "t"
							}
						],
						"line": 92,
						"kind": "function",
						"char": 7,
						"name": "CRYPTO_set_id_callback",
						"type": "void(T t)",
						"endchar": 2,
						"endline": 93
					}
				],
				"name": "CRYPTO_set_id_callback"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 95,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "t"
							}
						],
						"line": 95,
						"kind": "function",
						"char": 7,
						"name": "CRYPTO_set_locking_callback",
						"type": "void(T t)",
						"endchar": 2,
						"endline": 96
					}
				],
				"name": "CRYPTO_set_locking_callback"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "class_index"
					},
					{
						"deco": "l",
						"name": "argl"
					},
					{
						"deco": "Pv",
						"name": "argp"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZi",
						"name": "new_func"
					},
					{
						"deco": "PUPS6deimos7openssl6crypto17crypto_ex_data_stQBrPvilQeZi",
						"name": "dup_func"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZv",
						"name": "free_func"
					}
				],
				"line": 101,
				"kind": "function",
				"originalType": "extern (C) int(int class_index, c_long argl, void* argp, CRYPTO_EX_new* new_func, CRYPTO_EX_dup* dup_func, CRYPTO_EX_free* free_func)",
				"char": 16,
				"name": "CRYPTO_get_ex_new_index",
				"deco": "UilPvPUQeQgPS6deimos7openssl6crypto17crypto_ex_data_stilQCbZiPUQCaQCdQCoilQCtZiPUQDaQDdQCyilQDlZvZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "l",
						"name": "argl"
					},
					{
						"deco": "Pv",
						"name": "argp"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZi",
						"name": "new_func"
					},
					{
						"deco": "PUPS6deimos7openssl6crypto17crypto_ex_data_stQBrPvilQeZi",
						"name": "dup_func"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZv",
						"name": "free_func"
					}
				],
				"line": 105,
				"kind": "function",
				"originalType": "int(c_long argl, void* argp, CRYPTO_EX_new* new_func, CRYPTO_EX_dup* dup_func, CRYPTO_EX_free* free_func)",
				"char": 6,
				"name": "SSL_get_ex_new_index",
				"deco": "FlPvPUQeQgPS6deimos7openssl6crypto17crypto_ex_data_stilQCbZiPUQCaQCdQCoilQCtZiPUQDaQDdQCyilQDlZvZi",
				"endchar": 2,
				"endline": 111
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl2bn9bignum_st",
						"name": "bn"
					}
				],
				"line": 113,
				"kind": "function",
				"originalType": "extern (C) BIGNUM*(BIGNUM* bn)",
				"char": 20,
				"name": "BN_get_rfc3526_prime_2048",
				"deco": "UPS6deimos7openssl2bn9bignum_stZQBf",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 115,
				"name": "get_rfc3526_prime_2048"
			},
			{
				"parameters": [
					{
						"deco": "xPv"
					}
				],
				"line": 118,
				"kind": "function",
				"originalType": "extern (C) int(const void*)",
				"char": 16,
				"name": "OPENSSL_sk_num",
				"deco": "UxPvZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PxS6deimos7openssl5stack8stack_st",
						"name": "p"
					}
				],
				"line": 119,
				"kind": "function",
				"originalType": "extern (C) int(const(_STACK)* p)",
				"char": 16,
				"name": "sk_num",
				"deco": "UPxS6deimos7openssl5stack8stack_stZi",
				"endchar": 69,
				"endline": 119,
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "xPv"
					},
					{
						"deco": "i"
					}
				],
				"line": 122,
				"kind": "function",
				"originalType": "extern (C) void*(const void*, int)",
				"char": 18,
				"name": "OPENSSL_sk_value",
				"deco": "UxPviZPv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PxS6deimos7openssl5stack8stack_st",
						"name": "p"
					},
					{
						"deco": "i",
						"name": "i"
					}
				],
				"line": 123,
				"kind": "function",
				"originalType": "extern (C) void*(const(_STACK)* p, int i)",
				"char": 18,
				"name": "sk_value",
				"deco": "UPxS6deimos7openssl5stack8stack_stiZPv",
				"endchar": 85,
				"endline": 123,
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "i",
						"name": "init_"
					}
				],
				"line": 136,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, int init_)",
				"char": 8,
				"name": "BIO_set_init",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 137,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* bio)",
				"char": 7,
				"name": "BIO_get_init",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "Pv",
						"name": "ptr"
					}
				],
				"line": 138,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, void* ptr)",
				"char": 8,
				"name": "BIO_set_data",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stPvZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 139,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void*(BIO* bio)",
				"char": 9,
				"name": "BIO_get_data",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZPv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "i",
						"name": "shut"
					}
				],
				"line": 140,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, int shut)",
				"char": 8,
				"name": "BIO_set_shutdown",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 141,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* bio)",
				"char": 7,
				"name": "BIO_get_shutdown",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 142,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* b, int flags)",
				"char": 8,
				"name": "BIO_clear_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 143,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* b, int flags)",
				"char": 7,
				"name": "BIO_test_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 144,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* b, int flags)",
				"char": 8,
				"name": "BIO_set_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
				"char": 3,
				"line": 146,
				"name": "BIOMethWriteCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
				"char": 3,
				"line": 147,
				"name": "BIOMethReadCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stilPvZl",
				"char": 3,
				"line": 148,
				"name": "BIOMethCtrlCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
				"char": 3,
				"line": 149,
				"name": "BIOMethCreateCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
				"char": 3,
				"line": 150,
				"name": "BIOMethDestroyCallback"
			},
			{
				"line": 152,
				"kind": "function",
				"char": 7,
				"name": "BIO_get_new_index",
				"deco": "UNbZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "type"
					},
					{
						"deco": "Pxa",
						"name": "name"
					}
				],
				"line": 153,
				"kind": "function",
				"originalType": "nothrow extern (C) BIO_METHOD*(int type, const(char)* name)",
				"char": 15,
				"name": "BIO_meth_new",
				"deco": "UNbiPxaZPS6deimos7openssl3bio13bio_method_st",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					}
				],
				"line": 154,
				"kind": "function",
				"originalType": "nothrow extern (C) void(BIO_METHOD* biom)",
				"char": 8,
				"name": "BIO_meth_free",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
						"name": "cb"
					}
				],
				"line": 155,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethWriteCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_write",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stPxaiZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
						"name": "cb"
					}
				],
				"line": 156,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethReadCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_read",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stPxaiZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stilPvZl",
						"name": "cb"
					}
				],
				"line": 157,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethCtrlCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_ctrl",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stilPvZlZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
						"name": "cb"
					}
				],
				"line": 158,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethCreateCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_create",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
						"name": "cb"
					}
				],
				"line": 159,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethDestroyCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_destroy",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stZiZi",
				"linkage": "c"
			},
			{
				"line": 201,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
								"name": "underlying"
							},
							{
								"deco": "C4vibe6stream7openssl14OpenSSLContext",
								"name": "ctx"
							},
							{
								"deco": "E4vibe6stream3tls14TLSStreamState",
								"name": "state"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "peer_name"
							},
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"default": "NetworkAddress(sockaddr(cast(ushort)0u, [cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0]), , , )",
								"name": "peer_address"
							},
							{
								"deco": "AAya",
								"default": "null",
								"name": "alpn"
							}
						],
						"line": 215,
						"kind": "constructor",
						"originalType": "@safe (InterfaceProxy!Stream underlying, OpenSSLContext ctx, TLSStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init, string[] alpn = null)",
						"char": 2,
						"name": "this",
						"deco": "FNfS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBpCQDaQw7openssl14OpenSSLContextEQEeQCa3tls14TLSStreamStateAyaSQFiQDj3net14NetworkAddressAQBfZCQGoQEkQDp13OpenSSLStream",
						"endchar": 2,
						"endline": 308
					},
					{
						"line": 329,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 333
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 335,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 2,
						"endline": 338
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 340,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 2,
						"endline": 348
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 350,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 2,
						"endline": 353
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 355,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 2,
						"endline": 359
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 361,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 379
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 381,
						"name": "read"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes_"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 383,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes_, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 401
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 403,
						"name": "write"
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 405,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 408
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 410,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 424
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSStream.peerCertificate"
						],
						"line": 489,
						"kind": "function",
						"char": 38,
						"name": "peerCertificate",
						"deco": "FNdNfZS4vibe6stream3tls25TLSCertificateInformation",
						"endchar": 2,
						"endline": 492
					},
					{
						"line": 494,
						"kind": "function",
						"originalType": "@property @safe X509*()",
						"char": 18,
						"name": "peerCertificateX509",
						"deco": "FNdNfZPS6deimos7openssl4x5097x509_st",
						"endchar": 2,
						"endline": 497
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSStream.alpn"
						],
						"line": 499,
						"kind": "function",
						"char": 19,
						"name": "alpn",
						"deco": "xFNdNfZAya",
						"endchar": 2,
						"endline": 515
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 2,
						"line": 329,
						"name": "~this"
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 2,
						"line": 329,
						"name": "~this"
					}
				],
				"name": "OpenSSLStream",
				"interfaces": [
					"vibe.stream.tls.TLSStream"
				],
				"comment": "\tCreates an SSL/TLS tunnel within an existing stream.\n\n\tNote: Be sure to call finalize before finalizing/closing the outer stream so that the SSL\n\t\ttunnel is properly closed first.\n"
			},
			{
				"line": 584,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "E4vibe6stream3tls14TLSContextKind",
								"name": "kind"
							},
							{
								"deco": "E4vibe6stream3tls10TLSVersion",
								"default": "cast(TLSVersion)0",
								"name": "ver"
							}
						],
						"line": 598,
						"kind": "constructor",
						"originalType": "@safe (TLSContextKind kind, TLSVersion ver = TLSVersion.any)",
						"char": 2,
						"name": "this",
						"deco": "FNfE4vibe6stream3tls14TLSContextKindEQBhQBfQBb10TLSVersionZCQCeQCc7openssl14OpenSSLContext",
						"endchar": 2,
						"endline": 696
					},
					{
						"line": 698,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 702
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.kind"
						],
						"line": 706,
						"kind": "function",
						"char": 27,
						"name": "kind",
						"deco": "xFNdNfZE4vibe6stream3tls14TLSContextKind",
						"endchar": 57,
						"endline": 706,
						"comment": "The kind of SSL context (client/server)\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfAAyaZQe",
								"name": "alpn_chooser"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.alpnCallback"
						],
						"line": 709,
						"kind": "function",
						"originalType": "@property @safe void(TLSALPNCallback alpn_chooser)",
						"char": 17,
						"name": "alpnCallback",
						"deco": "FNdNfDFNfAAyaZQeZv",
						"endchar": 2,
						"endline": 719,
						"comment": "Callback function invoked by server to choose alpn\n"
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.alpnCallback"
						],
						"line": 722,
						"kind": "function",
						"originalType": "const @property @safe TLSALPNCallback()",
						"char": 28,
						"name": "alpnCallback",
						"deco": "xFNdNfZDFNfAAyaZQe",
						"endchar": 74,
						"endline": 722,
						"comment": "Get the current ALPN callback function\n"
					},
					{
						"parameters": [
							{
								"deco": "AAya",
								"name": "alpn_list"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.setClientALPN"
						],
						"line": 725,
						"kind": "function",
						"char": 7,
						"name": "setClientALPN",
						"deco": "FNfAAyaZv",
						"endchar": 2,
						"endline": 756,
						"comment": "Invoked by client to offer alpn\n"
					},
					{
						"parameters": [
							{
								"deco": "E4vibe6stream3tls21TLSPeerValidationMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.peerValidationMode"
						],
						"line": 764,
						"kind": "function",
						"char": 17,
						"name": "peerValidationMode",
						"deco": "FNdNfE4vibe6stream3tls21TLSPeerValidationModeZv",
						"endchar": 2,
						"endline": 779,
						"comment": " Specifies the validation level of remote peers.\n\n\t\tThe default mode for TLSContextKind.client is\n\t\tTLSPeerValidationMode.trustedCert and the default for\n\t\tTLSContextKind.server is TLSPeerValidationMode.none.\n"
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.peerValidationMode"
						],
						"line": 781,
						"kind": "function",
						"char": 34,
						"name": "peerValidationMode",
						"deco": "xFNdNfZE4vibe6stream3tls21TLSPeerValidationMode",
						"endchar": 88,
						"endline": 781,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "val"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.maxCertChainLength"
						],
						"line": 791,
						"kind": "function",
						"char": 17,
						"name": "maxCertChainLength",
						"deco": "FNdNfiZv",
						"endchar": 2,
						"endline": 796,
						"comment": " The maximum length of an accepted certificate chain.\n\n\t\tAny certificate chain longer than this will result in the SSL/TLS\n\t\tnegitiation failing.\n\n\t\tThe default value is 9.\n"
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.maxCertChainLength"
						],
						"line": 799,
						"kind": "function",
						"char": 16,
						"name": "maxCertChainLength",
						"deco": "xFNdNfZi",
						"endchar": 67,
						"endline": 799,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfMS4vibe6stream3tls21TLSPeerValidationDataZb",
								"name": "callback"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.peerValidationCallback"
						],
						"line": 810,
						"kind": "function",
						"originalType": "@property @safe void(TLSPeerValidationCallback callback)",
						"char": 17,
						"name": "peerValidationCallback",
						"deco": "FNdNfDFNfMS4vibe6stream3tls21TLSPeerValidationDataZbZv",
						"endchar": 115,
						"endline": 810,
						"comment": " An optional user callback for peer validation.\n\n\t\tThis callback will be called for each peer and each certificate of\n\t\tits certificate chain to allow overriding the validation decision\n\t\tbased on the selected peerValidationMode (e.g. to allow invalid\n\t\tcertificates or to reject valid ones). This is mainly useful for\n\t\tpresenting the user with a dialog in case of untrusted or mismatching\n\t\tcertificates.\n"
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.peerValidationCallback"
						],
						"line": 812,
						"kind": "function",
						"originalType": "inout @property @safe inout(TLSPeerValidationCallback)()",
						"char": 45,
						"name": "peerValidationCallback",
						"deco": "NgFNdNfZNgDFNfMS4vibe6stream3tls21TLSPeerValidationDataZb",
						"endchar": 111,
						"endline": 812,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfAyaZC4vibe6stream3tls10TLSContext",
								"name": "callback"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.sniCallback"
						],
						"line": 814,
						"kind": "function",
						"originalType": "@property @safe void(TLSServerNameCallback callback)",
						"char": 17,
						"name": "sniCallback",
						"deco": "FNdNfDFNfAyaZC4vibe6stream3tls10TLSContextZv",
						"endchar": 2,
						"endline": 823
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.sniCallback"
						],
						"line": 824,
						"kind": "function",
						"originalType": "inout @property @safe inout(TLSServerNameCallback)()",
						"char": 41,
						"name": "sniCallback",
						"deco": "NgFNdNfZNgDFNfAyaZC4vibe6stream3tls10TLSContext",
						"endchar": 85,
						"endline": 824
					},
					{
						"parameters": [
							{
								"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
								"name": "underlying"
							},
							{
								"deco": "E4vibe6stream3tls14TLSStreamState",
								"name": "state"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "peer_name"
							},
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"default": "NetworkAddress(sockaddr(cast(ushort)0u, [cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0]), , , )",
								"name": "peer_address"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.createStream"
						],
						"line": 838,
						"kind": "function",
						"originalType": "@safe OpenSSLStream(InterfaceProxy!Stream underlying, TLSStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
						"char": 16,
						"name": "createStream",
						"deco": "FNfS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBpEQDaQw3tls14TLSStreamStateAyaSQEdQCe3net14NetworkAddressZCQFfQDb7openssl13OpenSSLStream",
						"endchar": 2,
						"endline": 841
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "list"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.setCipherList"
						],
						"line": 851,
						"kind": "function",
						"char": 7,
						"name": "setCipherList",
						"deco": "FNeAyaZv",
						"endchar": 2,
						"endline": 860,
						"comment": " Set the list of cipher specifications to use for SSL/TLS tunnels.\n\n\t\tThe list must be a colon separated list of cipher\n\t\tspecifications as accepted by OpenSSL. Calling this function\n\t\twithout argument will restore the default.\n\n\t\tSee_also: $(LINK https://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "pem_file"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.setDHParams"
						],
						"line": 886,
						"kind": "function",
						"char": 7,
						"name": "setDHParams",
						"deco": "FNeAyaZv",
						"endchar": 2,
						"endline": 905,
						"comment": " Set params to use for DH cipher.\n\n By default the 2048-bit prime from RFC 3526 is used.\n\n Params:\n pem_file = Path to a PEM file containing the DH parameters. Calling\n    this function without argument will restore the default.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "curve"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.setECDHCurve"
						],
						"line": 916,
						"kind": "function",
						"char": 7,
						"name": "setECDHCurve",
						"deco": "FNeAyaZv",
						"endchar": 2,
						"endline": 939,
						"comment": " Set the elliptic curve to use for ECDH cipher.\n\n By default a curve is either chosen automatically or  prime256v1 is used.\n\n Params:\n curve = The short name of the elliptic curve to use. Calling this\n    function without argument will restore the default.\n\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.useCertificateChainFile"
						],
						"line": 942,
						"kind": "function",
						"char": 7,
						"name": "useCertificateChainFile",
						"deco": "FNfAyaZv",
						"endchar": 2,
						"endline": 945,
						"comment": "Sets a certificate file to use for authenticating to the remote peer\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.usePrivateKeyFile"
						],
						"line": 949,
						"kind": "function",
						"char": 7,
						"name": "usePrivateKeyFile",
						"deco": "FNfAyaZv",
						"endchar": 2,
						"endline": 952,
						"comment": "Sets the private key to use for authenticating to the remote peer based\non the configured certificate chain file.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.useTrustedCertificateFile"
						],
						"line": 963,
						"kind": "function",
						"char": 7,
						"name": "useTrustedCertificateFile",
						"deco": "FNeAyaZv",
						"endchar": 2,
						"endline": 974,
						"comment": " Sets the list of trusted certificates for verifying peer certificates.\n\n\t\tIf this is a server context, this also entails that the given\n\t\tcertificates are advertised to connecting clients during handshake.\n\n\t\tOn Linux, the system's root certificate authority list is usually\n\t\tfound at \"/etc/ssl/certs/ca-certificates.crt\",\n\t\t\"/etc/pki/tls/certs/ca-bundle.crt\", or \"/etc/ssl/ca-bundle.pem\".\n"
					}
				],
				"name": "OpenSSLContext",
				"interfaces": [
					"vibe.stream.tls.TLSContext"
				],
				"comment": "\tEncapsulates the configuration for an SSL tunnel.\n\n\tNote that when creating an SSLContext with SSLContextKind.client, the\n\tpeerValidationMode will be set to SSLPeerValidationMode.trustedCert,\n\tbut no trusted certificate authorities are added by default. Use\n\tuseTrustedCertificateFile to add those.\n"
			},
			{
				"kind": "alias",
				"deco": "PS6deimos7openssl3ssl6ssl_st",
				"char": 1,
				"line": 1073,
				"name": "SSLState"
			},
			{
				"kind": "alias",
				"type": "extern (C) int function(SSL* ssl, const(char)** output, ubyte* outlen, const(char)* input, uint inlen, void* arg)",
				"char": 2,
				"line": 1400,
				"name": "ALPNCallback"
			},
			{
				"parameters": [
					{
						"type": "SSL_CTX*",
						"name": "ctx"
					},
					{
						"type": "ALPNCallback",
						"name": "cb"
					},
					{
						"type": "void*",
						"name": "arg"
					}
				],
				"line": 1401,
				"kind": "function",
				"char": 7,
				"name": "SSL_CTX_set_alpn_select_cb",
				"type": "extern (C) void(SSL_CTX* ctx, ALPNCallback cb, void* arg)"
			},
			{
				"parameters": [
					{
						"type": "SSL*",
						"name": "ssl"
					},
					{
						"type": "char*",
						"storageClass": [
							"const"
						],
						"name": "data"
					},
					{
						"deco": "k",
						"name": "len"
					}
				],
				"line": 1402,
				"kind": "function",
				"char": 6,
				"name": "SSL_set_alpn_protos",
				"type": "extern (C) int(SSL* ssl, const char* data, uint len)"
			},
			{
				"parameters": [
					{
						"type": "SSL_CTX*",
						"name": "ctx"
					},
					{
						"type": "char*",
						"storageClass": [
							"const"
						],
						"name": "protos"
					},
					{
						"deco": "k",
						"name": "protos_len"
					}
				],
				"line": 1403,
				"kind": "function",
				"char": 6,
				"name": "SSL_CTX_set_alpn_protos",
				"type": "extern (C) int(SSL_CTX* ctx, const char* protos, uint protos_len)"
			},
			{
				"parameters": [
					{
						"type": "SSL*",
						"storageClass": [
							"const"
						],
						"name": "ssl"
					},
					{
						"type": "ubyte**",
						"storageClass": [
							"const"
						],
						"name": "data"
					},
					{
						"type": "uint*",
						"name": "len"
					}
				],
				"line": 1404,
				"kind": "function",
				"char": 7,
				"name": "SSL_get0_alpn_selected",
				"type": "extern (C) void(const SSL* ssl, const ubyte** data, uint* len)"
			},
			{
				"line": 52,
				"kind": "import",
				"char": 15,
				"selective": [
					"OPENSSL_VERSION"
				],
				"name": "openssl_version",
				"file": "tls/vibe/stream/openssl.d-mixin-52"
			},
			{
				"kind": "import",
				"char": 15,
				"selective": [
					"OPENSSL_VERSION"
				],
				"line": 52,
				"name": "openssl_version"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 47,
				"kind": "variable",
				"char": 7,
				"name": "OPENSSL_VERSION",
				"init": "\"0.0.0\"",
				"file": "tls/vibe/stream/openssl.d"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 45,
				"kind": "variable",
				"char": 7,
				"name": "OPENSSL_VERSION",
				"init": "\"0.9.0\""
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 43,
				"kind": "variable",
				"char": 7,
				"name": "OPENSSL_VERSION",
				"init": "\"1.0.0\""
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 41,
				"kind": "variable",
				"char": 7,
				"name": "OPENSSL_VERSION",
				"init": "\"1.1.0\""
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 63,
				"kind": "variable",
				"char": 60,
				"name": "haveECDH",
				"init": "false"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 66,
				"kind": "variable",
				"char": 11,
				"name": "alpn_forced",
				"deco": "b",
				"init": "false"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 65,
				"kind": "variable",
				"char": 29,
				"name": "alpn_forced",
				"init": "true"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 67,
				"kind": "variable",
				"char": 6,
				"name": "haveALPN",
				"deco": "b",
				"init": "false"
			},
			{
				"line": 71,
				"kind": "function",
				"originalType": "extern (C) const(SSL_METHOD)*()",
				"char": 31,
				"name": "TLS_client_method",
				"deco": "UZPxS6deimos7openssl3ssl13ssl_method_st",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 72,
				"name": "SSLv23_client_method"
			},
			{
				"line": 74,
				"kind": "function",
				"originalType": "extern (C) const(SSL_METHOD)*()",
				"char": 31,
				"name": "TLS_server_method",
				"deco": "UZPxS6deimos7openssl3ssl13ssl_method_st",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 75,
				"name": "SSLv23_server_method"
			},
			{
				"line": 78,
				"kind": "function",
				"char": 7,
				"name": "SSL_load_error_strings",
				"deco": "FZv",
				"endchar": 33,
				"endline": 78
			},
			{
				"parameters": [
					{
						"deco": "m",
						"name": "opts"
					},
					{
						"deco": "xPv",
						"name": "settings"
					}
				],
				"line": 80,
				"kind": "function",
				"originalType": "extern (C) int(ulong opts, const void* settings)",
				"char": 17,
				"name": "OPENSSL_init_ssl",
				"deco": "UmxPvZi",
				"linkage": "c"
			},
			{
				"line": 83,
				"kind": "function",
				"char": 6,
				"name": "SSL_library_init",
				"deco": "FZi",
				"endchar": 2,
				"endline": 85
			},
			{
				"line": 88,
				"kind": "function",
				"char": 6,
				"name": "CRYPTO_num_locks",
				"deco": "FZi",
				"endchar": 2,
				"endline": 90
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 92,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "t"
							}
						],
						"line": 92,
						"kind": "function",
						"char": 7,
						"name": "CRYPTO_set_id_callback",
						"type": "void(T t)",
						"endchar": 2,
						"endline": 93
					}
				],
				"name": "CRYPTO_set_id_callback"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 95,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "t"
							}
						],
						"line": 95,
						"kind": "function",
						"char": 7,
						"name": "CRYPTO_set_locking_callback",
						"type": "void(T t)",
						"endchar": 2,
						"endline": 96
					}
				],
				"name": "CRYPTO_set_locking_callback"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "class_index"
					},
					{
						"deco": "l",
						"name": "argl"
					},
					{
						"deco": "Pv",
						"name": "argp"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZi",
						"name": "new_func"
					},
					{
						"deco": "PUPS6deimos7openssl6crypto17crypto_ex_data_stQBrPvilQeZi",
						"name": "dup_func"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZv",
						"name": "free_func"
					}
				],
				"line": 101,
				"kind": "function",
				"originalType": "extern (C) int(int class_index, c_long argl, void* argp, CRYPTO_EX_new* new_func, CRYPTO_EX_dup* dup_func, CRYPTO_EX_free* free_func)",
				"char": 16,
				"name": "CRYPTO_get_ex_new_index",
				"deco": "UilPvPUQeQgPS6deimos7openssl6crypto17crypto_ex_data_stilQCbZiPUQCaQCdQCoilQCtZiPUQDaQDdQCyilQDlZvZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "l",
						"name": "argl"
					},
					{
						"deco": "Pv",
						"name": "argp"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZi",
						"name": "new_func"
					},
					{
						"deco": "PUPS6deimos7openssl6crypto17crypto_ex_data_stQBrPvilQeZi",
						"name": "dup_func"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZv",
						"name": "free_func"
					}
				],
				"line": 105,
				"kind": "function",
				"originalType": "int(c_long argl, void* argp, CRYPTO_EX_new* new_func, CRYPTO_EX_dup* dup_func, CRYPTO_EX_free* free_func)",
				"char": 6,
				"name": "SSL_get_ex_new_index",
				"deco": "FlPvPUQeQgPS6deimos7openssl6crypto17crypto_ex_data_stilQCbZiPUQCaQCdQCoilQCtZiPUQDaQDdQCyilQDlZvZi",
				"endchar": 2,
				"endline": 111
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl2bn9bignum_st",
						"name": "bn"
					}
				],
				"line": 113,
				"kind": "function",
				"originalType": "extern (C) BIGNUM*(BIGNUM* bn)",
				"char": 20,
				"name": "BN_get_rfc3526_prime_2048",
				"deco": "UPS6deimos7openssl2bn9bignum_stZQBf",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 115,
				"name": "get_rfc3526_prime_2048"
			},
			{
				"parameters": [
					{
						"deco": "xPv"
					}
				],
				"line": 118,
				"kind": "function",
				"originalType": "extern (C) int(const void*)",
				"char": 16,
				"name": "OPENSSL_sk_num",
				"deco": "UxPvZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PxS6deimos7openssl5stack8stack_st",
						"name": "p"
					}
				],
				"line": 119,
				"kind": "function",
				"originalType": "extern (C) int(const(_STACK)* p)",
				"char": 16,
				"name": "sk_num",
				"deco": "UPxS6deimos7openssl5stack8stack_stZi",
				"endchar": 69,
				"endline": 119,
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "xPv"
					},
					{
						"deco": "i"
					}
				],
				"line": 122,
				"kind": "function",
				"originalType": "extern (C) void*(const void*, int)",
				"char": 18,
				"name": "OPENSSL_sk_value",
				"deco": "UxPviZPv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PxS6deimos7openssl5stack8stack_st",
						"name": "p"
					},
					{
						"deco": "i",
						"name": "i"
					}
				],
				"line": 123,
				"kind": "function",
				"originalType": "extern (C) void*(const(_STACK)* p, int i)",
				"char": 18,
				"name": "sk_value",
				"deco": "UPxS6deimos7openssl5stack8stack_stiZPv",
				"endchar": 85,
				"endline": 123,
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "i",
						"name": "init_"
					}
				],
				"line": 136,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, int init_)",
				"char": 8,
				"name": "BIO_set_init",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 137,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* bio)",
				"char": 7,
				"name": "BIO_get_init",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "Pv",
						"name": "ptr"
					}
				],
				"line": 138,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, void* ptr)",
				"char": 8,
				"name": "BIO_set_data",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stPvZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 139,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void*(BIO* bio)",
				"char": 9,
				"name": "BIO_get_data",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZPv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "i",
						"name": "shut"
					}
				],
				"line": 140,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, int shut)",
				"char": 8,
				"name": "BIO_set_shutdown",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 141,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* bio)",
				"char": 7,
				"name": "BIO_get_shutdown",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 142,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* b, int flags)",
				"char": 8,
				"name": "BIO_clear_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 143,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* b, int flags)",
				"char": 7,
				"name": "BIO_test_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 144,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* b, int flags)",
				"char": 8,
				"name": "BIO_set_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
				"char": 3,
				"line": 146,
				"name": "BIOMethWriteCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
				"char": 3,
				"line": 147,
				"name": "BIOMethReadCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stilPvZl",
				"char": 3,
				"line": 148,
				"name": "BIOMethCtrlCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
				"char": 3,
				"line": 149,
				"name": "BIOMethCreateCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
				"char": 3,
				"line": 150,
				"name": "BIOMethDestroyCallback"
			},
			{
				"line": 152,
				"kind": "function",
				"char": 7,
				"name": "BIO_get_new_index",
				"deco": "UNbZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "type"
					},
					{
						"deco": "Pxa",
						"name": "name"
					}
				],
				"line": 153,
				"kind": "function",
				"originalType": "nothrow extern (C) BIO_METHOD*(int type, const(char)* name)",
				"char": 15,
				"name": "BIO_meth_new",
				"deco": "UNbiPxaZPS6deimos7openssl3bio13bio_method_st",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					}
				],
				"line": 154,
				"kind": "function",
				"originalType": "nothrow extern (C) void(BIO_METHOD* biom)",
				"char": 8,
				"name": "BIO_meth_free",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
						"name": "cb"
					}
				],
				"line": 155,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethWriteCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_write",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stPxaiZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
						"name": "cb"
					}
				],
				"line": 156,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethReadCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_read",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stPxaiZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stilPvZl",
						"name": "cb"
					}
				],
				"line": 157,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethCtrlCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_ctrl",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stilPvZlZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
						"name": "cb"
					}
				],
				"line": 158,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethCreateCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_create",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
						"name": "cb"
					}
				],
				"line": 159,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethDestroyCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_destroy",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stZiZi",
				"linkage": "c"
			},
			{
				"line": 71,
				"kind": "function",
				"originalType": "extern (C) const(SSL_METHOD)*()",
				"char": 31,
				"name": "TLS_client_method",
				"deco": "UZPxS6deimos7openssl3ssl13ssl_method_st",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 72,
				"name": "SSLv23_client_method"
			},
			{
				"line": 74,
				"kind": "function",
				"originalType": "extern (C) const(SSL_METHOD)*()",
				"char": 31,
				"name": "TLS_server_method",
				"deco": "UZPxS6deimos7openssl3ssl13ssl_method_st",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 75,
				"name": "SSLv23_server_method"
			},
			{
				"line": 78,
				"kind": "function",
				"char": 7,
				"name": "SSL_load_error_strings",
				"deco": "FZv",
				"endchar": 33,
				"endline": 78
			},
			{
				"parameters": [
					{
						"deco": "m",
						"name": "opts"
					},
					{
						"deco": "xPv",
						"name": "settings"
					}
				],
				"line": 80,
				"kind": "function",
				"originalType": "extern (C) int(ulong opts, const void* settings)",
				"char": 17,
				"name": "OPENSSL_init_ssl",
				"deco": "UmxPvZi",
				"linkage": "c"
			},
			{
				"line": 83,
				"kind": "function",
				"char": 6,
				"name": "SSL_library_init",
				"deco": "FZi",
				"endchar": 2,
				"endline": 85
			},
			{
				"line": 88,
				"kind": "function",
				"char": 6,
				"name": "CRYPTO_num_locks",
				"deco": "FZi",
				"endchar": 2,
				"endline": 90
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 92,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "t"
							}
						],
						"line": 92,
						"kind": "function",
						"char": 7,
						"name": "CRYPTO_set_id_callback",
						"type": "void(T t)",
						"endchar": 2,
						"endline": 93
					}
				],
				"name": "CRYPTO_set_id_callback"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 95,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "t"
							}
						],
						"line": 95,
						"kind": "function",
						"char": 7,
						"name": "CRYPTO_set_locking_callback",
						"type": "void(T t)",
						"endchar": 2,
						"endline": 96
					}
				],
				"name": "CRYPTO_set_locking_callback"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "class_index"
					},
					{
						"deco": "l",
						"name": "argl"
					},
					{
						"deco": "Pv",
						"name": "argp"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZi",
						"name": "new_func"
					},
					{
						"deco": "PUPS6deimos7openssl6crypto17crypto_ex_data_stQBrPvilQeZi",
						"name": "dup_func"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZv",
						"name": "free_func"
					}
				],
				"line": 101,
				"kind": "function",
				"originalType": "extern (C) int(int class_index, c_long argl, void* argp, CRYPTO_EX_new* new_func, CRYPTO_EX_dup* dup_func, CRYPTO_EX_free* free_func)",
				"char": 16,
				"name": "CRYPTO_get_ex_new_index",
				"deco": "UilPvPUQeQgPS6deimos7openssl6crypto17crypto_ex_data_stilQCbZiPUQCaQCdQCoilQCtZiPUQDaQDdQCyilQDlZvZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "l",
						"name": "argl"
					},
					{
						"deco": "Pv",
						"name": "argp"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZi",
						"name": "new_func"
					},
					{
						"deco": "PUPS6deimos7openssl6crypto17crypto_ex_data_stQBrPvilQeZi",
						"name": "dup_func"
					},
					{
						"deco": "PUPvQcPS6deimos7openssl6crypto17crypto_ex_data_stilQBxZv",
						"name": "free_func"
					}
				],
				"line": 105,
				"kind": "function",
				"originalType": "int(c_long argl, void* argp, CRYPTO_EX_new* new_func, CRYPTO_EX_dup* dup_func, CRYPTO_EX_free* free_func)",
				"char": 6,
				"name": "SSL_get_ex_new_index",
				"deco": "FlPvPUQeQgPS6deimos7openssl6crypto17crypto_ex_data_stilQCbZiPUQCaQCdQCoilQCtZiPUQDaQDdQCyilQDlZvZi",
				"endchar": 2,
				"endline": 111
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl2bn9bignum_st",
						"name": "bn"
					}
				],
				"line": 113,
				"kind": "function",
				"originalType": "extern (C) BIGNUM*(BIGNUM* bn)",
				"char": 20,
				"name": "BN_get_rfc3526_prime_2048",
				"deco": "UPS6deimos7openssl2bn9bignum_stZQBf",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"char": 2,
				"line": 115,
				"name": "get_rfc3526_prime_2048"
			},
			{
				"parameters": [
					{
						"deco": "xPv"
					}
				],
				"line": 118,
				"kind": "function",
				"originalType": "extern (C) int(const void*)",
				"char": 16,
				"name": "OPENSSL_sk_num",
				"deco": "UxPvZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PxS6deimos7openssl5stack8stack_st",
						"name": "p"
					}
				],
				"line": 119,
				"kind": "function",
				"originalType": "extern (C) int(const(_STACK)* p)",
				"char": 16,
				"name": "sk_num",
				"deco": "UPxS6deimos7openssl5stack8stack_stZi",
				"endchar": 69,
				"endline": 119,
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "xPv"
					},
					{
						"deco": "i"
					}
				],
				"line": 122,
				"kind": "function",
				"originalType": "extern (C) void*(const void*, int)",
				"char": 18,
				"name": "OPENSSL_sk_value",
				"deco": "UxPviZPv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PxS6deimos7openssl5stack8stack_st",
						"name": "p"
					},
					{
						"deco": "i",
						"name": "i"
					}
				],
				"line": 123,
				"kind": "function",
				"originalType": "extern (C) void*(const(_STACK)* p, int i)",
				"char": 18,
				"name": "sk_value",
				"deco": "UPxS6deimos7openssl5stack8stack_stiZPv",
				"endchar": 85,
				"endline": 123,
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "i",
						"name": "init_"
					}
				],
				"line": 136,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, int init_)",
				"char": 8,
				"name": "BIO_set_init",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 137,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* bio)",
				"char": 7,
				"name": "BIO_get_init",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "Pv",
						"name": "ptr"
					}
				],
				"line": 138,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, void* ptr)",
				"char": 8,
				"name": "BIO_set_data",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stPvZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 139,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void*(BIO* bio)",
				"char": 9,
				"name": "BIO_get_data",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZPv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					},
					{
						"deco": "i",
						"name": "shut"
					}
				],
				"line": 140,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* bio, int shut)",
				"char": 8,
				"name": "BIO_set_shutdown",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "bio"
					}
				],
				"line": 141,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* bio)",
				"char": 7,
				"name": "BIO_get_shutdown",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 142,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* b, int flags)",
				"char": 8,
				"name": "BIO_clear_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 143,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) int(BIO* b, int flags)",
				"char": 7,
				"name": "BIO_test_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio6bio_st",
						"name": "b"
					},
					{
						"deco": "i",
						"name": "flags"
					}
				],
				"line": 144,
				"kind": "function",
				"originalType": "nothrow @trusted extern (C) void(BIO* b, int flags)",
				"char": 8,
				"name": "BIO_set_flags",
				"deco": "UNbNePS6deimos7openssl3bio6bio_stiZv",
				"linkage": "c"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
				"char": 3,
				"line": 146,
				"name": "BIOMethWriteCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
				"char": 3,
				"line": 147,
				"name": "BIOMethReadCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stilPvZl",
				"char": 3,
				"line": 148,
				"name": "BIOMethCtrlCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
				"char": 3,
				"line": 149,
				"name": "BIOMethCreateCallback"
			},
			{
				"kind": "alias",
				"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
				"char": 3,
				"line": 150,
				"name": "BIOMethDestroyCallback"
			},
			{
				"line": 152,
				"kind": "function",
				"char": 7,
				"name": "BIO_get_new_index",
				"deco": "UNbZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "type"
					},
					{
						"deco": "Pxa",
						"name": "name"
					}
				],
				"line": 153,
				"kind": "function",
				"originalType": "nothrow extern (C) BIO_METHOD*(int type, const(char)* name)",
				"char": 15,
				"name": "BIO_meth_new",
				"deco": "UNbiPxaZPS6deimos7openssl3bio13bio_method_st",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					}
				],
				"line": 154,
				"kind": "function",
				"originalType": "nothrow extern (C) void(BIO_METHOD* biom)",
				"char": 8,
				"name": "BIO_meth_free",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stZv",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
						"name": "cb"
					}
				],
				"line": 155,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethWriteCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_write",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stPxaiZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stPxaiZi",
						"name": "cb"
					}
				],
				"line": 156,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethReadCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_read",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stPxaiZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stilPvZl",
						"name": "cb"
					}
				],
				"line": 157,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethCtrlCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_ctrl",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stilPvZlZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
						"name": "cb"
					}
				],
				"line": 158,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethCreateCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_create",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stZiZi",
				"linkage": "c"
			},
			{
				"parameters": [
					{
						"deco": "PS6deimos7openssl3bio13bio_method_st",
						"name": "biom"
					},
					{
						"deco": "PUNbPS6deimos7openssl3bio6bio_stZi",
						"name": "cb"
					}
				],
				"line": 159,
				"kind": "function",
				"originalType": "nothrow extern (C) int(BIO_METHOD* biom, BIOMethDestroyCallback cb)",
				"char": 7,
				"name": "BIO_meth_set_destroy",
				"deco": "UNbPS6deimos7openssl3bio13bio_method_stPUNbPSQBoQBkQBf6bio_stZiZi",
				"linkage": "c"
			},
			{
				"line": 201,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
								"name": "underlying"
							},
							{
								"deco": "C4vibe6stream7openssl14OpenSSLContext",
								"name": "ctx"
							},
							{
								"deco": "E4vibe6stream3tls14TLSStreamState",
								"name": "state"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "peer_name"
							},
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"default": "NetworkAddress(sockaddr(cast(ushort)0u, [cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0]), , , )",
								"name": "peer_address"
							},
							{
								"deco": "AAya",
								"default": "null",
								"name": "alpn"
							}
						],
						"line": 215,
						"kind": "constructor",
						"originalType": "@safe (InterfaceProxy!Stream underlying, OpenSSLContext ctx, TLSStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init, string[] alpn = null)",
						"char": 2,
						"name": "this",
						"deco": "FNfS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBpCQDaQw7openssl14OpenSSLContextEQEeQCa3tls14TLSStreamStateAyaSQFiQDj3net14NetworkAddressAQBfZCQGoQEkQDp13OpenSSLStream",
						"endchar": 2,
						"endline": 308
					},
					{
						"line": 329,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 333
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						],
						"line": 335,
						"kind": "function",
						"char": 17,
						"name": "empty",
						"deco": "FNdNfZb",
						"endchar": 2,
						"endline": 338
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						],
						"line": 340,
						"kind": "function",
						"char": 18,
						"name": "leastSize",
						"deco": "FNdNfZm",
						"endchar": 2,
						"endline": 348
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						],
						"line": 350,
						"kind": "function",
						"char": 17,
						"name": "dataAvailableForRead",
						"deco": "FNdNfZb",
						"endchar": 2,
						"endline": 353
					},
					{
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						],
						"line": 355,
						"kind": "function",
						"char": 17,
						"name": "peek",
						"deco": "FNfZAxh",
						"endchar": 2,
						"endline": 359
					},
					{
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "dst"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.InputStream.read"
						],
						"line": 361,
						"kind": "function",
						"originalType": "@safe size_t(scope ubyte[] dst, IOMode mode)",
						"char": 9,
						"name": "read",
						"deco": "FNfMAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 379
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 381,
						"name": "read"
					},
					{
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes_"
							},
							{
								"deco": "E9eventcore6driver6IOMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						],
						"line": 383,
						"kind": "function",
						"originalType": "@safe size_t(in ubyte[] bytes_, IOMode mode)",
						"char": 9,
						"name": "write",
						"deco": "FNfxAhE9eventcore6driver6IOModeZm",
						"endchar": 2,
						"endline": 401
					},
					{
						"kind": "alias",
						"char": 2,
						"line": 403,
						"name": "write"
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						],
						"line": 405,
						"kind": "function",
						"char": 7,
						"name": "flush",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 408
					},
					{
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						],
						"line": 410,
						"kind": "function",
						"char": 7,
						"name": "finalize",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 424
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSStream.peerCertificate"
						],
						"line": 489,
						"kind": "function",
						"char": 38,
						"name": "peerCertificate",
						"deco": "FNdNfZS4vibe6stream3tls25TLSCertificateInformation",
						"endchar": 2,
						"endline": 492
					},
					{
						"line": 494,
						"kind": "function",
						"originalType": "@property @safe X509*()",
						"char": 18,
						"name": "peerCertificateX509",
						"deco": "FNdNfZPS6deimos7openssl4x5097x509_st",
						"endchar": 2,
						"endline": 497
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSStream.alpn"
						],
						"line": 499,
						"kind": "function",
						"char": 19,
						"name": "alpn",
						"deco": "xFNdNfZAya",
						"endchar": 2,
						"endline": 515
					},
					{
						"kind": "destructor",
						"deco": "FNbNeZv",
						"char": 2,
						"line": 329,
						"name": "~this"
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 2,
						"line": 329,
						"name": "~this"
					}
				],
				"name": "OpenSSLStream",
				"interfaces": [
					"vibe.stream.tls.TLSStream"
				],
				"comment": "\tCreates an SSL/TLS tunnel within an existing stream.\n\n\tNote: Be sure to call finalize before finalizing/closing the outer stream so that the SSL\n\t\ttunnel is properly closed first.\n"
			},
			{
				"line": 584,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "E4vibe6stream3tls14TLSContextKind",
								"name": "kind"
							},
							{
								"deco": "E4vibe6stream3tls10TLSVersion",
								"default": "cast(TLSVersion)0",
								"name": "ver"
							}
						],
						"line": 598,
						"kind": "constructor",
						"originalType": "@safe (TLSContextKind kind, TLSVersion ver = TLSVersion.any)",
						"char": 2,
						"name": "this",
						"deco": "FNfE4vibe6stream3tls14TLSContextKindEQBhQBfQBb10TLSVersionZCQCeQCc7openssl14OpenSSLContext",
						"endchar": 2,
						"endline": 696
					},
					{
						"line": 698,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 702
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.kind"
						],
						"line": 706,
						"kind": "function",
						"char": 27,
						"name": "kind",
						"deco": "xFNdNfZE4vibe6stream3tls14TLSContextKind",
						"endchar": 57,
						"endline": 706,
						"comment": "The kind of SSL context (client/server)\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfAAyaZQe",
								"name": "alpn_chooser"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.alpnCallback"
						],
						"line": 709,
						"kind": "function",
						"originalType": "@property @safe void(TLSALPNCallback alpn_chooser)",
						"char": 17,
						"name": "alpnCallback",
						"deco": "FNdNfDFNfAAyaZQeZv",
						"endchar": 2,
						"endline": 719,
						"comment": "Callback function invoked by server to choose alpn\n"
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.alpnCallback"
						],
						"line": 722,
						"kind": "function",
						"originalType": "const @property @safe TLSALPNCallback()",
						"char": 28,
						"name": "alpnCallback",
						"deco": "xFNdNfZDFNfAAyaZQe",
						"endchar": 74,
						"endline": 722,
						"comment": "Get the current ALPN callback function\n"
					},
					{
						"parameters": [
							{
								"deco": "AAya",
								"name": "alpn_list"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.setClientALPN"
						],
						"line": 725,
						"kind": "function",
						"char": 7,
						"name": "setClientALPN",
						"deco": "FNfAAyaZv",
						"endchar": 2,
						"endline": 756,
						"comment": "Invoked by client to offer alpn\n"
					},
					{
						"parameters": [
							{
								"deco": "E4vibe6stream3tls21TLSPeerValidationMode",
								"name": "mode"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.peerValidationMode"
						],
						"line": 764,
						"kind": "function",
						"char": 17,
						"name": "peerValidationMode",
						"deco": "FNdNfE4vibe6stream3tls21TLSPeerValidationModeZv",
						"endchar": 2,
						"endline": 779,
						"comment": " Specifies the validation level of remote peers.\n\n\t\tThe default mode for TLSContextKind.client is\n\t\tTLSPeerValidationMode.trustedCert and the default for\n\t\tTLSContextKind.server is TLSPeerValidationMode.none.\n"
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.peerValidationMode"
						],
						"line": 781,
						"kind": "function",
						"char": 34,
						"name": "peerValidationMode",
						"deco": "xFNdNfZE4vibe6stream3tls21TLSPeerValidationMode",
						"endchar": 88,
						"endline": 781,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "val"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.maxCertChainLength"
						],
						"line": 791,
						"kind": "function",
						"char": 17,
						"name": "maxCertChainLength",
						"deco": "FNdNfiZv",
						"endchar": 2,
						"endline": 796,
						"comment": " The maximum length of an accepted certificate chain.\n\n\t\tAny certificate chain longer than this will result in the SSL/TLS\n\t\tnegitiation failing.\n\n\t\tThe default value is 9.\n"
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.maxCertChainLength"
						],
						"line": 799,
						"kind": "function",
						"char": 16,
						"name": "maxCertChainLength",
						"deco": "xFNdNfZi",
						"endchar": 67,
						"endline": 799,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfMS4vibe6stream3tls21TLSPeerValidationDataZb",
								"name": "callback"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.peerValidationCallback"
						],
						"line": 810,
						"kind": "function",
						"originalType": "@property @safe void(TLSPeerValidationCallback callback)",
						"char": 17,
						"name": "peerValidationCallback",
						"deco": "FNdNfDFNfMS4vibe6stream3tls21TLSPeerValidationDataZbZv",
						"endchar": 115,
						"endline": 810,
						"comment": " An optional user callback for peer validation.\n\n\t\tThis callback will be called for each peer and each certificate of\n\t\tits certificate chain to allow overriding the validation decision\n\t\tbased on the selected peerValidationMode (e.g. to allow invalid\n\t\tcertificates or to reject valid ones). This is mainly useful for\n\t\tpresenting the user with a dialog in case of untrusted or mismatching\n\t\tcertificates.\n"
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.peerValidationCallback"
						],
						"line": 812,
						"kind": "function",
						"originalType": "inout @property @safe inout(TLSPeerValidationCallback)()",
						"char": 45,
						"name": "peerValidationCallback",
						"deco": "NgFNdNfZNgDFNfMS4vibe6stream3tls21TLSPeerValidationDataZb",
						"endchar": 111,
						"endline": 812,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfAyaZC4vibe6stream3tls10TLSContext",
								"name": "callback"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.sniCallback"
						],
						"line": 814,
						"kind": "function",
						"originalType": "@property @safe void(TLSServerNameCallback callback)",
						"char": 17,
						"name": "sniCallback",
						"deco": "FNdNfDFNfAyaZC4vibe6stream3tls10TLSContextZv",
						"endchar": 2,
						"endline": 823
					},
					{
						"overrides": [
							"vibe.stream.tls.TLSContext.sniCallback"
						],
						"line": 824,
						"kind": "function",
						"originalType": "inout @property @safe inout(TLSServerNameCallback)()",
						"char": 41,
						"name": "sniCallback",
						"deco": "NgFNdNfZNgDFNfAyaZC4vibe6stream3tls10TLSContext",
						"endchar": 85,
						"endline": 824
					},
					{
						"parameters": [
							{
								"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
								"name": "underlying"
							},
							{
								"deco": "E4vibe6stream3tls14TLSStreamState",
								"name": "state"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "peer_name"
							},
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"default": "NetworkAddress(sockaddr(cast(ushort)0u, [cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0]), , , )",
								"name": "peer_address"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.createStream"
						],
						"line": 838,
						"kind": "function",
						"originalType": "@safe OpenSSLStream(InterfaceProxy!Stream underlying, TLSStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
						"char": 16,
						"name": "createStream",
						"deco": "FNfS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBpEQDaQw3tls14TLSStreamStateAyaSQEdQCe3net14NetworkAddressZCQFfQDb7openssl13OpenSSLStream",
						"endchar": 2,
						"endline": 841
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "list"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.setCipherList"
						],
						"line": 851,
						"kind": "function",
						"char": 7,
						"name": "setCipherList",
						"deco": "FNeAyaZv",
						"endchar": 2,
						"endline": 860,
						"comment": " Set the list of cipher specifications to use for SSL/TLS tunnels.\n\n\t\tThe list must be a colon separated list of cipher\n\t\tspecifications as accepted by OpenSSL. Calling this function\n\t\twithout argument will restore the default.\n\n\t\tSee_also: $(LINK https://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "pem_file"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.setDHParams"
						],
						"line": 886,
						"kind": "function",
						"char": 7,
						"name": "setDHParams",
						"deco": "FNeAyaZv",
						"endchar": 2,
						"endline": 905,
						"comment": " Set params to use for DH cipher.\n\n By default the 2048-bit prime from RFC 3526 is used.\n\n Params:\n pem_file = Path to a PEM file containing the DH parameters. Calling\n    this function without argument will restore the default.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "curve"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.setECDHCurve"
						],
						"line": 916,
						"kind": "function",
						"char": 7,
						"name": "setECDHCurve",
						"deco": "FNeAyaZv",
						"endchar": 2,
						"endline": 939,
						"comment": " Set the elliptic curve to use for ECDH cipher.\n\n By default a curve is either chosen automatically or  prime256v1 is used.\n\n Params:\n curve = The short name of the elliptic curve to use. Calling this\n    function without argument will restore the default.\n\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.useCertificateChainFile"
						],
						"line": 942,
						"kind": "function",
						"char": 7,
						"name": "useCertificateChainFile",
						"deco": "FNfAyaZv",
						"endchar": 2,
						"endline": 945,
						"comment": "Sets a certificate file to use for authenticating to the remote peer\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.usePrivateKeyFile"
						],
						"line": 949,
						"kind": "function",
						"char": 7,
						"name": "usePrivateKeyFile",
						"deco": "FNfAyaZv",
						"endchar": 2,
						"endline": 952,
						"comment": "Sets the private key to use for authenticating to the remote peer based\non the configured certificate chain file.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"overrides": [
							"vibe.stream.tls.TLSContext.useTrustedCertificateFile"
						],
						"line": 963,
						"kind": "function",
						"char": 7,
						"name": "useTrustedCertificateFile",
						"deco": "FNeAyaZv",
						"endchar": 2,
						"endline": 974,
						"comment": " Sets the list of trusted certificates for verifying peer certificates.\n\n\t\tIf this is a server context, this also entails that the given\n\t\tcertificates are advertised to connecting clients during handshake.\n\n\t\tOn Linux, the system's root certificate authority list is usually\n\t\tfound at \"/etc/ssl/certs/ca-certificates.crt\",\n\t\t\"/etc/pki/tls/certs/ca-bundle.crt\", or \"/etc/ssl/ca-bundle.pem\".\n"
					}
				],
				"name": "OpenSSLContext",
				"interfaces": [
					"vibe.stream.tls.TLSContext"
				],
				"comment": "\tEncapsulates the configuration for an SSL tunnel.\n\n\tNote that when creating an SSLContext with SSLContextKind.client, the\n\tpeerValidationMode will be set to SSLPeerValidationMode.trustedCert,\n\tbut no trusted certificate authorities are added by default. Use\n\tuseTrustedCertificateFile to add those.\n"
			},
			{
				"kind": "alias",
				"deco": "PS6deimos7openssl3ssl6ssl_st",
				"char": 1,
				"line": 1073,
				"name": "SSLState"
			},
			{
				"kind": "alias",
				"type": "extern (C) int function(SSL* ssl, const(char)** output, ubyte* outlen, const(char)* input, uint inlen, void* arg)",
				"char": 2,
				"line": 1400,
				"name": "ALPNCallback"
			},
			{
				"parameters": [
					{
						"type": "SSL_CTX*",
						"name": "ctx"
					},
					{
						"type": "ALPNCallback",
						"name": "cb"
					},
					{
						"type": "void*",
						"name": "arg"
					}
				],
				"line": 1401,
				"kind": "function",
				"char": 7,
				"name": "SSL_CTX_set_alpn_select_cb",
				"type": "extern (C) void(SSL_CTX* ctx, ALPNCallback cb, void* arg)"
			},
			{
				"parameters": [
					{
						"type": "SSL*",
						"name": "ssl"
					},
					{
						"type": "char*",
						"storageClass": [
							"const"
						],
						"name": "data"
					},
					{
						"deco": "k",
						"name": "len"
					}
				],
				"line": 1402,
				"kind": "function",
				"char": 6,
				"name": "SSL_set_alpn_protos",
				"type": "extern (C) int(SSL* ssl, const char* data, uint len)"
			},
			{
				"parameters": [
					{
						"type": "SSL_CTX*",
						"name": "ctx"
					},
					{
						"type": "char*",
						"storageClass": [
							"const"
						],
						"name": "protos"
					},
					{
						"deco": "k",
						"name": "protos_len"
					}
				],
				"line": 1403,
				"kind": "function",
				"char": 6,
				"name": "SSL_CTX_set_alpn_protos",
				"type": "extern (C) int(SSL_CTX* ctx, const char* protos, uint protos_len)"
			},
			{
				"parameters": [
					{
						"type": "SSL*",
						"storageClass": [
							"const"
						],
						"name": "ssl"
					},
					{
						"type": "ubyte**",
						"storageClass": [
							"const"
						],
						"name": "data"
					},
					{
						"type": "uint*",
						"name": "len"
					}
				],
				"line": 1404,
				"kind": "function",
				"char": 7,
				"name": "SSL_get0_alpn_selected",
				"type": "extern (C) void(const SSL* ssl, const ubyte** data, uint* len)"
			}
		],
		"comment": "\tOpenSSL based SSL/TLS stream implementation\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.stream.openssl"
	},
	{
		"kind": "module",
		"file": "tls/vibe/stream/tls.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "E4vibe6stream3tls14TLSContextKind",
						"name": "kind"
					},
					{
						"deco": "E4vibe6stream3tls10TLSVersion",
						"default": "cast(TLSVersion)0",
						"name": "ver"
					}
				],
				"line": 91,
				"kind": "function",
				"originalType": "@trusted TLSContext(TLSContextKind kind, TLSVersion ver = TLSVersion.any)",
				"char": 12,
				"name": "createTLSContext",
				"deco": "FNeE4vibe6stream3tls14TLSContextKindEQBhQBfQBb10TLSVersionZCQCeQCcQBy10TLSContext",
				"endchar": 1,
				"endline": 110,
				"comment": " Creates a new context of the given kind.\n\n\tParams:\n\t\tkind = Specifies if the context is going to be used on the client\n\t\t\tor on the server end of the TLS tunnel\n\t\tver = The TLS protocol used for negotiating the tunnel\n\n\n\n\n"
			},
			{
				"constraint": "isStream!Stream",
				"parameters": [
					{
						"kind": "type",
						"name": "Stream"
					}
				],
				"line": 123,
				"kind": "template",
				"char": 11,
				"members": [
					{
						"parameters": [
							{
								"type": "Stream",
								"name": "underlying"
							},
							{
								"type": "TLSContext",
								"name": "ctx"
							},
							{
								"type": "string",
								"default": "null",
								"name": "peer_name"
							},
							{
								"type": "NetworkAddress",
								"default": "NetworkAddress.init",
								"name": "peer_address"
							}
						],
						"line": 123,
						"kind": "function",
						"char": 11,
						"name": "createTLSStream",
						"type": "TLSStream(Stream underlying, TLSContext ctx, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
						"endchar": 1,
						"endline": 128
					}
				],
				"name": "createTLSStream",
				"comment": " Constructs a new TLS tunnel and infers the stream state from the TLSContextKind.\n\n\tDepending on the TLSContextKind of ctx, the tunnel will try to establish an TLS\n\ttunnel by either passively accepting or by actively connecting.\n\n\tParams:\n\t\tunderlying = The base stream which is used for the TLS tunnel\n\t\tctx = TLS context used for initiating the tunnel\n\t\tpeer_name = DNS name of the remote peer, used for certificate validation\n\t\tpeer_address = IP address of the remote peer, used for certificate validation\n\n\n\n\n"
			},
			{
				"constraint": "isStream!Stream",
				"parameters": [
					{
						"kind": "type",
						"name": "Stream"
					}
				],
				"line": 142,
				"kind": "template",
				"char": 11,
				"members": [
					{
						"parameters": [
							{
								"type": "Stream",
								"name": "underlying"
							},
							{
								"type": "TLSContext",
								"name": "ctx"
							},
							{
								"type": "TLSStreamState",
								"name": "state"
							},
							{
								"type": "string",
								"default": "null",
								"name": "peer_name"
							},
							{
								"type": "NetworkAddress",
								"default": "NetworkAddress.init",
								"name": "peer_address"
							}
						],
						"line": 142,
						"kind": "function",
						"char": 11,
						"name": "createTLSStream",
						"type": "TLSStream(Stream underlying, TLSContext ctx, TLSStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
						"endchar": 1,
						"endline": 146
					}
				],
				"name": "createTLSStream",
				"comment": " Constructs a new TLS tunnel, allowing to override the stream state.\n\n\tThis constructor allows to specify a custom tunnel state, which can\n\tbe useful when a tunnel has already been established by other means.\n\n\tParams:\n\t\tunderlying = The base stream which is used for the TLS tunnel\n\t\tctx = TLS context used for initiating the tunnel\n\t\tstate = The manually specified tunnel state\n\t\tpeer_name = DNS name of the remote peer, used for certificate validation\n\t\tpeer_address = IP address of the remote peer, used for certificate validation\n\n\n\n\n"
			},
			{
				"constraint": "isStream!Stream",
				"parameters": [
					{
						"kind": "type",
						"name": "Stream"
					}
				],
				"line": 151,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Stream",
								"name": "underlying"
							},
							{
								"type": "TLSContext",
								"name": "ctx"
							},
							{
								"type": "TLSStreamState",
								"name": "state"
							},
							{
								"type": "string",
								"default": "null",
								"name": "peer_name"
							},
							{
								"type": "NetworkAddress",
								"default": "NetworkAddress.init",
								"name": "peer_address"
							}
						],
						"line": 151,
						"kind": "function",
						"char": 6,
						"name": "createTLSStreamFL",
						"type": "(Stream underlying, TLSContext ctx, TLSStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
						"endchar": 1,
						"endline": 169
					}
				],
				"name": "createTLSStreamFL",
				"comment": "\tConstructs a new TLS stream using manual memory allocator.\n\n\n\n\n"
			},
			{
				"parameters": [
					{
						"deco": "PFNfE4vibe6stream3tls14TLSContextKindEQBhQBfQBb10TLSVersionZCQCeQCcQBy10TLSContext",
						"name": "factory"
					}
				],
				"line": 171,
				"kind": "function",
				"char": 6,
				"name": "setTLSContextFactory",
				"deco": "FNfPFNfE4vibe6stream3tls14TLSContextKindEQBhQBfQBb10TLSVersionZCQCeQCcQBy10TLSContextZv",
				"endchar": 1,
				"endline": 174,
				"comment": "\n\n\n"
			},
			{
				"line": 187,
				"kind": "interface",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"line": 190,
						"kind": "function",
						"char": 38,
						"name": "peerCertificate",
						"deco": "FNdNfZS4vibe6stream3tls25TLSCertificateInformation"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 199,
						"kind": "function",
						"char": 19,
						"name": "alpn",
						"deco": "xFNdNfZAya",
						"comment": " The ALPN that has been negotiated for this connection.\n\n\t\tSee_also: $(WEB https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation)\n"
					}
				],
				"name": "TLSStream",
				"interfaces": [
					"vibe.core.stream.Stream"
				],
				"comment": "\n\n\n\n\tCreates an TLS tunnel within an existing stream.\n\n\tNote: Be sure to call finalize before finalizing/closing the outer stream so that the TLS\n\t\ttunnel is properly closed first.\n\n\n\n\n"
			},
			{
				"line": 202,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 203,
						"name": "connecting"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 204,
						"name": "accepting"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 205,
						"name": "connected"
					}
				],
				"name": "TLSStreamState",
				"baseDeco": "i",
				"comment": "\n\n\n"
			},
			{
				"kind": "interface",
				"line": 217,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"line": 221,
						"kind": "function",
						"char": 27,
						"name": "kind",
						"deco": "xFNdNfZE4vibe6stream3tls14TLSContextKind",
						"comment": "The kind of TLS context (client/server)\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "E4vibe6stream3tls21TLSPeerValidationMode",
								"name": "mode"
							}
						],
						"line": 229,
						"kind": "function",
						"char": 17,
						"name": "peerValidationMode",
						"deco": "FNdNfE4vibe6stream3tls21TLSPeerValidationModeZv",
						"comment": " Specifies the validation level of remote peers.\n\n\t\tThe default mode for TLSContextKind.client is\n\t\tTLSPeerValidationMode.trustedCert and the default for\n\t\tTLSContextKind.server is TLSPeerValidationMode.none.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 231,
						"kind": "function",
						"char": 34,
						"name": "peerValidationMode",
						"deco": "xFNdNfZE4vibe6stream3tls21TLSPeerValidationMode",
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "i",
								"name": "val"
							}
						],
						"line": 240,
						"kind": "function",
						"char": 17,
						"name": "maxCertChainLength",
						"deco": "FNdNfiZv",
						"comment": " The maximum length of an accepted certificate chain.\n\n\t\tAny certificate chain longer than this will result in the TLS\n\t\tnegitiation failing.\n\n\t\tThe default value is 9.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 242,
						"kind": "function",
						"char": 16,
						"name": "maxCertChainLength",
						"deco": "xFNdNfZi",
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "DFNfMS4vibe6stream3tls21TLSPeerValidationDataZb",
								"name": "callback"
							}
						],
						"line": 253,
						"kind": "function",
						"originalType": "@property @safe void(TLSPeerValidationCallback callback)",
						"char": 17,
						"name": "peerValidationCallback",
						"deco": "FNdNfDFNfMS4vibe6stream3tls21TLSPeerValidationDataZbZv",
						"comment": " An optional user callback for peer validation.\n\n\t\tThis callback will be called for each peer and each certificate of\n\t\tits certificate chain to allow overriding the validation decision\n\t\tbased on the selected peerValidationMode (e.g. to allow invalid\n\t\tcertificates or to reject valid ones). This is mainly useful for\n\t\tpresenting the user with a dialog in case of untrusted or mismatching\n\t\tcertificates.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 255,
						"kind": "function",
						"originalType": "inout @property @safe inout(TLSPeerValidationCallback)()",
						"char": 45,
						"name": "peerValidationCallback",
						"deco": "NgFNdNfZNgDFNfMS4vibe6stream3tls21TLSPeerValidationDataZb",
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "DFNfAyaZC4vibe6stream3tls10TLSContext",
								"name": "callback"
							}
						],
						"line": 261,
						"kind": "function",
						"originalType": "@property @safe void(TLSServerNameCallback callback)",
						"char": 17,
						"name": "sniCallback",
						"deco": "FNdNfDFNfAyaZC4vibe6stream3tls10TLSContextZv",
						"comment": " The callback used to associcate host names with TLS certificates/contexts.\n\n\t\tThis property is only used for kind $(D TLSContextKind.serverSNI).\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 263,
						"kind": "function",
						"originalType": "inout @property @safe inout(TLSServerNameCallback)()",
						"char": 41,
						"name": "sniCallback",
						"deco": "NgFNdNfZNgDFNfAyaZC4vibe6stream3tls10TLSContext",
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "DFNfAAyaZQe",
								"name": "alpn_chooser"
							}
						],
						"line": 266,
						"kind": "function",
						"originalType": "@property @safe void(TLSALPNCallback alpn_chooser)",
						"char": 17,
						"name": "alpnCallback",
						"deco": "FNdNfDFNfAAyaZQeZv",
						"comment": "Callback function invoked to choose alpn (client side)\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"line": 268,
						"kind": "function",
						"originalType": "const @property @safe TLSALPNCallback()",
						"char": 28,
						"name": "alpnCallback",
						"deco": "xFNdNfZDFNfAAyaZQe",
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "AAya",
								"name": "alpn"
							}
						],
						"line": 271,
						"kind": "function",
						"char": 7,
						"name": "setClientALPN",
						"deco": "FNfAAyaZv",
						"comment": "Setter method invoked to offer ALPN (server side)\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "S4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBp",
								"name": "underlying"
							},
							{
								"deco": "E4vibe6stream3tls14TLSStreamState",
								"name": "state"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "peer_name"
							},
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"default": "NetworkAddress(sockaddr(cast(ushort)0u, [cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0, cast(byte)0]), , , )",
								"name": "peer_address"
							}
						],
						"line": 275,
						"kind": "function",
						"originalType": "@safe TLSStream(InterfaceProxy!Stream underlying, TLSStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
						"char": 12,
						"name": "createStream",
						"deco": "FNfS4vibe8internal14interfaceproxy__T14InterfaceProxyTCQBz4core6stream6StreamZQBpEQDaQw3tls14TLSStreamStateAyaSQEdQCe3net14NetworkAddressZCQFfQDbQCg9TLSStream",
						"comment": " Creates a new stream associated to this context.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "list"
							}
						],
						"line": 285,
						"kind": "function",
						"char": 7,
						"name": "setCipherList",
						"deco": "FNfAyaZv",
						"comment": " Set the list of cipher specifications to use for TLS tunnels.\n\n\t\tThe list must be a colon separated list of cipher\n\t\tspecifications as accepted by OpenSSL. Calling this function\n\t\twithout argument will restore the default.\n\n\t\tSee_also: $(LINK https://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT)\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "pem_file"
							}
						],
						"line": 295,
						"kind": "function",
						"char": 7,
						"name": "setDHParams",
						"deco": "FNfAyaZv",
						"comment": " Set params to use for DH cipher.\n\n By default the 2048-bit prime from RFC 3526 is used.\n\n Params:\n pem_file = Path to a PEM file containing the DH parameters. Calling\n    this function without argument will restore the default.\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "curve"
							}
						],
						"line": 306,
						"kind": "function",
						"char": 7,
						"name": "setECDHCurve",
						"deco": "FNfAyaZv",
						"comment": " Set the elliptic curve to use for ECDH cipher.\n\n By default a curve is either chosen automatically or  prime256v1 is used.\n\n Params:\n curve = The short name of the elliptic curve to use. Calling this\n    function without argument will restore the default.\n\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 309,
						"kind": "function",
						"char": 7,
						"name": "useCertificateChainFile",
						"deco": "FNfAyaZv",
						"comment": "Sets a certificate file to use for authenticating to the remote peer\n"
					},
					{
						"storageClass": [
							"final",
							"abstract"
						],
						"parameters": [
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
								"name": "path"
							}
						],
						"line": 311,
						"kind": "function",
						"originalType": "@safe void(NativePath path)",
						"char": 13,
						"name": "useCertificateChainFile",
						"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZv",
						"endchar": 98,
						"endline": 311,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 315,
						"kind": "function",
						"char": 7,
						"name": "usePrivateKeyFile",
						"deco": "FNfAyaZv",
						"comment": "Sets the private key to use for authenticating to the remote peer based\non the configured certificate chain file.\n"
					},
					{
						"storageClass": [
							"final",
							"abstract"
						],
						"parameters": [
							{
								"deco": "S4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBq",
								"name": "path"
							}
						],
						"line": 317,
						"kind": "function",
						"originalType": "@safe void(NativePath path)",
						"char": 13,
						"name": "usePrivateKeyFile",
						"deco": "FNfS4vibe4core4path__T11GenericPathTSQBhQBfQBd15PosixPathFormatZQBqZv",
						"endchar": 86,
						"endline": 317,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 328,
						"kind": "function",
						"char": 7,
						"name": "useTrustedCertificateFile",
						"deco": "FNfAyaZv",
						"comment": " Sets the list of trusted certificates for verifying peer certificates.\n\n\t\tIf this is a server context, this also entails that the given\n\t\tcertificates are advertised to connecting clients during handshake.\n\n\t\tOn Linux, the system's root certificate authority list is usually\n\t\tfound at \"/etc/ssl/certs/ca-certificates.crt\",\n\t\t\"/etc/pki/tls/certs/ca-bundle.crt\", or \"/etc/ssl/ca-bundle.pem\".\n"
					}
				],
				"comment": "\tEncapsulates the configuration for an TLS tunnel.\n\n\tNote that when creating an TLSContext with TLSContextKind.client, the\n\tpeerValidationMode will be set to TLSPeerValidationMode.trustedCert,\n\tbut no trusted certificate authorities are added by default. Use\n\tuseTrustedCertificateFile to add those.\n\n\n\n\n",
				"name": "TLSContext"
			},
			{
				"line": 331,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 332,
						"char": 2,
						"value": "0",
						"comment": "Client context (active connector)\n",
						"name": "client"
					},
					{
						"kind": "enum member",
						"line": 333,
						"char": 2,
						"value": "1",
						"comment": "Server context (passive connector)\n",
						"name": "server"
					},
					{
						"kind": "enum member",
						"line": 334,
						"char": 2,
						"value": "2",
						"comment": "Server context with multiple certificate support (SNI)\n",
						"name": "serverSNI"
					}
				],
				"name": "TLSContextKind",
				"baseDeco": "i",
				"comment": "\n\n\n"
			},
			{
				"line": 337,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 338,
						"char": 2,
						"value": "0",
						"comment": "Accept SSLv3 or TLSv1.0 and greater\n",
						"name": "any"
					},
					{
						"kind": "enum member",
						"line": 339,
						"char": 2,
						"value": "1",
						"comment": "Accept only SSLv3\n",
						"name": "ssl3"
					},
					{
						"kind": "enum member",
						"line": 340,
						"char": 2,
						"value": "2",
						"comment": "Accept only TLSv1.0\n",
						"name": "tls1"
					},
					{
						"kind": "enum member",
						"line": 341,
						"char": 2,
						"value": "3",
						"comment": "Accept only TLSv1.1\n",
						"name": "tls1_1"
					},
					{
						"kind": "enum member",
						"line": 342,
						"char": 2,
						"value": "4",
						"comment": "Accept only TLSv1.2\n",
						"name": "tls1_2"
					},
					{
						"kind": "enum member",
						"line": 343,
						"char": 2,
						"value": "5",
						"comment": "Use DTLSv1.0\n",
						"name": "dtls1"
					},
					{
						"kind": "enum member",
						"line": 345,
						"char": 2,
						"value": "0",
						"comment": "Deprecated compatibility alias\n",
						"name": "ssl23"
					}
				],
				"name": "TLSVersion",
				"baseDeco": "i",
				"comment": "\n\n\n"
			},
			{
				"line": 354,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 360,
						"char": 2,
						"value": "0",
						"comment": " Accept any peer regardless if and which certificate is presented.\n\n\t\tThis mode is generally discouraged and should only be used with\n\t\ta custom validation callback set to do the verification.\n",
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 368,
						"char": 2,
						"value": "1",
						"comment": " Require the peer to always present a certificate.\n\n\t\tNote that this option alone does not verify the certificate at all. It\n\t\tcan be used together with the \"check\" options, or by using a custom\n\t\tvalidation callback to actually validate certificates.\n",
						"name": "requireCert"
					},
					{
						"kind": "enum member",
						"line": 376,
						"char": 2,
						"value": "2",
						"comment": " Check the certificate for basic validity.\n\n\t\tThis verifies the validity of the certificate chain and some other\n\t\tgeneral properties, such as expiration time. It doesn't verify\n\t\teither the peer name or the trust state of the certificate.\n",
						"name": "checkCert"
					},
					{
						"kind": "enum member",
						"line": 385,
						"char": 2,
						"value": "4",
						"comment": " Validate the actual peer name/address against the certificate.\n\n\t\tCompares the name/address of the connected peer, as passed to\n\t\t$(D createTLSStream) to the list of patterns present in the\n\t\tcertificate, if any. If no match is found, the connection is\n\t\trejected.\n",
						"name": "checkPeer"
					},
					{
						"kind": "enum member",
						"line": 394,
						"char": 2,
						"value": "8",
						"comment": " Requires that the certificate or any parent certificate is trusted.\n\n\t\tSearches list of trusted certificates for a match of the certificate\n\t\tchain. If no match is found, the connection is rejected.\n\n\t\tSee_also: $(D useTrustedCertificateFile)\n",
						"name": "checkTrust"
					},
					{
						"kind": "enum member",
						"line": 409,
						"char": 2,
						"value": "7",
						"comment": " Require a valid certificate matching the peer name.\n\n\t\tIn this mode, the certificate is validated for general consistency and\n\t\tpossible expiration, and the peer name is checked to see if the\n\t\tcertificate actually applies.\n\n\t\tHowever, the certificate chain is not matched against the system's\n\t\tpool of trusted certificate authorities, so a custom validation\n\t\tcallback is still needed to get a secure validation process.\n\n\t\tThis option is a combination $(D requireCert), $(D checkCert) and\n\t\t$(D checkPeer).\n",
						"name": "validCert"
					},
					{
						"kind": "enum member",
						"line": 421,
						"char": 2,
						"value": "15",
						"comment": " Require a valid and trusted certificate (strongly recommended).\n\n\t\tChecks the certificate and peer name for validity and requires that\n\t\tthe certificate chain originates from a trusted CA (based on the\n\t\tregistered pool of certificate authorities).\n\n\t\tThis option is a combination $(D validCert) and $(D checkTrust).\n\n\t\tSee_also: $(D useTrustedCertificateFile)\n",
						"name": "trustedCert"
					}
				],
				"name": "TLSPeerValidationMode",
				"baseDeco": "i",
				"comment": " Specifies how rigorously TLS peer certificates are validated.\n\n\tThe individual options can be combined using a bitwise \"or\". Usually it is\n\trecommended to use $(D trustedCert) for full validation.\n\n\n\n\n"
			},
			{
				"kind": "struct",
				"line": 425,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 432,
						"kind": "variable",
						"originalType": "DictionaryList!(string, false, 8)",
						"char": 36,
						"name": "subjectName",
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi0Vmi8Vbi0ZQBh",
						"offset": 0,
						"comment": " Information about the certificate's subject name.\n\n\t\tMaps fields to their values. For example, typical fields on a\n\t\tcertificate will be 'commonName', 'countryName', 'emailAddress', etc.\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 443,
						"kind": "variable",
						"char": 8,
						"name": "_x509",
						"deco": "Pv",
						"offset": 280,
						"comment": " Vendor specific representation of the peer certificate.\n\n\t\tThis field is only set if the functionality is supported and if the\n\t\tpeer certificate is a X509 certificate.\n\n\t\tFor the OpenSSL driver, this will point to an `X509` struct. Note\n\t\tthat the life time of the object is limited to the life time of the\n\t\tTLS stream.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4vibe6stream3tls25TLSCertificateInformation",
								"name": "p"
							}
						],
						"line": 425,
						"kind": "generated function",
						"originalType": "ref TLSCertificateInformation(TLSCertificateInformation p) return",
						"char": 1,
						"name": "opAssign",
						"deco": "FNaNbNcNiNjNfS4vibe6stream3tls25TLSCertificateInformationZQBt"
					}
				],
				"comment": " Certificate information\n\n\n\n\n",
				"name": "TLSCertificateInformation"
			},
			{
				"kind": "struct",
				"line": 446,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 447,
						"kind": "variable",
						"char": 9,
						"name": "certName",
						"deco": "Aa",
						"offset": 0
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 448,
						"kind": "variable",
						"char": 9,
						"name": "errorString",
						"deco": "Aya",
						"offset": 16
					}
				],
				"comment": "\n\n\n",
				"name": "TLSPeerValidationData"
			},
			{
				"kind": "alias",
				"line": 454,
				"char": 1,
				"deco": "DFNfMS4vibe6stream3tls21TLSPeerValidationDataZb",
				"comment": "\n\n\n",
				"name": "TLSPeerValidationCallback"
			},
			{
				"kind": "alias",
				"line": 456,
				"char": 1,
				"deco": "DFNfAyaZC4vibe6stream3tls10TLSContext",
				"comment": "\n\n\n",
				"name": "TLSServerNameCallback"
			},
			{
				"kind": "alias",
				"line": 457,
				"char": 1,
				"deco": "DFNfAAyaZQe",
				"comment": "\n\n\n",
				"name": "TLSALPNCallback"
			}
		],
		"comment": "\tTLS stream implementation\n\n\tTLSStream can be used to implement TLS communication on top of a TCP connection. The\n\tTLSContextKind of an TLSStream determines if the TLS tunnel is established actively (client) or\n\tpassively (server).\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\nExample:\nA simple TLS client$(DDOX_UNITTEST_HEADER __unittest_L39_C1)\n---\nimport vibe.core.net;\nimport vibe.stream.tls;\n\nvoid sendTLSMessage()\n{\n\tauto conn = connectTCP(\"127.0.0.1\", 1234);\n\tauto sslctx = createTLSContext(TLSContextKind.client);\n\tauto stream = createTLSStream(conn, sslctx);\n\tstream.write(\"Hello, World!\");\n\tstream.finalize();\n\tconn.close();\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L39_C1)\nExample:\nCorresponding server$(DDOX_UNITTEST_HEADER __unittest_L55_C1)\n---\nimport vibe.core.log;\nimport vibe.core.net;\nimport vibe.stream.operations;\nimport vibe.stream.tls;\n\nvoid listenForTLS()\n{\n\tauto sslctx = createTLSContext(TLSContextKind.server);\n\tsslctx.useCertificateChainFile(\"server.crt\");\n\tsslctx.usePrivateKeyFile(\"server.key\");\n\tlistenTCP(1234, delegate void(TCPConnection conn) nothrow {\n\t\ttry {\n\t\t\tauto stream = createTLSStream(conn, sslctx);\n\t\t\tlogInfo(\"Got message: %s\", stream.readAllUTF8());\n\t\t\tstream.finalize();\n\t\t} catch (Exception e) {\n\t\t\tlogInfo(\"Failed to receive encrypted message\");\n\t\t}\n\t});\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L55_C1)\n",
		"name": "vibe.stream.tls"
	},
	{
		"kind": "module",
		"file": "mail/vibe/mail/smtp.d",
		"members": [
			{
				"line": 29,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 30,
						"name": "plain"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 31,
						"name": "tls"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 32,
						"name": "startTLS"
					}
				],
				"name": "SMTPConnectionType",
				"baseDeco": "i",
				"comment": "\tDetermines the (encryption) type of an SMTP connection.\n"
			},
			{
				"line": 38,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "200",
						"line": 39,
						"name": "_success"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "211",
						"line": 40,
						"name": "systemStatus"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "214",
						"line": 41,
						"name": "helpMessage"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "220",
						"line": 42,
						"name": "serviceReady"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "221",
						"line": 43,
						"name": "serviceClosing"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "250",
						"line": 44,
						"name": "success"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "251",
						"line": 45,
						"name": "forwarding"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "334",
						"line": 46,
						"name": "serverAuthReady"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "354",
						"line": 47,
						"name": "startMailInput"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "421",
						"line": 48,
						"name": "serviceUnavailable"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "450",
						"line": 49,
						"name": "mailboxTemporarilyUnavailable"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "451",
						"line": 50,
						"name": "processingError"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "452",
						"line": 51,
						"name": "outOfDiskSpace"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "500",
						"line": 52,
						"name": "commandUnrecognized"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "501",
						"line": 53,
						"name": "invalidParameters"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "502",
						"line": 54,
						"name": "commandNotImplemented"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "503",
						"line": 55,
						"name": "badCommandSequence"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "504",
						"line": 56,
						"name": "commandParameterNotImplemented"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "521",
						"line": 57,
						"name": "domainAcceptsNoMail"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "530",
						"line": 58,
						"name": "accessDenied"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "550",
						"line": 59,
						"name": "mailboxUnavailable"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "551",
						"line": 60,
						"name": "userNotLocal"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "552",
						"line": 61,
						"name": "exceededStorageAllocation"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "553",
						"line": 62,
						"name": "mailboxNameNotAllowed"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "554",
						"line": 63,
						"name": "transactionFailed"
					}
				],
				"name": "SMTPStatus",
				"baseDeco": "i",
				"comment": " Represents the different status codes for SMTP replies.\n"
			},
			{
				"line": 70,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 71,
						"name": "none"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 72,
						"name": "plain"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 73,
						"name": "login"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "3",
						"line": 74,
						"name": "cramMd5"
					}
				],
				"name": "SMTPAuthType",
				"baseDeco": "i",
				"comment": "\tRepresents the authentication mechanism used by the SMTP client.\n"
			},
			{
				"kind": "class",
				"line": 81,
				"char": 7,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 83,
						"kind": "variable",
						"char": 9,
						"name": "host",
						"deco": "Aya",
						"init": "\"127.0.0.1\"",
						"offset": 16,
						"comment": "SMTP host to connect to\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 85,
						"kind": "variable",
						"char": 9,
						"name": "port",
						"deco": "t",
						"init": "cast(ushort)25u",
						"offset": 32,
						"comment": "Port on which to connect\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 87,
						"kind": "variable",
						"char": 9,
						"name": "localname",
						"deco": "Aya",
						"init": "\"localhost\"",
						"offset": 40,
						"comment": "Own network name to report to the SMTP server\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 89,
						"kind": "variable",
						"char": 21,
						"name": "connectionType",
						"deco": "E4vibe4mail4smtp18SMTPConnectionType",
						"init": "cast(SMTPConnectionType)0",
						"offset": 56,
						"comment": "Type of encryption protocol to use\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 91,
						"kind": "variable",
						"char": 15,
						"name": "authType",
						"deco": "E4vibe4mail4smtp12SMTPAuthType",
						"init": "cast(SMTPAuthType)0",
						"offset": 60,
						"comment": "Authentication type to use\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 94,
						"kind": "variable",
						"char": 24,
						"name": "tlsValidationMode",
						"deco": "E4vibe6stream3tls21TLSPeerValidationMode",
						"init": "cast(TLSPeerValidationMode)15",
						"offset": 64,
						"comment": "Determines how the server certificate gets validated.\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 96,
						"kind": "variable",
						"char": 13,
						"name": "tlsVersion",
						"deco": "E4vibe6stream3tls10TLSVersion",
						"init": "cast(TLSVersion)0",
						"offset": 68,
						"comment": "Version(s) of the TLS/SSL protocol to use\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 98,
						"kind": "variable",
						"originalType": "void delegate(scope TLSContext)",
						"char": 34,
						"name": "tlsContextSetup",
						"deco": "DFNfMC4vibe6stream3tls10TLSContextZv",
						"offset": 72,
						"comment": "Callback to invoke to enable additional setup of the TLS context.\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 101,
						"kind": "variable",
						"char": 9,
						"name": "username",
						"deco": "Aya",
						"offset": 88,
						"comment": "User name to use for authentication\n"
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 103,
						"kind": "variable",
						"char": 9,
						"name": "password",
						"deco": "Aya",
						"offset": 104,
						"comment": "Password to use for authentication\n"
					},
					{
						"line": 105,
						"kind": "constructor",
						"originalType": "@safe ()",
						"char": 2,
						"name": "this",
						"deco": "FNfZC4vibe4mail4smtp18SMTPClientSettings",
						"endchar": 10,
						"endline": 105
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"line": 106,
						"kind": "constructor",
						"originalType": "@safe (string host, ushort port)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyatZC4vibe4mail4smtp18SMTPClientSettings",
						"endchar": 71,
						"endline": 106
					}
				],
				"comment": "\tConfiguration options for the SMTP client.\n",
				"name": "SMTPClientSettings"
			},
			{
				"kind": "class",
				"line": 113,
				"char": 7,
				"members": [
					{
						"storageClass": [
							"@safe"
						],
						"line": 114,
						"kind": "variable",
						"originalType": "InetHeaderMap",
						"char": 16,
						"name": "headers",
						"deco": "S4vibe5utils14dictionarylist__T14DictionaryListTAyaVbi0Vmi12Vbi0ZQBi",
						"offset": 16
					},
					{
						"storageClass": [
							"@safe"
						],
						"line": 115,
						"kind": "variable",
						"char": 9,
						"name": "bodyText",
						"deco": "Aya",
						"offset": 424
					}
				],
				"comment": "\tRepresents an email message, including its headers.\n",
				"name": "Mail"
			},
			{
				"parameters": [
					{
						"deco": "xC4vibe4mail4smtp18SMTPClientSettings",
						"name": "settings"
					},
					{
						"deco": "C4vibe4mail4smtp4Mail",
						"name": "mail"
					}
				],
				"line": 126,
				"kind": "function",
				"originalType": "@safe void(in SMTPClientSettings settings, Mail mail)",
				"char": 6,
				"name": "sendMail",
				"deco": "FNfxC4vibe4mail4smtp18SMTPClientSettingsCQBkQBiQBg4MailZv",
				"endchar": 1,
				"endline": 224,
				"comment": "\tSends an e-mail using the given settings.\n\n\tThe mail parameter must point to a valid $(D Mail) object and should define\n\tat least the headers \"To\", \"From\", Sender\" and \"Subject\".\n\n\tValid headers can be found at http://tools.ietf.org/html/rfc4021\nExample:\nThe following example demonstrates the complete construction of a valid\n\te-mail object with UTF-8 encoding. The Date header, as demonstrated, must\n\tbe converted with the local timezone using the $(D toRFC822DateTimeString)\n\tfunction.$(DDOX_UNITTEST_HEADER __unittest_L232_C1)\n---\nimport vibe.inet.message;\nimport std.datetime;\nvoid testSmtp(string host, ushort port){\n\tMail email = new Mail;\n\temail.headers[\"Date\"] = Clock.currTime(PosixTimeZone.getTimeZone(\"America/New_York\")).toRFC822DateTimeString(); // uses UFCS\n\temail.headers[\"Sender\"] = \"Domain.com Contact Form <no-reply@domain.com>\";\n\temail.headers[\"From\"] = \"John Doe <joe@doe.com>\";\n\temail.headers[\"To\"] = \"Customer Support <support@domain.com>\";\n\temail.headers[\"Subject\"] = \"My subject\";\n\temail.headers[\"Content-Type\"] = \"text/plain;charset=utf-8\";\n\temail.bodyText = \"This message can contain utf-8 [κόσμε], and\\nwill be displayed properly in mail clients with \\\\n line endings.\";\n\n\tauto smtpSettings = new SMTPClientSettings(host, port);\n\tsendMail(smtpSettings, email);\n}\n// testSmtp(\"localhost\", 25);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L232_C1)\n"
			}
		],
		"comment": "\tSMTP client implementation\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.mail.smtp"
	},
	{
		"kind": "module",
		"file": "mongodb/vibe/db/mongo/client.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 11,
				"name": "vibe.db.mongo.collection"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 12,
				"name": "vibe.db.mongo.database"
			},
			{
				"kind": "class",
				"line": 32,
				"char": 7,
				"members": [
					{
						"line": 90,
						"kind": "function",
						"char": 7,
						"name": "cleanupConnections",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 100,
						"comment": " Disconnects all currently unused connections to the server.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"line": 117,
						"kind": "function",
						"char": 18,
						"name": "getCollection",
						"deco": "FNfAyaZS4vibe2db5mongo10collection15MongoCollection",
						"endchar": 2,
						"endline": 120,
						"comment": "\t\tAccesses a collection using an absolute path.\n\n\t\tThe full database.collection path must be specified. To access\n\t\tcollections using a path relative to their database, use getDatabase in\n\t\tconjunction with MongoDatabase.opIndex.\n\n\t\tReturns:\n\t\t\tMongoCollection for the given combined database and collectiion name(path)\n\n\t\tExamples:\n\t\t\t---\n\t\t\tauto col = client.getCollection(\"test.collection\");\n\t\t\t---\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "dbName"
							}
						],
						"line": 144,
						"kind": "function",
						"char": 16,
						"name": "getDatabase",
						"deco": "FNfAyaZS4vibe2db5mongo8database13MongoDatabase",
						"endchar": 2,
						"endline": 147,
						"comment": "\t\tReturns an object representing the specified database.\n\n\t\tThe returned object allows to access the database entity (which contains\n\t\ta set of collections). There are two main use cases:\n\n\t\t1. Accessing collections using a relative path\n\n\t\t2. Performing service commands on the database itself\n\n\t\tNote that there is no performance gain in accessing collections via a\n\t\trelative path compared to getCollection and an absolute path.\n\n\t\tReturns:\n\t\t\tMongoDatabase instance representing requested database\n\n\t\tExamples:\n\t\t\t---\n\t\t\tauto db = client.getDatabase(\"test\");\n\t\t\tauto coll = db[\"collection\"];\n\t\t\t---\n"
					},
					{
						"parameters": [],
						"line": 163,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"line": 163,
								"kind": "function",
								"char": 7,
								"name": "getDatabases",
								"type": "()",
								"endchar": 2,
								"endline": 168
							}
						],
						"name": "getDatabases",
						"comment": "\t \tReturn a handle to all databases of the server.\n\n\t \tReturns:\n\t \t\tAn input range of $(D MongoDatabase) objects.\n\n\t \tExamples:\n\t \t\t---\n\t \t\tauto names = client.getDatabaseNames();\n\t \t\twriteln(\"Current databases are: \", names);\n\t \t\t---\n"
					}
				],
				"comment": "\tRepresents a connection to a MongoDB server.\n\n\tNote that this class uses a ConnectionPool internally to create and reuse\n\tnetwork conections to the server as necessary. It should be reused for all\n\tfibers in a thread for optimum performance in high concurrency scenarios.\n",
				"name": "MongoClient"
			}
		],
		"comment": "\tMongoClient class doing connection management. Usually this is a main entry point\n\tfor client code.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.db.mongo.client"
	},
	{
		"kind": "module",
		"file": "mongodb/vibe/db/mongo/collection.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.db.mongo.cursor"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 11,
				"name": "vibe.db.mongo.connection"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 12,
				"name": "vibe.db.mongo.flags"
			},
			{
				"kind": "struct",
				"line": 33,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "C4vibe2db5mongo6client11MongoClient",
								"name": "client"
							},
							{
								"deco": "Aya",
								"name": "fullPath"
							}
						],
						"line": 41,
						"kind": "constructor",
						"originalType": "ref @safe (MongoClient client, string fullPath)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfC4vibe2db5mongo6client11MongoClientAyaZSQBnQBlQBl10collection15MongoCollection",
						"endchar": 2,
						"endline": 52
					},
					{
						"parameters": [
							{
								"deco": "S4vibe2db5mongo8database13MongoDatabase",
								"storageClass": [
									"ref"
								],
								"name": "db"
							},
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 54,
						"kind": "constructor",
						"originalType": "ref @safe (ref MongoDatabase db, string name)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfKS4vibe2db5mongo8database13MongoDatabaseAyaZSQBrQBpQBp10collection15MongoCollection",
						"endchar": 2,
						"endline": 61
					},
					{
						"line": 66,
						"kind": "function",
						"char": 26,
						"name": "database",
						"deco": "FNdNfZS4vibe2db5mongo8database13MongoDatabase",
						"endchar": 58,
						"endline": 66,
						"comment": "\t  Returns: Root database to which this collection belongs.\n"
					},
					{
						"line": 71,
						"kind": "function",
						"char": 19,
						"name": "name",
						"deco": "xFNdNfZAya",
						"endchar": 55,
						"endline": 71,
						"comment": "\t  Returns: Name of this collection (excluding the database name).\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"line": 79,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "selector"
									},
									{
										"type": "U",
										"name": "update"
									},
									{
										"type": "UpdateFlags",
										"default": "UpdateFlags.None",
										"name": "flags"
									}
								],
								"line": 79,
								"kind": "function",
								"char": 7,
								"name": "update",
								"type": "void(T selector, U update, UpdateFlags flags = UpdateFlags.None)",
								"endchar": 2,
								"endline": 85
							}
						],
						"name": "update",
						"comment": "\t  Performs an update operation on documents matching 'selector', updating them with 'update'.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Updating)\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 98,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "document_or_documents"
									},
									{
										"type": "InsertFlags",
										"default": "InsertFlags.None",
										"name": "flags"
									}
								],
								"line": 98,
								"kind": "function",
								"char": 7,
								"name": "insert",
								"type": "void(T document_or_documents, InsertFlags flags = InsertFlags.None)",
								"endchar": 2,
								"endline": 107
							}
						],
						"name": "insert",
						"comment": "\t  Inserts new documents into the collection.\n\n\t  Note that if the `_id` field of the document(s) is not set, typically\n\t  using `BsonObjectID.generate()`, the server will generate IDs\n\t  automatically. If you need to know the IDs of the inserted documents,\n\t  you need to generate them locally.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Inserting)\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							},
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"line": 116,
						"kind": "template",
						"char": 16,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "query"
									},
									{
										"type": "U",
										"name": "returnFieldSelector"
									},
									{
										"type": "QueryFlags",
										"default": "QueryFlags.None",
										"name": "flags"
									},
									{
										"deco": "i",
										"default": "0",
										"name": "num_skip"
									},
									{
										"deco": "i",
										"default": "0",
										"name": "num_docs_per_chunk"
									}
								],
								"line": 116,
								"kind": "function",
								"char": 16,
								"name": "find",
								"type": "MongoCursor!R(T query, U returnFieldSelector, QueryFlags flags = QueryFlags.None, int num_skip = 0, int num_docs_per_chunk = 0)",
								"endchar": 2,
								"endline": 120
							}
						],
						"name": "find",
						"comment": "\t  Queries the collection for existing documents.\n\n\t  If no arguments are passed to find(), all documents of the collection will be returned.\n\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 123,
						"kind": "template",
						"char": 35,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "query"
									}
								],
								"line": 123,
								"kind": "function",
								"char": 35,
								"name": "find",
								"type": "MongoCursor!(T, R, typeof(null))(T query)",
								"endchar": 92,
								"endline": 123
							}
						],
						"name": "find",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							}
						],
						"line": 126,
						"kind": "template",
						"char": 38,
						"members": [
							{
								"line": 126,
								"kind": "function",
								"char": 38,
								"name": "find",
								"type": "MongoCursor!(Bson, R, typeof(null))()",
								"endchar": 96,
								"endline": 126
							}
						],
						"name": "find",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							},
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"line": 138,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "T",
										"name": "query"
									},
									{
										"type": "U",
										"name": "returnFieldSelector"
									},
									{
										"type": "QueryFlags",
										"default": "QueryFlags.None",
										"name": "flags"
									}
								],
								"line": 138,
								"kind": "function",
								"char": 7,
								"name": "findOne",
								"type": "(T query, U returnFieldSelector, QueryFlags flags = QueryFlags.None)",
								"endchar": 2,
								"endline": 158
							}
						],
						"name": "findOne",
						"comment": " Queries the collection for existing documents.\n\n\t\tReturns:\n\t\t\tBy default, a Bson value of the matching document is returned, or $(D Bson(null))\n\t\t\twhen no document matched. For types R that are not Bson, the returned value is either\n\t\t\tof type $(D R), or of type $(Nullable!R), if $(D R) is not a reference/pointer type.\n\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 160,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "T",
										"name": "query"
									}
								],
								"line": 160,
								"kind": "function",
								"char": 7,
								"name": "findOne",
								"type": "(T query)",
								"endchar": 76,
								"endline": 160
							}
						],
						"name": "findOne",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 168,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "selector"
									},
									{
										"type": "DeleteFlags",
										"default": "DeleteFlags.None",
										"name": "flags"
									}
								],
								"line": 168,
								"kind": "function",
								"char": 7,
								"name": "remove",
								"type": "void(T selector, DeleteFlags flags = DeleteFlags.None)",
								"endchar": 2,
								"endline": 174
							}
						],
						"name": "remove",
						"comment": "\t  Removes documents from the collection.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Removing)\n"
					},
					{
						"parameters": [],
						"line": 177,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 177,
								"kind": "function",
								"char": 7,
								"name": "remove",
								"type": "void()",
								"endchar": 46,
								"endline": 177
							}
						],
						"name": "remove",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							},
							{
								"kind": "type",
								"name": "V"
							}
						],
						"line": 193,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "query"
									},
									{
										"type": "U",
										"name": "update"
									},
									{
										"type": "V",
										"name": "returnFieldSelector"
									}
								],
								"line": 193,
								"kind": "function",
								"char": 7,
								"name": "findAndModify",
								"type": "Bson(T query, U update, V returnFieldSelector)",
								"endchar": 2,
								"endline": 209
							}
						],
						"name": "findAndModify",
						"comment": "\t\tCombines a modify and find operation to a single atomic operation.\n\n\t\tParams:\n\t\t\tquery = MongoDB query expression to identify the matched document\n\t\t\tupdate = Update expression for the matched document\n\t\t\treturnFieldSelector = Optional map of fields to return in the response\n\n\t\tThrows:\n\t\t\tAn `Exception` will be thrown if an error occurs in the\n\t\t\tcommunication with the database server.\n\n\t\tSee_Also: $(LINK http://docs.mongodb.org/manual/reference/command/findAndModify)\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"line": 212,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "query"
									},
									{
										"type": "U",
										"name": "update"
									}
								],
								"line": 212,
								"kind": "function",
								"char": 7,
								"name": "findAndModify",
								"type": "Bson(T query, U update)",
								"endchar": 2,
								"endline": 215
							}
						],
						"name": "findAndModify",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							},
							{
								"kind": "type",
								"name": "V"
							}
						],
						"line": 232,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "query"
									},
									{
										"type": "U",
										"name": "update"
									},
									{
										"type": "V",
										"name": "options"
									}
								],
								"line": 232,
								"kind": "function",
								"char": 7,
								"name": "findAndModifyExt",
								"type": "Bson(T query, U update, V options)",
								"endchar": 2,
								"endline": 249
							}
						],
						"name": "findAndModifyExt",
						"comment": "\t\tCombines a modify and find operation to a single atomic operation with generic options support.\n\n\t\tParams:\n\t\t\tquery = MongoDB query expression to identify the matched document\n\t\t\tupdate = Update expression for the matched document\n\t\t\toptions = Generic BSON object that contains additional options\n\t\t\t\tfields, such as `\"new\": true`\n\n\t\tThrows:\n\t\t\tAn `Exception` will be thrown if an error occurs in the\n\t\t\tcommunication with the database server.\n\n\t\tSee_Also: $(LINK http://docs.mongodb.org/manual/reference/command/findAndModify)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L252_C2)\n---\nimport vibe.db.mongo.mongo;\n\nvoid test()\n{\n\tauto coll = connectMongoDB(\"127.0.0.1\").getCollection(\"test\");\n\tcoll.findAndModifyExt([\"name\": \"foo\"], [\"$set\": [\"value\": \"bar\"]], [\"new\": true]);\n}\n}\n\n/**\nCounts the results of the specified query expression.\n\nThrows Exception if a DB communication error occured.\nSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{count%28%29}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L252_C2)\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 268,
						"kind": "template",
						"char": 8,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "query"
									}
								],
								"line": 268,
								"kind": "function",
								"char": 8,
								"name": "count",
								"type": "ulong(T query)",
								"endchar": 2,
								"endline": 288
							}
						],
						"name": "count",
						"comment": "\t\tCounts the results of the specified query expression.\n\n\t\tThrows Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{count%28%29}})\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 307,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "ARGS",
										"name": "pipeline"
									}
								],
								"line": 307,
								"kind": "function",
								"char": 7,
								"name": "aggregate",
								"type": "Bson(ARGS pipeline)",
								"endchar": 2,
								"endline": 320
							}
						],
						"name": "aggregate",
						"comment": "\t\tCalculates aggregate values for the data in a collection.\n\n\t\tParams:\n\t\t\tpipeline = A sequence of data aggregation processes. These can\n\t\t\t\teither be given as separate parameters, or as a single array\n\t\t\t\tparameter.\n\n\t\tReturns:\n\t\t\tReturns the list of documents aggregated by the pipeline. The return\n\t\t\tvalue is either a single `Bson` array value or a `MongoCursor`\n\t\t\t(input range) of the requested document type.\n\n\t\tThrows: Exception if a DB communication error occured\n\n\t\tSee_Also: $(LINK http://docs.mongodb.org/manual/reference/method/db.collection.aggregate)\nExample:\nExample taken from the MongoDB documentation$(DDOX_UNITTEST_HEADER __unittest_L349_C2)\n---\nimport vibe.db.mongo.mongo;\n\nvoid test() {\n\tauto db = connectMongoDB(\"127.0.0.1\").getDatabase(\"test\");\n\tauto results = db[\"coll\"].aggregate(\n\t\t[\"$match\": [\"status\": \"A\"]],\n\t\t[\"$group\": [\"_id\": Bson(\"$cust_id\"),\n\t\t\t\"total\": Bson([\"$sum\": Bson(\"$amount\")])]],\n\t\t[\"$sort\": [\"total\": -1]]);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L349_C2)\nExample:\nThe same example, but using an array of arguments with custom options$(DDOX_UNITTEST_HEADER __unittest_L363_C2)\n---\nimport vibe.db.mongo.mongo;\n\nvoid test() {\n\tauto db = connectMongoDB(\"127.0.0.1\").getDatabase(\"test\");\n\n\tBson[] args;\n\targs ~= serializeToBson([\"$match\": [\"status\": \"A\"]]);\n\targs ~= serializeToBson([\"$group\": [\"_id\": Bson(\"$cust_id\"),\n\t\t\t\"total\": Bson([\"$sum\": Bson(\"$amount\")])]]);\n\targs ~= serializeToBson([\"$sort\": [\"total\": -1]]);\n\n\tAggregateOptions options;\n\toptions.cursor.batchSize = 10; // prefetch the first 10 results\n\tauto results = db[\"coll\"].aggregate(args, options);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L363_C2)\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							},
							{
								"kind": "type",
								"default": "Bson",
								"name": "S"
							}
						],
						"line": 323,
						"kind": "template",
						"char": 16,
						"members": [
							{
								"parameters": [
									{
										"type": "S[]",
										"name": "pipeline"
									},
									{
										"type": "AggregateOptions",
										"name": "options"
									}
								],
								"line": 323,
								"kind": "function",
								"char": 16,
								"name": "aggregate",
								"type": "MongoCursor!R(S[] pipeline, AggregateOptions options)",
								"endchar": 2,
								"endline": 346
							}
						],
						"name": "aggregate",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							},
							{
								"kind": "type",
								"name": "Q"
							}
						],
						"line": 393,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "Q",
										"name": "query"
									}
								],
								"line": 393,
								"kind": "function",
								"char": 7,
								"name": "distinct",
								"type": "(string key, Q query)",
								"endchar": 2,
								"endline": 412
							}
						],
						"name": "distinct",
						"comment": "\t\tReturns an input range of all unique values for a certain field for\n\t\trecords matching the given query.\n\n\t\tParams:\n\t\t\tkey = Name of the field for which to collect unique values\n\t\t\tquery = The query used to select records\n\n\t\tReturns:\n\t\t\tAn input range with items of type `R` (`Bson` by default) is\n\t\t\treturned.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L415_C2)\n---\nimport std.algorithm : equal;\nimport vibe.db.mongo.mongo;\n\nvoid test()\n{\n\tauto db = connectMongoDB(\"127.0.0.1\").getDatabase(\"test\");\n\tauto coll = db[\"collection\"];\n\n\tcoll.drop();\n\tcoll.insert([\"a\": \"first\", \"b\": \"foo\"]);\n\tcoll.insert([\"a\": \"first\", \"b\": \"bar\"]);\n\tcoll.insert([\"a\": \"first\", \"b\": \"bar\"]);\n\tcoll.insert([\"a\": \"second\", \"b\": \"baz\"]);\n\tcoll.insert([\"a\": \"second\", \"b\": \"bam\"]);\n\n\tauto result = coll.distinct!string(\"b\", [\"a\": \"first\"]);\n\n\tassert(result.equal([\"foo\", \"bar\"]));\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L415_C2)\n"
					},
					{
						"parameters": [
							{
								"deco": "AxS3std8typecons__T5TupleTAyaTiZQn",
								"storageClass": [
									"scope"
								],
								"name": "field_orders"
							},
							{
								"deco": "E4vibe2db5mongo5flags10IndexFlags",
								"default": "cast(IndexFlags)0",
								"name": "flags"
							},
							{
								"deco": "S4core4time8Duration",
								"default": "dur(0L)",
								"name": "expire_time"
							}
						],
						"line": 444,
						"kind": "function",
						"originalType": "@safe void(scope const(Tuple!(string, int))[] field_orders, IndexFlags flags = IndexFlags.none, Duration expire_time = 0.seconds)",
						"char": 7,
						"name": "ensureIndex",
						"deco": "FNfMAxS3std8typecons__T5TupleTAyaTiZQnE4vibe2db5mongo5flags10IndexFlagsS4core4time8DurationZv",
						"endchar": 2,
						"endline": 471,
						"comment": "\t\tCreates or updates an index.\n\n\t\tNote that the overload taking an associative array of field orders\n\t\twill be removed. Since the order of fields matters, it is\n\t\tonly suitable for single-field indices.\n"
					},
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "HAyai",
								"name": "field_orders"
							},
							{
								"deco": "E4vibe2db5mongo5flags10IndexFlags",
								"default": "cast(IndexFlags)0",
								"name": "flags"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "expireAfterSeconds"
							}
						],
						"line": 474,
						"kind": "function",
						"originalType": "@safe void(int[string] field_orders, IndexFlags flags = IndexFlags.none, ulong expireAfterSeconds = 0)",
						"char": 7,
						"name": "ensureIndex",
						"deco": "FNfHAyaiE4vibe2db5mongo5flags10IndexFlagsmZv",
						"endchar": 2,
						"endline": 480,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 482,
						"kind": "function",
						"char": 7,
						"name": "dropIndex",
						"deco": "FNfAyaZv",
						"endchar": 2,
						"endline": 494
					},
					{
						"line": 496,
						"kind": "function",
						"char": 7,
						"name": "drop",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 506
					}
				],
				"comment": "  Represents a single collection inside a MongoDB.\n\n  All methods take arbitrary types for Bson arguments. serializeToBson() is implicitly called on\n  them before they are send to the database. The following example shows some possible ways\n  to specify objects.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L510_C1)\n---\nimport vibe.data.bson;\nimport vibe.data.json;\nimport vibe.db.mongo.mongo;\n\nvoid test()\n{\n\tMongoClient client = connectMongoDB(\"127.0.0.1\");\n\tMongoCollection users = client.getCollection(\"myapp.users\");\n\n\t// canonical version using a Bson object\n\tusers.insert(Bson([\"name\": Bson(\"admin\"), \"password\": Bson(\"secret\")]));\n\n\t// short version using a string[string] AA that is automatically\n\t// serialized to Bson\n\tusers.insert([\"name\": \"admin\", \"password\": \"secret\"]);\n\n\t// BSON specific types are also serialized automatically\n\tauto uid = BsonObjectID.fromString(\"507f1f77bcf86cd799439011\");\n\tBson usr = users.findOne([\"_id\": uid]);\n\n\t// JSON is another possibility\n\tJson jusr = parseJsonString(`{\"name\": \"admin\", \"password\": \"secret\"}`);\n\tusers.insert(jusr);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L510_C1)\nExample:\nUsing the type system to define a document \"schema\"$(DDOX_UNITTEST_HEADER __unittest_L538_C1)\n---\nimport vibe.db.mongo.mongo;\nimport vibe.data.serialization : name;\nimport std.typecons : Nullable;\n\n// Nested object within a \"User\" document\nstruct Address {\n\tstring name;\n\tstring street;\n\tint zipCode;\n}\n\n// The document structure of the \"myapp.users\" collection\nstruct User {\n\t@name(\"_id\") BsonObjectID id; // represented as \"_id\" in the database\n\tstring loginName;\n\tstring password;\n\tAddress address;\n}\n\nvoid test()\n{\n\tMongoClient client = connectMongoDB(\"127.0.0.1\");\n\tMongoCollection users = client.getCollection(\"myapp.users\");\n\n\t// D values are automatically serialized to the internal BSON format\n\t// upon insertion - see also vibe.data.serialization\n\tUser usr;\n\tusr.id = BsonObjectID.generate();\n\tusr.loginName = \"admin\";\n\tusr.password = \"secret\";\n\tusers.insert(usr);\n\n\t// find supports direct de-serialization of the returned documents\n\tforeach (usr2; users.find!User()) {\n\t\tlogInfo(\"User: %s\", usr2.loginName);\n\t}\n\n\t// the same goes for findOne\n\tNullable!User qusr = users.findOne!User([\"_id\": usr.id]);\n\tif (!qusr.isNull)\n\t\tlogInfo(\"User: %s\", qusr.loginName);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L538_C1)\n",
				"name": "MongoCollection"
			},
			{
				"kind": "struct",
				"line": 588,
				"char": 1,
				"members": [
					{
						"line": 590,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"line": 592,
								"char": 3,
								"value": "\"local\"",
								"comment": "This is the default read concern level.\n",
								"name": "local"
							},
							{
								"kind": "enum member",
								"line": 594,
								"char": 3,
								"value": "\"available\"",
								"comment": "This is the default for reads against secondaries when afterClusterTime and \"level\" are unspecified. The query returns the the instance’s most recent data.\n",
								"name": "available"
							},
							{
								"kind": "enum member",
								"line": 596,
								"char": 3,
								"value": "\"majority\"",
								"comment": "Available for replica sets that use WiredTiger storage engine.\n",
								"name": "majority"
							},
							{
								"kind": "enum member",
								"line": 598,
								"char": 3,
								"value": "\"linearizable\"",
								"comment": "Available for read operations on the primary only.\n",
								"name": "linearizable"
							}
						],
						"name": "Level",
						"baseDeco": "Aya",
						"comment": "\n"
					},
					{
						"line": 602,
						"kind": "variable",
						"char": 8,
						"name": "level",
						"deco": "E4vibe2db5mongo10collection11ReadConcern5Level",
						"offset": 0,
						"comment": "\n"
					}
				],
				"comment": "  Specifies a level of isolation for read operations. For example, you can use read concern to only read data that has propagated to a majority of nodes in a replica set.\n\n  See_Also: $(LINK https://docs.mongodb.com/manual/reference/read-concern/)\n",
				"name": "ReadConcern"
			},
			{
				"kind": "struct",
				"line": 610,
				"char": 1,
				"members": [
					{
						"line": 612,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"line": 614,
								"char": 3,
								"value": "\"non-ignorable\"",
								"comment": "Whitespace and punctuation are considered base characters\n",
								"name": "nonIgnorable"
							},
							{
								"kind": "enum member",
								"line": 616,
								"char": 3,
								"value": "\"shifted\"",
								"comment": "Whitespace and punctuation are not considered base characters and are only distinguished at strength levels greater than 3\n",
								"name": "shifted"
							}
						],
						"name": "Alternate",
						"baseDeco": "Aya",
						"comment": "\n"
					},
					{
						"line": 620,
						"kind": "enum",
						"char": 2,
						"members": [
							{
								"kind": "enum member",
								"line": 622,
								"char": 3,
								"value": "\"punct\"",
								"comment": "Both whitespaces and punctuation are “ignorable”, i.e. not considered base characters.\n",
								"name": "punct"
							},
							{
								"kind": "enum member",
								"line": 624,
								"char": 3,
								"value": "\"space\"",
								"comment": "Whitespace are “ignorable”, i.e. not considered base characters.\n",
								"name": "space"
							}
						],
						"name": "MaxVariable",
						"baseDeco": "Aya",
						"comment": "\n"
					},
					{
						"line": 634,
						"kind": "variable",
						"char": 9,
						"name": "locale",
						"deco": "Aya",
						"offset": 0,
						"comment": "\t  The ICU locale\n\n\t  See_Also: See_Also: $(LINK https://docs.mongodb.com/manual/reference/collation-locales-defaults/#collation-languages-locales) for a list of supported locales.\n\n\t  To specify simple binary comparison, specify locale value of \"simple\".\n"
					},
					{
						"line": 636,
						"kind": "variable",
						"char": 6,
						"name": "strength",
						"deco": "i",
						"offset": 16,
						"comment": "The level of comparison to perform. Corresponds to ICU Comparison Levels.\n"
					},
					{
						"line": 638,
						"kind": "variable",
						"char": 7,
						"name": "caseLevel",
						"deco": "b",
						"offset": 20,
						"comment": "Flag that determines whether to include case comparison at strength level 1 or 2.\n"
					},
					{
						"line": 640,
						"kind": "variable",
						"char": 9,
						"name": "caseFirst",
						"deco": "Aya",
						"offset": 24,
						"comment": "A flag that determines sort order of case differences during tertiary level comparisons.\n"
					},
					{
						"line": 642,
						"kind": "variable",
						"char": 7,
						"name": "numericOrdering",
						"deco": "b",
						"offset": 40,
						"comment": "Flag that determines whether to compare numeric strings as numbers or as strings.\n"
					},
					{
						"line": 644,
						"kind": "variable",
						"char": 12,
						"name": "alternate",
						"deco": "E4vibe2db5mongo10collection9Collation9Alternate",
						"offset": 48,
						"comment": "Field that determines whether collation should consider whitespace and punctuation as base characters for purposes of comparison.\n"
					},
					{
						"line": 646,
						"kind": "variable",
						"char": 14,
						"name": "maxVariable",
						"deco": "E4vibe2db5mongo10collection9Collation11MaxVariable",
						"offset": 64,
						"comment": "Field that determines up to which characters are considered ignorable when `alternate: \"shifted\"`. Has no effect if `alternate: \"non-ignorable\"`\n"
					},
					{
						"line": 652,
						"kind": "variable",
						"char": 7,
						"name": "backwards",
						"deco": "b",
						"offset": 80,
						"comment": "\t  Flag that determines whether strings with diacritics sort from back of the string, such as with some French dictionary ordering.\n\n\t  If `true` compare from back to front, otherwise front to back.\n"
					},
					{
						"line": 654,
						"kind": "variable",
						"char": 7,
						"name": "normalization",
						"deco": "b",
						"offset": 81,
						"comment": "Flag that determines whether to check if text require normalization and to perform normalization. Generally, majority of text does not require this normalization processing.\n"
					}
				],
				"comment": "  Collation allows users to specify language-specific rules for string comparison, such as rules for lettercase and accent marks.\n\n  See_Also: $(LINK https://docs.mongodb.com/manual/reference/collation/)\n",
				"name": "Collation"
			},
			{
				"kind": "struct",
				"line": 658,
				"char": 1,
				"members": [
					{
						"line": 660,
						"kind": "variable",
						"char": 6,
						"name": "batchSize",
						"deco": "i",
						"offset": 0,
						"comment": "Specifies the initial batch size for the cursor.\n"
					}
				],
				"comment": "\n",
				"name": "CursorInitArguments"
			},
			{
				"kind": "struct",
				"line": 668,
				"char": 1,
				"members": [
					{
						"line": 670,
						"kind": "variable",
						"char": 22,
						"name": "cursor",
						"deco": "S4vibe2db5mongo10collection19CursorInitArguments",
						"offset": 0,
						"comment": "Specifies the initial batch size for the cursor.\n"
					},
					{
						"line": 672,
						"kind": "variable",
						"char": 16,
						"name": "explain",
						"deco": "S3std8typecons__T8NullableTbZQm",
						"offset": 4,
						"comment": "Specifies to return the information on the processing of the pipeline.\n"
					},
					{
						"line": 674,
						"kind": "variable",
						"char": 16,
						"name": "allowDiskUse",
						"deco": "S3std8typecons__T8NullableTbZQm",
						"offset": 6,
						"comment": "Enables writing to temporary files. When set to true, aggregation operations can write data to the _tmp subdirectory in the dbPath directory.\n"
					},
					{
						"line": 676,
						"kind": "variable",
						"char": 16,
						"name": "maxTimeMS",
						"deco": "S3std8typecons__T8NullableTkZQm",
						"offset": 8,
						"comment": "Specifies a time limit in milliseconds for processing operations on a cursor. If you do not specify a value for maxTimeMS, operations will not time out.\n"
					},
					{
						"line": 678,
						"kind": "variable",
						"char": 16,
						"name": "bypassDocumentValidation",
						"deco": "S3std8typecons__T8NullableTbZQm",
						"offset": 16,
						"comment": "Available only if you specify the $out aggregation operator.\n"
					},
					{
						"line": 680,
						"kind": "variable",
						"originalType": "Nullable!ReadConcern",
						"char": 23,
						"name": "readConcern",
						"deco": "S3std8typecons__T8NullableTS4vibe2db5mongo10collection11ReadConcernZQBz",
						"offset": 24,
						"comment": "Specifies the read concern.\n"
					},
					{
						"line": 682,
						"kind": "variable",
						"originalType": "Nullable!Collation",
						"char": 21,
						"name": "collation",
						"deco": "S3std8typecons__T8NullableTS4vibe2db5mongo10collection9CollationZQBw",
						"offset": 48,
						"comment": "\n"
					},
					{
						"line": 688,
						"kind": "variable",
						"originalType": "Nullable!Bson",
						"char": 16,
						"name": "hint",
						"deco": "S3std8typecons__T8NullableTS4vibe4data4bson4BsonZQBg",
						"offset": 144,
						"comment": "\t  The index to use for the aggregation. The index is on the initial collection/view against which the aggregation is run.\n\n\t  Specify the index either by the index name or by the index specification document.\n"
					},
					{
						"line": 690,
						"kind": "variable",
						"char": 18,
						"name": "comment",
						"deco": "S3std8typecons__T8NullableTAyaZQo",
						"offset": 176,
						"comment": "Users can specify an arbitrary string to help trace the operation through the database profiler, currentOp, and logs.\n"
					}
				],
				"comment": "  Represents available options for an aggregate call\n\n  See_Also: $(LINK https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/)\n",
				"name": "AggregateOptions"
			}
		],
		"comment": "\tMongoCollection class\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.db.mongo.collection"
	},
	{
		"kind": "module",
		"file": "mongodb/vibe/db/mongo/connection.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.data.bson"
			},
			{
				"kind": "alias",
				"line": 44,
				"char": 1,
				"deco": "yS4vibe2db5mongo10connection22_MongoErrorDescription",
				"comment": " D POD representation of Mongo error object.\n\n For successful queries \"code\" is negative.\n Can be used also to check how many documents where updated upon\n a successful query via \"n\" field.\n",
				"name": "MongoErrorDescription"
			},
			{
				"line": 49,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 53,
						"kind": "constructor",
						"originalType": "@safe (string message, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyaQdmC6object9ThrowableZC4vibe2db5mongo10connection14MongoException",
						"endchar": 2,
						"endline": 56
					}
				],
				"name": "MongoException",
				"comment": " Root class for vibe.d Mongo driver exception hierarchy.\n"
			},
			{
				"line": 64,
				"kind": "class",
				"char": 1,
				"base": "vibe.db.mongo.connection.MongoException",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 68,
						"kind": "constructor",
						"originalType": "@safe (string message, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyaQdmC6object9ThrowableZC4vibe2db5mongo10connection20MongoDriverException",
						"endchar": 2,
						"endline": 71
					}
				],
				"name": "MongoDriverException",
				"comment": " Generic class for all exception related to unhandled driver problems.\n\n I.e.: protocol mismatch or unexpected mongo service behavior.\n"
			},
			{
				"line": 80,
				"kind": "class",
				"char": 1,
				"base": "vibe.db.mongo.connection.MongoException",
				"members": [
					{
						"storageClass": [
							"immutable",
							"@safe"
						],
						"line": 84,
						"kind": "variable",
						"originalType": "MongoErrorDescription",
						"char": 24,
						"name": "description",
						"deco": "yS4vibe2db5mongo10connection22_MongoErrorDescription",
						"offset": 80
					},
					{
						"parameters": [
							{
								"deco": "yS4vibe2db5mongo10connection22_MongoErrorDescription",
								"name": "description"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 87,
						"kind": "constructor",
						"originalType": "@safe (MongoErrorDescription description, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 2,
						"name": "this",
						"deco": "FNfyS4vibe2db5mongo10connection22_MongoErrorDescriptionAyamC6object9ThrowableZCQCwQCuQCuQCr16MongoDBException",
						"endchar": 2,
						"endline": 92
					}
				],
				"name": "MongoDBException",
				"comment": " Wrapper class for all inner mongo collection manipulation errors.\n\n It does not indicate problem with vibe.d driver itself. Most frequently this\n one is thrown when MongoConnection is in checked mode and getLastError() has something interesting.\n"
			},
			{
				"line": 100,
				"kind": "class",
				"char": 1,
				"base": "vibe.db.mongo.connection.MongoException",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 104,
						"kind": "constructor",
						"originalType": "@safe (string message, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyaQdmC6object9ThrowableZC4vibe2db5mongo10connection18MongoAuthException",
						"endchar": 2,
						"endline": 107
					}
				],
				"name": "MongoAuthException",
				"comment": " Generic class for all exceptions related to authentication problems.\n\n I.e.: unsupported mechanisms or wrong credentials.\n"
			},
			{
				"kind": "class",
				"line": 116,
				"char": 7,
				"members": [
					{
						"storageClass": [
							"enum",
							"@safe"
						],
						"line": 132,
						"kind": "variable",
						"char": 14,
						"name": "defaultPort",
						"deco": "t",
						"init": "cast(ushort)27017u"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "server"
							},
							{
								"deco": "t",
								"default": "cast(ushort)27017u",
								"name": "port"
							}
						],
						"line": 135,
						"kind": "constructor",
						"originalType": "@safe (string server, ushort port = defaultPort)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyatZC4vibe2db5mongo10connection15MongoConnection",
						"endchar": 2,
						"endline": 139,
						"comment": "Simplified constructor overload, with no m_settings\n"
					},
					{
						"parameters": [
							{
								"deco": "C4vibe2db5mongo8settings19MongoClientSettings",
								"name": "cfg"
							}
						],
						"line": 141,
						"kind": "constructor",
						"originalType": "@safe (MongoClientSettings cfg)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe2db5mongo8settings19MongoClientSettingsZCQBuQBsQBs10connection15MongoConnection",
						"endchar": 2,
						"endline": 149
					},
					{
						"line": 151,
						"kind": "function",
						"char": 7,
						"name": "connect",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 207
					},
					{
						"line": 209,
						"kind": "function",
						"char": 7,
						"name": "disconnect",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 224
					},
					{
						"line": 226,
						"kind": "function",
						"char": 17,
						"name": "connected",
						"deco": "xFNdNfZb",
						"endchar": 72,
						"endline": 226
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "collection_name"
							},
							{
								"deco": "E4vibe2db5mongo5flags11UpdateFlags",
								"name": "flags"
							},
							{
								"deco": "S4vibe4data4bson4Bson",
								"name": "selector"
							},
							{
								"deco": "S4vibe4data4bson4Bson",
								"name": "update"
							}
						],
						"line": 229,
						"kind": "function",
						"char": 7,
						"name": "update",
						"deco": "FNfAyaE4vibe2db5mongo5flags11UpdateFlagsSQBi4data4bson4BsonQtZv",
						"endchar": 2,
						"endline": 234
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "collection_name"
							},
							{
								"deco": "E4vibe2db5mongo5flags11InsertFlags",
								"name": "flags"
							},
							{
								"deco": "AS4vibe4data4bson4Bson",
								"name": "documents"
							}
						],
						"line": 236,
						"kind": "function",
						"char": 7,
						"name": "insert",
						"deco": "FNfAyaE4vibe2db5mongo5flags11InsertFlagsASQBj4data4bson4BsonZv",
						"endchar": 2,
						"endline": 242
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 244,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "collection_name"
									},
									{
										"type": "QueryFlags",
										"name": "flags"
									},
									{
										"deco": "i",
										"name": "nskip"
									},
									{
										"deco": "i",
										"name": "nret"
									},
									{
										"type": "Bson",
										"name": "query"
									},
									{
										"type": "Bson",
										"name": "returnFieldSelector"
									},
									{
										"type": "ReplyDelegate",
										"storageClass": [
											"scope"
										],
										"name": "on_msg"
									},
									{
										"type": "DocDelegate!T",
										"storageClass": [
											"scope"
										],
										"name": "on_doc"
									}
								],
								"line": 244,
								"kind": "function",
								"char": 7,
								"name": "query",
								"type": "void(string collection_name, QueryFlags flags, int nskip, int nret, Bson query, Bson returnFieldSelector, scope ReplyDelegate on_msg, scope DocDelegate!T on_doc)",
								"endchar": 2,
								"endline": 254
							}
						],
						"name": "query"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 256,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "collection_name"
									},
									{
										"deco": "i",
										"name": "nret"
									},
									{
										"deco": "l",
										"name": "cursor_id"
									},
									{
										"type": "ReplyDelegate",
										"storageClass": [
											"scope"
										],
										"name": "on_msg"
									},
									{
										"type": "DocDelegate!T",
										"storageClass": [
											"scope"
										],
										"name": "on_doc"
									}
								],
								"line": 256,
								"kind": "function",
								"char": 7,
								"name": "getMore",
								"type": "void(string collection_name, int nret, long cursor_id, scope ReplyDelegate on_msg, scope DocDelegate!T on_doc)",
								"endchar": 2,
								"endline": 261
							}
						],
						"name": "getMore"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "collection_name"
							},
							{
								"deco": "E4vibe2db5mongo5flags11DeleteFlags",
								"name": "flags"
							},
							{
								"deco": "S4vibe4data4bson4Bson",
								"name": "selector"
							}
						],
						"line": 263,
						"kind": "function",
						"char": 7,
						"name": "delete_",
						"deco": "FNfAyaE4vibe2db5mongo5flags11DeleteFlagsSQBi4data4bson4BsonZv",
						"endchar": 2,
						"endline": 268
					},
					{
						"parameters": [
							{
								"deco": "Al",
								"name": "cursors"
							}
						],
						"line": 270,
						"kind": "function",
						"char": 7,
						"name": "killCursors",
						"deco": "FNfAlZv",
						"endchar": 2,
						"endline": 274
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "db"
							}
						],
						"line": 276,
						"kind": "function",
						"originalType": "@safe MongoErrorDescription(string db)",
						"char": 24,
						"name": "getLastError",
						"deco": "FNfAyaZyS4vibe2db5mongo10connection22_MongoErrorDescription",
						"endchar": 2,
						"endline": 324
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 331,
						"kind": "function",
						"originalType": "@safe ()",
						"char": 7,
						"name": "listDatabases",
						"deco": "FNfZS3std9algorithm9iteration__T9MapResultS_D4vibe2db5mongo10connection15MongoConnection13listDatabasesMFNfZ6toInfoFNfxSQCx4data4bson4BsonZSQDrQDpQDpQDm11MongoDBInfoTSQGgQGfQFy__TQFrSQFiQClQCjQCh7byValueMxFNfZ9__lambda1TSQGuQDxQDvQDt14byKeyValueImplMxFNfZ3RngZQIuZQIy",
						"endchar": 2,
						"endline": 361,
						"comment": " Queries the server for all databases.\n\n\t\tReturns:\n\t\t\tAn input range of $(D MongoDBInfo) values.\n"
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 7,
						"line": 116,
						"name": "~this"
					}
				],
				"comment": "  [internal] Provides low-level mongodb protocol access.\n\n  It is not intended for direct usage. Please use vibe.db.mongo.db and vibe.db.mongo.collection modules for your code.\n  Note that a MongoConnection may only be used from one fiber/thread at a time.\n",
				"name": "MongoConnection"
			},
			{
				"kind": "alias",
				"deco": "DFNflE4vibe2db5mongo5flags10ReplyFlagsiiZv",
				"char": 1,
				"line": 602,
				"name": "ReplyDelegate"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 603,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "void delegate(size_t idx, ref T doc) @safe",
						"char": 27,
						"line": 603,
						"name": "DocDelegate"
					}
				],
				"name": "DocDelegate"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 607,
						"kind": "variable",
						"char": 9,
						"name": "name",
						"deco": "Aya",
						"offset": 0
					},
					{
						"line": 608,
						"kind": "variable",
						"char": 9,
						"name": "sizeOnDisk",
						"deco": "d",
						"offset": 16
					},
					{
						"line": 609,
						"kind": "variable",
						"char": 7,
						"name": "empty",
						"deco": "b",
						"offset": 24
					}
				],
				"line": 605,
				"name": "MongoDBInfo"
			}
		],
		"comment": "\tLow level mongodb protocol.\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.db.mongo.connection"
	},
	{
		"kind": "module",
		"file": "mongodb/vibe/db/mongo/cursor.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.data.bson"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Q"
					},
					{
						"kind": "type",
						"default": "Bson",
						"name": "R"
					},
					{
						"kind": "type",
						"default": "Bson",
						"name": "S"
					}
				],
				"line": 19,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"kind": "alias",
						"type": "MongoCursor!R",
						"char": 12,
						"line": 19,
						"name": "MongoCursor"
					}
				],
				"name": "MongoCursor"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "Bson",
						"name": "DocType"
					}
				],
				"line": 28,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "MongoCursorData!DocType",
								"char": 34,
								"line": 29,
								"name": "m_data"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "Q"
									},
									{
										"kind": "type",
										"name": "S"
									}
								],
								"line": 31,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"parameters": [
											{
												"type": "MongoClient",
												"name": "client"
											},
											{
												"type": "string",
												"name": "collection"
											},
											{
												"type": "QueryFlags",
												"name": "flags"
											},
											{
												"deco": "i",
												"name": "nskip"
											},
											{
												"deco": "i",
												"name": "nret"
											},
											{
												"type": "Q",
												"name": "query"
											},
											{
												"type": "S",
												"name": "return_field_selector"
											}
										],
										"line": 31,
										"kind": "constructor",
										"char": 10,
										"name": "this",
										"type": "(MongoClient client, string collection, QueryFlags flags, int nskip, int nret, Q query, S return_field_selector)",
										"endchar": 2,
										"endline": 35
									}
								],
								"name": "this"
							},
							{
								"parameters": [
									{
										"type": "MongoClient",
										"name": "client"
									},
									{
										"type": "string",
										"name": "collection"
									},
									{
										"deco": "l",
										"name": "cursor"
									},
									{
										"type": "DocType[]",
										"name": "existing_documents"
									}
								],
								"line": 37,
								"kind": "constructor",
								"char": 10,
								"name": "this",
								"type": "(MongoClient client, string collection, long cursor, DocType[] existing_documents)",
								"endchar": 2,
								"endline": 41
							},
							{
								"line": 48,
								"kind": "destructor",
								"char": 2,
								"name": "~this",
								"endchar": 2,
								"endline": 53
							},
							{
								"line": 60,
								"kind": "function",
								"char": 17,
								"name": "empty",
								"type": "@property bool()",
								"endchar": 66,
								"endline": 60,
								"comment": "\t\tReturns true if there are no more documents for this cursor.\n\n\t\tThrows: An exception if there is a query or communication error.\n"
							},
							{
								"line": 69,
								"kind": "function",
								"char": 20,
								"name": "front",
								"type": "@property DocType()",
								"endchar": 51,
								"endline": 69,
								"comment": "\t\tReturns the current document of the response.\n\n\t\tUse empty and popFront to iterate over the list of documents using an\n\t\tinput range interface. Note that calling this function is only allowed\n\t\tif empty returns false.\n"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 91,
								"kind": "template",
								"char": 14,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"name": "order"
											}
										],
										"line": 91,
										"kind": "function",
										"char": 14,
										"name": "sort",
										"type": "MongoCursor(T order)",
										"endchar": 2,
										"endline": 95
									}
								],
								"name": "sort",
								"comment": "\t\tControls the order in which the query returns matching documents.\n\n\t\tThis method must be called before starting to iterate, or an exeption\n\t\twill be thrown. If multiple calls to $(D sort()) are issued, only\n\t\tthe last one will have an effect.\n\n\t\tParams:\n\t\t\torder = A BSON object convertible value that defines the sort order\n\t\t\t\tof the result. This BSON object must be structured according to\n\t\t\t\tthe MongoDB documentation (see below).\n\n\t\tReturns: Reference to the modified original curser instance.\n\n\t\tThrows:\n\t\t\tAn exception if there is a query or communication error.\n\t\t\tAlso throws if the method was called after beginning of iteration.\n\n\t\tSee_Also: $(LINK http://docs.mongodb.org/manual/reference/method/cursor.sort)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L98_C8)\n---\nimport vibe.core.log;\nimport vibe.db.mongo.mongo;\n\nvoid test()\n@safe {\n\tauto db = connectMongoDB(\"127.0.0.1\").getDatabase(\"test\");\n\tauto coll = db[\"testcoll\"];\n\n\t// find all entries in reverse date order\n\tforeach (entry; coll.find().sort([\"date\": -1]))\n\t\t() @safe { logInfo(\"Entry: %s\", entry); } ();\n\n\t// the same, but using a struct to avoid memory allocations\n\tstatic struct Order { int date; }\n\tforeach (entry; coll.find().sort(Order(-1)))\n\t\tlogInfo(\"Entry: %s\", entry);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L98_C8)\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "count"
									}
								],
								"line": 133,
								"kind": "function",
								"char": 14,
								"name": "limit",
								"type": "MongoCursor(size_t count)",
								"endchar": 2,
								"endline": 137,
								"comment": "\t\tLimits the number of documents that the cursor returns.\n\n\t\tThis method must be called before beginnig iteration in order to have\n\t\teffect. If multiple calls to limit() are made, the one with the lowest\n\t\tlimit will be chosen.\n\n\t\tParams:\n\t\t\tcount = The maximum number number of documents to return. A value\n\t\t\t\tof zero means unlimited.\n\n\t\tReturns: the same cursor\n\n\t\tSee_Also: $(LINK http://docs.mongodb.org/manual/reference/method/cursor.limit)\n"
							},
							{
								"parameters": [
									{
										"deco": "i",
										"name": "count"
									}
								],
								"line": 153,
								"kind": "function",
								"char": 14,
								"name": "skip",
								"type": "MongoCursor(int count)",
								"endchar": 2,
								"endline": 157,
								"comment": "\t\tSkips a given number of elements at the beginning of the cursor.\n\n\t\tThis method must be called before beginnig iteration in order to have\n\t\teffect. If multiple calls to skip() are made, the one with the maximum\n\t\tnumber will be chosen.\n\n\t\tParams:\n\t\t\tcount = The number of documents to skip.\n\n\t\tReturns: the same cursor\n\n\t\tSee_Also: $(LINK http://docs.mongodb.org/manual/reference/method/cursor.skip)\n"
							},
							{
								"line": 187,
								"kind": "function",
								"char": 7,
								"name": "popFront",
								"type": "void()",
								"endchar": 39,
								"endline": 187,
								"comment": "\t\tAdvances the cursor to the next document of the response.\n\n\t\tNote that calling this function is only allowed if empty returns false.\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 197,
								"kind": "function",
								"char": 7,
								"name": "byPair",
								"type": "()",
								"endchar": 2,
								"endline": 207,
								"comment": "\t\tIterates over all remaining documents.\n\n\t\tNote that iteration is one-way - elements that have already been visited\n\t\twill not be visited again if another iteration is done.\n\n\t\tThrows: An exception if there is a query or communication error.\n"
							}
						],
						"line": 28,
						"name": "MongoCursor"
					}
				],
				"name": "MongoCursor",
				"comment": "\tRepresents a cursor for a MongoDB query.\n\n\tUse foreach( doc; cursor ) to iterate over the list of documents.\n\n\tThis struct uses reference counting to destroy the underlying MongoDB cursor.\n"
			}
		],
		"comment": "\tMongoDB cursor abstraction\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.db.mongo.cursor"
	},
	{
		"kind": "module",
		"file": "mongodb/vibe/db/mongo/database.d",
		"members": [
			{
				"kind": "struct",
				"line": 20,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "C4vibe2db5mongo6client11MongoClient",
								"name": "client"
							},
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 32,
						"kind": "constructor",
						"originalType": "ref @safe (MongoClient client, string name)",
						"char": 2,
						"name": "this",
						"deco": "FNcNfC4vibe2db5mongo6client11MongoClientAyaZSQBnQBlQBl8database13MongoDatabase",
						"endchar": 2,
						"endline": 45
					},
					{
						"line": 48,
						"kind": "function",
						"char": 19,
						"name": "name",
						"deco": "FNdNfZAya",
						"endchar": 2,
						"endline": 51,
						"comment": "The name of this database\n"
					},
					{
						"line": 54,
						"kind": "function",
						"char": 24,
						"name": "client",
						"deco": "FNdNfZC4vibe2db5mongo6client11MongoClient",
						"endchar": 2,
						"endline": 57,
						"comment": "The client which represents the connection to the database server\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 63,
						"kind": "function",
						"char": 18,
						"name": "opIndex",
						"deco": "FNfAyaZS4vibe2db5mongo10collection15MongoCollection",
						"endchar": 2,
						"endline": 66,
						"comment": " Accesses the collections of this database.\n\n\t\tReturns: The collection with the given name\n"
					},
					{
						"line": 76,
						"kind": "function",
						"originalType": "@safe MongoErrorDescription()",
						"char": 24,
						"name": "getLastError",
						"deco": "FNfZyS4vibe2db5mongo10connection22_MongoErrorDescription",
						"endchar": 2,
						"endline": 79,
						"comment": " Retrieves the last error code (if any) from the database server.\n\n\t\tExact object format is not documented. MongoErrorDescription signature will be\n\t\tupdated upon any issues. Note that this method will execute a query to service\n\t\tcollection and thus is far from being \"free\".\n\n\t\tReturns: struct storing data from MongoDB db.getLastErrorObj() object\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "mask"
							}
						],
						"line": 90,
						"kind": "function",
						"char": 7,
						"name": "getLog",
						"deco": "FNfAyaZS4vibe4data4bson4Bson",
						"endchar": 2,
						"endline": 98,
						"comment": " Returns recent log messages for this database from the database server.\n\n\t\tSee $(LINK http://www.mongodb.org/display/DOCS/getLog+Command).\n\n\t \tParams:\n\t \t\tmask = \"global\" or \"rs\" or \"startupWarnings\". Refer to official MongoDB docs.\n\n\t \tReturns: Bson document with recent log messages from MongoDB service.\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"default": "false",
								"name": "async"
							}
						],
						"line": 106,
						"kind": "function",
						"char": 7,
						"name": "fsync",
						"deco": "FNfbZS4vibe4data4bson4Bson",
						"endchar": 2,
						"endline": 115,
						"comment": " Performs a filesystem/disk sync of the database on the server.\n\n\t\tSee $(LINK http://www.mongodb.org/display/DOCS/fsync+Command)\n\n\t\tReturns: check documentation\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 129,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "command_and_options"
									}
								],
								"line": 129,
								"kind": "function",
								"char": 7,
								"name": "runCommand",
								"type": "Bson(T command_and_options)",
								"endchar": 2,
								"endline": 132
							}
						],
						"name": "runCommand",
						"comment": " Generic means to run commands on the database.\n\n\t\tSee $(LINK http://www.mongodb.org/display/DOCS/Commands) for a list\n\t\tof possible values for command_and_options.\n\n\t\tParams:\n\t\t\tcommand_and_options = Bson object containing the command to be executed\n\t\t\t\tas well as the command parameters as fields\n\n\t\tReturns: The raw response of the MongoDB server\n"
					}
				],
				"comment": " Represents a single database accessible through a given MongoClient.\n",
				"name": "MongoDatabase"
			}
		],
		"comment": "\tMongoDatabase class representing common database for group of collections.\n\n\tTechnically it is very special collection with common query functions\n\tdisabled and some service commands provided.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.db.mongo.database"
	},
	{
		"kind": "module",
		"file": "mongodb/vibe/db/mongo/flags.d",
		"members": [
			{
				"line": 10,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 11,
						"char": 2,
						"value": "0",
						"comment": "Normal update of a single document.\n",
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 12,
						"char": 2,
						"value": "1",
						"comment": "Creates a document if none exists.\n",
						"name": "upsert"
					},
					{
						"kind": "enum member",
						"line": 13,
						"char": 2,
						"value": "2",
						"comment": "Updates all matching documents.\n",
						"name": "multiUpdate"
					},
					{
						"kind": "enum member",
						"line": 15,
						"char": 2,
						"value": "0",
						"comment": "Deprecated compatibility alias\n",
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 16,
						"char": 2,
						"value": "1",
						"comment": "Deprecated compatibility alias\n",
						"name": "Upsert"
					},
					{
						"kind": "enum member",
						"line": 17,
						"char": 2,
						"value": "2",
						"comment": "Deprecated compatibility alias\n",
						"name": "MultiUpdate"
					}
				],
				"name": "UpdateFlags",
				"baseDeco": "i"
			},
			{
				"line": 20,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 21,
						"name": "none"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 22,
						"name": "unique"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "4",
						"line": 23,
						"name": "dropDuplicates"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "8",
						"line": 24,
						"name": "background"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "16",
						"line": 25,
						"name": "sparse"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "32",
						"line": 26,
						"name": "expireAfterSeconds"
					},
					{
						"kind": "enum member",
						"line": 28,
						"char": 2,
						"value": "0",
						"comment": "Deprecated compatibility alias, use `none` instead.\n",
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 29,
						"char": 2,
						"value": "1",
						"comment": "Deprecated compatibility alias, use `unique` instead.\n",
						"name": "Unique"
					},
					{
						"kind": "enum member",
						"line": 30,
						"char": 2,
						"value": "4",
						"comment": "Deprecated compatibility alias, use `dropDuplicates` instead.\n",
						"name": "DropDuplicates"
					},
					{
						"kind": "enum member",
						"line": 31,
						"char": 2,
						"value": "8",
						"comment": "Deprecated compatibility alias, use `background` instead.\n",
						"name": "Background"
					},
					{
						"kind": "enum member",
						"line": 32,
						"char": 2,
						"value": "16",
						"comment": "Deprecated compatibility alias, use `sparse` instead.\n",
						"name": "Sparse"
					},
					{
						"kind": "enum member",
						"line": 33,
						"char": 2,
						"value": "32",
						"comment": "Deprecated compatibility alias, use `expireAfterSeconds` instead.\n",
						"name": "ExpireAfterSeconds"
					}
				],
				"name": "IndexFlags",
				"baseDeco": "i"
			},
			{
				"line": 36,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 37,
						"char": 2,
						"value": "0",
						"comment": "Normal insert.\n",
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 38,
						"char": 2,
						"value": "1",
						"comment": "For multiple inserted documents, continues inserting further documents after a failure.\n",
						"name": "continueOnError"
					},
					{
						"kind": "enum member",
						"line": 40,
						"char": 2,
						"value": "0",
						"comment": "Deprecated compatibility alias\n",
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 41,
						"char": 2,
						"value": "1",
						"comment": "Deprecated compatibility alias\n",
						"name": "ContinueOnError"
					}
				],
				"name": "InsertFlags",
				"baseDeco": "i"
			},
			{
				"line": 44,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 45,
						"char": 2,
						"value": "0",
						"comment": "Normal query\n",
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 46,
						"char": 2,
						"value": "2",
						"comment": "\n",
						"name": "tailableCursor"
					},
					{
						"kind": "enum member",
						"line": 47,
						"char": 2,
						"value": "4",
						"comment": "\n",
						"name": "slaveOk"
					},
					{
						"kind": "enum member",
						"line": 48,
						"char": 2,
						"value": "8",
						"comment": "\n",
						"name": "oplogReplay"
					},
					{
						"kind": "enum member",
						"line": 49,
						"char": 2,
						"value": "16",
						"comment": "\n",
						"name": "noCursorTimeout"
					},
					{
						"kind": "enum member",
						"line": 50,
						"char": 2,
						"value": "32",
						"comment": "\n",
						"name": "awaitData"
					},
					{
						"kind": "enum member",
						"line": 51,
						"char": 2,
						"value": "64",
						"comment": "\n",
						"name": "exhaust"
					},
					{
						"kind": "enum member",
						"line": 52,
						"char": 2,
						"value": "128",
						"comment": "\n",
						"name": "partial"
					},
					{
						"kind": "enum member",
						"line": 54,
						"char": 2,
						"value": "0",
						"comment": "Deprecated compatibility alias\n",
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 55,
						"char": 2,
						"value": "2",
						"comment": "Deprecated compatibility alias\n",
						"name": "TailableCursor"
					},
					{
						"kind": "enum member",
						"line": 56,
						"char": 2,
						"value": "4",
						"comment": "Deprecated compatibility alias\n",
						"name": "SlaveOk"
					},
					{
						"kind": "enum member",
						"line": 57,
						"char": 2,
						"value": "8",
						"comment": "Deprecated compatibility alias\n",
						"name": "OplogReplay"
					},
					{
						"kind": "enum member",
						"line": 58,
						"char": 2,
						"value": "16",
						"comment": "Deprecated compatibility alias\n",
						"name": "NoCursorTimeout"
					},
					{
						"kind": "enum member",
						"line": 59,
						"char": 2,
						"value": "32",
						"comment": "Deprecated compatibility alias\n",
						"name": "AwaitData"
					},
					{
						"kind": "enum member",
						"line": 60,
						"char": 2,
						"value": "64",
						"comment": "Deprecated compatibility alias\n",
						"name": "Exhaust"
					},
					{
						"kind": "enum member",
						"line": 61,
						"char": 2,
						"value": "128",
						"comment": "Deprecated compatibility alias\n",
						"name": "Partial"
					}
				],
				"name": "QueryFlags",
				"baseDeco": "i"
			},
			{
				"line": 64,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 65,
						"name": "none"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 66,
						"name": "singleRemove"
					},
					{
						"kind": "enum member",
						"line": 68,
						"char": 2,
						"value": "0",
						"comment": "Deprecated compatibility alias\n",
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 69,
						"char": 2,
						"value": "1",
						"comment": "Deprecated compatibility alias\n",
						"name": "SingleRemove"
					}
				],
				"name": "DeleteFlags",
				"baseDeco": "i"
			},
			{
				"line": 72,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 73,
						"name": "none"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 74,
						"name": "cursorNotFound"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 75,
						"name": "queryFailure"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "4",
						"line": 76,
						"name": "shardConfigStale"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "8",
						"line": 77,
						"name": "awaitCapable"
					},
					{
						"kind": "enum member",
						"line": 79,
						"char": 2,
						"value": "0",
						"comment": "Deprecated compatibility alias\n",
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 80,
						"char": 2,
						"value": "1",
						"comment": "Deprecated compatibility alias\n",
						"name": "CursorNotFound"
					},
					{
						"kind": "enum member",
						"line": 81,
						"char": 2,
						"value": "2",
						"comment": "Deprecated compatibility alias\n",
						"name": "QueryFailure"
					},
					{
						"kind": "enum member",
						"line": 82,
						"char": 2,
						"value": "4",
						"comment": "Deprecated compatibility alias\n",
						"name": "ShardConfigStale"
					},
					{
						"kind": "enum member",
						"line": 83,
						"char": 2,
						"value": "8",
						"comment": "Deprecated compatibility alias\n",
						"name": "AwaitCapable"
					}
				],
				"name": "ReplyFlags",
				"baseDeco": "i"
			}
		],
		"comment": "\tMongoDB operation flag definitions.\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.db.mongo.flags"
	},
	{
		"kind": "module",
		"file": "mongodb/vibe/db/mongo/mongo.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 19,
				"name": "vibe.db.mongo.client"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 20,
				"name": "vibe.db.mongo.settings"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"name": "port"
					}
				],
				"line": 77,
				"kind": "function",
				"char": 13,
				"name": "connectMongoDB",
				"deco": "FNfAyatZC4vibe2db5mongo6client11MongoClient",
				"endchar": 1,
				"endline": 81,
				"comment": "\tConnects to a MongoDB instance.\n\n\tIf the host/port form is used, default settings will be used, which enable\n\tsafe updates, but no fsync. By specifying a URL instead, it is possible to\n\tfully customize the settings. See\n\t$(LINK http://www.mongodb.org/display/DOCS/Connections) for the complete set\n\tof options. Note that 'sslverifycertificate' is only present in some client\n\tbindings, including here.\n\n\tNote that the returned MongoClient uses a vibe.core.connectionpool.ConnectionPool\n\tinternally to create and reuse connections as necessary. Thus, the\n\tMongoClient instance can - and should - be shared among all fibers in a\n\tthread by storing in in a thread local variable.\n\n\tAuthentication:\n\t\tAuthenticated connections are supported by using a URL connection string\n\t\tsuch as \"mongodb://user:password@host\". SCRAM-SHA-1 is used by default.\n\n\tExamples:\n\t\t---\n\t\t// connecting with default settings:\n\t\tauto client = connectMongoDB(\"127.0.0.1\");\n\t\tauto users = client.getCollection(\"users\");\n\t\tusers.insert(Bson(\"peter\"));\n\t\t---\n\n\t\t---\n\t\t// connecting using the URL form with custom settings\n\t\tauto client = connectMongoDB(\"mongodb://localhost/?slaveOk=true\");\n\t\t---\n\n\t\t---\n\t\t// connecting with SSL encryption enabled and verification off\n\t\tauto client = connectMongoDB(\"mongodb://localhost/?ssl=true&sslverifycertificate=false\");\n\t\t---\n\n\tParams:\n\t\thost = Specifies the host name or IP address of the MongoDB server.\n\t\tport = Can be used to specify the port of the MongoDB server if different from the default one.\n\t\thost_or_url = Can either be a host name, in which case the default port will be used, or a URL with the mongodb:// scheme.\n\t\tsettings = An object containing the full set of possible configuration options.\n\n\tReturns:\n\t\tA new MongoClient instance that can be used to access the database.\n\n \tThrows:\n \t\tThrows an exception if a mongodb:// URL is given and the URL cannot be parsed.\n \t\tAn exception will not be thrown if called with a hostname and port.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "host_or_url"
					}
				],
				"line": 83,
				"kind": "function",
				"char": 13,
				"name": "connectMongoDB",
				"deco": "FNfAyaZC4vibe2db5mongo6client11MongoClient",
				"endchar": 1,
				"endline": 91,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "C4vibe2db5mongo8settings19MongoClientSettings",
						"name": "settings"
					}
				],
				"line": 93,
				"kind": "function",
				"char": 13,
				"name": "connectMongoDB",
				"deco": "FNfC4vibe2db5mongo8settings19MongoClientSettingsZCQBuQBsQBs6client11MongoClient",
				"endchar": 1,
				"endline": 96,
				"comment": "ditto\n"
			}
		],
		"comment": "\tMongoDB and MongoCollection classes and connections.\n\n\tImplementation_Note:\n\n\tThe MongoDB driver implementation here is missing a number of API functions\n\tknown from the JavaScript driver, but these can usually be implemented in\n\tterms of MongoDatabase.runCommand or MongoCollection.find. Since the\n\tofficial documentation is lacking in some places, it may be necessary to use\n\ta network sniffer to monitor what exectly needs to be sent. MongoDB has a\n\tdedicated utility for this called $(LINK2 http://docs.mongodb.org/manual/reference/program/mongosniff/ mongosniff).\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.db.mongo.mongo"
	},
	{
		"kind": "module",
		"file": "mongodb/vibe/db/mongo/sasl.d",
		"members": [],
		"comment": "\tSASL authentication functions\n\n\tCopyright: © 2012-2016 Nicolas Gurrola\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Nicolas Gurrola\n",
		"name": "vibe.db.mongo.sasl"
	},
	{
		"kind": "module",
		"file": "mongodb/vibe/db/mongo/sessionstore.d",
		"members": [
			{
				"line": 44,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "url"
							},
							{
								"deco": "Aya",
								"default": "\"sessions\"",
								"name": "collection"
							}
						],
						"line": 58,
						"kind": "constructor",
						"originalType": "@safe (string url, string collection = \"sessions\")",
						"char": 2,
						"name": "this",
						"deco": "FNfAyaQdZC4vibe2db5mongo12sessionstore17MongoSessionStore",
						"endchar": 2,
						"endline": 67,
						"comment": " Constructs a new MongoDB session store.\n\n\t\tParams:\n\t\t\turl = URL of the MongoDB database (e.g. `\"mongodb://localhost/mydb\"`)\n\t\t\tdatabase = Name of the database to use\n\t\t\tcollection = Optional collection name to store the sessions in\n"
					},
					{
						"line": 71,
						"kind": "function",
						"char": 21,
						"name": "expirationTime",
						"deco": "xFNdNfZS4core4time8Duration",
						"endchar": 71,
						"endline": 71,
						"comment": " The duration without access after which a session expires.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "dur"
							}
						],
						"line": 73,
						"kind": "function",
						"char": 17,
						"name": "expirationTime",
						"deco": "FNdNfS4core4time8DurationZv",
						"endchar": 2,
						"endline": 78,
						"comment": "ditto\n"
					},
					{
						"overrides": [
							"vibe.http.session.SessionStore.storageType"
						],
						"line": 80,
						"kind": "function",
						"char": 31,
						"name": "storageType",
						"deco": "xFNdNfZE4vibe4http7session18SessionStorageType",
						"endchar": 85,
						"endline": 80
					},
					{
						"overrides": [
							"vibe.http.session.SessionStore.create"
						],
						"line": 82,
						"kind": "function",
						"char": 10,
						"name": "create",
						"deco": "FNfZS4vibe4http7session7Session",
						"endchar": 2,
						"endline": 87
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.open"
						],
						"line": 89,
						"kind": "function",
						"char": 10,
						"name": "open",
						"deco": "FNfAyaZS4vibe4http7session7Session",
						"endchar": 2,
						"endline": 94
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant__T8VariantNVmi32ZQp",
								"name": "value"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.set"
						],
						"line": 96,
						"kind": "function",
						"originalType": "@trusted void(string id, string name, Variant value)",
						"char": 7,
						"name": "set",
						"deco": "FNeAyaQdS3std7variant__T8VariantNVmi32ZQpZv",
						"endchar": 2,
						"endline": 99
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant__T8VariantNVmi32ZQp",
								"storageClass": [
									"lazy"
								],
								"name": "defaultVal"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.get"
						],
						"line": 101,
						"kind": "function",
						"originalType": "@trusted Variant(string id, string name, lazy Variant defaultVal)",
						"char": 10,
						"name": "get",
						"deco": "FNeAyaQdLS3std7variant__T8VariantNVmi32ZQpZQBi",
						"endchar": 2,
						"endline": 109
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.isKeySet"
						],
						"line": 111,
						"kind": "function",
						"char": 7,
						"name": "isKeySet",
						"deco": "FNfAyaQdZb",
						"endchar": 2,
						"endline": 117
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.remove"
						],
						"line": 119,
						"kind": "function",
						"char": 7,
						"name": "remove",
						"deco": "FNfAyaQdZv",
						"endchar": 2,
						"endline": 122
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.destroy"
						],
						"line": 124,
						"kind": "function",
						"char": 7,
						"name": "destroy",
						"deco": "FNfAyaZv",
						"endchar": 2,
						"endline": 127
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "DFNfAyaZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.iterateSession"
						],
						"line": 129,
						"kind": "function",
						"char": 6,
						"name": "iterateSession",
						"deco": "FNfAyaMDFNfQiZiZi",
						"endchar": 2,
						"endline": 142
					}
				],
				"name": "MongoSessionStore",
				"interfaces": [
					"vibe.http.session.SessionStore"
				]
			}
		],
		"comment": "\tMongoDB based HTTP session store.\n\n\tCopyright: © 2017 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L19_C1)\n---\nimport vibe.core.core : runApplication;\nimport vibe.db.mongo.sessionstore : MongoSessionStore;\nimport vibe.http.server : HTTPServerSettings, listenHTTP;\nimport vibe.http.router : URLRouter;\nimport core.time : hours;\n\nvoid main()\n{\n\tauto store = new MongoSessionStore(\"mongodb://127.0.0.1/mydb\", \"sessions\");\n\tstore.expirationTime = 5.hours;\n\n\tauto settings = new HTTPServerSettings(\"127.0.0.1:8080\");\n\tsettings.sessionStore = store;\n\n\tauto router = new URLRouter;\n\t// TODO: add some routes\n\n\tlistenHTTP(settings, router);\n\n\trunApplication();\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L19_C1)\n",
		"name": "vibe.db.mongo.sessionstore"
	},
	{
		"kind": "module",
		"file": "mongodb/vibe/db/mongo/settings.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "C4vibe2db5mongo8settings19MongoClientSettings",
						"storageClass": [
							"out"
						],
						"name": "cfg"
					},
					{
						"deco": "Aya",
						"name": "url"
					}
				],
				"line": 37,
				"kind": "function",
				"char": 6,
				"name": "parseMongoDBUrl",
				"deco": "FNfJC4vibe2db5mongo8settings19MongoClientSettingsAyaZb",
				"endchar": 1,
				"endline": 196,
				"comment": " Parses the given string as a mongodb URL. The URL must be in the form documented at\n $(LINK http://www.mongodb.org/display/DOCS/Connections) which is:\n\n mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n\n Returns: true if the URL was successfully parsed. False if the URL can not be parsed.\n\n If the URL is successfully parsed the MongoClientSettings instance will contain the parsed config.\n If the URL is not successfully parsed the information in the MongoClientSettings instance may be\n incomplete and should not be used.\n"
			},
			{
				"line": 303,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 305,
						"name": "none"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 306,
						"name": "scramSHA1"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 307,
						"name": "mongoDBCR"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "3",
						"line": 308,
						"name": "mongoDBX509"
					}
				],
				"name": "MongoAuthMechanism",
				"baseDeco": "i"
			},
			{
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 323,
						"kind": "variable",
						"char": 14,
						"name": "defaultPort",
						"deco": "t",
						"init": "cast(ushort)27017u"
					},
					{
						"line": 325,
						"kind": "variable",
						"char": 9,
						"name": "username",
						"deco": "Aya",
						"offset": 16
					},
					{
						"line": 326,
						"kind": "variable",
						"char": 9,
						"name": "digest",
						"deco": "Aya",
						"offset": 32
					},
					{
						"line": 327,
						"kind": "variable",
						"char": 7,
						"name": "maxConnections",
						"deco": "k",
						"init": "4294967295u",
						"offset": 48
					},
					{
						"line": 328,
						"kind": "variable",
						"char": 14,
						"name": "hosts",
						"deco": "AS4vibe2db5mongo8settings9MongoHost",
						"offset": 56
					},
					{
						"line": 329,
						"kind": "variable",
						"char": 9,
						"name": "database",
						"deco": "Aya",
						"offset": 72
					},
					{
						"line": 330,
						"kind": "variable",
						"char": 13,
						"name": "defQueryFlags",
						"deco": "E4vibe2db5mongo5flags10QueryFlags",
						"init": "cast(QueryFlags)0",
						"offset": 88
					},
					{
						"line": 331,
						"kind": "variable",
						"char": 9,
						"name": "replicaSet",
						"deco": "Aya",
						"offset": 96
					},
					{
						"line": 332,
						"kind": "variable",
						"char": 7,
						"name": "safe",
						"deco": "b",
						"offset": 112
					},
					{
						"line": 333,
						"kind": "variable",
						"char": 7,
						"name": "w",
						"deco": "S4vibe4data4bson4Bson",
						"offset": 120
					},
					{
						"line": 334,
						"kind": "variable",
						"char": 7,
						"name": "wTimeoutMS",
						"deco": "l",
						"offset": 144
					},
					{
						"line": 335,
						"kind": "variable",
						"char": 7,
						"name": "fsync",
						"deco": "b",
						"offset": 152
					},
					{
						"line": 336,
						"kind": "variable",
						"char": 7,
						"name": "journal",
						"deco": "b",
						"offset": 153
					},
					{
						"line": 337,
						"kind": "variable",
						"char": 7,
						"name": "connectTimeoutMS",
						"deco": "l",
						"offset": 160
					},
					{
						"line": 338,
						"kind": "variable",
						"char": 7,
						"name": "socketTimeoutMS",
						"deco": "l",
						"offset": 168
					},
					{
						"line": 339,
						"kind": "variable",
						"char": 7,
						"name": "ssl",
						"deco": "b",
						"offset": 176
					},
					{
						"line": 340,
						"kind": "variable",
						"char": 7,
						"name": "sslverifycertificate",
						"deco": "b",
						"init": "true",
						"offset": 177
					},
					{
						"line": 341,
						"kind": "variable",
						"char": 9,
						"name": "sslPEMKeyFile",
						"deco": "Aya",
						"offset": 184
					},
					{
						"line": 342,
						"kind": "variable",
						"char": 9,
						"name": "sslCAFile",
						"deco": "Aya",
						"offset": 200
					},
					{
						"line": 343,
						"kind": "variable",
						"char": 21,
						"name": "authMechanism",
						"deco": "E4vibe2db5mongo8settings18MongoAuthMechanism",
						"offset": 216
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "username"
							},
							{
								"deco": "Aya",
								"name": "password"
							}
						],
						"line": 345,
						"kind": "function",
						"char": 16,
						"name": "makeDigest",
						"deco": "FNfAyaQdZQg",
						"endchar": 2,
						"endline": 348
					}
				],
				"line": 321,
				"name": "MongoClientSettings"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 353,
						"kind": "variable",
						"char": 9,
						"name": "name",
						"deco": "Aya",
						"offset": 0
					},
					{
						"line": 354,
						"kind": "variable",
						"char": 9,
						"name": "port",
						"deco": "t",
						"offset": 16
					}
				],
				"line": 351,
				"name": "MongoHost"
			}
		],
		"comment": "\tMongoDB client connection settings.\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.db.mongo.settings"
	},
	{
		"kind": "module",
		"file": "redis/vibe/db/redis/idioms.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"defaultValue": "RedisCollectionOptions.defaults",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "1",
						"name": "ID_LENGTH"
					}
				],
				"line": 20,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "Replicate!(long, ID_LENGTH)",
								"char": 2,
								"line": 25,
								"name": "IDS"
							},
							{
								"kind": "alias",
								"deco": "l",
								"char": 29,
								"line": 26,
								"name": "IDType"
							},
							{
								"kind": "variable",
								"type": "RedisDatabase",
								"char": 17,
								"line": 30,
								"name": "m_db"
							},
							{
								"kind": "variable",
								"type": "string[ID_LENGTH]",
								"char": 21,
								"line": 31,
								"name": "m_prefix"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 10,
								"line": 32,
								"name": "m_suffix"
							},
							{
								"line": 34,
								"kind": "function",
								"char": 21,
								"name": "m_idCounter",
								"type": "const @property string()",
								"endchar": 71,
								"endline": 34
							},
							{
								"line": 35,
								"kind": "function",
								"char": 21,
								"name": "m_allSet",
								"type": "const @property string()",
								"endchar": 68,
								"endline": 35
							},
							{
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "Replicate!(string, ID_LENGTH)",
										"name": "name"
									},
									{
										"type": "string",
										"default": "null",
										"name": "suffix"
									}
								],
								"line": 39,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(RedisDatabase db, Replicate!(string, ID_LENGTH) name, string suffix = null)",
								"endchar": 2,
								"endline": 42
							},
							{
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "Replicate!(string, ID_LENGTH)",
										"name": "name"
									},
									{
										"type": "string",
										"default": "null",
										"name": "suffix"
									}
								],
								"line": 44,
								"kind": "function",
								"char": 7,
								"name": "initialize",
								"type": "void(RedisDatabase db, Replicate!(string, ID_LENGTH) name, string suffix = null)",
								"endchar": 2,
								"endline": 52
							},
							{
								"line": 54,
								"kind": "function",
								"char": 33,
								"name": "database",
								"type": "inout @property inout(RedisDatabase)()",
								"endchar": 65,
								"endline": 54
							},
							{
								"parameters": [
									{
										"type": "IDS",
										"name": "id"
									}
								],
								"line": 56,
								"kind": "function",
								"char": 4,
								"name": "opIndex",
								"type": "T(IDS id)",
								"endchar": 50,
								"endline": 56
							},
							{
								"line": 61,
								"kind": "function",
								"char": 10,
								"name": "createID",
								"type": "IDType()",
								"endchar": 3,
								"endline": 68,
								"comment": " Creates an ID without setting a corresponding value.\n"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "U"
									}
								],
								"line": 70,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"parameters": [
											{
												"type": "U",
												"name": "args"
											}
										],
										"line": 70,
										"kind": "function",
										"char": 10,
										"name": "add",
										"type": "IDType(U args)",
										"endchar": 3,
										"endline": 75
									}
								],
								"name": "add"
							},
							{
								"parameters": [
									{
										"deco": "l",
										"name": "id"
									}
								],
								"line": 77,
								"kind": "function",
								"char": 8,
								"name": "isMember",
								"type": "bool(long id)",
								"endchar": 3,
								"endline": 82
							},
							{
								"parameters": [
									{
										"type": "int delegate(long id)",
										"name": "del"
									}
								],
								"line": 88,
								"kind": "function",
								"char": 7,
								"name": "opApply",
								"type": "int(int delegate(long id) del)",
								"endchar": 3,
								"endline": 100
							},
							{
								"parameters": [
									{
										"type": "int delegate(long id, T)",
										"name": "del"
									}
								],
								"line": 102,
								"kind": "function",
								"char": 7,
								"name": "opApply",
								"type": "int(int delegate(long id, T) del)",
								"endchar": 3,
								"endline": 114
							},
							{
								"parameters": [
									{
										"type": "IDS",
										"name": "id"
									}
								],
								"line": 119,
								"kind": "function",
								"char": 7,
								"name": "remove",
								"type": "void(IDS id)",
								"endchar": 2,
								"endline": 128,
								"comment": " Removes an ID along with the corresponding value.\n"
							},
							{
								"parameters": [
									{
										"type": "IDS",
										"name": "ids"
									}
								],
								"line": 131,
								"kind": "function",
								"char": 17,
								"name": "getKey",
								"type": "string(IDS ids)",
								"endchar": 2,
								"endline": 141
							}
						],
						"line": 20,
						"name": "RedisCollection"
					}
				],
				"name": "RedisCollection",
				"comment": "\n"
			},
			{
				"line": 144,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"char": 2,
						"value": "0",
						"line": 145,
						"name": "none"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 146,
						"name": "supportIteration"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "2",
						"line": 147,
						"name": "supportPaging"
					},
					{
						"kind": "enum member",
						"char": 2,
						"value": "1",
						"line": 148,
						"name": "defaults"
					}
				],
				"name": "RedisCollectionOptions",
				"baseDeco": "i"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"defaultValue": "RedisCollectionOptions.defaults",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "1",
						"name": "ID_LENGTH"
					}
				],
				"line": 161,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "RedisCollection!(RedisHash, OPTIONS, ID_LENGTH)",
						"char": 2,
						"line": 163,
						"name": "RedisHashCollection"
					}
				],
				"name": "RedisHashCollection",
				"comment": " Models a set of numbered hashes.\n\n\tThis structure is roughly equivalent to a $(D string[string][long]) and is\n\tcommonly used to store collections of objects, such as all users of a\n\tservice. For a strongly typed variant of this class, see\n\t$(D RedisObjectCollection).\n\n\tSee_also: $(D RedisObjectCollection)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"defaultValue": "RedisCollectionOptions.defaults",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "1",
						"name": "ID_LENGTH"
					}
				],
				"line": 173,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "RedisCollection!(RedisObject!T, OPTIONS, ID_LENGTH)",
						"char": 2,
						"line": 175,
						"name": "RedisObjectCollection"
					}
				],
				"name": "RedisObjectCollection",
				"comment": " Models a strongly typed set of numbered hashes.\n\n\tThis structure is roughly equivalent of a $(D T[long]).\n\n\tSee_also: $(D RedisHashCollection)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L179_C1)\n---\nstruct User {\n\tstring name;\n\tstring email;\n\tint age;\n\tstring password;\n}\n\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tdb.deleteAll();\n\n\tauto users = RedisObjectCollection!User(db, \"users\");\n\tassert(users.add(User(\"Tom\", \"tom@example.com\", 42, \"secret\")) == 0);\n\tassert(users.add(User(\"Peter\", \"peter@example.com\", 42, \"secret\")) == 1);\n\n\tauto peter = users[1];\n\tassert(peter.name == \"Peter\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L179_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 208,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "RedisHash!string",
								"char": 20,
								"line": 210,
								"name": "m_hash"
							},
							{
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 213,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(RedisDatabase db, string key)",
								"endchar": 2,
								"endline": 216
							},
							{
								"parameters": [
									{
										"type": "RedisHash!string",
										"name": "hash"
									}
								],
								"line": 218,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(RedisHash!string hash)",
								"endchar": 2,
								"endline": 221
							},
							{
								"line": 223,
								"kind": "function",
								"char": 14,
								"name": "get",
								"type": "@property T()",
								"endchar": 2,
								"endline": 234
							},
							{
								"line": 236,
								"kind": "function",
								"char": 17,
								"name": "exists",
								"type": "@property bool()",
								"endchar": 58,
								"endline": 236
							},
							{
								"line": 240,
								"kind": "function",
								"char": 7,
								"name": "remove",
								"type": "void()",
								"endchar": 35,
								"endline": 240
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "val"
									}
								],
								"line": 242,
								"kind": "function",
								"char": 7,
								"name": "opAssign",
								"type": "void(T val)",
								"endchar": 2,
								"endline": 245
							},
							{
								"storageClass": [
									"static"
								],
								"line": 249,
								"kind": "function",
								"char": 24,
								"name": "fields",
								"type": "string()",
								"endchar": 2,
								"endline": 257
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "T",
										"name": "val"
									}
								],
								"line": 264,
								"kind": "function",
								"char": 44,
								"name": "toKeysAndValues",
								"type": "string[T.tupleof.length * 2](T val)",
								"endchar": 2,
								"endline": 273
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 275,
								"kind": "variable",
								"char": 15,
								"name": "keys",
								"init": "fieldNames!T"
							}
						],
						"line": 208,
						"name": "RedisObject"
					}
				],
				"name": "RedisObject",
				"comment": " Models a single strongly typed object.\n\n\tThis structure is rougly equivalent to a value of type $(D T). The\n\tunderlying data is represented as a Redis hash. This means that only\n\tprimitive fields are supported for $(D T).\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 278,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "RedisHash!string",
								"char": 20,
								"line": 280,
								"name": "m_hash"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 10,
								"line": 281,
								"name": "m_field"
							},
							{
								"parameters": [
									{
										"type": "RedisHash!string",
										"name": "hash"
									},
									{
										"type": "string",
										"name": "field"
									}
								],
								"line": 284,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(RedisHash!string hash, string field)",
								"endchar": 2,
								"endline": 288
							},
							{
								"line": 290,
								"kind": "function",
								"char": 14,
								"name": "get",
								"type": "@property T()",
								"endchar": 91,
								"endline": 290
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "val"
									}
								],
								"line": 294,
								"kind": "function",
								"char": 7,
								"name": "opAssign",
								"type": "void(T val)",
								"endchar": 81,
								"endline": 294
							},
							{
								"constraint": "op == \"++\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 296,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"line": 296,
										"kind": "function",
										"char": 7,
										"name": "opUnary",
										"type": "void()",
										"endchar": 92,
										"endline": 296
									}
								],
								"name": "opUnary"
							},
							{
								"constraint": "op == \"--\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 297,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"line": 297,
										"kind": "function",
										"char": 7,
										"name": "opUnary",
										"type": "void()",
										"endchar": 93,
										"endline": 297
									}
								],
								"name": "opUnary"
							},
							{
								"constraint": "op == \"+\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 299,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"deco": "l",
												"name": "val"
											}
										],
										"line": 299,
										"kind": "function",
										"char": 7,
										"name": "opOpAssign",
										"type": "void(long val)",
										"endchar": 105,
										"endline": 299
									}
								],
								"name": "opOpAssign"
							},
							{
								"constraint": "op == \"-\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 300,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"deco": "l",
												"name": "val"
											}
										],
										"line": 300,
										"kind": "function",
										"char": 7,
										"name": "opOpAssign",
										"type": "void(long val)",
										"endchar": 106,
										"endline": 300
									}
								],
								"name": "opOpAssign"
							},
							{
								"constraint": "op == \"+\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 301,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"deco": "d",
												"name": "val"
											}
										],
										"line": 301,
										"kind": "function",
										"char": 7,
										"name": "opOpAssign",
										"type": "void(double val)",
										"endchar": 107,
										"endline": 301
									}
								],
								"name": "opOpAssign"
							},
							{
								"constraint": "op == \"-\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 302,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"deco": "d",
												"name": "val"
											}
										],
										"line": 302,
										"kind": "function",
										"char": 7,
										"name": "opOpAssign",
										"type": "void(double val)",
										"endchar": 108,
										"endline": 302
									}
								],
								"name": "opOpAssign"
							}
						],
						"line": 278,
						"name": "RedisObjectField"
					}
				],
				"name": "RedisObjectField"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"defaultValue": "RedisCollectionOptions.defaults",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "1",
						"name": "ID_LENGTH"
					}
				],
				"line": 310,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "RedisCollection!(RedisSet!T, OPTIONS, ID_LENGTH)",
						"char": 2,
						"line": 312,
						"name": "RedisSetCollection"
					}
				],
				"name": "RedisSetCollection",
				"comment": " Models a strongly typed numbered set of values.\n\n\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L316_C1)\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto user_groups = RedisSetCollection!(string, RedisCollectionOptions.none)(db, \"user_groups\");\n\n\t// add some groups for user with ID 0\n\tuser_groups[0].insert(\"cooking\");\n\tuser_groups[0].insert(\"hiking\");\n\t// add some groups for user with ID 1\n\tuser_groups[1].insert(\"coding\");\n\n\tassert(user_groups[0].contains(\"hiking\"));\n\tassert(!user_groups[0].contains(\"coding\"));\n\tassert(user_groups[1].contains(\"coding\"));\n\n\tuser_groups[0].remove(\"hiking\");\n\tassert(!user_groups[0].contains(\"hiking\"));\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L316_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"defaultValue": "RedisCollectionOptions.defaults",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "1",
						"name": "ID_LENGTH"
					}
				],
				"line": 342,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "RedisCollection!(RedisList!T, OPTIONS, ID_LENGTH)",
						"char": 2,
						"line": 344,
						"name": "RedisListCollection"
					}
				],
				"name": "RedisListCollection",
				"comment": " Models a strongly typed numbered set of values.\n\n\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"defaultValue": "RedisCollectionOptions.defaults",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "1",
						"name": "ID_LENGTH"
					}
				],
				"line": 352,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "RedisCollection!(RedisString!T, OPTIONS, ID_LENGTH)",
						"char": 2,
						"line": 354,
						"name": "RedisStringCollection"
					}
				],
				"name": "RedisStringCollection",
				"comment": " Models a strongly typed numbered set of values.\n\n\n"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "S4vibe2db5redisQg13RedisDatabase",
								"name": "db"
							},
							{
								"deco": "Aya",
								"name": "lock_key"
							}
						],
						"line": 366,
						"kind": "constructor",
						"originalType": "ref (RedisDatabase db, string lock_key)",
						"char": 2,
						"name": "this",
						"deco": "FNcS4vibe2db5redisQg13RedisDatabaseAyaZSQBkQBiQBi6idioms9RedisLock",
						"endchar": 2,
						"endline": 376
					},
					{
						"parameters": [
							{
								"deco": "DFZv",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"line": 378,
						"kind": "function",
						"char": 7,
						"name": "performLocked",
						"deco": "FMDFZvZv",
						"endchar": 2,
						"endline": 391
					}
				],
				"line": 359,
				"name": "RedisLock"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 396,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "T",
								"char": 4,
								"line": 398,
								"name": "value"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "string",
										"name": "str"
									}
								],
								"line": 402,
								"kind": "function",
								"char": 21,
								"name": "fromString",
								"type": "JsonEncoded(string str)",
								"endchar": 90,
								"endline": 402
							},
							{
								"line": 403,
								"kind": "function",
								"char": 9,
								"name": "toString",
								"type": "string()",
								"endchar": 59,
								"endline": 403
							}
						],
						"line": 396,
						"name": "JsonEncoded"
					}
				],
				"name": "JsonEncoded"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 407,
				"kind": "template",
				"char": 15,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "value"
							}
						],
						"line": 407,
						"kind": "function",
						"char": 15,
						"name": "jsonEncoded",
						"type": "JsonEncoded!T(T value)",
						"endchar": 70,
						"endline": 407
					}
				],
				"name": "jsonEncoded"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 411,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "T",
								"char": 5,
								"line": 413,
								"name": "m_values"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "values"
									}
								],
								"line": 416,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(T values)",
								"endchar": 38,
								"endline": 416
							},
							{
								"parameters": [
									{
										"type": "void delegate(string)",
										"name": "sink"
									}
								],
								"line": 418,
								"kind": "function",
								"char": 7,
								"name": "toString",
								"type": "void(void delegate(string) sink)",
								"endchar": 2,
								"endline": 422
							}
						],
						"line": 411,
						"name": "LazyString"
					}
				],
				"name": "LazyString"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "b",
						"defaultValue": "true",
						"name": "strip_id"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 435,
				"kind": "template",
				"char": 29,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"in"
								],
								"name": "val"
							}
						],
						"line": 435,
						"kind": "function",
						"char": 29,
						"name": "redisStrip",
						"type": "RedisStripped!(T, strip_id)(in T val)",
						"endchar": 118,
						"endline": 435
					}
				],
				"name": "redisStrip",
				"comment": "\tStrips all non-Redis fields from a struct.\n\n\tThe returned struct will contain only fiels that can be converted using\n\t$(D toRedis) and that have names different than \"id\" or \"_id\".\n\n\tTo reconstruct the full struct type, use the $(D RedisStripped.unstrip)\n\tmethod.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "b",
						"defaultValue": "true",
						"name": "strip_id"
					}
				],
				"line": 446,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "FilterToType!(Select!(strip_id, isNonRedisTypeOrID, isNonRedisType), T.tupleof)",
								"char": 2,
								"line": 453,
								"name": "StrippedMembers"
							},
							{
								"kind": "alias",
								"type": "FilterToType!(Select!(strip_id, isRedisTypeAndNotID, isRedisType), T.tupleof)",
								"char": 2,
								"line": 454,
								"name": "UnstrippedMembers"
							},
							{
								"kind": "alias",
								"type": "indicesOf!(Select!(strip_id, isNonRedisTypeOrID, isNonRedisType), T.tupleof)",
								"char": 2,
								"line": 455,
								"name": "strippedMemberIndices"
							},
							{
								"kind": "alias",
								"type": "indicesOf!(Select!(strip_id, isRedisTypeAndNotID, isRedisType), T.tupleof)",
								"char": 2,
								"line": 456,
								"name": "unstrippedMemberIndices"
							},
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"in"
										],
										"name": "src"
									}
								],
								"line": 458,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(in T src)",
								"endchar": 97,
								"endline": 458
							},
							{
								"parameters": [
									{
										"type": "StrippedMembers",
										"name": "stripped_members"
									}
								],
								"line": 465,
								"kind": "function",
								"char": 4,
								"name": "unstrip",
								"type": "T(StrippedMembers stripped_members)",
								"endchar": 2,
								"endline": 470,
								"comment": " Reconstructs the full (unstripped) struct value.\n\n\t\tThe parameters for this method are all stripped fields in the order in\n\t\twhich they appear in the original struct definition.\n"
							},
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"ref"
										],
										"name": "dst"
									},
									{
										"type": "UnstrippedMembers",
										"name": "values"
									}
								],
								"line": 472,
								"kind": "function",
								"char": 15,
								"name": "populateRedisFields",
								"type": "void(ref T dst, UnstrippedMembers values)",
								"endchar": 2,
								"endline": 476
							},
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"ref"
										],
										"name": "dst"
									},
									{
										"type": "StrippedMembers",
										"name": "values"
									}
								],
								"line": 478,
								"kind": "function",
								"char": 15,
								"name": "populateNonRedisFields",
								"type": "void(ref T dst, StrippedMembers values)",
								"endchar": 2,
								"endline": 482
							},
							{
								"storageClass": [
									"static"
								],
								"line": 489,
								"kind": "function",
								"char": 24,
								"name": "membersString",
								"type": "string()",
								"endchar": 2,
								"endline": 497
							}
						],
						"line": 446,
						"name": "RedisStripped"
					}
				],
				"name": "RedisStripped",
				"comment": "\tRepresents the stripped type of a struct.\n\n\tStrips all fields that cannot be directly stored as values in the Redis\n\tdatabase. By default, any field named `id` or `_id` is also stripped. Set\n\tthe `strip_id` parameter to `false` to keep those fields.\n\n\tSee_also: $(D redisStrip)\n"
			}
		],
		"comment": "\tType safe implementations of common Redis storage idioms.\n\n\tNote that the API is still subject to change!\n\n\tCopyright: © 2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.db.redis.idioms"
	},
	{
		"kind": "module",
		"file": "redis/vibe/db/redis/redis.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 10,
				"name": "vibe.core.net"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"default": "cast(ushort)6379u",
						"name": "port"
					}
				],
				"line": 34,
				"kind": "function",
				"originalType": "@safe RedisClient(string host, ushort port = RedisClient.defaultPort)",
				"char": 13,
				"name": "connectRedis",
				"deco": "FNfAyatZC4vibe2db5redisQg11RedisClient",
				"endchar": 1,
				"endline": 37,
				"comment": "\tReturns a RedisClient that can be used to communicate to the specified database server.\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					}
				],
				"line": 67,
				"kind": "function",
				"char": 15,
				"name": "connectRedisDB",
				"deco": "FNfS4vibe4inet3url3URLZSQu2db5redisQg13RedisDatabase",
				"endchar": 1,
				"endline": 111,
				"comment": "\tReturns a Redis database connection instance corresponding to the given URL.\n\n\tThe URL must be of the format \"redis://server[:port]/dbnum\".\n\n\tAuthentication:\n\t\tAuthenticated connections are supported by using a URL connection string\n\t\tsuch as \"redis://password@host\".\n\n\tExamples:\n\t\t---\n\t\t// connecting with default settings:\n\t\tauto redisDB = connectRedisDB(\"redis://127.0.0.1\");\n\t\t---\n\n\t\t---\n\t\t// connecting using the URL form with custom settings\n\t\tauto redisDB = connectRedisDB(\"redis://password:myremotehost/3?maxmemory=10000000\");\n\t\t---\n\n\tParams:\n\t\turl = Redis URI scheme for a Redis database instance\n\n\tReturns:\n\t\tA new RedisDatabase instance that can be used to access the database.\n\n\tSee_also: $(LINK2 https://www.iana.org/assignments/uri-schemes/prov/redis, Redis URI scheme)\n"
			},
			{
				"kind": "class",
				"line": 116,
				"char": 7,
				"members": [
					{
						"storageClass": [
							"enum",
							"@safe"
						],
						"line": 124,
						"kind": "variable",
						"char": 7,
						"name": "defaultPort",
						"deco": "i",
						"init": "6379"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "\"127.0.0.1\"",
								"name": "host"
							},
							{
								"deco": "t",
								"default": "cast(ushort)6379u",
								"name": "port"
							}
						],
						"line": 126,
						"kind": "constructor",
						"originalType": "@safe (string host = \"127.0.0.1\", ushort port = defaultPort)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyatZC4vibe2db5redisQg11RedisClient",
						"endchar": 2,
						"endline": 131
					},
					{
						"line": 134,
						"kind": "function",
						"char": 19,
						"name": "redisVersion",
						"deco": "FNdNfZAya",
						"endchar": 2,
						"endline": 153,
						"comment": "Returns Redis version\n"
					},
					{
						"parameters": [
							{
								"deco": "l",
								"name": "index"
							}
						],
						"line": 157,
						"kind": "function",
						"char": 16,
						"name": "getDatabase",
						"deco": "FNflZS4vibe2db5redisQg13RedisDatabase",
						"endchar": 77,
						"endline": 157,
						"comment": " Returns a handle to the given database.\n"
					},
					{
						"line": 161,
						"kind": "function",
						"originalType": "@safe RedisSubscriber()",
						"char": 18,
						"name": "createSubscriber",
						"deco": "FNfZS4vibe8internal11freelistref__T11FreeListRefTCQBt2db5redisQg19RedisSubscriberImplVbi1ZQCd",
						"endchar": 2,
						"endline": 163,
						"comment": " Creates a RedisSubscriber instance for launching a pubsub listener\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "password"
							}
						],
						"line": 170,
						"kind": "function",
						"char": 7,
						"name": "auth",
						"deco": "FNfAyaZv",
						"endchar": 58,
						"endline": 170,
						"comment": "Authenticate to the server\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T && isValidRedisValueType!U",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"line": 172,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "U",
										"name": "data"
									}
								],
								"line": 172,
								"kind": "function",
								"char": 4,
								"name": "echo",
								"type": "T(U data)",
								"endchar": 114,
								"endline": 172
							}
						],
						"name": "echo",
						"comment": "Echo the given string\n"
					},
					{
						"line": 174,
						"kind": "function",
						"char": 7,
						"name": "ping",
						"deco": "FNfZv",
						"endchar": 33,
						"endline": 174,
						"comment": "Ping the server\n"
					},
					{
						"line": 176,
						"kind": "function",
						"char": 7,
						"name": "quit",
						"deco": "FNfZv",
						"endchar": 33,
						"endline": 176,
						"comment": "Close the connection\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 186,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "parameter"
									}
								],
								"line": 186,
								"kind": "function",
								"char": 4,
								"name": "getConfig",
								"type": "T(string parameter)",
								"endchar": 113,
								"endline": 186
							}
						],
						"name": "getConfig",
						"comment": "Get the value of a configuration parameter\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 188,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "parameter"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 188,
								"kind": "function",
								"char": 7,
								"name": "setConfig",
								"type": "void(string parameter, T value)",
								"endchar": 121,
								"endline": 188
							}
						],
						"name": "setConfig",
						"comment": "Set a configuration parameter to the given value\n"
					},
					{
						"line": 190,
						"kind": "function",
						"char": 7,
						"name": "configResetStat",
						"deco": "FNfZv",
						"endchar": 59,
						"endline": 190,
						"comment": "Reset the stats returned by INFO\n"
					},
					{
						"line": 199,
						"kind": "function",
						"char": 7,
						"name": "deleteAll",
						"deco": "FNfZv",
						"endchar": 42,
						"endline": 199,
						"comment": " Deletes all keys from all databases.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/flushall, FLUSHALL)\n"
					},
					{
						"line": 202,
						"kind": "function",
						"char": 9,
						"name": "info",
						"deco": "FNfZAya",
						"endchar": 49,
						"endline": 202,
						"comment": "Get information and statistics about the server\n"
					},
					{
						"line": 204,
						"kind": "function",
						"char": 7,
						"name": "lastSave",
						"deco": "FNfZl",
						"endchar": 53,
						"endline": 204,
						"comment": "Get the UNIX time stamp of the last successful save to disk\n"
					},
					{
						"line": 207,
						"kind": "function",
						"char": 7,
						"name": "save",
						"deco": "FNfZv",
						"endchar": 33,
						"endline": 207,
						"comment": "Synchronously save the dataset to disk\n"
					},
					{
						"line": 209,
						"kind": "function",
						"char": 7,
						"name": "shutdown",
						"deco": "FNfZv",
						"endchar": 41,
						"endline": 209,
						"comment": "Synchronously save the dataset to disk and then shut down the server\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"line": 211,
						"kind": "function",
						"char": 7,
						"name": "slaveOf",
						"deco": "FNfAyatZv",
						"endchar": 75,
						"endline": 211,
						"comment": "Make the server a slave of another instance, or promote it as master\n"
					}
				],
				"comment": "\tA redis client with connection pooling.\n",
				"name": "RedisClient"
			},
			{
				"kind": "struct",
				"line": 251,
				"char": 1,
				"members": [
					{
						"line": 265,
						"kind": "function",
						"char": 31,
						"name": "client",
						"deco": "NgFNdNfZNgC4vibe2db5redisQg11RedisClient",
						"endchar": 65,
						"endline": 265,
						"comment": " The Redis client with which the database is accessed.\n"
					},
					{
						"line": 269,
						"kind": "function",
						"char": 17,
						"name": "index",
						"deco": "xFNdNfZl",
						"endchar": 49,
						"endline": 269,
						"comment": " Index of the database.\n"
					},
					{
						"line": 275,
						"kind": "function",
						"char": 7,
						"name": "deleteAll",
						"deco": "FNfZv",
						"endchar": 46,
						"endline": 275,
						"comment": " Deletes all keys of the database.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/flushdb, FLUSHDB)\n"
					},
					{
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "keys"
							}
						],
						"line": 277,
						"kind": "function",
						"char": 7,
						"name": "del",
						"deco": "FNfMAAyaXl",
						"endchar": 71,
						"endline": 277,
						"comment": "Delete a key\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 279,
						"kind": "function",
						"char": 7,
						"name": "exists",
						"deco": "FNfAyaZb",
						"endchar": 64,
						"endline": 279,
						"comment": "Determine if a key exists\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "seconds"
							}
						],
						"line": 281,
						"kind": "function",
						"char": 7,
						"name": "expire",
						"deco": "FNfAyalZb",
						"endchar": 87,
						"endline": 281,
						"comment": "Set a key's time to live in seconds\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"line": 283,
						"kind": "function",
						"char": 7,
						"name": "expire",
						"deco": "FNfAyaS4core4time8DurationZb",
						"endchar": 106,
						"endline": 283,
						"comment": "Set a key's time to live with D notation. E.g. $(D 5.minutes) for 60 * 5 seconds.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "timestamp"
							}
						],
						"line": 285,
						"kind": "function",
						"char": 7,
						"name": "expireAt",
						"deco": "FNfAyalZb",
						"endchar": 95,
						"endline": 285,
						"comment": "Set the expiration for a key as a UNIX timestamp\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 287,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "pattern"
									}
								],
								"line": 287,
								"kind": "function",
								"char": 15,
								"name": "keys",
								"type": "RedisReply!T(string pattern)",
								"endchar": 126,
								"endline": 287
							}
						],
						"name": "keys",
						"comment": "Find all keys matching the given glob-style pattern (Supported wildcards: *, ?, [ABC])\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "db"
							}
						],
						"line": 289,
						"kind": "function",
						"char": 7,
						"name": "move",
						"deco": "FNfAyalZb",
						"endchar": 73,
						"endline": 289,
						"comment": "Move a key to another database\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 291,
						"kind": "function",
						"char": 7,
						"name": "persist",
						"deco": "FNfAyaZb",
						"endchar": 66,
						"endline": 291,
						"comment": "Remove the expiration from a key\n"
					},
					{
						"line": 294,
						"kind": "function",
						"char": 9,
						"name": "randomKey",
						"deco": "FNfZAya",
						"endchar": 59,
						"endline": 294,
						"comment": "Return a random key from the keyspace\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "Aya",
								"name": "newkey"
							}
						],
						"line": 296,
						"kind": "function",
						"char": 7,
						"name": "rename",
						"deco": "FNfAyaQdZv",
						"endchar": 75,
						"endline": 296,
						"comment": "Rename a key\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "Aya",
								"name": "newkey"
							}
						],
						"line": 298,
						"kind": "function",
						"char": 7,
						"name": "renameNX",
						"deco": "FNfAyaQdZb",
						"endchar": 91,
						"endline": 298,
						"comment": "Rename a key, only if the new key does not exist\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 301,
						"kind": "function",
						"char": 7,
						"name": "ttl",
						"deco": "FNfAyaZl",
						"endchar": 58,
						"endline": 301,
						"comment": "Get the time to live for a key\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 303,
						"kind": "function",
						"char": 7,
						"name": "pttl",
						"deco": "FNfAyaZl",
						"endchar": 60,
						"endline": 303,
						"comment": "Get the time to live for a key in milliseconds\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 305,
						"kind": "function",
						"char": 9,
						"name": "type",
						"deco": "FNfAyaZQe",
						"endchar": 64,
						"endline": 305,
						"comment": "Determine the type stored at key (string, list, set, zset and hash.)\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 312,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "suffix"
									}
								],
								"line": 312,
								"kind": "function",
								"char": 7,
								"name": "append",
								"type": "long(string key, T suffix)",
								"endchar": 113,
								"endline": 312
							}
						],
						"name": "append",
						"comment": "Append a value to a key\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"default": "1L",
								"name": "value"
							}
						],
						"line": 314,
						"kind": "function",
						"originalType": "@safe long(string key, long value = 1)",
						"char": 7,
						"name": "decr",
						"deco": "FNfAyalZl",
						"endchar": 126,
						"endline": 314,
						"comment": "Decrement the integer value of a key by one\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 316,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 316,
								"kind": "function",
								"char": 4,
								"name": "get",
								"type": "T(string key)",
								"endchar": 94,
								"endline": 316
							}
						],
						"name": "get",
						"comment": "Get the value of a key\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "offset"
							}
						],
						"line": 318,
						"kind": "function",
						"char": 7,
						"name": "getBit",
						"deco": "FNfAyalZb",
						"endchar": 85,
						"endline": 318,
						"comment": "Returns the bit value at offset in the string value stored at key\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 320,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									}
								],
								"line": 320,
								"kind": "function",
								"char": 4,
								"name": "getRange",
								"type": "T(string key, long start, long end)",
								"endchar": 138,
								"endline": 320
							}
						],
						"name": "getRange",
						"comment": "Get a substring of the string stored at a key\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T && isValidRedisValueType!U",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"line": 322,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "U",
										"name": "value"
									}
								],
								"line": 322,
								"kind": "function",
								"char": 4,
								"name": "getSet",
								"type": "T(string key, U value)",
								"endchar": 146,
								"endline": 322
							}
						],
						"name": "getSet",
						"comment": "Set the string value of a key and return its old value\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"default": "1L",
								"name": "value"
							}
						],
						"line": 324,
						"kind": "function",
						"originalType": "@safe long(string key, long value = 1)",
						"char": 7,
						"name": "incr",
						"deco": "FNfAyalZl",
						"endchar": 126,
						"endline": 324,
						"comment": "Increment the integer value of a key\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "d",
								"name": "value"
							}
						],
						"line": 326,
						"kind": "function",
						"char": 7,
						"name": "incr",
						"deco": "FNfAyadZl",
						"endchar": 88,
						"endline": 326,
						"comment": "Increment the real number value of a key\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 328,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string[]",
										"name": "keys"
									}
								],
								"line": 328,
								"kind": "function",
								"char": 15,
								"name": "mget",
								"type": "RedisReply!T(string[] keys)",
								"endchar": 122,
								"endline": 328
							}
						],
						"name": "mget",
						"comment": "Get the values of all the given keys\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 331,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"line": 331,
								"kind": "function",
								"char": 7,
								"name": "mset",
								"type": "void(ARGS args)",
								"endchar": 2,
								"endline": 336
							}
						],
						"name": "mset",
						"comment": "Set multiple keys to multiple values\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 339,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"line": 339,
								"kind": "function",
								"char": 7,
								"name": "msetNX",
								"type": "bool(ARGS args)",
								"endchar": 2,
								"endline": 343
							}
						],
						"name": "msetNX",
						"comment": "Set multiple keys to multiple values, only if none of the keys exist\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 346,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 346,
								"kind": "function",
								"char": 7,
								"name": "set",
								"type": "void(string key, T value)",
								"endchar": 93,
								"endline": 346
							}
						],
						"name": "set",
						"comment": "Set the string value of a key\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 348,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 348,
								"kind": "function",
								"char": 7,
								"name": "setNX",
								"type": "bool(string key, T value)",
								"endchar": 109,
								"endline": 348
							}
						],
						"name": "setNX",
						"comment": "Set the value of a key, only if the key does not exist\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 350,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 350,
								"kind": "function",
								"char": 7,
								"name": "setXX",
								"type": "bool(string key, T value)",
								"endchar": 123,
								"endline": 350
							}
						],
						"name": "setXX",
						"comment": "Set the value of a key, only if the key already exists\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 352,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "Duration",
										"name": "expire_time"
									}
								],
								"line": 352,
								"kind": "function",
								"char": 7,
								"name": "setNX",
								"type": "bool(string key, T value, Duration expire_time)",
								"endchar": 178,
								"endline": 352
							}
						],
						"name": "setNX",
						"comment": "Set the value of a key, only if the key does not exist, and also set the specified expire time using D notation, e.g. $(D 5.minutes) for 5 minutes.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 354,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "Duration",
										"name": "expire_time"
									}
								],
								"line": 354,
								"kind": "function",
								"char": 7,
								"name": "setXX",
								"type": "bool(string key, T value, Duration expire_time)",
								"endchar": 178,
								"endline": 354
							}
						],
						"name": "setXX",
						"comment": "Set the value of a key, only if the key already exists, and also set the specified expire time using D notation, e.g. $(D 5.minutes) for 5 minutes.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "offset"
							},
							{
								"deco": "b",
								"name": "value"
							}
						],
						"line": 356,
						"kind": "function",
						"char": 7,
						"name": "setBit",
						"deco": "FNfAyalbZb",
						"endchar": 116,
						"endline": 356,
						"comment": "Sets or clears the bit at offset in the string value stored at key\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 358,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "seconds"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 358,
								"kind": "function",
								"char": 7,
								"name": "setEX",
								"type": "void(string key, long seconds, T value)",
								"endchar": 120,
								"endline": 358
							}
						],
						"name": "setEX",
						"comment": "Set the value and expiration of a key\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 360,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "offset"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 360,
								"kind": "function",
								"char": 7,
								"name": "setRange",
								"type": "long(string key, long offset, T value)",
								"endchar": 136,
								"endline": 360
							}
						],
						"name": "setRange",
						"comment": "Overwrite part of a string at key starting at the specified offset\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 362,
						"kind": "function",
						"char": 7,
						"name": "strlen",
						"deco": "FNfAyaZl",
						"endchar": 64,
						"endline": 362,
						"comment": "Get the length of the value stored in a key\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "fields"
							}
						],
						"line": 368,
						"kind": "function",
						"char": 7,
						"name": "hdel",
						"deco": "FNfAyaMAQfXl",
						"endchar": 94,
						"endline": 368,
						"comment": "Delete one or more hash fields\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "Aya",
								"name": "field"
							}
						],
						"line": 370,
						"kind": "function",
						"char": 7,
						"name": "hexists",
						"deco": "FNfAyaQdZb",
						"endchar": 87,
						"endline": 370,
						"comment": "Determine if a hash field exists\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 372,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "string",
										"name": "field"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 372,
								"kind": "function",
								"char": 7,
								"name": "hset",
								"type": "void(string key, string field, T value)",
								"endchar": 116,
								"endline": 372
							}
						],
						"name": "hset",
						"comment": "Set multiple hash fields to multiple values\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 374,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "string",
										"name": "field"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 374,
								"kind": "function",
								"char": 7,
								"name": "hsetNX",
								"type": "bool(string key, string field, T value)",
								"endchar": 132,
								"endline": 374
							}
						],
						"name": "hsetNX",
						"comment": "Set the value of a hash field, only if the field does not exist\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 376,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "string",
										"name": "field"
									}
								],
								"line": 376,
								"kind": "function",
								"char": 4,
								"name": "hget",
								"type": "T(string key, string field)",
								"endchar": 117,
								"endline": 376
							}
						],
						"name": "hget",
						"comment": "Get the value of a hash field.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 378,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 378,
								"kind": "function",
								"char": 15,
								"name": "hgetAll",
								"type": "RedisReply!T(string key)",
								"endchar": 124,
								"endline": 378
							}
						],
						"name": "hgetAll",
						"comment": "Get all the fields and values in a hash\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "Aya",
								"name": "field"
							},
							{
								"deco": "l",
								"default": "1L",
								"name": "value"
							}
						],
						"line": 380,
						"kind": "function",
						"originalType": "@safe long(string key, string field, long value = 1)",
						"char": 7,
						"name": "hincr",
						"deco": "FNfAyaQdlZl",
						"endchar": 106,
						"endline": 380,
						"comment": "Increment the integer value of a hash field\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "Aya",
								"name": "field"
							},
							{
								"deco": "d",
								"name": "value"
							}
						],
						"line": 382,
						"kind": "function",
						"char": 7,
						"name": "hincr",
						"deco": "FNfAyaQddZl",
						"endchar": 111,
						"endline": 382,
						"comment": "Increment the real number value of a hash field\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 384,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 384,
								"kind": "function",
								"char": 15,
								"name": "hkeys",
								"type": "RedisReply!T(string key)",
								"endchar": 120,
								"endline": 384
							}
						],
						"name": "hkeys",
						"comment": "Get all the fields in a hash\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 386,
						"kind": "function",
						"char": 7,
						"name": "hlen",
						"deco": "FNfAyaZl",
						"endchar": 60,
						"endline": 386,
						"comment": "Get the number of fields in a hash\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 388,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "string[]",
										"storageClass": [
											"scope"
										],
										"name": "fields"
									}
								],
								"line": 388,
								"kind": "function",
								"char": 15,
								"name": "hmget",
								"type": "RedisReply!T(string key, scope string[] fields...)",
								"endchar": 154,
								"endline": 388
							}
						],
						"name": "hmget",
						"comment": "Get the values of all the given hash fields\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 390,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"line": 390,
								"kind": "function",
								"char": 7,
								"name": "hmset",
								"type": "void(string key, ARGS args)",
								"endchar": 76,
								"endline": 390
							}
						],
						"name": "hmset",
						"comment": "Set multiple hash fields to multiple values\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 393,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 393,
								"kind": "function",
								"char": 15,
								"name": "hvals",
								"type": "RedisReply!T(string key)",
								"endchar": 120,
								"endline": 393
							}
						],
						"name": "hvals",
						"comment": "Get all the values in a hash\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 399,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "index"
									}
								],
								"line": 399,
								"kind": "function",
								"char": 4,
								"name": "lindex",
								"type": "T(string key, long index)",
								"endchar": 119,
								"endline": 399
							}
						],
						"name": "lindex",
						"comment": "Get an element from a list by its index\n"
					},
					{
						"constraint": "isValidRedisValueType!T1 && isValidRedisValueType!T2",
						"parameters": [
							{
								"kind": "type",
								"name": "T1"
							},
							{
								"kind": "type",
								"name": "T2"
							}
						],
						"line": 401,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T1",
										"name": "pivot"
									},
									{
										"type": "T2",
										"name": "value"
									}
								],
								"line": 401,
								"kind": "function",
								"char": 7,
								"name": "linsertBefore",
								"type": "long(string key, T1 pivot, T2 value)",
								"endchar": 181,
								"endline": 401
							}
						],
						"name": "linsertBefore",
						"comment": "Insert value in the list stored at key before the reference value pivot.\n"
					},
					{
						"constraint": "isValidRedisValueType!T1 && isValidRedisValueType!T2",
						"parameters": [
							{
								"kind": "type",
								"name": "T1"
							},
							{
								"kind": "type",
								"name": "T2"
							}
						],
						"line": 403,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T1",
										"name": "pivot"
									},
									{
										"type": "T2",
										"name": "value"
									}
								],
								"line": 403,
								"kind": "function",
								"char": 7,
								"name": "linsertAfter",
								"type": "long(string key, T1 pivot, T2 value)",
								"endchar": 179,
								"endline": 403
							}
						],
						"name": "linsertAfter",
						"comment": "Insert value in the list stored at key after the reference value pivot.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 405,
						"kind": "function",
						"char": 7,
						"name": "llen",
						"deco": "FNfAyaZl",
						"endchar": 60,
						"endline": 405,
						"comment": "Returns the length of the list stored at key. If key does not exist, it is interpreted as an empty list and 0 is returned.\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 407,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"line": 407,
								"kind": "function",
								"char": 7,
								"name": "lpush",
								"type": "long(string key, ARGS args)",
								"endchar": 88,
								"endline": 407
							}
						],
						"name": "lpush",
						"comment": "Insert all the specified values at the head of the list stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 409,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 409,
								"kind": "function",
								"char": 7,
								"name": "lpushX",
								"type": "long(string key, T value)",
								"endchar": 111,
								"endline": 409
							}
						],
						"name": "lpushX",
						"comment": "Inserts value at the head of the list stored at key, only if key already exists and holds a list.\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 411,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"line": 411,
								"kind": "function",
								"char": 7,
								"name": "rpush",
								"type": "long(string key, ARGS args)",
								"endchar": 88,
								"endline": 411
							}
						],
						"name": "rpush",
						"comment": "Insert all the specified values at the tail of the list stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 413,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 413,
								"kind": "function",
								"char": 7,
								"name": "rpushX",
								"type": "long(string key, T value)",
								"endchar": 111,
								"endline": 413
							}
						],
						"name": "rpushX",
						"comment": "Inserts value at the tail of the list stored at key, only if key already exists and holds a list.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 415,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "stop"
									}
								],
								"line": 415,
								"kind": "function",
								"char": 15,
								"name": "lrange",
								"type": "RedisReply!T(string key, long start, long stop)",
								"endchar": 131,
								"endline": 415
							}
						],
						"name": "lrange",
						"comment": "Returns the specified elements of the list stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 417,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "count"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 417,
								"kind": "function",
								"char": 7,
								"name": "lrem",
								"type": "long(string key, long count, T value)",
								"endchar": 126,
								"endline": 417
							}
						],
						"name": "lrem",
						"comment": "Removes the first count occurrences of elements equal to value from the list stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 419,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "index"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 419,
								"kind": "function",
								"char": 7,
								"name": "lset",
								"type": "void(string key, long index, T value)",
								"endchar": 114,
								"endline": 419
							}
						],
						"name": "lset",
						"comment": "Sets the list element at index to value.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "start"
							},
							{
								"deco": "l",
								"name": "stop"
							}
						],
						"line": 422,
						"kind": "function",
						"char": 7,
						"name": "ltrim",
						"deco": "FNfAyallZv",
						"endchar": 87,
						"endline": 422,
						"comment": "Trim an existing list so that it will contain only the specified range of elements specified.\nEquivalent to $(D range = range[start .. stop+1])\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 424,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 424,
								"kind": "function",
								"char": 4,
								"name": "rpop",
								"type": "T(string key)",
								"endchar": 96,
								"endline": 424
							}
						],
						"name": "rpop",
						"comment": "Removes and returns the last element of the list stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 426,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 426,
								"kind": "function",
								"char": 4,
								"name": "lpop",
								"type": "T(string key)",
								"endchar": 96,
								"endline": 426
							}
						],
						"name": "lpop",
						"comment": "Removes and returns the first element of the list stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 429,
						"kind": "template",
						"char": 31,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "seconds"
									}
								],
								"line": 429,
								"kind": "function",
								"char": 31,
								"name": "blpop",
								"type": "Nullable!(Tuple!(string, T))(string key, long seconds)",
								"endchar": 2,
								"endline": 438
							}
						],
						"name": "blpop",
						"comment": "BLPOP is a blocking list pop primitive. It is the blocking version of LPOP because it blocks\nthe connection when there are no elements to pop from any of the given lists.\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 441,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "string",
										"name": "destination"
									}
								],
								"line": 441,
								"kind": "function",
								"char": 4,
								"name": "rpoplpush",
								"type": "T(string key, string destination)",
								"endchar": 139,
								"endline": 441
							}
						],
						"name": "rpoplpush",
						"comment": "Atomically returns and removes the last element (tail) of the list stored at source,\nand pushes the element at the first element (head) of the list stored at destination.\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 448,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"line": 448,
								"kind": "function",
								"char": 7,
								"name": "sadd",
								"type": "long(string key, ARGS args)",
								"endchar": 86,
								"endline": 448
							}
						],
						"name": "sadd",
						"comment": "Add the specified members to the set stored at key. Specified members that are already a member of this set are ignored.\nIf key does not exist, a new set is created before adding the specified members.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 450,
						"kind": "function",
						"char": 7,
						"name": "scard",
						"deco": "FNfAyaZl",
						"endchar": 62,
						"endline": 450,
						"comment": "Returns the set cardinality (number of elements) of the set stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 452,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string[]",
										"storageClass": [
											"scope"
										],
										"name": "keys"
									}
								],
								"line": 452,
								"kind": "function",
								"char": 15,
								"name": "sdiff",
								"type": "RedisReply!T(scope string[] keys...)",
								"endchar": 133,
								"endline": 452
							}
						],
						"name": "sdiff",
						"comment": "Returns the members of the set resulting from the difference between the first set and all the successive sets.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "destination"
							},
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "keys"
							}
						],
						"line": 455,
						"kind": "function",
						"char": 7,
						"name": "sdiffStore",
						"deco": "FNfAyaMAQfXl",
						"endchar": 118,
						"endline": 455,
						"comment": "This command is equal to SDIFF, but instead of returning the resulting set, it is stored in destination.\nIf destination already exists, it is overwritten.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 457,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string[]",
										"name": "keys"
									}
								],
								"line": 457,
								"kind": "function",
								"char": 15,
								"name": "sinter",
								"type": "RedisReply!T(string[] keys)",
								"endchar": 126,
								"endline": 457
							}
						],
						"name": "sinter",
						"comment": "Returns the members of the set resulting from the intersection of all the given sets.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "destination"
							},
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "keys"
							}
						],
						"line": 460,
						"kind": "function",
						"char": 7,
						"name": "sinterStore",
						"deco": "FNfAyaMAQfXl",
						"endchar": 120,
						"endline": 460,
						"comment": "This command is equal to SINTER, but instead of returning the resulting set, it is stored in destination.\nIf destination already exists, it is overwritten.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 462,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "member"
									}
								],
								"line": 462,
								"kind": "function",
								"char": 7,
								"name": "sisMember",
								"type": "bool(string key, T member)",
								"endchar": 119,
								"endline": 462
							}
						],
						"name": "sisMember",
						"comment": "Returns if member is a member of the set stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 464,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 464,
								"kind": "function",
								"char": 15,
								"name": "smembers",
								"type": "RedisReply!T(string key)",
								"endchar": 126,
								"endline": 464
							}
						],
						"name": "smembers",
						"comment": "Returns all the members of the set value stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 467,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "source"
									},
									{
										"type": "string",
										"name": "destination"
									},
									{
										"type": "T",
										"name": "member"
									}
								],
								"line": 467,
								"kind": "function",
								"char": 7,
								"name": "smove",
								"type": "bool(string source, string destination, T member)",
								"endchar": 150,
								"endline": 467
							}
						],
						"name": "smove",
						"comment": "Move member from the set at source to the set at destination. This operation is atomic.\nIn every given moment the element will appear to be a member of source or destination for other clients.\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 469,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 469,
								"kind": "function",
								"char": 4,
								"name": "spop",
								"type": "T(string key)",
								"endchar": 97,
								"endline": 469
							}
						],
						"name": "spop",
						"comment": "Removes and returns a random element from the set value stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 471,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 471,
								"kind": "function",
								"char": 4,
								"name": "srandMember",
								"type": "T(string key)",
								"endchar": 111,
								"endline": 471
							}
						],
						"name": "srandMember",
						"comment": "Returns a random element from the set stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueReturn!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 473,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "count"
									}
								],
								"line": 473,
								"kind": "function",
								"char": 15,
								"name": "srandMember",
								"type": "RedisReply!T(string key, long count)",
								"endchar": 154,
								"endline": 473
							}
						],
						"name": "srandMember",
						"comment": "returns count random elements from the set stored at key\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 477,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"line": 477,
								"kind": "function",
								"char": 7,
								"name": "srem",
								"type": "long(string key, ARGS args)",
								"endchar": 86,
								"endline": 477
							}
						],
						"name": "srem",
						"comment": "Remove the specified members from the set stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 479,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string[]",
										"storageClass": [
											"scope"
										],
										"name": "keys"
									}
								],
								"line": 479,
								"kind": "function",
								"char": 15,
								"name": "sunion",
								"type": "RedisReply!T(scope string[] keys...)",
								"endchar": 135,
								"endline": 479
							}
						],
						"name": "sunion",
						"comment": "Returns the members of the set resulting from the union of all the given sets.\n"
					},
					{
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "keys"
							}
						],
						"line": 481,
						"kind": "function",
						"char": 7,
						"name": "sunionStore",
						"deco": "FNfMAAyaXl",
						"endchar": 87,
						"endline": 481,
						"comment": "This command is equal to SUNION, but instead of returning the resulting set, it is stored in destination.\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 487,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"line": 487,
								"kind": "function",
								"char": 7,
								"name": "zadd",
								"type": "long(string key, ARGS args)",
								"endchar": 86,
								"endline": 487
							}
						],
						"name": "zadd",
						"comment": "Add one or more members to a sorted set, or update its score if it already exists\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 489,
						"kind": "function",
						"char": 7,
						"name": "zcard",
						"deco": "FNfAyaZl",
						"endchar": 62,
						"endline": 489,
						"comment": "Returns the sorted set cardinality (number of elements) of the sorted set stored at key.\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"defaultValue": "\"[]\"",
								"name": "RNG"
							}
						],
						"line": 491,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "min"
									},
									{
										"deco": "d",
										"name": "max"
									}
								],
								"line": 491,
								"kind": "function",
								"char": 7,
								"name": "zcount",
								"type": "long(string key, double min, double max)",
								"endchar": 136,
								"endline": 491
							}
						],
						"name": "zcount",
						"comment": "Returns the number of elements in the sorted set at key with a score between min and max\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 493,
						"kind": "template",
						"char": 9,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "value"
									},
									{
										"type": "T",
										"name": "member"
									}
								],
								"line": 493,
								"kind": "function",
								"char": 9,
								"name": "zincrby",
								"type": "double(string key, double value, T member)",
								"endchar": 141,
								"endline": 493
							}
						],
						"name": "zincrby",
						"comment": "Increments the score of member in the sorted set stored at key by increment.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 496,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"line": 496,
								"kind": "function",
								"char": 15,
								"name": "zrange",
								"type": "RedisReply!T(string key, long start, long end, bool with_scores = false)",
								"endchar": 2,
								"endline": 501
							}
						],
						"name": "zrange",
						"comment": "Returns the specified range of elements in the sorted set stored at key.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "Aya",
								"default": "\"-\"",
								"name": "min"
							},
							{
								"deco": "Aya",
								"default": "\"+\"",
								"name": "max"
							}
						],
						"line": 503,
						"kind": "function",
						"char": 7,
						"name": "zlexCount",
						"deco": "FNfAyaQdQfZl",
						"endchar": 116,
						"endline": 503
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 507,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "string",
										"default": "\"-\"",
										"name": "min"
									},
									{
										"type": "string",
										"default": "\"+\"",
										"name": "max"
									},
									{
										"deco": "l",
										"default": "0",
										"name": "offset"
									},
									{
										"deco": "l",
										"default": "-1",
										"name": "count"
									}
								],
								"line": 507,
								"kind": "function",
								"char": 15,
								"name": "zrangeByLex",
								"type": "RedisReply!T(string key, string min = \"-\", string max = \"+\", long offset = 0, long count = -1)",
								"endchar": 2,
								"endline": 512
							}
						],
						"name": "zrangeByLex",
						"comment": "When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering,\nthis command returns all the elements in the sorted set at key with a value between min and max.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "value",
								"deco": "Aya",
								"defaultValue": "\"[]\"",
								"name": "RNG"
							}
						],
						"line": 515,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "start"
									},
									{
										"deco": "d",
										"name": "end"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"line": 515,
								"kind": "function",
								"char": 15,
								"name": "zrangeByScore",
								"type": "RedisReply!T(string key, double start, double end, bool with_scores = false)",
								"endchar": 2,
								"endline": 520
							}
						],
						"name": "zrangeByScore",
						"comment": "Returns all the elements in the sorted set at key with a score between start and end inclusively\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "value",
								"deco": "Aya",
								"defaultValue": "\"[]\"",
								"name": "RNG"
							}
						],
						"line": 524,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "start"
									},
									{
										"deco": "d",
										"name": "end"
									},
									{
										"deco": "l",
										"name": "offset"
									},
									{
										"deco": "l",
										"name": "count"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"line": 524,
								"kind": "function",
								"char": 15,
								"name": "zrangeByScore",
								"type": "RedisReply!T(string key, double start, double end, long offset, long count, bool with_scores = false)",
								"endchar": 2,
								"endline": 531
							}
						],
						"name": "zrangeByScore",
						"comment": "Computes an internal list of elements in the sorted set at key with a score between start and end inclusively,\nand returns a range subselection similar to $(D results[offset .. offset+count])\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 534,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "member"
									}
								],
								"line": 534,
								"kind": "function",
								"char": 7,
								"name": "zrank",
								"type": "long(string key, T member)",
								"endchar": 2,
								"endline": 539
							}
						],
						"name": "zrank",
						"comment": "Returns the rank of member in the sorted set stored at key, with the scores ordered from low to high.\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 542,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "members"
									}
								],
								"line": 542,
								"kind": "function",
								"char": 7,
								"name": "zrem",
								"type": "long(string key, ARGS members)",
								"endchar": 92,
								"endline": 542
							}
						],
						"name": "zrem",
						"comment": "Removes the specified members from the sorted set stored at key.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "start"
							},
							{
								"deco": "l",
								"name": "stop"
							}
						],
						"line": 544,
						"kind": "function",
						"char": 7,
						"name": "zremRangeByRank",
						"deco": "FNfAyallZl",
						"endchar": 118,
						"endline": 544,
						"comment": "Removes all elements in the sorted set stored at key with rank between start and stop.\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"defaultValue": "\"[]\"",
								"name": "RNG"
							}
						],
						"line": 546,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "min"
									},
									{
										"deco": "d",
										"name": "max"
									}
								],
								"line": 546,
								"kind": "function",
								"char": 7,
								"name": "zremRangeByScore",
								"type": "long(string key, double min, double max)",
								"endchar": 155,
								"endline": 546
							}
						],
						"name": "zremRangeByScore",
						"comment": "Removes all elements in the sorted set stored at key with a score between min and max (inclusive).\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 548,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"line": 548,
								"kind": "function",
								"char": 15,
								"name": "zrevRange",
								"type": "RedisReply!T(string key, long start, long end, bool with_scores = false)",
								"endchar": 2,
								"endline": 553
							}
						],
						"name": "zrevRange",
						"comment": "Returns the specified range of elements in the sorted set stored at key.\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "value",
								"deco": "Aya",
								"defaultValue": "\"[]\"",
								"name": "RNG"
							}
						],
						"line": 556,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "min"
									},
									{
										"deco": "d",
										"name": "max"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"line": 556,
								"kind": "function",
								"char": 15,
								"name": "zrevRangeByScore",
								"type": "RedisReply!T(string key, double min, double max, bool with_scores = false)",
								"endchar": 2,
								"endline": 561
							}
						],
						"name": "zrevRangeByScore",
						"comment": "Returns all the elements in the sorted set at key with a score between max and min (including elements with score equal to max or min).\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "value",
								"deco": "Aya",
								"defaultValue": "\"[]\"",
								"name": "RNG"
							}
						],
						"line": 565,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "min"
									},
									{
										"deco": "d",
										"name": "max"
									},
									{
										"deco": "l",
										"name": "offset"
									},
									{
										"deco": "l",
										"name": "count"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"line": 565,
								"kind": "function",
								"char": 15,
								"name": "zrevRangeByScore",
								"type": "RedisReply!T(string key, double min, double max, long offset, long count, bool with_scores = false)",
								"endchar": 2,
								"endline": 572
							}
						],
						"name": "zrevRangeByScore",
						"comment": "Computes an internal list of elements in the sorted set at key with a score between max and min, and\nreturns a window of elements selected in a way equivalent to $(D results[offset .. offset + count])\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 575,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "member"
									}
								],
								"line": 575,
								"kind": "function",
								"char": 7,
								"name": "zrevRank",
								"type": "long(string key, T member)",
								"endchar": 2,
								"endline": 580
							}
						],
						"name": "zrevRank",
						"comment": "Returns the rank of member in the sorted set stored at key, with the scores ordered from high to low.\n"
					},
					{
						"constraint": "isValidRedisValueType!T && isValidRedisValueType!U",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"line": 583,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "U",
										"name": "member"
									}
								],
								"line": 583,
								"kind": "function",
								"char": 15,
								"name": "zscore",
								"type": "RedisReply!T(string key, U member)",
								"endchar": 2,
								"endline": 587
							}
						],
						"name": "zscore",
						"comment": "Returns the score of member in the sorted set at key.\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 594,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"line": 594,
								"kind": "function",
								"char": 7,
								"name": "pfadd",
								"type": "long(string key, ARGS args)",
								"endchar": 88,
								"endline": 594
							}
						],
						"name": "pfadd",
						"comment": "Adds one or more Keys to a HyperLogLog data structure .\n"
					},
					{
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "keys"
							}
						],
						"line": 607,
						"kind": "function",
						"char": 7,
						"name": "pfcount",
						"deco": "FNfMAAyaXl",
						"endchar": 79,
						"endline": 607,
						"comment": " Returns the approximated cardinality computed by the HyperLogLog data\n\t\tstructure stored at the specified key.\n\n\t\tWhen called with a single key, returns the approximated cardinality\n\t\tcomputed by the HyperLogLog data structure stored at the specified\n\t\tvariable, which is 0 if the variable does not exist.\n\n\t\tWhen called with multiple keys, returns the approximated cardinality\n\t\tof the union of the HyperLogLogs passed, by internally merging the\n\t\tHyperLogLogs stored at the provided keys into a temporary HyperLogLog.\n"
					},
					{
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 610,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "destkey"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"line": 610,
								"kind": "function",
								"char": 7,
								"name": "pfmerge",
								"type": "void(string destkey, ARGS args)",
								"endchar": 88,
								"endline": 610
							}
						],
						"name": "pfmerge",
						"comment": "Merge multiple HyperLogLog values into a new one.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "channel"
							},
							{
								"deco": "Aya",
								"name": "message"
							}
						],
						"line": 620,
						"kind": "function",
						"char": 7,
						"name": "publish",
						"deco": "FNfAyaQdZl",
						"endchar": 2,
						"endline": 624,
						"comment": "Publishes a message to all clients subscribed at the channel\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"line": 627,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "subcommand"
									},
									{
										"type": "string[]",
										"storageClass": [
											"scope"
										],
										"name": "args"
									}
								],
								"line": 627,
								"kind": "function",
								"char": 15,
								"name": "pubsub",
								"type": "RedisReply!T(string subcommand, scope string[] args...)",
								"endchar": 2,
								"endline": 631
							}
						],
						"name": "pubsub",
						"comment": "Inspect the state of the Pub/Sub subsystem\n"
					},
					{
						"line": 637,
						"kind": "function",
						"char": 7,
						"name": "dbSize",
						"deco": "FNfZl",
						"endchar": 49,
						"endline": 637,
						"comment": "Return the number of keys in the selected database\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 643,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "lua_code"
									},
									{
										"type": "string[]",
										"storageClass": [
											"scope"
										],
										"name": "keys"
									},
									{
										"type": "ARGS",
										"storageClass": [
											"scope"
										],
										"name": "args"
									}
								],
								"line": 643,
								"kind": "function",
								"char": 15,
								"name": "eval",
								"type": "RedisReply!T(string lua_code, scope string[] keys, scope ARGS args)",
								"endchar": 2,
								"endline": 647
							}
						],
						"name": "eval",
						"comment": "Execute a Lua script server side\n"
					},
					{
						"constraint": "isValidRedisValueType!T",
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 649,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "sha"
									},
									{
										"type": "string[]",
										"storageClass": [
											"scope"
										],
										"name": "keys"
									},
									{
										"type": "ARGS",
										"storageClass": [
											"scope"
										],
										"name": "args"
									}
								],
								"line": 649,
								"kind": "function",
								"char": 15,
								"name": "evalSHA",
								"type": "RedisReply!T(string sha, scope string[] keys, scope ARGS args)",
								"endchar": 2,
								"endline": 653
							}
						],
						"name": "evalSHA",
						"comment": "Evaluates a script cached on the server side by its SHA1 digest. Scripts are cached on the server side using the scriptLoad function.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "lua_code"
							}
						],
						"line": 660,
						"kind": "function",
						"char": 9,
						"name": "scriptLoad",
						"deco": "FNfAyaZQe",
						"endchar": 90,
						"endline": 660,
						"comment": "Load a script into the scripts cache, without executing it. Run it using evalSHA.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"defaultDeco": "v",
								"name": "T"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"line": 663,
						"kind": "template",
						"char": 4,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"name": "command"
									},
									{
										"type": "ARGS",
										"storageClass": [
											"scope"
										],
										"name": "args"
									}
								],
								"line": 663,
								"kind": "function",
								"char": 4,
								"name": "request",
								"type": "T(string command, scope ARGS args)",
								"endchar": 2,
								"endline": 666
							}
						],
						"name": "request",
						"comment": "Run the specified command and arguments in the Redis database server\n"
					}
				],
				"comment": "\tAccesses the contents of a Redis database\n",
				"name": "RedisDatabase"
			},
			{
				"kind": "alias",
				"deco": "S4vibe8internal11freelistref__T11FreeListRefTCQBt2db5redisQg19RedisSubscriberImplVbi1ZQCd",
				"char": 1,
				"line": 705,
				"name": "RedisSubscriber"
			},
			{
				"kind": "class",
				"char": 7,
				"members": [
					{
						"line": 731,
						"kind": "function",
						"char": 17,
						"name": "isListening",
						"deco": "xFNdNfZb",
						"endchar": 2,
						"endline": 733
					},
					{
						"line": 736,
						"kind": "function",
						"char": 21,
						"name": "subscriptions",
						"deco": "xFNdNfZAAya",
						"endchar": 2,
						"endline": 738,
						"comment": "Get a list of channels with active subscriptions\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "channel"
							}
						],
						"line": 740,
						"kind": "function",
						"char": 7,
						"name": "hasSubscription",
						"deco": "xFNfAyaZb",
						"endchar": 2,
						"endline": 742
					},
					{
						"parameters": [
							{
								"deco": "C4vibe2db5redisQg11RedisClient",
								"name": "client"
							}
						],
						"line": 744,
						"kind": "constructor",
						"originalType": "@safe (RedisClient client)",
						"char": 2,
						"name": "this",
						"deco": "FNfC4vibe2db5redisQg11RedisClientZCQBfQBdQBdQBg19RedisSubscriberImpl",
						"endchar": 2,
						"endline": 750
					},
					{
						"line": 754,
						"kind": "destructor",
						"char": 2,
						"name": "~this",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 757
					},
					{
						"line": 786,
						"kind": "function",
						"char": 7,
						"name": "bstop",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 806,
						"comment": "Stop listening and yield until the operation is complete.\n"
					},
					{
						"line": 809,
						"kind": "function",
						"char": 7,
						"name": "stop",
						"deco": "FNfZv",
						"endchar": 2,
						"endline": 828,
						"comment": "Stop listening asynchroneously\n"
					},
					{
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "args"
							}
						],
						"line": 854,
						"kind": "function",
						"char": 7,
						"name": "subscribe",
						"deco": "FNfMAAyaXv",
						"endchar": 2,
						"endline": 895,
						"comment": "Completes the subscription for a listener to start receiving pubsub messages\non the corresponding channel(s). Returns instantly if already subscribed.\nIf a connection error is thrown here, it stops the listener.\n"
					},
					{
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "args"
							}
						],
						"line": 900,
						"kind": "function",
						"char": 7,
						"name": "unsubscribe",
						"deco": "FNfMAAyaXv",
						"endchar": 2,
						"endline": 935,
						"comment": "Unsubscribes from the channel(s) specified, returns immediately if none\nis currently being listened.\nIf a connection error is thrown here, it stops the listener.\n"
					},
					{
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "args"
							}
						],
						"line": 940,
						"kind": "function",
						"char": 7,
						"name": "psubscribe",
						"deco": "FNfMAAyaXv",
						"endchar": 2,
						"endline": 964,
						"comment": "Same as subscribe, but uses glob patterns, and does not return instantly if\nthe subscriptions are already registered.\nthrows Exception if the pattern does not yield a new subscription.\n"
					},
					{
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "args"
							}
						],
						"line": 969,
						"kind": "function",
						"char": 7,
						"name": "punsubscribe",
						"deco": "FNfMAAyaXv",
						"endchar": 2,
						"endline": 996,
						"comment": "Same as unsubscribe, but uses glob patterns, and does not return instantly if\nthe subscriptions are not registered.\nthrows Exception if the pattern does not yield a new unsubscription.\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfAyaQdZv",
								"name": "onMessage"
							},
							{
								"deco": "S4core4time8Duration",
								"default": "dur(0L)",
								"name": "timeout"
							}
						],
						"line": 1042,
						"kind": "function",
						"originalType": "@safe void(void delegate(string, string) @safe onMessage, Duration timeout = 0.seconds)",
						"char": 7,
						"name": "blisten",
						"deco": "FNfDFNfAyaQdZvS4core4time8DurationZv",
						"endchar": 2,
						"endline": 1236
					},
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "DFAyaQdZv",
								"name": "onMessage"
							},
							{
								"deco": "S4core4time8Duration",
								"default": "dur(0L)",
								"name": "timeout"
							}
						],
						"line": 1239,
						"kind": "function",
						"originalType": "@safe void(void delegate(string, string) @system onMessage, Duration timeout = 0.seconds)",
						"char": 7,
						"name": "blisten",
						"deco": "FNfDFAyaQdZvS4core4time8DurationZv",
						"endchar": 2,
						"endline": 1242,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "DFNfAyaQdZv",
								"name": "callback"
							},
							{
								"deco": "S4core4time8Duration",
								"default": "dur(0L)",
								"name": "timeout"
							}
						],
						"line": 1248,
						"kind": "function",
						"originalType": "@safe Task(void delegate(string, string) @safe callback, Duration timeout = 0.seconds)",
						"char": 7,
						"name": "listen",
						"deco": "FNfDFNfAyaQdZvS4core4time8DurationZS4vibeQBa4task4Task",
						"endchar": 2,
						"endline": 1282,
						"comment": "Waits for messages and calls the callback with the channel and the message as arguments.\nThe timeout is passed over to the listener, which closes after the period of inactivity.\nUse 0.seconds timeout to specify a very long time (365 days)\nErrors will be sent to Callback Delegate on channel \"Error\".\n"
					},
					{
						"storageClass": [
							"deprecated"
						],
						"parameters": [
							{
								"deco": "DFAyaQdZv",
								"name": "onMessage"
							},
							{
								"deco": "S4core4time8Duration",
								"default": "dur(0L)",
								"name": "timeout"
							}
						],
						"line": 1285,
						"kind": "function",
						"originalType": "@safe Task(void delegate(string, string) @system onMessage, Duration timeout = 0.seconds)",
						"char": 7,
						"name": "listen",
						"deco": "FNfDFAyaQdZvS4core4time8DurationZS4vibeQBa4task4Task",
						"endchar": 2,
						"endline": 1288,
						"comment": "ditto\n"
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 2,
						"line": 754,
						"name": "~this"
					},
					{
						"kind": "destructor",
						"deco": "FNeZv",
						"char": 2,
						"line": 754,
						"name": "~this"
					}
				],
				"line": 707,
				"name": "RedisSubscriberImpl"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "ubyte[]",
						"name": "T"
					}
				],
				"line": 1295,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"line": 1299,
								"kind": "variable",
								"char": 8,
								"name": "m_magic",
								"deco": "k",
								"init": "368474803"
							},
							{
								"kind": "variable",
								"type": "RedisConnection",
								"char": 19,
								"line": 1300,
								"name": "m_conn"
							},
							{
								"kind": "variable",
								"type": "LockedConnection!RedisConnection",
								"char": 36,
								"line": 1301,
								"name": "m_lockedConnection"
							},
							{
								"kind": "alias",
								"type": "T",
								"char": 2,
								"line": 1304,
								"name": "ElementType"
							},
							{
								"parameters": [
									{
										"type": "RedisConnection",
										"name": "conn"
									}
								],
								"line": 1306,
								"kind": "constructor",
								"char": 10,
								"name": "this",
								"type": "(RedisConnection conn)",
								"endchar": 2,
								"endline": 1313
							},
							{
								"line": 1325,
								"kind": "destructor",
								"char": 2,
								"name": "~this",
								"endchar": 2,
								"endline": 1332
							},
							{
								"line": 1334,
								"kind": "function",
								"char": 17,
								"name": "empty",
								"type": "const @property bool()",
								"endchar": 112,
								"endline": 1334
							},
							{
								"line": 1342,
								"kind": "function",
								"char": 14,
								"name": "front",
								"type": "@property T()",
								"endchar": 2,
								"endline": 1351,
								"comment": " Returns the current element of the reply.\n\n\t\tNote that byte and character arrays may be returned as slices to a\n\t\ttemporary buffer. This buffer will be invalidated on the next call to\n\t\t$(D popFront), so it needs to be duplicated for permanent storage.\n"
							},
							{
								"line": 1353,
								"kind": "function",
								"char": 17,
								"name": "frontIsNull",
								"type": "const @property bool()",
								"endchar": 2,
								"endline": 1357
							},
							{
								"line": 1361,
								"kind": "function",
								"char": 7,
								"name": "popFront",
								"type": "void()",
								"endchar": 2,
								"endline": 1376,
								"comment": " Pops the current element of the reply\n"
							},
							{
								"line": 1380,
								"kind": "function",
								"char": 17,
								"name": "hasNext",
								"type": "const @property bool()",
								"endchar": 50,
								"endline": 1380,
								"comment": "Legacy property for hasNext/next based iteration\n"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"type": "E[]",
										"name": "TN"
									},
									{
										"kind": "type",
										"name": "E"
									}
								],
								"line": 1383,
								"kind": "template",
								"char": 5,
								"members": [
									{
										"line": 1383,
										"kind": "function",
										"char": 5,
										"name": "next",
										"type": "TN()",
										"endchar": 2,
										"endline": 1390
									}
								],
								"name": "next",
								"comment": "Legacy property for hasNext/next based iteration\n"
							},
							{
								"line": 1392,
								"kind": "function",
								"char": 7,
								"name": "drop",
								"type": "void()",
								"endchar": 2,
								"endline": 1396
							},
							{
								"line": 1398,
								"kind": "function",
								"char": 15,
								"name": "readData",
								"type": "void()",
								"endchar": 2,
								"endline": 1405
							},
							{
								"line": 1407,
								"kind": "function",
								"char": 15,
								"name": "clearData",
								"type": "void()",
								"endchar": 2,
								"endline": 1412
							},
							{
								"parameters": [
									{
										"type": "LockedConnection!RedisConnection",
										"storageClass": [
											"ref"
										],
										"name": "conn"
									}
								],
								"line": 1414,
								"kind": "function",
								"char": 25,
								"name": "lockedConnection",
								"type": "@property void(ref LockedConnection!RedisConnection conn)",
								"endchar": 2,
								"endline": 1418
							},
							{
								"line": 1420,
								"kind": "function",
								"char": 15,
								"name": "initialize",
								"type": "void()",
								"endchar": 2,
								"endline": 1449
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "sizeLn"
									}
								],
								"line": 1451,
								"kind": "function",
								"char": 15,
								"name": "readBulk",
								"type": "void(string sizeLn)",
								"endchar": 2,
								"endline": 1468
							}
						],
						"line": 1295,
						"name": "RedisReply"
					}
				],
				"name": "RedisReply",
				"comment": " Range interface to a single Redis reply.\n"
			},
			{
				"line": 1471,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C9Exception",
								"default": "null",
								"name": "next"
							}
						],
						"line": 1472,
						"kind": "constructor",
						"originalType": "@safe (string message, string file = __FILE__, size_t line = __LINE__, Exception next = null)",
						"char": 2,
						"name": "this",
						"deco": "FNfAyaQdmC9ExceptionZC4vibe2db5redisQg22RedisProtocolException",
						"endchar": 2,
						"endline": 1475
					}
				],
				"name": "RedisProtocolException"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1478,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 1482,
						"kind": "variable",
						"char": 8,
						"name": "isValidRedisValueReturn",
						"init": "isValidRedisValueType!(typeof(T.init.get()))"
					}
				],
				"name": "isValidRedisValueReturn"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1488,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 1490,
						"kind": "variable",
						"char": 7,
						"name": "isValidRedisValueType",
						"init": "is(T : const(char)[]) || is(T : const(ubyte)[]) || is(T == long) || is(T == double) || is(T == bool)"
					}
				],
				"name": "isValidRedisValueType"
			}
		],
		"comment": "\tRedis database client implementation.\n\n\tCopyright: © 2012-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig, Michael Eisendle, Etienne Cimon\n",
		"name": "vibe.db.redis.redis"
	},
	{
		"kind": "module",
		"file": "redis/vibe/db/redis/sessionstore.d",
		"members": [
			{
				"line": 11,
				"kind": "class",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "l",
								"name": "database"
							},
							{
								"deco": "t",
								"default": "cast(ushort)6379u",
								"name": "port"
							}
						],
						"line": 24,
						"kind": "constructor",
						"originalType": "(string host, long database, ushort port = RedisClient.defaultPort)",
						"char": 2,
						"name": "this",
						"deco": "FAyaltZC4vibe2db5redis12sessionstore17RedisSessionStore",
						"endchar": 2,
						"endline": 27,
						"comment": " Constructs a new Redis session store.\n\n\t\tParams:\n\t\t\thost = Host name of the Redis instance to connect to\n\t\t\tdatabase = Database number to select on the server\n\t\t\tport = Optional port number to use when connecting to the server\n"
					},
					{
						"line": 31,
						"kind": "function",
						"char": 21,
						"name": "expirationTime",
						"deco": "xFNdZS4core4time8Duration",
						"endchar": 71,
						"endline": 31,
						"comment": " The duration without access after which a session expires.\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "dur"
							}
						],
						"line": 33,
						"kind": "function",
						"char": 17,
						"name": "expirationTime",
						"deco": "FNdS4core4time8DurationZv",
						"endchar": 72,
						"endline": 33,
						"comment": "ditto\n"
					},
					{
						"overrides": [
							"vibe.http.session.SessionStore.storageType"
						],
						"line": 35,
						"kind": "function",
						"originalType": "const @property SessionStorageType()",
						"char": 31,
						"name": "storageType",
						"deco": "xFNdNfZE4vibe4http7session18SessionStorageType",
						"endchar": 85,
						"endline": 35
					},
					{
						"overrides": [
							"vibe.http.session.SessionStore.create"
						],
						"line": 37,
						"kind": "function",
						"originalType": "Session()",
						"char": 10,
						"name": "create",
						"deco": "FNfZS4vibe4http7session7Session",
						"endchar": 2,
						"endline": 45
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.open"
						],
						"line": 47,
						"kind": "function",
						"originalType": "Session(string id)",
						"char": 10,
						"name": "open",
						"deco": "FNfAyaZS4vibe4http7session7Session",
						"endchar": 2,
						"endline": 57
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant__T8VariantNVmi32ZQp",
								"name": "value"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.set"
						],
						"line": 59,
						"kind": "function",
						"originalType": "@trusted void(string id, string name, Variant value)",
						"char": 7,
						"name": "set",
						"deco": "FNeAyaQdS3std7variant__T8VariantNVmi32ZQpZv",
						"endchar": 2,
						"endline": 62
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant__T8VariantNVmi32ZQp",
								"storageClass": [
									"lazy"
								],
								"name": "defaultVal"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.get"
						],
						"line": 64,
						"kind": "function",
						"originalType": "@trusted Variant(string id, string name, lazy Variant defaultVal)",
						"char": 10,
						"name": "get",
						"deco": "FNeAyaQdLS3std7variant__T8VariantNVmi32ZQpZQBi",
						"endchar": 2,
						"endline": 68
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.isKeySet"
						],
						"line": 70,
						"kind": "function",
						"originalType": "bool(string id, string key)",
						"char": 7,
						"name": "isKeySet",
						"deco": "FNfAyaQdZb",
						"endchar": 2,
						"endline": 73
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.remove"
						],
						"line": 75,
						"kind": "function",
						"originalType": "void(string id, string key)",
						"char": 7,
						"name": "remove",
						"deco": "FNfAyaQdZv",
						"endchar": 2,
						"endline": 78
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.destroy"
						],
						"line": 80,
						"kind": "function",
						"originalType": "void(string id)",
						"char": 7,
						"name": "destroy",
						"deco": "FNfAyaZv",
						"endchar": 2,
						"endline": 83
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"line": 85,
						"kind": "function",
						"originalType": "int delegate(int delegate(ref string key, ref Variant value))(string id)",
						"char": 64,
						"name": "iterateSession",
						"deco": "FAyaZDFDFKQjKS3std7variant__T8VariantNVmi32ZQpZiZi",
						"endchar": 2,
						"endline": 88
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "DFNfAyaZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"overrides": [
							"vibe.http.session.SessionStore.iterateSession"
						],
						"line": 90,
						"kind": "function",
						"originalType": "int(string id, scope int delegate(string key) @safe del)",
						"char": 6,
						"name": "iterateSession",
						"deco": "FNfAyaMDFNfQiZiZi",
						"endchar": 2,
						"endline": 100
					}
				],
				"name": "RedisSessionStore",
				"interfaces": [
					"vibe.http.session.SessionStore"
				]
			}
		],
		"name": "vibe.db.redis.sessionstore"
	},
	{
		"kind": "module",
		"file": "redis/vibe/db/redis/types.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"line": 22,
				"kind": "template",
				"char": 15,
				"members": [
					{
						"parameters": [
							{
								"type": "RedisDatabase",
								"name": "db"
							},
							{
								"type": "string",
								"name": "key"
							}
						],
						"line": 22,
						"kind": "function",
						"char": 15,
						"name": "getAsString",
						"type": "RedisString!T(RedisDatabase db, string key)",
						"endchar": 1,
						"endline": 25
					}
				],
				"name": "getAsString",
				"comment": " Returns a handle to a string type value.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L28_C1)\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto str = db.getAsString(\"some_string\");\n\tstr = \"test\";\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L28_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"line": 41,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "RedisDatabase",
								"name": "db"
							},
							{
								"type": "string",
								"name": "key"
							}
						],
						"line": 41,
						"kind": "function",
						"char": 12,
						"name": "getAsSet",
						"type": "RedisSet!T(RedisDatabase db, string key)",
						"endchar": 1,
						"endline": 44
					}
				],
				"name": "getAsSet",
				"comment": " Returns a handle to a set type value.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L47_C1)\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto set = db.getAsSet(\"some_set\");\n\tset.insert(\"test\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L47_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"line": 59,
				"kind": "template",
				"char": 13,
				"members": [
					{
						"parameters": [
							{
								"type": "RedisDatabase",
								"name": "db"
							},
							{
								"type": "string",
								"name": "key"
							}
						],
						"line": 59,
						"kind": "function",
						"char": 13,
						"name": "getAsZSet",
						"type": "RedisZSet!T(RedisDatabase db, string key)",
						"endchar": 1,
						"endline": 62
					}
				],
				"name": "getAsZSet",
				"comment": " Returns a handle to a set type value.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L65_C1)\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto set = db.getAsZSet(\"some_sorted_set\");\n\tset.insert(1, \"test\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L65_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"line": 77,
				"kind": "template",
				"char": 13,
				"members": [
					{
						"parameters": [
							{
								"type": "RedisDatabase",
								"name": "db"
							},
							{
								"type": "string",
								"name": "key"
							}
						],
						"line": 77,
						"kind": "function",
						"char": 13,
						"name": "getAsHash",
						"type": "RedisHash!T(RedisDatabase db, string key)",
						"endchar": 1,
						"endline": 80
					}
				],
				"name": "getAsHash",
				"comment": " Returns a handle to a hash type value.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L83_C1)\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto hash = db.getAsHash(\"some_hash\");\n\thash[\"test\"] = \"123\";\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L83_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"line": 95,
				"kind": "template",
				"char": 13,
				"members": [
					{
						"parameters": [
							{
								"type": "RedisDatabase",
								"name": "db"
							},
							{
								"type": "string",
								"name": "key"
							}
						],
						"line": 95,
						"kind": "function",
						"char": 13,
						"name": "getAsList",
						"type": "RedisList!T(RedisDatabase db, string key)",
						"endchar": 1,
						"endline": 98
					}
				],
				"name": "getAsList",
				"comment": " Returns a handle to a list type value.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L101_C1)\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto list = db.getAsList!long(\"some_list\");\n\tlist.insertFront(123);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L101_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 120,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "value"
							}
						],
						"line": 120,
						"kind": "function",
						"char": 8,
						"name": "toRedis",
						"type": "string(T value)",
						"endchar": 1,
						"endline": 132
					}
				],
				"name": "toRedis",
				"comment": "\tConverts the given value to a binary/string representation suitable for\n\tRedis storage.\n\n\tThese functions are used by the proxy types of this module to convert\n\tbetween Redis and D.\n\n\tSee_also: $(D fromRedis)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 134,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"type": "T",
								"name": "value"
							}
						],
						"line": 134,
						"kind": "function",
						"char": 6,
						"name": "toRedis",
						"type": "void(ref R dst, T value)",
						"endchar": 1,
						"endline": 146
					}
				],
				"name": "toRedis",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 157,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "value"
							}
						],
						"line": 157,
						"kind": "function",
						"char": 3,
						"name": "fromRedis",
						"type": "T(string value)",
						"endchar": 1,
						"endline": 169
					}
				],
				"name": "fromRedis",
				"comment": "\tConverts a Redis value back to its original representation.\n\n\tThese functions are used by the proxy types of this module to convert\n\tbetween Redis and D.\n\n\tSee_also: $(D toRedis)\n"
			},
			{
				"line": 174,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 175,
						"char": 2,
						"value": "0",
						"comment": "Non-existent key\n",
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 176,
						"char": 2,
						"value": "1",
						"comment": "String/binary value\n",
						"name": "string"
					},
					{
						"kind": "enum member",
						"line": 177,
						"char": 2,
						"value": "2",
						"comment": "Linked list\n",
						"name": "list"
					},
					{
						"kind": "enum member",
						"line": 178,
						"char": 2,
						"value": "3",
						"comment": "Unsorted set\n",
						"name": "set"
					},
					{
						"kind": "enum member",
						"line": 179,
						"char": 2,
						"value": "4",
						"comment": "Sorted set\n",
						"name": "zset"
					},
					{
						"kind": "enum member",
						"line": 180,
						"char": 2,
						"value": "5",
						"comment": "Unsorted map\n",
						"name": "hash"
					}
				],
				"name": "RedisType",
				"baseDeco": "i",
				"comment": " The type of a Redis key.\n"
			},
			{
				"kind": "struct",
				"line": 186,
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "S4vibe2db5redisQg13RedisDatabase",
								"name": "db"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"line": 192,
						"kind": "constructor",
						"originalType": "ref (RedisDatabase db, string key)",
						"char": 2,
						"name": "this",
						"deco": "FNcS4vibe2db5redisQg13RedisDatabaseAyaZSQBkQBiQBi5types10RedisValue",
						"endchar": 63,
						"endline": 192
					},
					{
						"line": 196,
						"kind": "function",
						"char": 33,
						"name": "database",
						"deco": "NgFNdZNgS4vibe2db5redisQg13RedisDatabase",
						"endchar": 65,
						"endline": 196,
						"comment": " The database in which the key is stored.\n"
					},
					{
						"line": 200,
						"kind": "function",
						"char": 19,
						"name": "key",
						"deco": "xFNdZAya",
						"endchar": 47,
						"endline": 200,
						"comment": " Name of the corresponding key.\n"
					},
					{
						"line": 210,
						"kind": "function",
						"char": 21,
						"name": "ttl",
						"deco": "FNdZS4core4time8Duration",
						"endchar": 2,
						"endline": 214,
						"comment": " Remaining time-to-live.\n\n\t\tReturns:\n\t\t\tThe time until the key expires, if applicable. Returns\n\t\t\t$(D Duration.max) otherwise.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/pttl, PTTL)\n"
					},
					{
						"line": 223,
						"kind": "function",
						"char": 22,
						"name": "type",
						"deco": "FNdZE4vibe2db5redis5types9RedisType",
						"endchar": 86,
						"endline": 223,
						"comment": " The data type of the referenced value.\n\n\t\tQueries the actual type of the value that is referenced by this\n\t\tkey.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/type, TYPE)\n"
					},
					{
						"line": 229,
						"kind": "function",
						"char": 17,
						"name": "exists",
						"deco": "FNdZb",
						"endchar": 55,
						"endline": 229,
						"comment": " Checks if the referenced key exists.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/exists, EXISTS)\n"
					},
					{
						"line": 237,
						"kind": "function",
						"char": 7,
						"name": "remove",
						"deco": "FZb",
						"endchar": 46,
						"endline": 237,
						"comment": " Removes the referenced key.\n\n\t\tReturns: $(D true) $(I iff) the key was successfully removed.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/del, DEL)\n"
					},
					{
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "expire_time"
							}
						],
						"line": 248,
						"kind": "function",
						"char": 7,
						"name": "expire",
						"deco": "FS4core4time8DurationZb",
						"endchar": 128,
						"endline": 248,
						"comment": " Sets the key for expiration after the given timeout.\n\n\t\tNote that Redis handles timeouts in second resolution, so that the\n\t\ttimeout must be at least one second.\n\n\t\tReturns: $(D true) $(I iff) the expiration time was successfully set.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/expire, EXPIRE)\n"
					},
					{
						"parameters": [
							{
								"deco": "S3std8datetime7systime7SysTime",
								"name": "expire_time"
							}
						],
						"line": 259,
						"kind": "function",
						"char": 7,
						"name": "expireAt",
						"deco": "FS3std8datetime7systime7SysTimeZb",
						"endchar": 94,
						"endline": 259,
						"comment": " Sets the key for expiration at the given point in time.\n\n\t\tNote that Redis handles timeouts in second resolution, so that any\n\t\tfractional seconds of the given $(D expire_time) will be truncated.\n\n\t\tReturns: $(D true) $(I iff) the expiration time was successfully set.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/expireat, EXPIREAT)\n"
					},
					{
						"line": 268,
						"kind": "function",
						"char": 7,
						"name": "persist",
						"deco": "FZb",
						"endchar": 47,
						"endline": 268,
						"comment": " Removes any existing expiration time for the key.\n\n\t\tReturns:\n\t\t\t$(D true) $(I iff) the key exists and an existing timeout was removed.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/persist, PERSIST)\n"
					},
					{
						"parameters": [
							{
								"deco": "l",
								"name": "dst_database"
							}
						],
						"line": 280,
						"kind": "function",
						"char": 7,
						"name": "moveTo",
						"deco": "FlZb",
						"endchar": 74,
						"endline": 280,
						"comment": " Moves this key to a different database.\n\n\t\tExisting keys will not be overwritten.\n\n\t\tReturns:\n\t\t\t$(D true) $(I iff) the key exists and was successfully moved to the\n\t\t\tdestination database.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/move, MOVE)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "new_name"
							}
						],
						"line": 289,
						"kind": "function",
						"char": 7,
						"name": "rename",
						"deco": "FAyaZv",
						"endchar": 81,
						"endline": 289,
						"comment": " Renames the referenced key.\n\n\t\tThis method will also update this instance to refer to the renamed\n\t\tkey.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/rename, RENAME), $(D renameIfNotExist)\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "new_name"
							}
						],
						"line": 302,
						"kind": "function",
						"char": 7,
						"name": "renameIfNotExist",
						"deco": "FAyaZb",
						"endchar": 2,
						"endline": 309,
						"comment": " Renames the referenced key if the destination key doesn't exist.\n\n\t\tThis method will also update this instance to refer to the renamed\n\t\tkey if the rename was successful.\n\n\t\tReturns:\n\t\t\t$(D true) $(I iff) the source key exists and the destination key doesn't\n\t\t\texist.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/renamenx, RENAMENX), $(D rename)\n"
					}
				],
				"comment": " Represents a generic Redis value.\n",
				"name": "RedisValue"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"line": 320,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "RedisValue",
								"char": 13,
								"line": 321,
								"name": "value"
							},
							{
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 324,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(RedisDatabase db, string key)",
								"endchar": 68,
								"endline": 324
							},
							{
								"line": 330,
								"kind": "function",
								"char": 17,
								"name": "length",
								"type": "@property long()",
								"endchar": 55,
								"endline": 330,
								"comment": " The length in bytes of the string.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/strlen, STRLEN)\n"
							},
							{
								"line": 332,
								"kind": "function",
								"char": 4,
								"name": "get",
								"type": "T()",
								"endchar": 55,
								"endline": 332
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 334,
								"kind": "function",
								"char": 4,
								"name": "getSet",
								"type": "T(T value)",
								"endchar": 76,
								"endline": 334
							},
							{
								"parameters": [
									{
										"deco": "l",
										"name": "offset"
									}
								],
								"line": 335,
								"kind": "function",
								"char": 7,
								"name": "getBit",
								"type": "bool(long offset)",
								"endchar": 64,
								"endline": 335
							},
							{
								"parameters": [
									{
										"deco": "l",
										"name": "offset"
									},
									{
										"deco": "b",
										"name": "value"
									}
								],
								"line": 336,
								"kind": "function",
								"char": 7,
								"name": "setBit",
								"type": "bool(long offset, bool value)",
								"endchar": 83,
								"endline": 336
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "Duration",
										"name": "expire_time"
									}
								],
								"line": 337,
								"kind": "function",
								"char": 7,
								"name": "setExpire",
								"type": "void(T value, Duration expire_time)",
								"endchar": 147,
								"endline": 337
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 338,
								"kind": "function",
								"char": 7,
								"name": "setIfNotExist",
								"type": "bool(T value)",
								"endchar": 73,
								"endline": 338
							},
							{
								"parameters": [
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									}
								],
								"line": 340,
								"kind": "function",
								"char": 9,
								"name": "getSubString",
								"type": "string(long start, long end)",
								"endchar": 94,
								"endline": 340
							},
							{
								"parameters": [
									{
										"deco": "l",
										"name": "offset"
									},
									{
										"type": "string",
										"name": "value"
									}
								],
								"line": 341,
								"kind": "function",
								"char": 7,
								"name": "setSubString",
								"type": "long(long offset, string value)",
								"endchar": 93,
								"endline": 341
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 343,
								"kind": "function",
								"char": 7,
								"name": "opAssign",
								"type": "void(T value)",
								"endchar": 59,
								"endline": 343
							},
							{
								"constraint": "OP == \"~\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"line": 345,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "string",
												"name": "value"
											}
										],
										"line": 345,
										"kind": "function",
										"char": 7,
										"name": "opOpAssign",
										"type": "long(string value)",
										"endchar": 94,
										"endline": 345
									}
								],
								"name": "opOpAssign"
							},
							{
								"constraint": "OP == \"++\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"line": 346,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"line": 346,
										"kind": "function",
										"char": 7,
										"name": "opUnary",
										"type": "long()",
										"endchar": 71,
										"endline": 346
									}
								],
								"name": "opUnary"
							},
							{
								"constraint": "OP == \"--\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"line": 347,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"line": 347,
										"kind": "function",
										"char": 7,
										"name": "opUnary",
										"type": "long()",
										"endchar": 71,
										"endline": 347
									}
								],
								"name": "opUnary"
							},
							{
								"constraint": "OP == \"+\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"line": 348,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"deco": "l",
												"name": "value"
											}
										],
										"line": 348,
										"kind": "function",
										"char": 7,
										"name": "opOpAssign",
										"type": "long(long value)",
										"endchar": 2,
										"endline": 352
									}
								],
								"name": "opOpAssign"
							},
							{
								"constraint": "OP == \"-\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"line": 353,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"deco": "l",
												"name": "value"
											}
										],
										"line": 353,
										"kind": "function",
										"char": 7,
										"name": "opOpAssign",
										"type": "long(long value)",
										"endchar": 2,
										"endline": 357
									}
								],
								"name": "opOpAssign"
							},
							{
								"constraint": "OP == \"+\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"line": 358,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"deco": "d",
												"name": "value"
											}
										],
										"line": 358,
										"kind": "function",
										"char": 7,
										"name": "opOpAssign",
										"type": "long(double value)",
										"endchar": 92,
										"endline": 358
									}
								],
								"name": "opOpAssign"
							},
							{
								"constraint": "OP == \"-\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"line": 359,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"deco": "d",
												"name": "value"
											}
										],
										"line": 359,
										"kind": "function",
										"char": 7,
										"name": "opOpAssign",
										"type": "long(double value)",
										"endchar": 93,
										"endline": 359
									}
								],
								"name": "opOpAssign"
							}
						],
						"line": 320,
						"name": "RedisString"
					}
				],
				"name": "RedisString",
				"comment": " Represents a Redis string value.\n\n\tIn addition to the methods specific to string values, all operations of\n\t$(D RedisValue) are available using an $(D alias this) declaration.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"line": 368,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "RedisValue",
								"char": 13,
								"line": 369,
								"name": "value"
							},
							{
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 372,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(RedisDatabase db, string key)",
								"endchar": 68,
								"endline": 372
							},
							{
								"line": 374,
								"kind": "function",
								"char": 7,
								"name": "remove",
								"type": "bool()",
								"endchar": 41,
								"endline": 374
							},
							{
								"parameters": [
									{
										"type": "string[]",
										"storageClass": [
											"scope"
										],
										"name": "fields"
									}
								],
								"line": 375,
								"kind": "function",
								"char": 9,
								"name": "remove",
								"type": "size_t(scope string[] fields...)",
								"endchar": 89,
								"endline": 375
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "field"
									}
								],
								"line": 376,
								"kind": "function",
								"char": 7,
								"name": "exists",
								"type": "bool(string field)",
								"endchar": 65,
								"endline": 376
							},
							{
								"line": 377,
								"kind": "function",
								"char": 7,
								"name": "exists",
								"type": "bool()",
								"endchar": 39,
								"endline": 377
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "string",
										"name": "field"
									}
								],
								"line": 379,
								"kind": "function",
								"char": 7,
								"name": "opIndexAssign",
								"type": "void(T value, string field)",
								"endchar": 88,
								"endline": 379
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "field"
									}
								],
								"line": 380,
								"kind": "function",
								"char": 4,
								"name": "opIndex",
								"type": "T(string field)",
								"endchar": 81,
								"endline": 380
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "field"
									},
									{
										"type": "T",
										"name": "def_value"
									}
								],
								"line": 382,
								"kind": "function",
								"char": 4,
								"name": "get",
								"type": "T(string field, T def_value)",
								"endchar": 2,
								"endline": 387
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "field"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 389,
								"kind": "function",
								"char": 7,
								"name": "setIfNotExist",
								"type": "bool(string field, T value)",
								"endchar": 2,
								"endline": 392
							},
							{
								"constraint": "op == \"+\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 394,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"name": "value"
											},
											{
												"type": "string",
												"name": "field"
											}
										],
										"line": 394,
										"kind": "function",
										"char": 7,
										"name": "opIndexOpAssign",
										"type": "void(T value, string field)",
										"endchar": 107,
										"endline": 394
									}
								],
								"name": "opIndexOpAssign"
							},
							{
								"constraint": "op == \"-\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 395,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"name": "value"
											},
											{
												"type": "string",
												"name": "field"
											}
										],
										"line": 395,
										"kind": "function",
										"char": 7,
										"name": "opIndexOpAssign",
										"type": "void(T value, string field)",
										"endchar": 108,
										"endline": 395
									}
								],
								"name": "opIndexOpAssign"
							},
							{
								"parameters": [
									{
										"type": "int delegate(string key, T value)",
										"storageClass": [
											"scope"
										],
										"name": "del"
									}
								],
								"line": 397,
								"kind": "function",
								"char": 6,
								"name": "opApply",
								"type": "int(scope int delegate(string key, T value) del)",
								"endchar": 2,
								"endline": 407
							},
							{
								"parameters": [
									{
										"type": "int delegate(string key)",
										"storageClass": [
											"scope"
										],
										"name": "del"
									}
								],
								"line": 410,
								"kind": "function",
								"char": 6,
								"name": "opApply",
								"type": "int(scope int delegate(string key) del)",
								"endchar": 2,
								"endline": 418
							},
							{
								"line": 420,
								"kind": "function",
								"char": 7,
								"name": "length",
								"type": "long()",
								"endchar": 43,
								"endline": 420
							},
							{
								"parameters": [
									{
										"type": "T[]",
										"name": "dst"
									},
									{
										"type": "string[]",
										"storageClass": [
											"scope"
										],
										"name": "fields"
									}
								],
								"line": 423,
								"kind": "function",
								"char": 7,
								"name": "getMultiple",
								"type": "void(T[] dst, scope string[] fields...)",
								"endchar": 2,
								"endline": 430
							}
						],
						"line": 368,
						"name": "RedisHash"
					}
				],
				"name": "RedisHash",
				"comment": " Represents a Redis hash value.\n\n\tIn addition to the methods specific to hash values, all operations of\n\t$(D RedisValue) are available using an $(D alias this) declaration.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"line": 447,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "RedisValue",
								"char": 13,
								"line": 448,
								"name": "value"
							},
							{
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 451,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(RedisDatabase db, string key)",
								"endchar": 68,
								"endline": 451
							},
							{
								"line": 453,
								"kind": "function",
								"char": 9,
								"name": "opDollar",
								"type": "Dollar()",
								"endchar": 40,
								"endline": 453
							},
							{
								"parameters": [
									{
										"deco": "l",
										"name": "index"
									}
								],
								"line": 455,
								"kind": "function",
								"char": 4,
								"name": "opIndex",
								"type": "T(long index)",
								"endchar": 2,
								"endline": 459
							},
							{
								"parameters": [
									{
										"type": "Dollar",
										"name": "index"
									}
								],
								"line": 460,
								"kind": "function",
								"char": 4,
								"name": "opIndex",
								"type": "T(Dollar index)",
								"endchar": 2,
								"endline": 464
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"deco": "l",
										"name": "index"
									}
								],
								"line": 465,
								"kind": "function",
								"char": 7,
								"name": "opIndexAssign",
								"type": "void(T value, long index)",
								"endchar": 2,
								"endline": 469
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "Dollar",
										"name": "index"
									}
								],
								"line": 470,
								"kind": "function",
								"char": 7,
								"name": "opIndexAssign",
								"type": "void(T value, Dollar index)",
								"endchar": 2,
								"endline": 474
							},
							{
								"constraint": "(is(S : long) || is(S == Dollar)) && (is(E : long) || is(E == Dollar))",
								"parameters": [
									{
										"kind": "type",
										"name": "S"
									},
									{
										"kind": "type",
										"name": "E"
									}
								],
								"line": 475,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "S",
												"name": "start"
											},
											{
												"type": "E",
												"name": "end"
											}
										],
										"line": 475,
										"kind": "function",
										"char": 7,
										"name": "opSlice",
										"type": "(S start, E end)",
										"endchar": 2,
										"endline": 495
									}
								],
								"name": "opSlice"
							},
							{
								"parameters": [],
								"line": 496,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"line": 496,
										"kind": "function",
										"char": 7,
										"name": "opSlice",
										"type": "()",
										"endchar": 42,
										"endline": 496
									}
								],
								"name": "opSlice"
							},
							{
								"line": 498,
								"kind": "function",
								"char": 7,
								"name": "length",
								"type": "long()",
								"endchar": 43,
								"endline": 498
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "pivot"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 500,
								"kind": "function",
								"char": 7,
								"name": "insertBefore",
								"type": "long(T pivot, T value)",
								"endchar": 104,
								"endline": 500
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "pivot"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 501,
								"kind": "function",
								"char": 7,
								"name": "insertAfter",
								"type": "long(T pivot, T value)",
								"endchar": 102,
								"endline": 501
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 503,
								"kind": "function",
								"char": 7,
								"name": "insertFront",
								"type": "long(T value)",
								"endchar": 71,
								"endline": 503
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 504,
								"kind": "function",
								"char": 7,
								"name": "insertFrontIfExists",
								"type": "long(T value)",
								"endchar": 80,
								"endline": 504
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 505,
								"kind": "function",
								"char": 7,
								"name": "insertBack",
								"type": "long(T value)",
								"endchar": 70,
								"endline": 505
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 506,
								"kind": "function",
								"char": 7,
								"name": "insertBackIfExists",
								"type": "long(T value)",
								"endchar": 79,
								"endline": 506
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 508,
								"kind": "function",
								"char": 7,
								"name": "removeAll",
								"type": "long(T value)",
								"endchar": 71,
								"endline": 508
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"deco": "l",
										"default": "1",
										"name": "count"
									}
								],
								"line": 509,
								"kind": "function",
								"char": 7,
								"name": "removeFirst",
								"type": "long(T value, long count = 1)",
								"endchar": 112,
								"endline": 509
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"deco": "l",
										"default": "1",
										"name": "count"
									}
								],
								"line": 510,
								"kind": "function",
								"char": 7,
								"name": "removeLast",
								"type": "long(T value, long count = 1)",
								"endchar": 112,
								"endline": 510
							},
							{
								"parameters": [
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									}
								],
								"line": 512,
								"kind": "function",
								"char": 7,
								"name": "trim",
								"type": "void(long start, long end)",
								"endchar": 67,
								"endline": 512
							},
							{
								"line": 514,
								"kind": "function",
								"char": 4,
								"name": "removeFront",
								"type": "T()",
								"endchar": 64,
								"endline": 514
							},
							{
								"line": 515,
								"kind": "function",
								"char": 4,
								"name": "removeBack",
								"type": "T()",
								"endchar": 63,
								"endline": 515
							},
							{
								"parameters": [
									{
										"type": "Duration",
										"default": "0.seconds",
										"name": "max_wait"
									}
								],
								"line": 516,
								"kind": "function",
								"char": 13,
								"name": "removeFrontBlock",
								"type": "Nullable!T(Duration max_wait = 0.seconds)",
								"endchar": 2,
								"endline": 520
							},
							{
								"kind": "struct",
								"char": 2,
								"members": [
									{
										"line": 523,
										"kind": "variable",
										"char": 8,
										"name": "offset",
										"deco": "l",
										"init": "0"
									},
									{
										"parameters": [
											{
												"deco": "l",
												"name": "off"
											}
										],
										"line": 524,
										"kind": "function",
										"char": 10,
										"name": "opAdd",
										"type": "Dollar(long off)",
										"endchar": 57,
										"endline": 524
									},
									{
										"parameters": [
											{
												"deco": "l",
												"name": "off"
											}
										],
										"line": 525,
										"kind": "function",
										"char": 10,
										"name": "opSub",
										"type": "Dollar(long off)",
										"endchar": 57,
										"endline": 525
									}
								],
								"line": 522,
								"name": "Dollar"
							},
							{
								"parameters": [
									{
										"type": "int delegate(T)",
										"storageClass": [
											"scope"
										],
										"name": "del"
									}
								],
								"line": 528,
								"kind": "function",
								"char": 6,
								"name": "opApply",
								"type": "int(scope int delegate(T) del)",
								"endchar": 2,
								"endline": 534
							}
						],
						"line": 447,
						"name": "RedisList"
					}
				],
				"name": "RedisList",
				"comment": " Represents a Redis list value.\n\n\tIn addition to the methods specific to list values, all operations of\n\t$(D RedisValue) are available using an $(D alias this) declaration.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"line": 546,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "RedisValue",
								"char": 13,
								"line": 547,
								"name": "value"
							},
							{
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 550,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(RedisDatabase db, string key)",
								"endchar": 68,
								"endline": 550
							},
							{
								"parameters": [
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"line": 552,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "ARGS",
												"name": "args"
											}
										],
										"line": 552,
										"kind": "function",
										"char": 7,
										"name": "insert",
										"type": "long(ARGS args)",
										"endchar": 67,
										"endline": 552
									}
								],
								"name": "insert"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 553,
								"kind": "function",
								"char": 7,
								"name": "remove",
								"type": "long(T value)",
								"endchar": 67,
								"endline": 553
							},
							{
								"line": 554,
								"kind": "function",
								"char": 7,
								"name": "remove",
								"type": "bool()",
								"endchar": 41,
								"endline": 554
							},
							{
								"line": 555,
								"kind": "function",
								"char": 9,
								"name": "pop",
								"type": "string()",
								"endchar": 49,
								"endline": 555
							},
							{
								"line": 556,
								"kind": "function",
								"char": 7,
								"name": "length",
								"type": "long()",
								"endchar": 44,
								"endline": 556
							},
							{
								"line": 558,
								"kind": "function",
								"char": 9,
								"name": "getRandom",
								"type": "string()",
								"endchar": 62,
								"endline": 558
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 564,
								"kind": "function",
								"char": 7,
								"name": "contains",
								"type": "bool(T value)",
								"endchar": 74,
								"endline": 564
							},
							{
								"parameters": [
									{
										"type": "int delegate(T value)",
										"storageClass": [
											"scope"
										],
										"name": "del"
									}
								],
								"line": 566,
								"kind": "function",
								"char": 6,
								"name": "opApply",
								"type": "int(scope int delegate(T value) del)",
								"endchar": 2,
								"endline": 572
							},
							{
								"parameters": [
									{
										"type": "RedisSet[]",
										"storageClass": [
											"scope"
										],
										"name": "sets"
									}
								],
								"line": 574,
								"kind": "function",
								"char": 7,
								"name": "intersects",
								"type": "bool(scope RedisSet[] sets...)",
								"endchar": 2,
								"endline": 579
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 581,
								"kind": "function",
								"char": 7,
								"name": "getAll",
								"type": "()",
								"endchar": 2,
								"endline": 585
							}
						],
						"line": 546,
						"name": "RedisSet"
					}
				],
				"name": "RedisSet",
				"comment": " Represents a Redis set value.\n\n\tIn addition to the methods specific to set values, all operations of\n\t$(D RedisValue) are available using an $(D alias this) declaration.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"line": 598,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "RedisValue",
								"char": 13,
								"line": 599,
								"name": "value"
							},
							{
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"line": 602,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(RedisDatabase db, string key)",
								"endchar": 68,
								"endline": 602
							},
							{
								"parameters": [
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"line": 604,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "ARGS",
												"name": "args"
											}
										],
										"line": 604,
										"kind": "function",
										"char": 7,
										"name": "insert",
										"type": "long(ARGS args)",
										"endchar": 67,
										"endline": 604
									}
								],
								"name": "insert"
							},
							{
								"parameters": [
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"line": 605,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"type": "ARGS",
												"name": "members"
											}
										],
										"line": 605,
										"kind": "function",
										"char": 7,
										"name": "remove",
										"type": "long(ARGS members)",
										"endchar": 73,
										"endline": 605
									}
								],
								"name": "remove"
							},
							{
								"line": 606,
								"kind": "function",
								"char": 7,
								"name": "remove",
								"type": "bool()",
								"endchar": 41,
								"endline": 606
							},
							{
								"line": 607,
								"kind": "function",
								"char": 7,
								"name": "length",
								"type": "long()",
								"endchar": 44,
								"endline": 607
							},
							{
								"constraint": "INT == \"[]\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"defaultValue": "\"[]\"",
										"name": "INT"
									}
								],
								"line": 609,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"deco": "d",
												"name": "min"
											},
											{
												"deco": "d",
												"name": "max"
											}
										],
										"line": 609,
										"kind": "function",
										"char": 7,
										"name": "count",
										"type": "long(double min, double max)",
										"endchar": 2,
										"endline": 613
									}
								],
								"name": "count"
							},
							{
								"parameters": [
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									}
								],
								"line": 615,
								"kind": "function",
								"char": 7,
								"name": "removeRangeByRank",
								"type": "long(long start, long end)",
								"endchar": 97,
								"endline": 615
							},
							{
								"constraint": "INT == \"[]\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"defaultValue": "\"[]\"",
										"name": "INT"
									}
								],
								"line": 616,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"parameters": [
											{
												"deco": "d",
												"name": "min"
											},
											{
												"deco": "d",
												"name": "max"
											}
										],
										"line": 616,
										"kind": "function",
										"char": 7,
										"name": "removeRangeByScore",
										"type": "long(double min, double max)",
										"endchar": 135,
										"endline": 616
									}
								],
								"name": "removeRangeByScore"
							},
							{
								"constraint": "op == \"+\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 618,
								"kind": "template",
								"char": 9,
								"members": [
									{
										"parameters": [
											{
												"deco": "d",
												"name": "value"
											},
											{
												"type": "string",
												"name": "member"
											}
										],
										"line": 618,
										"kind": "function",
										"char": 9,
										"name": "opIndexOpAssign",
										"type": "double(double value, string member)",
										"endchar": 125,
										"endline": 618
									}
								],
								"name": "opIndexOpAssign"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "member"
									}
								],
								"line": 620,
								"kind": "function",
								"char": 7,
								"name": "getRank",
								"type": "long(string member)",
								"endchar": 66,
								"endline": 620
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "member"
									}
								],
								"line": 621,
								"kind": "function",
								"char": 7,
								"name": "getReverseRank",
								"type": "long(string member)",
								"endchar": 76,
								"endline": 621
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "min"
									},
									{
										"type": "string",
										"name": "max"
									}
								],
								"line": 623,
								"kind": "function",
								"char": 7,
								"name": "countByLex",
								"type": "long(string min, string max)",
								"endchar": 84,
								"endline": 623
							},
							{
								"parameters": [
									{
										"kind": "type",
										"default": "string",
										"name": "T"
									}
								],
								"line": 646,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "string",
												"default": "\"-\"",
												"name": "min"
											},
											{
												"type": "string",
												"default": "\"+\"",
												"name": "max"
											},
											{
												"deco": "l",
												"default": "0",
												"name": "offset"
											},
											{
												"deco": "l",
												"default": "-1",
												"name": "count"
											}
										],
										"line": 646,
										"kind": "function",
										"char": 7,
										"name": "rangeByLex",
										"type": "(string min = \"-\", string max = \"+\", long offset = 0, long count = -1)",
										"endchar": 2,
										"endline": 649
									}
								],
								"name": "rangeByLex"
							}
						],
						"line": 598,
						"name": "RedisZSet"
					}
				],
				"name": "RedisZSet",
				"comment": " Represents a Redis sorted set value.\n\n\tIn addition to the methods specific to sorted set values, all operations of\n\t$(D RedisValue) are available using an $(D alias this) declaration.\n"
			}
		],
		"comment": "\tConvenience wrappers types for accessing Redis keys.\n\n\tNote that the API is still subject to change!\n\n\tCopyright: © 2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.db.redis.types"
	},
	{
		"kind": "module",
		"file": "web/vibe/web/auth.d",
		"members": [
			{
				"line": 98,
				"kind": "function",
				"char": 38,
				"name": "requiresAuth",
				"deco": "FNdZS4vibe3web4auth__T21RequiresAuthAttributeTvZQBa",
				"endchar": 1,
				"endline": 101,
				"comment": "\tEnables authentication and authorization checks for an interface class.\n\n\tWeb/REST interface classes that have authentication enabled are required\n\tto specify either the `@auth` or the `@noAuth` attribute for every public\n\tmethod.\n\n\tThe type of the authentication information, as returned by the\n\t`authenticate()` method, can optionally be specified as a template argument.\n\tThis is useful if an `interface` is annotated and the `authenticate()`\n\tmethod is only declared in the actual class implementation.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "AUTH_INFO"
					}
				],
				"line": 103,
				"kind": "template",
				"char": 43,
				"members": [
					{
						"line": 103,
						"kind": "function",
						"char": 43,
						"name": "requiresAuth",
						"type": "@property RequiresAuthAttribute!AUTH_INFO()",
						"endchar": 1,
						"endline": 106
					}
				],
				"name": "requiresAuth",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 114,
				"kind": "template",
				"char": 17,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "roles"
							}
						],
						"line": 114,
						"kind": "function",
						"char": 17,
						"name": "auth",
						"type": "AuthAttribute!R(R roles)",
						"endchar": 65,
						"endline": 114
					}
				],
				"name": "auth",
				"comment": " Enforces authentication and authorization.\n\n\tParams:\n\t\troles = Role expression to control authorization. If no role\n\t\t\tset is given, any authenticated user is granted access.\n"
			},
			{
				"line": 118,
				"kind": "function",
				"char": 30,
				"name": "anyAuth",
				"deco": "FNdZS4vibe3web4auth__T13AuthAttributeTvZQs",
				"endchar": 74,
				"endline": 118,
				"comment": " Enforces only authentication.\n"
			},
			{
				"line": 122,
				"kind": "function",
				"char": 27,
				"name": "noAuth",
				"deco": "FNdZS4vibe3web4auth15NoAuthAttribute",
				"endchar": 67,
				"endline": 122,
				"comment": " Disables authentication checks.\n"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [],
				"line": 131,
				"name": "NoAuthAttribute"
			},
			{
				"kind": "struct",
				"line": 142,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@disable"
						],
						"line": 143,
						"kind": "constructor",
						"originalType": "ref ()",
						"char": 11,
						"name": "this",
						"deco": "FNcZS4vibe3web4auth4Role"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 145,
						"kind": "template",
						"char": 50,
						"members": [
							{
								"line": 145,
								"kind": "function",
								"char": 50,
								"name": "opDispatch",
								"type": "@property R!(Op.ident, name, void, void)()",
								"endchar": 122,
								"endline": 145
							}
						],
						"name": "opDispatch"
					}
				],
				"comment": " Represents a required authorization role.\n\n\tRoles can be combined using logical or (`|` operator) or logical and (`&`\n\toperator). The role name is directly mapped to a method name of the\n\tauthorization interface specified on the web interface class using the\n\t`@requiresAuth` attribute.\n\n\tSee_Also: `auth`\n",
				"name": "Role"
			}
		],
		"comment": "\tAuthentication and authorization framework based on fine-grained roles.\n\n\tCopyright: © 2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L18_C7)\n---\nimport vibe.http.router : URLRouter;\nimport vibe.web.web : noRoute, registerWebInterface;\n\nstatic struct AuthInfo {\n@safe:\n\tstring userName;\n\n\tbool isAdmin() { return this.userName == \"tom\"; }\n\tbool isRoomMember(int chat_room) {\n\t\tif (chat_room == 0)\n\t\t\treturn this.userName == \"macy\" || this.userName == \"peter\";\n\t\telse if (chat_room == 1)\n\t\t\treturn this.userName == \"macy\";\n\t\telse\n\t\t\treturn false;\n\t}\n\tbool isPremiumUser() { return this.userName == \"peter\"; }\n}\n\n@requiresAuth\nstatic class ChatWebService {\n@safe:\n\t@noRoute AuthInfo authenticate(scope HTTPServerRequest req, scope HTTPServerResponse res)\n\t{\n\t\tif (req.headers[\"AuthToken\"] == \"foobar\")\n\t\t\treturn AuthInfo(req.headers[\"AuthUser\"]);\n\t\tthrow new HTTPStatusException(HTTPStatus.unauthorized);\n\t}\n\n\t@noAuth\n\tvoid getLoginPage()\n\t{\n\t\t// code that can be executed for any client\n\t}\n\n\t@anyAuth\n\tvoid getOverview()\n\t{\n\t\t// code that can be executed by any registered user\n\t}\n\n\t@auth(Role.admin)\n\tvoid getAdminSection()\n\t{\n\t\t// code that may only be executed by adminitrators\n\t}\n\n\t@auth(Role.admin | Role.roomMember)\n\tvoid getChatroomHistory(int chat_room)\n\t{\n\t\t// code that may execute for administrators or for chat room members\n\t}\n\n\t@auth(Role.roomMember & Role.premiumUser)\n\tvoid getPremiumInformation(int chat_room)\n\t{\n\t\t// code that may only execute for users that are members of a room and have a premium subscription\n\t}\n}\n\nvoid registerService(URLRouter router)\n@safe {\n\trouter.registerWebInterface(new ChatWebService);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L18_C7)\n",
		"name": "vibe.web.auth"
	},
	{
		"kind": "module",
		"file": "web/vibe/web/common.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "name"
					},
					{
						"deco": "E4vibe3web6common11MethodStyle",
						"name": "style"
					}
				],
				"line": 26,
				"kind": "function",
				"char": 8,
				"name": "adjustMethodStyle",
				"deco": "FNfAyaE4vibe3web6common11MethodStyleZQBi",
				"endchar": 1,
				"endline": 98,
				"comment": "\tAdjusts the naming convention for a given function name to the specified style.\n\n\tThe input name is assumed to be in lowerCamelCase (D-style) or PascalCase. Acronyms\n\t(e.g. \"HTML\") should be written all caps\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "Func"
					},
					{
						"kind": "value",
						"deco": "b",
						"name": "indexSpecialCase"
					}
				],
				"line": 145,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"line": 145,
						"kind": "function",
						"char": 6,
						"name": "extractHTTPMethodAndName",
						"type": "()",
						"endchar": 1,
						"endline": 226
					}
				],
				"name": "extractHTTPMethodAndName",
				"comment": "\tDetermines the HTTP method and path for a given function symbol.\n\n\tThe final method and path are determined from the function name, as well as\n\tany $(D @method) and $(D @path) attributes that may be applied to it.\n\n\tThis function is designed for CTFE usage and will assert at run time.\n\n\tReturns:\n\t\tA tuple of three elements is returned:\n\t\t$(UL\n\t\t\t$(LI flag \"was UDA used to override path\")\n\t\t\t$(LI $(D HTTPMethod) extracted)\n\t\t\t$(LI URL path extracted)\n\t\t)\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "data"
					}
				],
				"line": 292,
				"kind": "function",
				"char": 22,
				"name": "contentType",
				"deco": "FNfAyaZS4vibe3web6common20ContentTypeAttribute",
				"endchar": 1,
				"endline": 297,
				"comment": "    Attribute to define the content type for methods.\n\n    This currently applies only to methods returning an $(D InputStream) or\n    $(D ubyte[]).\n"
			},
			{
				"parameters": [
					{
						"deco": "E4vibe4http6common10HTTPMethod",
						"name": "data"
					}
				],
				"line": 306,
				"kind": "function",
				"char": 17,
				"name": "method",
				"deco": "FNfE4vibe4http6common10HTTPMethodZSQBf3webQBc15MethodAttribute",
				"endchar": 1,
				"endline": 311,
				"comment": "\tAttribute to force a specific HTTP method for an interface method.\n\n\tThe usual URL generation rules are still applied, so if there\n\tare any \"get\", \"query\" or similar prefixes, they are filtered out.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L314_C1)\n---\ninterface IAPI\n{\n\t// Will be \"POST /info\" instead of default \"GET /info\"\n\t@method(HTTPMethod.POST) string getInfo();\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L314_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "data"
					}
				],
				"line": 335,
				"kind": "function",
				"char": 15,
				"name": "path",
				"deco": "FNfAyaZS4vibe3web6common13PathAttribute",
				"endchar": 1,
				"endline": 340,
				"comment": "\tAttibute to force a specific URL path.\n\n\tThis attribute can be applied either to an interface itself, in which\n\tcase it defines the root path for all methods within it,\n\tor on any function, in which case it defines the relative path\n\tof this method.\n\tPath are always relative, even path on interfaces, as you can\n\tsee in the example below.\n\n\tSee_Also: $(D rootPathFromName) for automatic name generation.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L343_C7)\n---\n@path(\"/foo\")\ninterface IAPI\n{\n\t@path(\"info2\") string getInfo() @safe;\n}\n\nclass API : IAPI {\n\tstring getInfo() @safe { return \"Hello, World!\"; }\n}\n\nvoid test()\n@safe {\n\timport vibe.http.router;\n\timport vibe.web.rest;\n\n\tauto router = new URLRouter;\n\n\t// Tie IAPI.getInfo to \"GET /root/foo/info2\"\n\trouter.registerRestInterface!IAPI(new API(), \"/root/\");\n\n\t// Or just to \"GET /foo/info2\"\n\trouter.registerRestInterface!IAPI(new API());\n\n\t// ...\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L343_C7)\n"
			},
			{
				"line": 373,
				"kind": "function",
				"char": 25,
				"name": "rootPathFromName",
				"deco": "FNdNfZS4vibe3web6common13PathAttribute",
				"endchar": 1,
				"endline": 378,
				"comment": "Convenience alias to generate a name from the interface's name.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L380_C7)\n---\nimport vibe.http.router;\nimport vibe.web.rest;\n\n@rootPathFromName\ninterface IAPI\n{\n\tint getFoo() @safe;\n}\n\nclass API : IAPI\n{\n\tint getFoo()\n\t{\n\t\treturn 42;\n\t}\n}\n\nauto router = new URLRouter();\nregisterRestInterface(router, new API());\nauto routes= router.getAllRoutes();\n\nassert(routes[0].pattern == \"/iapi/foo\" && routes[0].method == HTTPMethod.GET);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L380_C7)\n"
			},
			{
				"line": 413,
				"kind": "function",
				"char": 28,
				"name": "noRoute",
				"deco": "FNdZS4vibe3web6common16NoRouteAttribute",
				"endchar": 1,
				"endline": 419,
				"comment": "\tMethods marked with this attribute will not be treated as web endpoints.\n\n\tThis attribute enables the definition of public methods that do not take\n\tpart in the interface genration process.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L422_C1)\n---\ninterface IAPI {\n\t// Accessible as \"GET /info\"\n\tstring getInfo();\n\n\t// Not accessible over HTTP\n\t@noRoute\n\tint getFoo();\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L422_C1)\n"
			},
			{
				"line": 437,
				"kind": "class",
				"char": 1,
				"base": "vibe.http.common.HTTPStatusException",
				"members": [
					{
						"parameters": [
							{
								"deco": "i",
								"name": "status"
							},
							{
								"deco": "S4vibe4data4json4Json",
								"name": "jsonResult"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "i",
								"default": "__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 445,
						"kind": "constructor",
						"originalType": "@safe (int status, Json jsonResult, string file = __FILE__, int line = __LINE__, Throwable next = null)",
						"char": 2,
						"name": "this",
						"deco": "FNfiS4vibe4data4json4JsonAyaiC6object9ThrowableZCQBs3web6common13RestException",
						"endchar": 2,
						"endline": 455,
						"comment": "\n"
					},
					{
						"line": 458,
						"kind": "function",
						"char": 24,
						"name": "jsonResult",
						"deco": "xFNdNfZxS4vibe4data4json4Json",
						"endchar": 66,
						"endline": 458,
						"comment": "The HTTP status code\n"
					}
				],
				"name": "RestException",
				"comment": " \tRespresents a Rest error response\n"
			},
			{
				"kind": "struct",
				"line": 478,
				"char": 1,
				"members": [
					{
						"line": 481,
						"kind": "variable",
						"char": 9,
						"name": "data",
						"deco": "Aya",
						"offset": 0,
						"comment": "The specified path\n"
					}
				],
				"comment": " This struct contains the name of a route specified by the `path` function.\n",
				"name": "PathAttribute"
			},
			{
				"kind": "struct",
				"line": 492,
				"char": 8,
				"members": [
					{
						"line": 496,
						"kind": "variable",
						"char": 16,
						"name": "origin",
						"deco": "E4vibe3web8internal4rest6common13ParameterKind",
						"offset": 0,
						"comment": "The type of the WebParamAttribute\n"
					},
					{
						"line": 498,
						"kind": "variable",
						"char": 9,
						"name": "identifier",
						"deco": "Aya",
						"offset": 8,
						"comment": "Parameter name (function parameter name).\n"
					},
					{
						"line": 500,
						"kind": "variable",
						"char": 9,
						"name": "field",
						"deco": "Aya",
						"offset": 24,
						"comment": "The meaning of this field depends on the origin. (HTTP request name)\n"
					}
				],
				"comment": " This struct contains a mapping between the name used by HTTP (field)\n and the parameter (identifier) name of the function.\n",
				"name": "WebParamAttribute"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "identifier"
					},
					{
						"deco": "Aya",
						"name": "field"
					}
				],
				"line": 522,
				"kind": "function",
				"char": 19,
				"name": "bodyParam",
				"deco": "FNfAyaQdZS4vibe3web6common17WebParamAttribute",
				"endchar": 1,
				"endline": 532,
				"comment": " Declare that a parameter will be transmitted to the API through the body.\n\n It will be serialized as part of a JSON object.\n The serialization format is currently not customizable.\n If no fieldname is given, the entire body is serialized into the object.\n\n Params:\n   identifier = The name of the parameter to customize. A compiler error will be issued on mismatch.\n   field = The name of the field in the JSON object.\n\n ----\n @bodyParam(\"pack\", \"package\")\n void ship(int pack);\n // The server will receive the following body for a call to ship(42):\n // { \"package\": 42 }\n ----\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "identifier"
					}
				],
				"line": 535,
				"kind": "function",
				"char": 19,
				"name": "bodyParam",
				"deco": "FNfAyaZS4vibe3web6common17WebParamAttribute",
				"endchar": 1,
				"endline": 541,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "identifier"
					},
					{
						"deco": "Aya",
						"name": "field"
					}
				],
				"line": 560,
				"kind": "function",
				"char": 19,
				"name": "headerParam",
				"deco": "FNfAyaQdZS4vibe3web6common17WebParamAttribute",
				"endchar": 1,
				"endline": 566,
				"comment": " Declare that a parameter will be transmitted to the API through the headers.\n\n If the parameter is a string, or any scalar type (float, int, char[], ...), it will be send as a string.\n If it's an aggregate, it will be serialized as JSON.\n However, passing aggregate via header isn't a good practice and should be avoided for new production code.\n\n Params:\n   identifier = The name of the parameter to customize. A compiler error will be issued on mismatch.\n   field = The name of the header field to use (e.g: 'Accept', 'Content-Type'...).\n\n ----\n // The server will receive the content of the \"Authorization\" header.\n @headerParam(\"auth\", \"Authorization\")\n void login(string auth);\n ----\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "identifier"
					},
					{
						"deco": "Aya",
						"name": "field"
					}
				],
				"line": 585,
				"kind": "function",
				"char": 19,
				"name": "queryParam",
				"deco": "FNfAyaQdZS4vibe3web6common17WebParamAttribute",
				"endchar": 1,
				"endline": 591,
				"comment": " Declare that a parameter will be transmitted to the API through the query string.\n\n It will be serialized as part of a JSON object, and will go through URL serialization.\n The serialization format is not customizable.\n\n Params:\n   identifier = The name of the parameter to customize. A compiler error will be issued on mismatch.\n   field = The field name to use.\n\n ----\n // For a call to postData(\"D is awesome\"), the server will receive the query:\n // POST /data?test=%22D is awesome%22\n @queryParam(\"data\", \"test\")\n void postData(string data);\n ----\n"
			},
			{
				"line": 596,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 599,
						"char": 2,
						"value": "0",
						"comment": "Special value for free-style conventions\n",
						"name": "unaltered"
					},
					{
						"kind": "enum member",
						"line": 601,
						"char": 2,
						"value": "1",
						"comment": "camelCaseNaming\n",
						"name": "camelCase"
					},
					{
						"kind": "enum member",
						"line": 603,
						"char": 2,
						"value": "2",
						"comment": "PascalCaseNaming\n",
						"name": "pascalCase"
					},
					{
						"kind": "enum member",
						"line": 605,
						"char": 2,
						"value": "3",
						"comment": "lowercasenaming\n",
						"name": "lowerCase"
					},
					{
						"kind": "enum member",
						"line": 607,
						"char": 2,
						"value": "4",
						"comment": "UPPERCASENAMING\n",
						"name": "upperCase"
					},
					{
						"kind": "enum member",
						"line": 609,
						"char": 2,
						"value": "5",
						"comment": "lower_case_naming\n",
						"name": "lowerUnderscored"
					},
					{
						"kind": "enum member",
						"line": 611,
						"char": 2,
						"value": "6",
						"comment": "UPPER_CASE_NAMING\n",
						"name": "upperUnderscored"
					},
					{
						"kind": "enum member",
						"line": 614,
						"char": 2,
						"value": "0",
						"comment": "deprecated\n",
						"name": "Unaltered"
					},
					{
						"kind": "enum member",
						"line": 616,
						"char": 2,
						"value": "1",
						"comment": "deprecated\n",
						"name": "CamelCase"
					},
					{
						"kind": "enum member",
						"line": 618,
						"char": 2,
						"value": "2",
						"comment": "deprecated\n",
						"name": "PascalCase"
					},
					{
						"kind": "enum member",
						"line": 620,
						"char": 2,
						"value": "3",
						"comment": "deprecated\n",
						"name": "LowerCase"
					},
					{
						"kind": "enum member",
						"line": 622,
						"char": 2,
						"value": "4",
						"comment": "deprecated\n",
						"name": "UpperCase"
					},
					{
						"kind": "enum member",
						"line": 624,
						"char": 2,
						"value": "5",
						"comment": "deprecated\n",
						"name": "LowerUnderscored"
					},
					{
						"kind": "enum member",
						"line": 626,
						"char": 2,
						"value": "6",
						"comment": "deprecated\n",
						"name": "UpperUnderscored"
					}
				],
				"name": "MethodStyle",
				"baseDeco": "i",
				"comment": "\tDetermines the naming convention of an identifier.\n"
			},
			{
				"line": 631,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"kind": "enum member",
						"line": 632,
						"char": 2,
						"value": "0",
						"comment": "Use underscores to separate fields and array indices\n",
						"name": "underscore"
					},
					{
						"kind": "enum member",
						"line": 633,
						"char": 2,
						"value": "1",
						"comment": "Use native D style and separate fields by dots and put array indices into brackets\n",
						"name": "d"
					}
				],
				"name": "NestedNameStyle",
				"baseDeco": "i",
				"comment": "Speficies how D fields are mapped to form field names\n"
			}
		],
		"comment": "\tContains common functionality for the REST and WEB interface generators.\n\n\tCopyright: © 2012-2017 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Михаил Страшун\n",
		"name": "vibe.web.common"
	},
	{
		"kind": "module",
		"file": "web/vibe/web/i18n.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "CONTEXT"
					}
				],
				"line": 30,
				"kind": "template",
				"char": 47,
				"members": [
					{
						"line": 30,
						"kind": "function",
						"char": 47,
						"name": "translationContext",
						"type": "@property TranslationContextAttribute!CONTEXT()",
						"endchar": 128,
						"endline": 30
					}
				],
				"name": "translationContext",
				"comment": "\tAnnotates an interface method or class with translation information.\n\n\tThe translation context contains information about supported languages\n\tand the translated strings. Any translations will be automatically\n\tapplied to Diet templates, as well as strings passed to\n\t$(D vibe.web.web.trWeb).\n\n\tBy default, the \"Accept-Language\" header of the incoming request will be\n\tused to determine the language used. To override this behavior, add a\n\tstatic method $(D determineLanguage) to the translation context, which\n\ttakes the request and returns a language string (see also the second\n\texample).\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L33_C1)\n---\nimport vibe.http.router : URLRouter;\nimport vibe.web.web : registerWebInterface;\n\nstruct TranslationContext {\n\timport std.typetuple;\n\talias languages = TypeTuple!(\"en_US\", \"de_DE\", \"fr_FR\");\n\t//mixin translationModule!\"app\";\n\t//mixin translationModule!\"somelib\";\n}\n\n@translationContext!TranslationContext\nclass MyWebInterface {\n\tvoid getHome()\n\t{\n\t\t//render!(\"home.dt\")\n\t}\n}\n\nvoid test(URLRouter router)\n{\n\trouter.registerWebInterface(new MyWebInterface);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L33_C1)\nExample:\nDefining a custom function for determining the language.$(DDOX_UNITTEST_HEADER __unittest_L59_C1)\n---\nimport vibe.http.router : URLRouter;\nimport vibe.http.server;\nimport vibe.web.web : registerWebInterface;\n\nstruct TranslationContext {\n\timport std.typetuple;\n\t// A language can be in the form en_US, en-US or en. Put the languages you want to prioritize first.\n\talias languages = TypeTuple!(\"en_US\", \"de_DE\", \"fr_FR\");\n\t//mixin translationModule!\"app\";\n\t//mixin translationModule!\"somelib\";\n\n\t// use language settings from the session instead of using the\n\t// \"Accept-Language\" header\n\tstatic string determineLanguage(scope HTTPServerRequest req)\n\t{\n\t\tif (!req.session) return req.determineLanguageByHeader(languages); // default behaviour using \"Accept-Language\" header\n\t\treturn req.session.get(\"language\", \"\");\n\t}\n}\n\n@translationContext!TranslationContext\nclass MyWebInterface {\n\tvoid getHome()\n\t{\n\t\t//render!(\"home.dt\")\n\t}\n}\n\nvoid test(URLRouter router)\n{\n\trouter.registerWebInterface(new MyWebInterface);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L59_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "CONTEXT"
					}
				],
				"line": 113,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "CONTEXT",
								"char": 2,
								"line": 114,
								"name": "Context"
							}
						],
						"line": 113,
						"name": "TranslationContextAttribute"
					}
				],
				"name": "TranslationContextAttribute"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "FILENAME"
					}
				],
				"line": 146,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 149,
						"kind": "variable",
						"char": 7,
						"name": "NAME",
						"init": "FILENAME.tr(\"/.-\\\\\", \"____\")"
					},
					{
						"storageClass": [
							"static"
						],
						"line": 150,
						"kind": "function",
						"char": 24,
						"name": "file_mixins",
						"type": "string()",
						"endchar": 2,
						"endline": 155
					}
				],
				"name": "translationModule",
				"comment": " Makes a set of PO files available to a web interface class.\n\n\tThis mixin template needs to be mixed in at the class scope. It will parse all\n\ttranslation files with the specified file name prefix and make their\n\ttranslations available.\n\n\tParams:\n\t\tFILENAME = Base name of the set of PO files to mix in. A file with the\n\t\t\tname `\"<FILENAME>.<LANGUAGE>.po\"` must be available as a string import\n\t\t\tfor each language defined in the translation context.\n\n\tBugs:\n\t\t`FILENAME` should not contain (back)slash characters, as string imports\n\t\tfrom sub directories will currently fail on Windows. See\n\t\t$(LINK https://issues.dlang.org/show_bug.cgi?id=14349).\n\n\tSee_Also: `translationContext`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "CTX"
					}
				],
				"line": 160,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "CTX.languages",
						"char": 53,
						"line": 161,
						"name": "languageSeq"
					}
				],
				"name": "languageSeq"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "CTX"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "LANG"
					}
				],
				"line": 171,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "key"
							},
							{
								"type": "string",
								"default": "null",
								"name": "context"
							}
						],
						"line": 173,
						"kind": "function",
						"char": 9,
						"name": "tr",
						"type": "string(string key, string context = null)",
						"endchar": 2,
						"endline": 176
					},
					{
						"parameters": [
							{
								"type": "string",
								"name": "key"
							},
							{
								"type": "string",
								"name": "key_plural"
							},
							{
								"deco": "i",
								"name": "n"
							},
							{
								"type": "string",
								"default": "null",
								"name": "context"
							}
						],
						"line": 178,
						"kind": "function",
						"char": 9,
						"name": "tr",
						"type": "string(string key, string key_plural, int n, string context = null)",
						"endchar": 2,
						"endline": 226
					}
				],
				"name": "tr",
				"comment": "\tPerforms the string translation for a statically given language.\n\n\tThe second overload takes a plural form and a number to select from a set\n\tof translations based on the plural forms of the target language.\n"
			},
			{
				"constraint": "isForwardRange!T && is(ElementType!T : string) || is(T == typeof(only()))",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 231,
				"kind": "template",
				"char": 15,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "accept_language"
							},
							{
								"type": "T",
								"name": "allowed_languages"
							}
						],
						"line": 231,
						"kind": "function",
						"char": 15,
						"name": "determineLanguageByHeader",
						"type": "pure @nogc @safe string(string accept_language, T allowed_languages)",
						"endchar": 1,
						"endline": 282
					}
				],
				"name": "determineLanguageByHeader",
				"comment": "Determines a language code from the value of a header string.\nReturns: The best match from the Accept-Language header for a language. `null` if there is no supported language.\n"
			},
			{
				"constraint": "Tuple.length != 1 || is(Tuple[0] : string)",
				"parameters": [
					{
						"kind": "tuple",
						"name": "Tuple"
					}
				],
				"line": 285,
				"kind": "template",
				"char": 15,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "accept_language"
							},
							{
								"type": "Tuple",
								"name": "allowed_languages"
							}
						],
						"line": 285,
						"kind": "function",
						"char": 15,
						"name": "determineLanguageByHeader",
						"type": "pure @nogc @safe string(string accept_language, Tuple allowed_languages)",
						"endchar": 1,
						"endline": 289
					}
				],
				"name": "determineLanguageByHeader",
				"comment": "ditto\n"
			},
			{
				"constraint": "isForwardRange!T && is(ElementType!T : string) || is(T == typeof(only()))",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 292,
				"kind": "template",
				"char": 15,
				"members": [
					{
						"parameters": [
							{
								"type": "HTTPServerRequest",
								"name": "req"
							},
							{
								"type": "T",
								"name": "allowed_languages"
							}
						],
						"line": 292,
						"kind": "function",
						"char": 15,
						"name": "determineLanguageByHeader",
						"type": "pure @safe string(HTTPServerRequest req, T allowed_languages)",
						"endchar": 1,
						"endline": 296
					}
				],
				"name": "determineLanguageByHeader",
				"comment": "ditto\n"
			},
			{
				"constraint": "Tuple.length != 1 || is(Tuple[0] : string)",
				"parameters": [
					{
						"kind": "tuple",
						"name": "Tuple"
					}
				],
				"line": 299,
				"kind": "template",
				"char": 15,
				"members": [
					{
						"parameters": [
							{
								"type": "HTTPServerRequest",
								"name": "req"
							},
							{
								"type": "Tuple",
								"name": "allowed_languages"
							}
						],
						"line": 299,
						"kind": "function",
						"char": 15,
						"name": "determineLanguageByHeader",
						"type": "pure @safe string(HTTPServerRequest req, Tuple allowed_languages)",
						"endchar": 1,
						"endline": 303
					}
				],
				"name": "determineLanguageByHeader",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "text"
					}
				],
				"line": 434,
				"kind": "function",
				"char": 16,
				"name": "extractDeclStrings",
				"deco": "FAyaZS4vibe3web4i18n14LangComponents",
				"endchar": 1,
				"endline": 513
			}
		],
		"comment": "\tInternationalization/translation support for the web interface module.\n\n\tCopyright: © 2014-2017 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.web.i18n"
	},
	{
		"kind": "module",
		"file": "web/vibe/web/rest.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 229,
				"name": "vibe.web.common"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "TImpl"
					}
				],
				"line": 326,
				"kind": "template",
				"char": 11,
				"members": [
					{
						"parameters": [
							{
								"type": "URLRouter",
								"name": "router"
							},
							{
								"type": "TImpl",
								"name": "instance"
							},
							{
								"type": "RestInterfaceSettings",
								"default": "null",
								"name": "settings"
							}
						],
						"line": 326,
						"kind": "function",
						"char": 11,
						"name": "registerRestInterface",
						"type": "URLRouter(URLRouter router, TImpl instance, RestInterfaceSettings settings = null)",
						"endchar": 1,
						"endline": 372
					}
				],
				"name": "registerRestInterface",
				"comment": " Registers a server matching a certain REST interface.\n\n\tServers are implementation of the D interface that defines the RESTful API.\n\tThe methods of this class are invoked by the code that is generated for\n\teach endpoint of the API, with parameters and return values being translated\n\taccording to the rules documented in the `vibe.web.rest` module\n\tdocumentation.\n\n\tA basic 'hello world' API can be defined as follows:\n\t----\n\t@path(\"/api/\")\n\tinterface APIRoot {\n\t    string get();\n\t}\n\n\tclass API : APIRoot {\n\t    override string get() { return \"Hello, World\"; }\n\t}\n\n\tvoid main()\n\t{\n\t    // -- Where the magic happens --\n\t    router.registerRestInterface(new API());\n\t    // GET http://127.0.0.1:8080/api/ and 'Hello, World' will be replied\n\t    listenHTTP(\"127.0.0.1:8080\", router);\n\n\t    runApplication();\n\t}\n\t----\n\n\tAs can be seen here, the RESTful logic can be written inside the class\n\twithout any concern for the actual HTTP representation.\n\n\tReturn_value:\n\t\tBy default, all methods that return a value send a 200 (OK) status code,\n\t\tor 204 if no value is being returned for the body.\n\n\tNon-success:\n\t\tIn the cases where an error code should be signaled to the user, a\n\t\t`HTTPStatusException` can be thrown from within the method. It will be\n\t\tturned into a JSON object that has a `statusMessage` field with the\n\t\texception message. In case of other exception types being thrown, the\n\t\tstatus code will be set to 500 (internal server error), the\n\t\t`statusMessage` field will again contain the exception's message, and,\n\t\tin debug mode, an additional `statusDebugMessage` field will be set to\n\t\tthe complete string representation of the exception\n\t\t(`Exception.toString`), which usually contains a stack trace useful for\n\t\tdebugging.\n\n\tReturning_data:\n\t\tTo return data, it is possible to either use the return value, which\n\t\twill be sent as the response body, or individual `ref`/`out` parameters\n\t\tcan be used. The way they are represented in the response can be\n\t\tcustomized by adding `@bodyParam`/`@headerParam` annotations in the\n\t\tmethod declaration within the interface.\n\n\t\tIn case of errors, any `@headerParam` parameters are guaranteed to\n\t\tbe set in the response, so that applications such as HTTP basic\n\t\tauthentication can be implemented.\n\n\tTemplate_Params:\n\t    TImpl = Either an interface type, or a class that derives from an\n\t\t\t      interface. If the class derives from multiple interfaces,\n\t            the first one will be assumed to be the API description\n\t            and a warning will be issued.\n\n\tParams:\n\t    router   = The HTTP router on which the interface will be registered\n\t    instance = Server instance to use\n\t    settings = Additional settings, such as the `MethodStyle` or the prefix\n\n\tSee_Also:\n\t\t`RestInterfaceClient` class for an automated way to generate the\n\t\tmatching client-side implementation.\nExample:\nThis is a very limited example of REST interface features. Please refer to\n\tthe \"rest\" project in the \"examples\" folder for a full overview.\n\n\tAll details related to HTTP are inferred from the interface declaration.$(DDOX_UNITTEST_HEADER __unittest_L398_C7)\n---\n@path(\"/\")\ninterface IMyAPI\n{\n\t@safe:\n\t// GET /api/greeting\n\t@property string greeting();\n\n\t// PUT /api/greeting\n\t@property void greeting(string text);\n\n\t// POST /api/users\n\t@path(\"/users\")\n\tvoid addNewUser(string name);\n\n\t// GET /api/users\n\t@property string[] users();\n\n\t// GET /api/:id/name\n\tstring getName(int id);\n\n\t// GET /some_custom_json\n\tJson getSomeCustomJson();\n}\n\n// vibe.d takes care of all JSON encoding/decoding\n// and actual API implementation can work directly\n// with native types\n\nclass API : IMyAPI\n{\n\tprivate {\n\t\tstring m_greeting;\n\t\tstring[] m_users;\n\t}\n\n\t@property string greeting() { return m_greeting; }\n\t@property void greeting(string text) { m_greeting = text; }\n\n\tvoid addNewUser(string name) { m_users ~= name; }\n\n\t@property string[] users() { return m_users; }\n\n\tstring getName(int id) { return m_users[id]; }\n\n\tJson getSomeCustomJson()\n\t{\n\t\tJson ret = Json.emptyObject;\n\t\tret[\"somefield\"] = \"Hello, World!\";\n\t\treturn ret;\n\t}\n}\n\n// actual usage, this is usually done in app.d module\n// constructor\n\nvoid static_this()\n{\n\timport vibe.http.server, vibe.http.router;\n\n\tauto router = new URLRouter;\n\trouter.registerRestInterface(new API());\n\tlistenHTTP(new HTTPServerSettings(), router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L398_C7)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "TImpl"
					}
				],
				"line": 375,
				"kind": "template",
				"char": 11,
				"members": [
					{
						"parameters": [
							{
								"type": "URLRouter",
								"name": "router"
							},
							{
								"type": "TImpl",
								"name": "instance"
							},
							{
								"type": "MethodStyle",
								"name": "style"
							}
						],
						"line": 375,
						"kind": "function",
						"char": 11,
						"name": "registerRestInterface",
						"type": "URLRouter(URLRouter router, TImpl instance, MethodStyle style)",
						"endchar": 1,
						"endline": 378
					}
				],
				"name": "registerRestInterface",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "TImpl"
					}
				],
				"line": 381,
				"kind": "template",
				"char": 11,
				"members": [
					{
						"parameters": [
							{
								"type": "URLRouter",
								"name": "router"
							},
							{
								"type": "TImpl",
								"name": "instance"
							},
							{
								"type": "string",
								"name": "url_prefix"
							},
							{
								"type": "MethodStyle",
								"default": "MethodStyle.lowerUnderscored",
								"name": "style"
							}
						],
						"line": 381,
						"kind": "function",
						"char": 11,
						"name": "registerRestInterface",
						"type": "URLRouter(URLRouter router, TImpl instance, string url_prefix, MethodStyle style = MethodStyle.lowerUnderscored)",
						"endchar": 1,
						"endline": 389
					}
				],
				"name": "registerRestInterface",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(I == interface)",
				"parameters": [
					{
						"kind": "type",
						"name": "I"
					}
				],
				"line": 469,
				"kind": "template",
				"char": 27,
				"members": [
					{
						"parameters": [
							{
								"type": "RestInterfaceSettings",
								"name": "settings"
							}
						],
						"line": 469,
						"kind": "function",
						"char": 27,
						"name": "serveRestJSClient",
						"type": "HTTPServerRequestDelegate(RestInterfaceSettings settings)",
						"endchar": 1,
						"endline": 490
					}
				],
				"name": "serveRestJSClient",
				"comment": "\tReturns a HTTP handler delegate that serves a JavaScript REST client.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L513_C1)\n---\nimport vibe.http.server;\n\ninterface MyAPI {\n\tstring getFoo();\n\tvoid postBar(string param);\n}\n\nvoid test()\n{\n\tauto restsettings = new RestInterfaceSettings;\n\trestsettings.baseURL = URL(\"http://api.example.org/\");\n\n\tauto router = new URLRouter;\n\trouter.get(\"/myapi.js\", serveRestJSClient!MyAPI(restsettings));\n\t//router.get(\"/myapi.js\", serveRestJSClient!MyAPI(URL(\"http://api.example.org/\")));\n\t//router.get(\"/myapi.js\", serveRestJSClient!MyAPI(\"http://api.example.org/\"));\n\t//router.get(\"/myapi.js\", serveRestJSClient!MyAPI()); // if want to request to self server\n\t//router.get(\"/\", staticTemplate!\"index.dt\");\n\n\tlistenHTTP(new HTTPServerSettings, router);\n}\n\n/*\n\tindex.dt:\n\thtml\n\t\thead\n\t\t\ttitle JS REST client test\n\t\t\tscript(src=\"myapi.js\")\n\t\tbody\n\t\t\tbutton(onclick=\"MyAPI.postBar('hello');\")\n*/\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L513_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "I"
					}
				],
				"line": 492,
				"kind": "template",
				"char": 27,
				"members": [
					{
						"parameters": [
							{
								"type": "URL",
								"name": "base_url"
							}
						],
						"line": 492,
						"kind": "function",
						"char": 27,
						"name": "serveRestJSClient",
						"type": "HTTPServerRequestDelegate(URL base_url)",
						"endchar": 1,
						"endline": 497
					}
				],
				"name": "serveRestJSClient",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "I"
					}
				],
				"line": 499,
				"kind": "template",
				"char": 27,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "base_url"
							}
						],
						"line": 499,
						"kind": "function",
						"char": 27,
						"name": "serveRestJSClient",
						"type": "HTTPServerRequestDelegate(string base_url)",
						"endchar": 1,
						"endline": 504
					}
				],
				"name": "serveRestJSClient",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "I"
					}
				],
				"line": 506,
				"kind": "template",
				"char": 27,
				"members": [
					{
						"line": 506,
						"kind": "function",
						"char": 27,
						"name": "serveRestJSClient",
						"type": "HTTPServerRequestDelegate()",
						"endchar": 1,
						"endline": 510
					}
				],
				"name": "serveRestJSClient",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(I == interface) && isOutputRange!(R, char)",
				"parameters": [
					{
						"kind": "type",
						"name": "I"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 551,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"ref"
								],
								"name": "output"
							},
							{
								"type": "RestInterfaceSettings",
								"default": "null",
								"name": "settings"
							}
						],
						"line": 551,
						"kind": "function",
						"char": 6,
						"name": "generateRestJSClient",
						"type": "void(ref R output, RestInterfaceSettings settings = null)",
						"endchar": 1,
						"endline": 557
					}
				],
				"name": "generateRestJSClient",
				"comment": "\tGenerates JavaScript code to access a REST interface from the browser.\nExample:\nWrites a JavaScript REST client to a local .js file.$(DDOX_UNITTEST_HEADER __unittest_L560_C1)\n---\nimport vibe.core.file;\n\ninterface MyAPI {\n\tvoid getFoo();\n\tvoid postBar(string param);\n}\n\nvoid generateJSClientImpl()\n{\n\timport std.array : appender;\n\n\tauto app = appender!string;\n\tauto settings = new RestInterfaceSettings;\n\tsettings.baseURL = URL(\"http://localhost/\");\n\tgenerateRestJSClient!MyAPI(app, settings);\n}\n\ngenerateJSClientImpl();\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L560_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "I"
					}
				],
				"line": 590,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "class",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "RestInterface!I",
								"char": 10,
								"line": 596,
								"name": "Info"
							},
							{
								"kind": "variable",
								"type": "RestInterface!I*",
								"char": 20,
								"line": 605,
								"name": "m_intf"
							},
							{
								"kind": "variable",
								"type": "RequestFilter",
								"char": 17,
								"line": 606,
								"name": "m_requestFilter"
							},
							{
								"kind": "variable",
								"type": "RequestBodyFilter",
								"char": 21,
								"line": 607,
								"name": "m_requestBodyFilter"
							},
							{
								"kind": "variable",
								"type": "staticMap!(RestInterfaceClient, Info.SubInterfaceTypes)",
								"char": 59,
								"line": 608,
								"name": "m_subInterfaces"
							},
							{
								"kind": "alias",
								"type": "void delegate(HTTPClientRequest req) @safe",
								"char": 2,
								"line": 611,
								"name": "RequestFilter"
							},
							{
								"kind": "alias",
								"type": "void delegate(HTTPClientRequest req, scope InputStream body_contents) @safe",
								"char": 2,
								"line": 613,
								"name": "RequestBodyFilter"
							},
							{
								"parameters": [
									{
										"type": "RestInterfaceSettings",
										"name": "settings"
									}
								],
								"line": 618,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(RestInterfaceSettings settings)",
								"endchar": 2,
								"endline": 624,
								"comment": "\t\tCreates a new REST client implementation of $(D I).\n"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "base_url"
									},
									{
										"type": "MethodStyle",
										"default": "MethodStyle.lowerUnderscored",
										"name": "style"
									}
								],
								"line": 627,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(string base_url, MethodStyle style = MethodStyle.lowerUnderscored)",
								"endchar": 2,
								"endline": 630,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "URL",
										"name": "base_url"
									},
									{
										"type": "MethodStyle",
										"default": "MethodStyle.lowerUnderscored",
										"name": "style"
									}
								],
								"line": 633,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(URL base_url, MethodStyle style = MethodStyle.lowerUnderscored)",
								"endchar": 2,
								"endline": 639,
								"comment": "ditto\n"
							},
							{
								"storageClass": [
									"final"
								],
								"line": 644,
								"kind": "function",
								"char": 32,
								"name": "requestFilter",
								"type": "@property RequestFilter()",
								"endchar": 2,
								"endline": 647,
								"comment": "\t\tAn optional request filter that allows to modify each request before it is made.\n"
							},
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "RequestFilter",
										"name": "v"
									}
								],
								"line": 649,
								"kind": "function",
								"char": 23,
								"name": "requestFilter",
								"type": "@property void(RequestFilter v)",
								"endchar": 2,
								"endline": 654,
								"comment": "ditto\n"
							},
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "void delegate(HTTPClientRequest req)",
										"name": "v"
									}
								],
								"line": 656,
								"kind": "function",
								"char": 23,
								"name": "requestFilter",
								"type": "@property void(void delegate(HTTPClientRequest req) v)",
								"endchar": 2,
								"endline": 659,
								"comment": "ditto\n"
							},
							{
								"storageClass": [
									"final"
								],
								"parameters": [
									{
										"type": "RequestBodyFilter",
										"name": "del"
									}
								],
								"line": 666,
								"kind": "function",
								"char": 23,
								"name": "requestBodyFilter",
								"type": "@property void(RequestBodyFilter del)",
								"endchar": 2,
								"endline": 669,
								"comment": " Optional request filter with access to the request body.\n\n\t\tThis callback allows to modify the request headers depending on the\n\t\tcontents of the body.\n"
							},
							{
								"storageClass": [
									"final"
								],
								"line": 671,
								"kind": "function",
								"char": 36,
								"name": "requestBodyFilter",
								"type": "@property RequestBodyFilter()",
								"endchar": 2,
								"endline": 674,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "HTTPMethod",
										"name": "verb"
									},
									{
										"type": "string",
										"name": "name"
									},
									{
										"type": "InetHeaderMap",
										"storageClass": [
											"in",
											"ref"
										],
										"name": "hdrs"
									},
									{
										"type": "string",
										"name": "query"
									},
									{
										"type": "string",
										"name": "body_"
									},
									{
										"type": "InetHeaderMap",
										"storageClass": [
											"ref"
										],
										"name": "reqReturnHdrs"
									},
									{
										"type": "InetHeaderMap",
										"storageClass": [
											"ref"
										],
										"name": "optReturnHdrs"
									}
								],
								"line": 710,
								"kind": "function",
								"char": 8,
								"name": "request",
								"type": "const Json(HTTPMethod verb, string name, ref InetHeaderMap hdrs, string query, string body_, ref InetHeaderMap reqReturnHdrs, ref InetHeaderMap optReturnHdrs)",
								"endchar": 3,
								"endline": 732,
								"comment": " Perform a request to the interface using the given parameters.\n\n Params:\n verb = Kind of request (See $(D HTTPMethod) enum).\n name = Location to request. For a request on https://github.com/rejectedsoftware/vibe.d/issues?q=author%3ASantaClaus,\n\t\tit will be '/rejectedsoftware/vibe.d/issues'.\n hdrs = The headers to send. Some field might be overriden (such as Content-Length). However, Content-Type will NOT be overriden.\n query = The $(B encoded) query string. For a request on https://github.com/rejectedsoftware/vibe.d/issues?q=author%3ASantaClaus,\n\t\tit will be 'author%3ASantaClaus'.\n body_ = The body to send, as a string. If a Content-Type is present in $(D hdrs), it will be used, otherwise it will default to\n\t\tthe generic type \"application/json\".\n reqReturnHdrs = A map of required return headers.\n\t\t\t\t   To avoid returning unused headers, nothing is written\n\t\t\t\t   to this structure unless there's an (usually empty)\n\t\t\t\t   entry (= the key exists) with the same key.\n\t\t\t\t   If any key present in `reqReturnHdrs` is not present\n\t\t\t\t   in the response, an Exception is thrown.\n optReturnHdrs = A map of optional return headers.\n\t\t\t\t   This behaves almost as exactly as reqReturnHdrs,\n\t\t\t\t   except that non-existent key in the response will\n\t\t\t\t   not cause it to throw, but rather to set this entry\n\t\t\t\t   to 'null'.\n\n Returns:\n     The Json object returned by the request\n"
							}
						],
						"line": 590,
						"name": "RestInterfaceClient"
					}
				],
				"name": "RestInterfaceClient",
				"comment": "\tImplements the given interface by forwarding all public methods to a REST server.\n\n\tThe server must talk the same protocol as registerRestInterface() generates. Be sure to set\n\tthe matching method style for this. The RestInterfaceClient class will derive from the\n\tinterface that is passed as a template argument. It can be used as a drop-in replacement\n\tof the real implementation of the API this way.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L737_C1)\n---\ninterface IMyApi\n{\n\t// GET /status\n\tstring getStatus();\n\n\t// GET /greeting\n\t@property string greeting();\n\t// PUT /greeting\n\t@property void greeting(string text);\n\n\t// POST /new_user\n\tvoid addNewUser(string name);\n\t// GET /users\n\t@property string[] users();\n\t// GET /:id/name\n\tstring getName(int id);\n\n\tJson getSomeCustomJson();\n}\n\nvoid test()\n{\n\tauto api = new RestInterfaceClient!IMyApi(\"http://127.0.0.1/api/\");\n\n\tlogInfo(\"Status: %s\", api.getStatus());\n\tapi.greeting = \"Hello, World!\";\n\tlogInfo(\"Greeting message: %s\", api.greeting);\n\tapi.addNewUser(\"Peter\");\n\tapi.addNewUser(\"Igor\");\n\tlogInfo(\"Users: %s\", api.users);\n\tlogInfo(\"First user name: %s\", api.getName(0));\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L737_C1)\n"
			},
			{
				"kind": "class",
				"line": 777,
				"char": 1,
				"members": [
					{
						"line": 780,
						"kind": "variable",
						"char": 6,
						"name": "baseURL",
						"deco": "S4vibe4inet3url3URL",
						"offset": 16,
						"comment": " The public URL below which the REST interface is registered.\n"
					},
					{
						"line": 786,
						"kind": "variable",
						"char": 11,
						"name": "allowedOrigins",
						"deco": "AAya",
						"offset": 136,
						"comment": " List of allowed origins for CORS\n\n\t\tEmpty list is interpreted as allowing all origins (e.g. *)\n"
					},
					{
						"line": 790,
						"kind": "variable",
						"char": 14,
						"name": "methodStyle",
						"deco": "E4vibe3web6common11MethodStyle",
						"init": "cast(MethodStyle)5",
						"offset": 152,
						"comment": " Naming convention used for the generated URLs.\n"
					},
					{
						"line": 797,
						"kind": "variable",
						"char": 7,
						"name": "stripTrailingUnderscore",
						"deco": "b",
						"init": "true",
						"offset": 156,
						"comment": " Ignores a trailing underscore in method and function names.\n\n\t\tWith this setting set to $(D true), it's possible to use names in the\n\t\tREST interface that are reserved words in D.\n"
					},
					{
						"line": 800,
						"kind": "variable",
						"originalType": "HTTPClientSettings",
						"char": 21,
						"name": "httpClientSettings",
						"deco": "C4vibe4http6client18HTTPClientSettings",
						"offset": 160,
						"comment": "Overrides the default HTTP client settings used by the `RestInterfaceClient`.\n"
					},
					{
						"line": 817,
						"kind": "variable",
						"originalType": "RestErrorHandler",
						"char": 19,
						"name": "errorHandler",
						"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseSQCp3web4rest20RestErrorInformationZv",
						"offset": 168,
						"comment": " Optional handler used to render custom replies in case of errors.\n\n\t\tThe handler needs to set the response status code to the provided\n\t\t`RestErrorInformation.statusCode` value and can then write a custom\n\t\tresponse body.\n\n\t\tNote that the REST interface generator by default handles any exceptions thrown\n\t\tduring request handling and sents a JSON response with the error message. The\n\t\tlow level `HTTPServerSettings.errorPageHandler` is not invoked.\n\n\t\tIf `errorHandler` is not set, a JSON object with a single field \"statusMessage\"\n\t\twill be sent. In debug builds, there may also be an additional\n\t\t\"statusDebugMessage\" field that contains the full exception text, including a\n\t\tpossible stack trace.\n"
					},
					{
						"line": 819,
						"kind": "function",
						"char": 34,
						"name": "dup",
						"deco": "xFNdNfZC4vibe3web4rest21RestInterfaceSettings",
						"endchar": 2,
						"endline": 831
					}
				],
				"comment": "\tEncapsulates settings used to customize the generated REST interface.\n",
				"name": "RestInterfaceSettings"
			},
			{
				"kind": "alias",
				"deco": "DFNfC4vibe4http6server17HTTPServerRequestCQBlQBjQBh18HTTPServerResponseSQCp3web4rest20RestErrorInformationZv",
				"char": 1,
				"line": 834,
				"name": "RestErrorHandler"
			},
			{
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 838,
						"kind": "variable",
						"char": 13,
						"name": "statusCode",
						"deco": "E4vibe4http6status10HTTPStatus",
						"offset": 0,
						"comment": "The status code that the handler should send in the reply\n"
					},
					{
						"line": 843,
						"kind": "variable",
						"originalType": "Exception",
						"char": 12,
						"name": "exception",
						"deco": "C9Exception",
						"offset": 8,
						"comment": " If triggered by an exception, this contains the catched exception\n\t\tobject.\n"
					}
				],
				"line": 836,
				"name": "RestErrorInformation"
			},
			{
				"constraint": "is(I == interface)",
				"parameters": [
					{
						"kind": "type",
						"name": "I"
					}
				],
				"line": 888,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "I",
								"char": 2,
								"line": 895,
								"name": "Interface"
							},
							{
								"kind": "alias",
								"type": "TypeTuple!(typeof(I.CollectionIndices.tupleof))",
								"char": 2,
								"line": 896,
								"name": "AllIDs"
							},
							{
								"kind": "alias",
								"type": "FieldNameTuple!(I.CollectionIndices)",
								"char": 2,
								"line": 897,
								"name": "AllIDNames"
							},
							{
								"kind": "alias",
								"type": "AllIDs[__dollar - 1]",
								"char": 2,
								"line": 900,
								"name": "ItemID"
							},
							{
								"kind": "alias",
								"type": "AllIDs[0 .. __dollar - 1]",
								"char": 2,
								"line": 901,
								"name": "ParentIDs"
							},
							{
								"kind": "alias",
								"type": "AllIDNames[0 .. __dollar - 1]",
								"char": 2,
								"line": 902,
								"name": "ParentIDNames"
							},
							{
								"kind": "variable",
								"type": "I",
								"char": 5,
								"line": 905,
								"name": "m_interface"
							},
							{
								"kind": "variable",
								"type": "ParentIDs",
								"char": 13,
								"line": 906,
								"name": "m_parentIDs"
							},
							{
								"parameters": [
									{
										"type": "I",
										"name": "api"
									},
									{
										"type": "ParentIDs",
										"name": "pids"
									}
								],
								"line": 917,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(I api, ParentIDs pids)",
								"endchar": 2,
								"endline": 921,
								"comment": " Constructs a new collection instance that is tied to a particular\n\t\tparent collection entry.\n\n\t\tParams:\n\t\t\tapi = The target interface imstance to be mapped as a collection\n\t\t\tpids = The indexes of all collections in which this collection is\n\t\t\t\tnested (if any)\n"
							},
							{
								"kind": "struct",
								"char": 9,
								"members": [
									{
										"kind": "variable",
										"type": "I",
										"char": 6,
										"line": 925,
										"name": "m_interface"
									},
									{
										"kind": "variable",
										"type": "AllIDs",
										"char": 11,
										"line": 926,
										"name": "m_id"
									},
									{
										"parameters": [
											{
												"type": "I",
												"name": "api"
											},
											{
												"type": "AllIDs",
												"name": "id"
											}
										],
										"line": 929,
										"kind": "constructor",
										"char": 3,
										"name": "this",
										"type": "(I api, AllIDs id)",
										"endchar": 3,
										"endline": 933
									}
								],
								"line": 923,
								"name": "Item"
							},
							{
								"parameters": [
									{
										"type": "ItemID",
										"name": "id"
									}
								],
								"line": 973,
								"kind": "function",
								"char": 7,
								"name": "opIndex",
								"type": "Item(ItemID id)",
								"endchar": 2,
								"endline": 976,
								"comment": " Accesses a single collection entry.\n\n\t\tExample:\n\t\t---\n\t\tinterface IMain {\n\t\t\t@property Collection!IItem items();\n\t\t}\n\n\t\tinterface IItem {\n\t\t\tstruct CollectionIndices {\n\t\t\t\tint _itemID;\n\t\t\t}\n\n\t\t\t@method(HTTPMethod.GET)\n\t\t\tstring name(int _itemID);\n\t\t}\n\n\t\tvoid test(IMain main)\n\t\t{\n\t\t\tauto item_name = main.items[23].name; // equivalent to IItem.name(23)\n\t\t}\n\t\t---\n"
							},
							{
								"parameters": [
									{
										"kind": "alias",
										"name": "func"
									}
								],
								"line": 994,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"storageClass": [
											"enum"
										],
										"line": 996,
										"kind": "variable",
										"char": 47,
										"name": "matchesParentIDs",
										"init": "true"
									}
								],
								"name": "matchesParentIDs"
							},
							{
								"parameters": [
									{
										"kind": "alias",
										"name": "func"
									}
								],
								"line": 1003,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"storageClass": [
											"enum"
										],
										"line": 1006,
										"kind": "variable",
										"char": 10,
										"name": "matchesAllIDs",
										"init": "true"
									}
								],
								"name": "matchesAllIDs"
							}
						],
						"line": 888,
						"name": "Collection"
					}
				],
				"name": "Collection",
				"comment": "\tModels REST collection interfaces using natural D syntax.\n\n\tUse this type as the return value of a REST interface getter method/property\n\tto model a collection of objects. `opIndex` is used to make the individual\n\tentries accessible using the `[index]` syntax. Nested collections are\n\tsupported.\n\n\tThe interface `I` needs to define a struct named `CollectionIndices`. The\n\tmembers of this struct denote the types and names of the indexes that lead\n\tto a particular resource. If a collection is nested within another\n\tcollection, the order of these members must match the nesting order\n\t(outermost first).\n\n\tThe parameter list of all of `I`'s methods must begin with all but the last\n\tentry in `CollectionIndices`. Methods that also match the last entry will be\n\tconsidered methods of a collection item (`collection[index].method()`),\n\twheres all other methods will be considered methods of the collection\n\titself (`collection.method()`).\n\n\tThe name of the index parameters affects the default path of a method's\n\troute. Normal parameter names will be subject to the same rules as usual\n\troutes (see `registerRestInterface`) and will be mapped to query or form\n\tparameters at the protocol level. Names starting with an underscore will\n\tinstead be mapped to path placeholders. For example,\n\t`void getName(int __item_id)` will be mapped to a GET request to the\n\tpath `\":item_id/name\"`.\nExample:\nModel two nested collections using path based indexes$(DDOX_UNITTEST_HEADER __unittest_L1013_C1)\n---\n//\n// API definition\n//\ninterface SubItemAPI {\n\t// Define the index path that leads to a sub item\n\tstruct CollectionIndices {\n\t\t// The ID of the base item. This must match the definition in\n\t\t// ItemAPI.CollectionIndices\n\t\tstring _item;\n\t\t// The index if the sub item\n\t\tint _index;\n\t}\n\n\t// GET /items/:item/subItems/length\n\t@property int length(string _item);\n\n\t// GET /items/:item/subItems/:index/squared_position\n\tint getSquaredPosition(string _item, int _index);\n}\n\ninterface ItemAPI {\n\t// Define the index that identifies an item\n\tstruct CollectionIndices {\n\t\tstring _item;\n\t}\n\n\t// base path /items/:item/subItems\n\tCollection!SubItemAPI subItems(string _item);\n\n\t// GET /items/:item/name\n\t@property string name(string _item);\n}\n\ninterface API {\n\t// a collection of items at the base path /items/\n\tCollection!ItemAPI items();\n}\n\n//\n// Local API implementation\n//\nclass SubItemAPIImpl : SubItemAPI {\n\t@property int length(string _item) { return 10; }\n\n\tint getSquaredPosition(string _item, int _index) { return _index ^^ 2; }\n}\n\nclass ItemAPIImpl : ItemAPI {\n\tprivate SubItemAPIImpl m_subItems;\n\n\tthis() { m_subItems = new SubItemAPIImpl; }\n\n\tCollection!SubItemAPI subItems(string _item) { return Collection!SubItemAPI(m_subItems, _item); }\n\n\tstring name(string _item) { return _item; }\n}\n\nclass APIImpl : API {\n\tprivate ItemAPIImpl m_items;\n\n\tthis() { m_items = new ItemAPIImpl; }\n\n\tCollection!ItemAPI items() { return Collection!ItemAPI(m_items); }\n}\n\n//\n// Resulting API usage\n//\nAPI api = new APIImpl; // A RestInterfaceClient!API would work just as well\n\n// GET /items/foo/name\nassert(api.items[\"foo\"].name == \"foo\");\n// GET /items/foo/sub_items/length\nassert(api.items[\"foo\"].subItems.length == 10);\n// GET /items/foo/sub_items/2/squared_position\nassert(api.items[\"foo\"].subItems[2].getSquaredPosition() == 4);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1013_C1)\nExample:\nModel two nested collections using normal query parameters as indexes$(DDOX_UNITTEST_HEADER __unittest_L1117_C1)\n---\n//\n// API definition\n//\ninterface SubItemAPI {\n\t// Define the index path that leads to a sub item\n\tstruct CollectionIndices {\n\t\t// The ID of the base item. This must match the definition in\n\t\t// ItemAPI.CollectionIndices\n\t\tstring item;\n\t\t// The index if the sub item\n\t\tint index;\n\t}\n\n\t// GET /items/subItems/length?item=...\n\t@property int length(string item);\n\n\t// GET /items/subItems/squared_position?item=...&index=...\n\tint getSquaredPosition(string item, int index);\n}\n\ninterface ItemAPI {\n\t// Define the index that identifies an item\n\tstruct CollectionIndices {\n\t\tstring item;\n\t}\n\n\t// base path /items/subItems?item=...\n\tCollection!SubItemAPI subItems(string item);\n\n\t// GET /items/name?item=...\n\t@property string name(string item);\n}\n\ninterface API {\n\t// a collection of items at the base path /items/\n\tCollection!ItemAPI items();\n}\n\n//\n// Local API implementation\n//\nclass SubItemAPIImpl : SubItemAPI {\n\t@property int length(string item) { return 10; }\n\n\tint getSquaredPosition(string item, int index) { return index ^^ 2; }\n}\n\nclass ItemAPIImpl : ItemAPI {\n\tprivate SubItemAPIImpl m_subItems;\n\n\tthis() { m_subItems = new SubItemAPIImpl; }\n\n\tCollection!SubItemAPI subItems(string item) { return Collection!SubItemAPI(m_subItems, item); }\n\n\tstring name(string item) { return item; }\n}\n\nclass APIImpl : API {\n\tprivate ItemAPIImpl m_items;\n\n\tthis() { m_items = new ItemAPIImpl; }\n\n\tCollection!ItemAPI items() { return Collection!ItemAPI(m_items); }\n}\n\n//\n// Resulting API usage\n//\nAPI api = new APIImpl; // A RestInterfaceClient!API would work just as well\n\n// GET /items/name?item=foo\nassert(api.items[\"foo\"].name == \"foo\");\n// GET /items/subitems/length?item=foo\nassert(api.items[\"foo\"].subItems.length == 10);\n// GET /items/subitems/squared_position?item=foo&index=2\nassert(api.items[\"foo\"].subItems[2].getSquaredPosition() == 4);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1117_C1)\n"
			},
			{
				"kind": "alias",
				"line": 1236,
				"char": 1,
				"comment": " Allows processing the server request/response before the handler method is called.\n\n\tNote that this attribute is only used by `registerRestInterface`, but not\n\tby the client generators. This attribute expects the name of a parameter that\n\twill receive its return value.\n\n\tWriting to the response body from within the specified hander function\n\tcauses any further processing of the request to be skipped. In particular,\n\tthe route handler method will not be called.\n\n\tNote:\n\t\tThe example shows the drawback of this attribute. It generally is a\n\t\tleaky abstraction that propagates to the base interface. For this\n\t\treason the use of this attribute is not recommended, unless there is\n\t\tno suitable alternative.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1239_C7)\n---\nimport vibe.http.server : HTTPServerRequest, HTTPServerResponse;\n\ninterface MyService {\n\tlong getHeaderCount(size_t foo = 0) @safe;\n}\n\nstatic size_t handler(HTTPServerRequest req, HTTPServerResponse res)\n{\n\treturn req.headers.length;\n}\n\nclass MyServiceImpl : MyService {\n\t// the \"foo\" parameter will receive the number of request headers\n\t@before!handler(\"foo\")\n\tlong getHeaderCount(size_t foo)\n\t{\n\t\treturn foo;\n\t}\n}\n\nvoid test(URLRouter router)\n@safe {\n\trouter.registerRestInterface(new MyServiceImpl);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1239_C7)\n",
				"name": "before"
			},
			{
				"kind": "alias",
				"line": 1277,
				"char": 1,
				"comment": " Allows processing the return value of a handler method and the request/response objects.\n\n\tThe value returned by the REST API will be the value returned by the last\n\t`@after` handler, which allows to post process the results of the handler\n\tmethod.\n\n\tWriting to the response body from within the specified handler function\n\tcauses any further processing of the request ot be skipped, including\n\tany other `@after` annotations and writing the result value.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1280_C7)\n---\nimport vibe.http.server : HTTPServerRequest, HTTPServerResponse;\n\ninterface MyService {\n\tlong getMagic() @safe;\n}\n\nstatic long handler(long ret, HTTPServerRequest req, HTTPServerResponse res)\n@safe {\n\treturn ret * 2;\n}\n\nclass MyServiceImpl : MyService{\n\t// the result reported by the REST API will be 42\n\t@after!handler\n\tlong getMagic()\n\t{\n\t\treturn 21;\n\t}\n}\n\nvoid test(URLRouter router)\n@safe {\n\trouter.registerRestInterface(new MyServiceImpl);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1280_C7)\n",
				"name": "after"
			},
			{
				"kind": "struct",
				"char": 10,
				"members": [],
				"line": 1988,
				"name": "Aggregate"
			},
			{
				"kind": "interface",
				"char": 10,
				"members": [
					{
						"kind": "function",
						"type": "Aggregate[]()",
						"char": 15,
						"line": 1991,
						"name": "foo"
					}
				],
				"line": 1989,
				"name": "Interface"
			}
		],
		"comment": " Automatic high-level RESTful client/server interface generation facilities.\n\n\tThis modules aims to provide a typesafe way to deal with RESTful APIs. D's\n\t`interface`s are used to define the behavior of the API, so that they can\n\tbe used transparently within the application. This module assumes that\n\tHTTP is used as the underlying transport for the REST API.\n\n\tWhile convenient means are provided for generating both, the server and the\n\tclient side, of the API from a single interface definition, it is also\n\tpossible to use as a pure client side implementation to target existing\n\tweb APIs.\n\n\tThe following paragraphs will explain in detail how the interface definition\n\tis mapped to the RESTful API, without going into specifics about the client\n\tor server side. Take a look at `registerRestInterface` and\n\t`RestInterfaceClient` for more information in those areas.\n\n\tThese are the main adantages of using this module to define RESTful APIs\n\tover defining them manually by registering request handlers in a\n\t`URLRouter`:\n\n\t$(UL\n\t\t$(LI Automatic client generation: once the interface is defined, it can\n\t\t\tbe used both by the client side and the server side, which means\n\t\t\tthat there is no way to have a protocol mismatch between the two.)\n\t\t$(LI Automatic route generation for the server: one job of the REST\n\t\t\tmodule is to generate the HTTP routes/endpoints for the API.)\n\t\t$(LI Automatic serialization/deserialization: Instead of doing manual\n\t  \t\tserialization and deserialization, just normal statically typed\n\t  \t\tmember functions are defined and the code generator takes care of\n\t  \t\tconverting to/from wire format. Custom serialization can be achieved\n\t  \t\tby defining `JSON` or `string` parameters/return values together\n\t  \t\twith the appropriate `@bodyParam` annotations.)\n\t\t$(LI Higher level representation integrated into D: Some concepts of the\n\t  \t\tinterfaces, such as optional parameters or `in`/`out`/`ref`\n\t  \t\tparameters, as well as `Nullable!T`, are translated naturally to the\n\t  \t\tRESTful protocol.)\n\t)\n\n\tThe most basic interface that can be defined is as follows:\n\t----\n\t@path(\"/api/\")\n\tinterface APIRoot {\n\t    string get();\n\t}\n\t----\n\n\tThis defines an API that has a single endpoint, 'GET /api/'. So if the\n\tserver is found at http://api.example.com, performing a GET request to\n\t$(CODE http://api.example.com/api/) will call the `get()` method and send\n\tits return value verbatim as the response body.\n\n\tEndpoint_generation:\n\t\tAn endpoint is a combination of an HTTP method and a local URI. For each\n\t\tpublic method of the interface, one endpoint is registered in the\n\t\t`URLRouter`.\n\n\t\tBy default, the method and URI parts will be inferred from the method\n\t\tname by looking for a known prefix. For example, a method called\n\t\t`getFoo` will automatically be mapped to a 'GET /foo' request. The\n\t\trecognized prefixes are as follows:\n\n\t\t$(TABLE\n\t\t\t$(TR $(TH Prefix) $(TH HTTP verb))\n\t\t\t$(TR $(TD get)\t  $(TD GET))\n\t\t\t$(TR $(TD query)  $(TD GET))\n\t\t\t$(TR $(TD set)    $(TD PUT))\n\t\t\t$(TR $(TD put)    $(TD PUT))\n\t\t\t$(TR $(TD update) $(TD PATCH))\n\t\t\t$(TR $(TD patch)  $(TD PATCH))\n\t\t\t$(TR $(TD add)    $(TD POST))\n\t\t\t$(TR $(TD create) $(TD POST))\n\t\t\t$(TR $(TD post)   $(TD POST))\n\t\t)\n\n\t\tMember functions that have no valid prefix default to 'POST'. Note that\n\t\tany of the methods defined in `vibe.http.common.HTTPMethod` are\n\t\tsupported through manual endpoint specifications, as described in the\n\t\tnext section.\n\n\t\tAfter determining the HTTP method, the rest of the method's name is\n\t\tthen treated as the local URI of the endpoint. It is expected to be in\n\t\tstandard D camel case style and will be transformed into the style that\n\t\tis specified in the call to `registerRestInterface`, which defaults to\n\t\t`MethodStyle.lowerUnderscored`.\n\n\tManual_endpoint_specification:\n\t\tEndpoints can be controlled manually through the use of `@path` and\n\t\t`@method` annotations:\n\n\t\t----\n\t\t@path(\"/api/\")\n\t\tinterface APIRoot {\n\t\t    // Here we use a POST method\n\t\t    @method(HTTPMethod.POST)\n\t\t\t// Our method will located at '/api/foo'\n\t\t\t@path(\"/foo\")\n\t\t\tvoid doSomething();\n\t\t}\n\t\t----\n\n\t\tManual path annotations also allows defining custom path placeholders\n\t\tthat will be mapped to function parameters. Placeholders are path\n\t\tsegments that start with a colon:\n\n\t\t----\n\t\t@path(\"/users/\")\n\t\tinterface UsersAPI {\n\t\t    @path(\":name\")\n\t\t    Json getUserByName(string _name);\n\t\t}\n\t\t----\n\n\t\tThis will cause a request \"GET /users/peter\" to be mapped to the\n\t\t`getUserByName` method, with the `_name` parameter receiving the string\n\t\t\"peter\". Note that the matching parameter must have an underscore\n\t\tprefixed so that it can be distinguished from normal form/query\n\t\tparameters.\n\n\t\tIt is possible to partially rely on the default behavior and to only\n\t\tcustomize either the method or the path of the endpoint:\n\n\t\t----\n\t\t@method(HTTPMethod.POST)\n\t\tvoid getFoo();\n\t\t----\n\n\t\tIn the above case, as 'POST' is set explicitly, the route would be\n\t\t'POST /foo'. On the other hand, if the declaration had been:\n\n\t\t----\n\t\t@path(\"/bar\")\n\t\tvoid getFoo();\n\t\t----\n\n\t\tThe route generated would be 'GET /bar'.\n\n\tProperties:\n\t\t`@property` functions have a special mapping: property getters (no\n\t\tparameters and a non-void return value) are mapped as GET functions,\n\t\tand property setters (a single parameter) are mapped as PUT. No prefix\n\t\trecognition or trimming will be done for properties.\n\n\tMethod_style:\n\t\tMethod names will be translated to the given 'MethodStyle'. The default\n\t\tstyle is `MethodStyle.lowerUnderscored`, so that a function named\n\t\t`getFooBar` will match the route 'GET /foo_bar'. See\n\t\t`vibe.web.common.MethodStyle` for more information about the available\n\t\tstyles.\n\n\tParameter_passing:\n\t\tBy default, parameter are passed via different methods depending on the\n\t\ttype of request. For POST and PATCH requests, they are passed via the\n\t\tbody as a JSON object, while for GET and PUT they are passed via the\n\t\tquery string.\n\n\t\tThe default behavior can be overridden using one of the following annotations:\n\n\t\t$(UL\n\t\t\t$(LI `@headerParam(\"name\", \"field\")`: Applied on a method, it will\n\t\t\t\tsource the parameter named `name` from the request headers named\n\t\t\t\t\"field\". If the parameter is `ref`, it will also be set as a\n\t\t\t\tresponse header. Parameters declared as `out` will $(I only) be\n\t\t\t\tset as a response header.)\n\t\t\t$(LI `@queryParam(\"name\", \"field\")`: Applied on a method, it will\n\t\t\t\tsource the parameter `name` from a field named \"field\" of the\n\t\t\t\tquery string.)\n\t\t\t$(LI `@bodyParam(\"name\", \"field\")`: Applied on a method, it will\n\t\t\t\tsource the parameter `name` from a field named \"field\" of the\n\t\t\t\trequest body in JSON format.)\n\t\t)\n\n\t\t----\n\t\t@path(\"/api/\")\n\t\tinterface APIRoot {\n\t\t\t// GET /api/header with 'Authorization' set\n\t\t\t@headerParam(\"param\", \"Authorization\")\n\t\t\tstring getHeader(string param);\n\n\t\t\t// GET /api/foo?param=...\n\t\t\t@queryParam(\"param\", \"param\")\n\t\t\tstring getFoo(int param);\n\n\t\t\t// GET /api/body with body set to { \"myFoo\": {...} }\n\t\t\t@bodyParam(\"myFoo\", \"parameter\")\n\t\t\tstring getBody(FooType myFoo);\n\t\t}\n\t\t----\n\n\tDefault_values:\n\t\tParameters with default values behave as optional parameters. If one is\n\t\tset in the interface declaration of a method, the client can omit a\n\t\tvalue for the corresponding field in the request and the default value\n\t\tis used instead.\n\n\t\tNote that this can suffer from DMD bug #14369 (Vibe.d: #1043).\n\n\tAggregates:\n\t\tWhen passing aggregates as parameters, those are serialized differently\n\t\tdepending on the way they are passed, which may be especially important\n\t\twhen interfacing with an existing RESTful API:\n\n\t\t$(UL\n\t\t\t$(LI If the parameter is passed via the headers or the query, either\n\t\t\t\timplicitly or explicitly, the aggregate is serialized to JSON.\n\t\t\t\tIf the JSON representation is a single string, the string value\n\t\t\t\twill be used verbatim. Otherwise the JSON representation will be\n\t\t\t\tused)\n\t\t\t$(LI If the parameter is passed via the body, the datastructure is\n\t\t\t\tserialized to JSON and set as a field of the main JSON object\n\t\t\t\tthat is expected in the request body. Its field name equals the\n\t\t\t\tparameter name, unless an explicit `@bodyParam` annotation is\n\t\t\t\tused.)\n\t\t)\n\n\tSee_Also:\n\t\tTo see how to implement the server side in detail, jump to\n\t\t`registerRestInterface`.\n\n\t\tTo see how to implement the client side in detail, jump to\n\t\tthe `RestInterfaceClient` documentation.\n\n\tCopyright: © 2012-2018 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Михаил Страшун, Mathias 'Geod24' Lang\n",
		"name": "vibe.web.rest"
	},
	{
		"kind": "module",
		"file": "web/vibe/web/validation.d",
		"members": [
			{
				"kind": "struct",
				"line": 21,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@disable"
						],
						"line": 25,
						"kind": "constructor",
						"originalType": "ref ()",
						"char": 11,
						"name": "this",
						"deco": "FNcZS4vibe3web10validation10ValidEmail"
					},
					{
						"line": 27,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFNaNbNfZAya",
						"endchar": 63,
						"endline": 27
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							},
							{
								"deco": "PAya",
								"name": "error"
							}
						],
						"line": 30,
						"kind": "function",
						"originalType": "Nullable!ValidEmail(string str, string* error)",
						"char": 29,
						"name": "fromStringValidate",
						"deco": "FAyaPQeZS3std8typecons__T8NullableTS4vibe3web10validation10ValidEmailZQBt",
						"endchar": 2,
						"endline": 40
					}
				],
				"comment": "\tValidated e-mail parameter type.\n\n\tSee_also: $(D vibe.utils.validation.validateEmail)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L44_C1)\n---\nclass WebService {\n\tvoid setEmail(ValidEmail email)\n\t{\n\t\t// email is enforced to be valid here\n\t}\n\n\tvoid updateProfileInfo(Nullable!ValidEmail email, Nullable!string full_name)\n\t{\n\t\t// email is optional, but always valid\n\t\t// full_name is optional and not validated\n\t}\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L44_C1)\n",
				"name": "ValidEmail"
			},
			{
				"kind": "struct",
				"line": 65,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@disable"
						],
						"line": 69,
						"kind": "constructor",
						"originalType": "ref ()",
						"char": 11,
						"name": "this",
						"deco": "FNcZS4vibe3web10validation13ValidUsername"
					},
					{
						"line": 71,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFNaNbNfZAya",
						"endchar": 63,
						"endline": 71
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							},
							{
								"deco": "PAya",
								"name": "error"
							}
						],
						"line": 74,
						"kind": "function",
						"originalType": "Nullable!ValidUsername(string str, string* error)",
						"char": 32,
						"name": "fromStringValidate",
						"deco": "FAyaPQeZS3std8typecons__T8NullableTS4vibe3web10validation13ValidUsernameZQBw",
						"endchar": 2,
						"endline": 84
					}
				],
				"comment": "\tValidated user name parameter type.\n\n\tSee_also: $(D vibe.utils.validation.validateUsername)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L88_C1)\n---\nclass WebService {\n\tvoid setUsername(ValidUsername username)\n\t{\n\t\t// username is enforced to be valid here\n\t}\n\n\tvoid updateProfileInfo(Nullable!ValidUsername username, Nullable!string full_name)\n\t{\n\t\t// username is optional, but always valid\n\t\t// full_name is optional and not validated\n\t}\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L88_C1)\n",
				"name": "ValidUsername"
			},
			{
				"kind": "struct",
				"line": 109,
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@disable"
						],
						"line": 113,
						"kind": "constructor",
						"originalType": "ref ()",
						"char": 11,
						"name": "this",
						"deco": "FNcZS4vibe3web10validation13ValidPassword"
					},
					{
						"line": 115,
						"kind": "function",
						"char": 9,
						"name": "toString",
						"deco": "xFNaNbNfZAya",
						"endchar": 63,
						"endline": 115
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							},
							{
								"deco": "PAya",
								"name": "error"
							}
						],
						"line": 118,
						"kind": "function",
						"originalType": "Nullable!ValidPassword(string str, string* error)",
						"char": 32,
						"name": "fromStringValidate",
						"deco": "FAyaPQeZS3std8typecons__T8NullableTS4vibe3web10validation13ValidPasswordZQBw",
						"endchar": 2,
						"endline": 128
					}
				],
				"comment": "\tValidated password parameter.\n\n\tSee_also: $(D vibe.utils.validation.validatePassword)\n",
				"name": "ValidPassword"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "CONFIRMED_PARAM"
					}
				],
				"line": 135,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 137,
								"kind": "variable",
								"char": 7,
								"name": "confirmedParameter",
								"init": "CONFIRMED_PARAM"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 17,
								"line": 139,
								"name": "m_value"
							},
							{
								"line": 141,
								"kind": "function",
								"char": 9,
								"name": "toString",
								"type": "const pure nothrow @safe string()",
								"endchar": 63,
								"endline": 141
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "string",
										"name": "str"
									}
								],
								"line": 144,
								"kind": "function",
								"char": 17,
								"name": "fromString",
								"type": "Confirm(string str)",
								"endchar": 63,
								"endline": 144
							}
						],
						"line": 135,
						"name": "Confirm"
					}
				],
				"name": "Confirm",
				"comment": "\tEnsures that the parameter value matches that of another parameter.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L148_C1)\n---\nclass WebService {\n\tvoid setPassword(ValidPassword password, Confirm!\"password\" password_confirmation)\n\t{\n\t\t// password is valid and guaranteed to equal password_confirmation\n\t}\n\n\tvoid setProfileInfo(string full_name, Nullable!ValidPassword password, Nullable!(Confirm!\"password\") password_confirmation)\n\t{\n\t\t// Password is valid and guaranteed to equal password_confirmation\n\t\t// It is allowed for both, password and password_confirmation\n\t\t// to be absent at the same time, but not for only one of them.\n\t}\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L148_C1)\n"
			}
		],
		"comment": "\tParameter validation types transparently supported for web interface methods.\n\n\tCopyright: © 2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.web.validation"
	},
	{
		"kind": "module",
		"file": "web/vibe/web/web.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"selective": [
					"PrivateAccessProxy",
					"before",
					"after"
				],
				"line": 18,
				"name": "vibe.internal.meta.funcattr"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 19,
				"name": "vibe.web.common"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 20,
				"name": "vibe.web.i18n"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 21,
				"name": "vibe.web.validation"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"deco": "C6Object",
						"name": "C"
					},
					{
						"kind": "value",
						"deco": "E4vibe3web6common11MethodStyle",
						"defaultValue": "MethodStyle.lowerUnderscored",
						"name": "method_style"
					}
				],
				"line": 168,
				"kind": "template",
				"char": 11,
				"members": [
					{
						"parameters": [
							{
								"type": "URLRouter",
								"name": "router"
							},
							{
								"type": "C",
								"name": "instance"
							},
							{
								"type": "WebInterfaceSettings",
								"default": "null",
								"name": "settings"
							}
						],
						"line": 168,
						"kind": "function",
						"char": 11,
						"name": "registerWebInterface",
						"type": "URLRouter(URLRouter router, C instance, WebInterfaceSettings settings = null)",
						"endchar": 1,
						"endline": 228
					}
				],
				"name": "registerWebInterface",
				"comment": "\tRegisters a HTTP/web interface based on a class instance.\n\n\tEach public method of the given class instance will be mapped to a HTTP\n\troute. Property methods are mapped to GET/PUT and all other methods are\n\tmapped according to their prefix verb. If the method has no known prefix,\n\tPOST is used. The rest of the name is mapped to the path of the route\n\taccording to the given `method_style`. Note that the prefix word must be\n\tall-lowercase and is delimited by either an upper case character, a\n\tnon-alphabetic character, or the end of the string.\n\n\tThe following table lists the mappings from prefix verb to HTTP verb:\n\n\t$(TABLE\n\t\t$(TR $(TH HTTP method) $(TH Recognized prefixes))\n\t\t$(TR $(TD GET)\t  $(TD get, query))\n\t\t$(TR $(TD PUT)    $(TD set, put))\n\t\t$(TR $(TD POST)   $(TD add, create, post))\n\t\t$(TR $(TD DELETE) $(TD remove, erase, delete))\n\t\t$(TR $(TD PATCH)  $(TD update, patch))\n\t)\n\n\tMethod parameters will be sourced from either the query string\n\tor form data of the request, or, if the parameter name has an underscore\n\tprefixed, from the $(D vibe.http.server.HTTPServerRequest.params) map.\n\n\tThe latter can be used to inject custom data in various ways. Examples of\n\tthis are placeholders specified in a `@path` annotation, values computed\n\tby a `@before` annotation, error information generated by the\n\t`@errorDisplay` annotation, or data injected manually in a HTTP method\n\thandler that processed the request prior to passing it to the generated\n\tweb interface handler routes.\n\n\tMethods that return a $(D class) or $(D interface) instance, instead of\n\tbeing mapped to a single HTTP route, will be mapped recursively by\n\titerating the public routes of the returned instance. This way, complex\n\tpath hierarchies can be mapped to class hierarchies.\n\n\tParameter_conversion_rules:\n\t\tFor mapping method parameters without a prefixed underscore to\n\t\tquery/form fields, the following rules are applied:\n\n\t\t$(UL\n\t\t\t$(LI A dynamic array of values is mapped to\n\t\t\t\t`<parameter_name>_<index>`, where `index`\n\t\t\t\tdenotes the zero based index of the array entry. Any missing\n\t\t\t\tindexes will be left as their `init` value. Arrays can also be\n\t\t\t\tpassed without indexes using the name `<parameter_name>_`. They\n\t\t\t\twill be added in the order they appear in the form data or\n\t\t\t\tquery. Mixed styles can also be used, non-indexed elements will\n\t\t\t\tbe used to fill in missing indexes, or appended if no missing\n\t\t\t\tindex exists. Duplicate indexes are ignored)\n\t\t\t$(LI A static array of values is mapped identically to dynamic\n\t\t\t\tarrays, except that all elements must be present in the query\n\t\t\t\tor form data, and indexes or non-indexed data beyond the size\n\t\t\t\tof the array is ignored.)\n\t\t\t$(LI $(D Nullable!T) typed parameters, as well as parameters with\n\t\t\t\tdefault values, are optional parameters and are allowed to be\n\t\t\t\tmissing in the set of form fields. All other parameter types\n\t\t\t\trequire the corresponding field to be present and will result\n\t\t\t\tin a runtime error otherwise.)\n\t\t\t$(LI $(D struct) type parameters that don't define a $(D fromString)\n\t\t\t\tor a $(D fromStringValidate) method will be mapped to one\n\t\t\t\tform field per struct member with a scheme similar to how\n\t\t\t\tarrays are treated: `<parameter_name>_<member_name>`)\n\t\t\t$(LI Boolean parameters will be set to $(D true) if a form field of\n\t\t\t\tthe corresponding name is present and to $(D false) otherwise.\n\t\t\t\tThis is compatible to how check boxes in HTML forms work.)\n\t\t\t$(LI All other types of parameters will be converted from a string\n\t\t\t\tby using the first available means of the following:\n\t\t\t\ta static $(D fromStringValidate) method, a static $(D fromString)\n\t\t\t\tmethod, using $(D std.conv.to!T).)\n\t\t\t$(LI Any of these rules can be applied recursively, so that it is\n\t\t\t\tpossible to nest arrays and structs appropriately. Note that\n\t\t\t\tnon-indexed arrays used recursively will be ignored because of\n\t\t\t\tthe nature of that mechanism.)\n\t\t)\n\n\tSpecial_parameters:\n\t\t$(UL\n\t\t\t$(LI A parameter named $(D __error) will be populated automatically\n\t\t\t\twith error information, when an $(D @errorDisplay) attribute\n\t\t\t\tis in use.)\n\t\t\t$(LI An $(D InputStream) typed parameter will receive the request\n\t\t\t\tbody as an input stream. Note that this stream may be already\n\t\t\t\temptied if the request was subject to certain body parsing\n\t\t\t\toptions. See $(D vibe.http.server.HTTPServerOption).)\n\t\t\t$(LI Parameters of types $(D vibe.http.server.HTTPServerRequest),\n\t\t\t\t$(D vibe.http.server.HTTPServerResponse),\n\t\t\t\t$(D vibe.http.common.HTTPRequest) or\n\t\t\t\t$(D vibe.http.common.HTTPResponse) will receive the\n\t\t\t\trequest/response objects of the invoking request.)\n\t\t\t$(LI If a parameter of the type `WebSocket` is found, the route\n\t\t\t\tis registered as a web socket endpoint. It will automatically\n\t\t\t\tupgrade the connection and pass the resulting WebSocket to\n\t\t\t\tthe connection.)\n\t\t)\n\n\n\tSupported_attributes:\n\t\tThe following attributes are supported for annotating methods of the\n\t\tregistered class:\n\n\t\t$(D @before), $(D @after), $(D @errorDisplay),\n\t\t$(D @vibe.web.common.method), $(D @vibe.web.common.path),\n\t\t$(D @vibe.web.common.contentType)\n\n\t\tThe `@path` attribute can also be applied to the class itself, in which\n\t\tcase it will be used as an additional prefix to the one in\n\t\t`WebInterfaceSettings.urlPrefix`.\n\n\t\tThe $(D @nestedNameStyle) attribute can be applied only to the class\n\t\titself. Applying it to a method is not supported at this time.\n\n\tSupported return types:\n\t\t$(UL\n\t\t\t$(LI $(D vibe.data.json.Json))\n\t\t\t$(LI $(D const(char)[]))\n\t\t\t$(LI $(D void))\n\t\t\t$(LI $(D const(ubyte)[]))\n\t\t\t$(LI $(D vibe.core.stream.InputStream))\n\t\t)\n\n\tParams:\n\t\trouter = The HTTP router to register to\n\t\tinstance = Class instance to use for the web interface mapping\n\t\tsettings = Optional parameter to customize the mapping process\nExample:\nGives an overview of the basic features. For more advanced use, see the\n\texample in the \"examples/web/\" directory.$(DDOX_UNITTEST_HEADER __unittest_L235_C1)\n---\nimport vibe.http.router;\nimport vibe.http.server;\nimport vibe.web.web;\n\nclass WebService {\n\tprivate {\n\t\tSessionVar!(string, \"login_user\") m_loginUser;\n\t}\n\n\t@path(\"/\")\n\tvoid getIndex(string _error = null)\n\t{\n\t\theader(\"Access-Control-Allow-Origin\", \"Access-Control-Allow-Origin: *\");\n\t\t//render!(\"index.dt\", _error);\n\t}\n\n\t// automatically mapped to: POST /login\n\t@errorDisplay!getIndex\n\tvoid postLogin(string username, string password)\n\t{\n\t\tenforceHTTP(username.length > 0, HTTPStatus.forbidden,\n\t\t\t\"User name must not be empty.\");\n\t\tenforceHTTP(password == \"secret\", HTTPStatus.forbidden,\n\t\t\t\"Invalid password.\");\n\t\tm_loginUser = username;\n\t\tredirect(\"/profile\");\n\t}\n\n\t// automatically mapped to: POST /logout\n\tvoid postLogout()\n\t{\n\t\tterminateSession();\n\t\tstatus(201);\n\t\tredirect(\"/\");\n\t}\n\n\t// automatically mapped to: GET /profile\n\tvoid getProfile()\n\t{\n\t\tenforceHTTP(m_loginUser.length > 0, HTTPStatus.forbidden,\n\t\t\t\"Must be logged in to access the profile.\");\n\t\t//render!(\"profile.dt\")\n\t}\n}\n\nvoid run()\n{\n\tauto router = new URLRouter;\n\trouter.registerWebInterface(new WebService);\n\n\tauto settings = new HTTPServerSettings;\n\tsettings.port = 8080;\n\tlistenHTTP(settings, router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L235_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "diet_file"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"line": 312,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"kind": "value",
								"type": "string",
								"defaultValue": "__MODULE__",
								"name": "MODULE"
							},
							{
								"kind": "value",
								"type": "string",
								"defaultValue": "__FUNCTION__",
								"name": "FUNCTION"
							}
						],
						"line": 313,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 313,
								"kind": "function",
								"char": 7,
								"name": "render",
								"type": "void()",
								"endchar": 2,
								"endline": 360
							}
						],
						"name": "render"
					}
				],
				"name": "render",
				"comment": "\tRenders a Diet template file to the current HTTP response.\n\n\tThis function is equivalent to `vibe.http.server.render`, but implicitly\n\twrites the result to the response object of the currently processed\n\trequest.\n\n\tNote that this may only be called from a function/method\n\tregistered using `registerWebInterface`.\n\n\tIn addition to the vanilla `render` function, this one also makes additional\n\tfunctionality available within the template:\n\n\t$(UL\n\t\t$(LI The `req` variable that holds the current request object)\n\t\t$(LI If the `@translationContext` attribute us used, enables the\n\t\t     built-in i18n support of Diet templates)\n\t)\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "url"
					},
					{
						"deco": "i",
						"default": "302",
						"name": "status"
					}
				],
				"line": 376,
				"kind": "function",
				"originalType": "@safe void(string url, int status = HTTPStatus.found)",
				"char": 6,
				"name": "redirect",
				"deco": "FNfAyaiZv",
				"endchar": 1,
				"endline": 396,
				"comment": "\tRedirects to the given URL.\n\n\tThe URL may either be a full URL, including the protocol and server\n\tportion, or it may be the local part of the URI (the path and an\n\toptional query string). Finally, it may also be a relative path that is\n\tcombined with the path of the current request to yield an absolute\n\tpath.\n\n\tNote that this may only be called from a function/method\n\tregistered using registerWebInterface.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L405_C7)\n---\nimport vibe.data.json : Json;\n\nclass WebService {\n\t// POST /item\n\tvoid postItem() {\n\t\tredirect(\"/item/1\");\n\t}\n}\n\nvoid run()\n{\n\tauto router = new URLRouter;\n\trouter.registerWebInterface(new WebService);\n\n\tauto settings = new HTTPServerSettings;\n\tsettings.port = 8080;\n\tlistenHTTP(settings, router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L405_C7)\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "i",
						"default": "302",
						"name": "status"
					}
				],
				"line": 399,
				"kind": "function",
				"originalType": "@safe void(URL url, int status = HTTPStatus.found)",
				"char": 6,
				"name": "redirect",
				"deco": "FNfS4vibe4inet3url3URLiZv",
				"endchar": 1,
				"endline": 402,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "name"
					},
					{
						"deco": "Aya",
						"name": "value"
					}
				],
				"line": 436,
				"kind": "function",
				"char": 6,
				"name": "header",
				"deco": "FNfAyaQdZv",
				"endchar": 1,
				"endline": 439,
				"comment": "\tSets a response header.\n\n\tParams:\n\t\tname = name of the header to set\n\t\tvalue = value of the header to set\n\n\tNote that this may only be called from a function/method\n\tregistered using registerWebInterface.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L442_C7)\n---\nimport vibe.data.json : Json;\n\nclass WebService {\n\t// POST /item\n\tJson postItem() {\n\t\theader(\"X-RateLimit-Remaining\", \"59\");\n\t\treturn Json([\"id\": Json(100)]);\n\t}\n}\n\nvoid run()\n{\n\tauto router = new URLRouter;\n\trouter.registerWebInterface(new WebService);\n\n\tauto settings = new HTTPServerSettings;\n\tsettings.port = 8080;\n\tlistenHTTP(settings, router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L442_C7)\n"
			},
			{
				"parameters": [
					{
						"deco": "i",
						"name": "statusCode"
					}
				],
				"line": 473,
				"kind": "function",
				"char": 6,
				"name": "status",
				"deco": "FNfiZv",
				"endchar": 1,
				"endline": 481,
				"comment": "\tSets the response status code.\n\n\tParams:\n\t\tstatusCode = the HTTPStatus code to send to the client\n\n\tNote that this may only be called from a function/method\n\tregistered using registerWebInterface.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L484_C7)\n---\nimport vibe.data.json : Json;\n\nclass WebService {\n\t// POST /item\n\tJson postItem() {\n\t\tstatus(HTTPStatus.created);\n\t\treturn Json([\"id\": Json(100)]);\n\t}\n}\n\nvoid run()\n{\n\tauto router = new URLRouter;\n\trouter.registerWebInterface(new WebService);\n\n\tauto settings = new HTTPServerSettings;\n\tsettings.port = 8080;\n\tlistenHTTP(settings, router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L484_C7)\n"
			},
			{
				"line": 512,
				"kind": "function",
				"char": 18,
				"name": "language",
				"deco": "FNdNfZAya",
				"endchar": 1,
				"endline": 515,
				"comment": "\tReturns the agreed upon language.\n\n\tNote that this may only be called from a function/method\n\tregistered using registerWebInterface.\n"
			},
			{
				"line": 523,
				"kind": "function",
				"char": 29,
				"name": "request",
				"deco": "FNdNfZC4vibe4http6server17HTTPServerRequest",
				"endchar": 1,
				"endline": 526,
				"comment": "\tReturns the current request.\n\n\tNote that this may only be called from a function/method\n\tregistered using registerWebInterface.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L529_C7)\n---\nvoid requireAuthenticated()\n{\n\tauto authorization = \"Authorization\" in request.headers;\n\n\tenforceHTTP(authorization !is null, HTTPStatus.forbidden);\n\tenforceHTTP(*authorization == \"secret\", HTTPStatus.forbidden);\n}\n\nclass WebService {\n\tvoid getPage()\n\t{\n\t\trequireAuthenticated();\n\t}\n}\n\nvoid run()\n{\n\tauto router = new URLRouter;\n\trouter.registerWebInterface(new WebService);\n\n\tauto settings = new HTTPServerSettings;\n\tsettings.port = 8080;\n\tlistenHTTP(settings, router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L529_C7)\n"
			},
			{
				"line": 562,
				"kind": "function",
				"char": 30,
				"name": "response",
				"deco": "FNdNfZC4vibe4http6server18HTTPServerResponse",
				"endchar": 1,
				"endline": 565,
				"comment": "\tReturns the current response.\n\n\tNote that this may only be called from a function/method\n\tregistered using registerWebInterface.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L568_C7)\n---\nvoid logIn()\n{\n\tauto session = response.startSession();\n\tsession.set(\"token\", \"secret\");\n}\n\nclass WebService {\n\tvoid postLogin(string username, string password)\n\t{\n\t\tif (username == \"foo\" && password == \"bar\") {\n\t\t\tlogIn();\n\t\t}\n\t}\n}\n\nvoid run()\n{\n\tauto router = new URLRouter;\n\trouter.registerWebInterface(new WebService);\n\n\tauto settings = new HTTPServerSettings;\n\tsettings.port = 8080;\n\tlistenHTTP(settings, router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L568_C7)\n"
			},
			{
				"line": 601,
				"kind": "function",
				"char": 6,
				"name": "terminateSession",
				"deco": "FNfZv",
				"endchar": 1,
				"endline": 608,
				"comment": "\tTerminates the currently active session (if any).\n\n\tNote that this may only be called from a function/method\n\tregistered using registerWebInterface.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L611_C7)\n---\nclass WebService {\n\t// automatically mapped to: POST /logout\n\tvoid postLogout()\n\t{\n\t\tterminateSession();\n\t\t201.status;\n\t\tredirect(\"/\");\n\t}\n}\n\nvoid run()\n{\n\tauto router = new URLRouter;\n\trouter.registerWebInterface(new WebService);\n\n\tauto settings = new HTTPServerSettings;\n\tsettings.port = 8080;\n\tlistenHTTP(settings, router);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L611_C7)\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "text"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "context"
					}
				],
				"line": 648,
				"kind": "function",
				"char": 8,
				"name": "trWeb",
				"deco": "FNfAyaQdZQg",
				"endchar": 1,
				"endline": 651,
				"comment": "\tTranslates text based on the language of the current web request.\n\n\tThe first overload performs a direct translation of the given translation\n\tkey/text. The second overload can select from a set of plural forms\n\tbased on the given integer value (msgid_plural).\n\n\tParams:\n\t\ttext = The translation key\n\t\tcontext = Optional context/namespace identifier (msgctxt)\n\t\tplural_text = Plural form of the translation key\n\t\tcount = The quantity used to select the proper plural form of a translation\n\n\tSee_also: $(D vibe.web.i18n.translationContext)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L660_C7)\n---\nstruct TRC {\n\timport std.typetuple;\n\talias languages = TypeTuple!(\"en_US\", \"de_DE\", \"fr_FR\");\n\t//mixin translationModule!\"test\";\n}\n\n@translationContext!TRC\nclass WebService {\n\tvoid index(HTTPServerResponse res)\n\t{\n\t\tres.writeBody(trWeb(\"This text will be translated!\"));\n\t}\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L660_C7)\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "text"
					},
					{
						"deco": "Aya",
						"name": "plural_text"
					},
					{
						"deco": "i",
						"name": "count"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "context"
					}
				],
				"line": 654,
				"kind": "function",
				"char": 8,
				"name": "trWeb",
				"deco": "FNfAyaQdiQgZQj",
				"endchar": 1,
				"endline": 657,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "DISPLAY_METHOD"
					}
				],
				"line": 690,
				"kind": "template",
				"char": 11,
				"members": [
					{
						"line": 690,
						"kind": "function",
						"char": 11,
						"name": "errorDisplay",
						"type": "@property ()",
						"endchar": 1,
						"endline": 693
					}
				],
				"name": "errorDisplay",
				"comment": "\tAttribute to customize how errors/exceptions are displayed.\n\n\tThe first template parameter takes a function that maps an exception and an\n\toptional field name to a single error type. The result of this function\n\twill then be passed as the $(D _error) parameter to the method referenced\n\tby the second template parameter.\n\n\tSupported types for the $(D _error) parameter are $(D bool), $(D string),\n\t$(D Exception), or a user defined $(D struct). The $(D field) member, if\n\tpresent, will be set to null if the exception was thrown after the field\n\tvalidation has finished.\nExample:\nShows the basic error message display.$(DDOX_UNITTEST_HEADER __unittest_L696_C1)\n---\nvoid getForm(string _error = null)\n{\n\t//render!(\"form.dt\", _error);\n}\n\n@errorDisplay!getForm\nvoid postForm(string name)\n{\n\tif (name.length == 0)\n\t\tthrow new Exception(\"Name must not be empty\");\n\tredirect(\"/\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L696_C1)\nExample:\nAdvanced error display including the offending form field.$(DDOX_UNITTEST_HEADER __unittest_L712_C1)\n---\nstruct FormError {\n\t// receives the original error message\n\tstring error;\n\t// receives the name of the field that caused the error, if applicable\n\tstring field;\n}\n\nvoid getForm(FormError _error = FormError.init)\n{\n\t//render!(\"form.dt\", _error);\n}\n\n// throws an error if the submitted form value is not a valid integer\n@errorDisplay!getForm\nvoid postForm(int ingeter)\n{\n\tredirect(\"/\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L712_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "E4vibe3web6common15NestedNameStyle",
						"name": "style"
					}
				],
				"line": 736,
				"kind": "function",
				"char": 26,
				"name": "nestedNameStyle",
				"deco": "FE4vibe3web6common15NestedNameStyleZSQBjQBhQBk24NestedNameStyleAttribute",
				"endchar": 1,
				"endline": 741,
				"comment": " Determines how nested D fields/array entries are mapped to form field\n names. Note that this attribute only works if applied to the class.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L744_C1)\n---\nstruct Items {\n\tint[] entries;\n}\n\n@nestedNameStyle(NestedNameStyle.d)\nclass MyService {\n\t// expects fields in D native style:\n\t// \"items.entries[0]\", \"items.entries[1]\", \"items.entries[]\", ...\n\tvoid postItems(Items items)\n\t{\n\n\t}\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L744_C1)\n"
			},
			{
				"kind": "class",
				"line": 764,
				"char": 1,
				"members": [
					{
						"line": 765,
						"kind": "variable",
						"char": 9,
						"name": "urlPrefix",
						"deco": "Aya",
						"init": "\"/\"",
						"offset": 16
					},
					{
						"line": 766,
						"kind": "variable",
						"char": 7,
						"name": "ignoreTrailingSlash",
						"deco": "b",
						"init": "true",
						"offset": 32
					},
					{
						"line": 768,
						"kind": "function",
						"char": 33,
						"name": "dup",
						"deco": "xFNdNfZC4vibe3webQe20WebInterfaceSettings",
						"endchar": 2,
						"endline": 773
					}
				],
				"comment": "\tEncapsulates settings used to customize the generated web interface.\n",
				"name": "WebInterfaceSettings"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "name"
					}
				],
				"line": 790,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "T",
								"char": 5,
								"line": 794,
								"name": "m_initValue"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "init_val"
									}
								],
								"line": 799,
								"kind": "constructor",
								"char": 2,
								"name": "this",
								"type": "(T init_val)",
								"endchar": 45,
								"endline": 799,
								"comment": " Initializes a session var with a constant value.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L801_C2)\n---\nclass MyService {\n\tSessionVar!(int, \"someInt\") m_someInt = 42;\n\n\tvoid index() {\n\t\tassert(m_someInt == 42);\n\t}\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L801_C2)\n"
							},
							{
								"line": 816,
								"kind": "function",
								"char": 21,
								"name": "value",
								"type": "@property const(T)()",
								"endchar": 2,
								"endline": 826,
								"comment": " Accesses the current value of the session variable.\n\n\t\tAny access will automatically start a new session and set the\n\t\tinitializer value, if necessary.\n"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "new_value"
									}
								],
								"line": 828,
								"kind": "function",
								"char": 17,
								"name": "value",
								"type": "@property void(T new_value)",
								"endchar": 2,
								"endline": 833,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "new_value"
									}
								],
								"line": 835,
								"kind": "function",
								"char": 7,
								"name": "opAssign",
								"type": "void(T new_value)",
								"endchar": 55,
								"endline": 835
							}
						],
						"line": 790,
						"name": "SessionVar"
					}
				],
				"name": "SessionVar",
				"comment": "\tMaps a web interface member variable to a session field.\n\n\tSetting a SessionVar variable will implicitly start a session, if none\n\thas been started yet. The content of the variable will be stored in\n\tthe session store and is automatically serialized and deserialized.\n\n\tNote that variables of type SessionVar must only be used from within\n\thandler functions of a class that was registered using\n\t$(D registerWebInterface). Also note that two different session\n\tvariables with the same $(D name) parameter will access the same\n\tunderlying data.\n"
			}
		],
		"comment": "\tImplements a declarative framework for building web interfaces.\n\n\tThis module contains the sister funtionality to the $(D vibe.web.rest)\n\tmodule. While the REST interface generator is meant for stateless\n\tmachine-to-machine communication, this module aims at implementing\n\tuser facing web services. Apart from that, both systems use the same\n\tdeclarative approach.\n\n\tSee $(D registerWebInterface) for an overview of how the system works.\n\n\tCopyright: © 2013-2016 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
		"name": "vibe.web.web"
	}
]